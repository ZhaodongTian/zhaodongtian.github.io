### YamlMime:ManagedReference
items:
- uid: CoreWCF.IExtension`1
  commentId: T:CoreWCF.IExtension`1
  id: IExtension`1
  parent: CoreWCF
  children:
  - CoreWCF.IExtension`1.Attach(`0)
  - CoreWCF.IExtension`1.Detach(`0)
  langs:
  - csharp
  - vb
  name: IExtension<T>
  nameWithType: IExtension<T>
  fullName: CoreWCF.IExtension<T>
  type: Interface
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  summary: Enables an object to extend another object through aggregation.
  remarks: "WCF allows you to extend &lt;xref:CoreWCF.IExtensibleObject%601?displayProperty=nameWithType> objects (the &lt;xref:CoreWCF.IContextChannel?displayProperty=nameWithType>, &lt;xref:CoreWCF.ServiceHost?displayProperty=nameWithType>, &lt;xref:CoreWCF.InstanceContext?displayProperty=nameWithType>, and &lt;xref:CoreWCF.OperationContext?displayProperty=nameWithType> classes) by adding a new state or behavior by using its extensible object pattern. The extensible object pattern is used in WCF to either extend existing run-time classes with new functionality or to add new state features to an object.  \n\n"
  syntax:
    content: >-
      public interface IExtension<T>
          where T : IExtensibleObject<T>
    typeParameters:
    - id: T
    content.vb: Public Interface IExtension(Of T As IExtensibleObject(Of T))
  nameWithType.vb: IExtension(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: CoreWCF.IExtension(Of T)
  name.vb: IExtension(Of T)
- uid: CoreWCF.IExtension`1.Attach(`0)
  commentId: M:CoreWCF.IExtension`1.Attach(`0)
  id: Attach(`0)
  parent: CoreWCF.IExtension`1
  langs:
  - csharp
  - vb
  name: Attach(T)
  nameWithType: IExtension<T>.Attach(T)
  fullName: CoreWCF.IExtension<T>.Attach(T)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: void Attach(T owner)
    parameters:
    - id: owner
      type: '{T}'
    content.vb: Sub Attach(owner As T)
  overload: CoreWCF.IExtension`1.Attach*
  nameWithType.vb: IExtension(Of T).Attach(T)
  fullName.vb: CoreWCF.IExtension(Of T).Attach(T)
- uid: CoreWCF.IExtension`1.Detach(`0)
  commentId: M:CoreWCF.IExtension`1.Detach(`0)
  id: Detach(`0)
  parent: CoreWCF.IExtension`1
  langs:
  - csharp
  - vb
  name: Detach(T)
  nameWithType: IExtension<T>.Detach(T)
  fullName: CoreWCF.IExtension<T>.Detach(T)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: void Detach(T owner)
    parameters:
    - id: owner
      type: '{T}'
    content.vb: Sub Detach(owner As T)
  overload: CoreWCF.IExtension`1.Detach*
  nameWithType.vb: IExtension(Of T).Detach(T)
  fullName.vb: CoreWCF.IExtension(Of T).Detach(T)
references:
- uid: CoreWCF
  commentId: N:CoreWCF
  isExternal: true
  name: CoreWCF
  nameWithType: CoreWCF
  fullName: CoreWCF
- uid: CoreWCF.IExtension`1.Attach*
  commentId: Overload:CoreWCF.IExtension`1.Attach
  isExternal: true
  name: Attach
  nameWithType: IExtension<T>.Attach
  fullName: CoreWCF.IExtension<T>.Attach
  nameWithType.vb: IExtension(Of T).Attach
  fullName.vb: CoreWCF.IExtension(Of T).Attach
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: CoreWCF.IExtension`1.Detach*
  commentId: Overload:CoreWCF.IExtension`1.Detach
  isExternal: true
  name: Detach
  nameWithType: IExtension<T>.Detach
  fullName: CoreWCF.IExtension<T>.Detach
  nameWithType.vb: IExtension(Of T).Detach
  fullName.vb: CoreWCF.IExtension(Of T).Detach
