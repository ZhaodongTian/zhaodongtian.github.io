### YamlMime:ManagedReference
items:
- uid: CoreWCF.Channels.LocalServiceSecuritySettings
  commentId: T:CoreWCF.Channels.LocalServiceSecuritySettings
  id: LocalServiceSecuritySettings
  parent: CoreWCF.Channels
  children:
  - CoreWCF.Channels.LocalServiceSecuritySettings.#ctor
  - CoreWCF.Channels.LocalServiceSecuritySettings.Clone
  - CoreWCF.Channels.LocalServiceSecuritySettings.DetectReplays
  - CoreWCF.Channels.LocalServiceSecuritySettings.InactivityTimeout
  - CoreWCF.Channels.LocalServiceSecuritySettings.IssuedCookieLifetime
  - CoreWCF.Channels.LocalServiceSecuritySettings.MaxCachedCookies
  - CoreWCF.Channels.LocalServiceSecuritySettings.MaxClockSkew
  - CoreWCF.Channels.LocalServiceSecuritySettings.MaxPendingSessions
  - CoreWCF.Channels.LocalServiceSecuritySettings.MaxStatefulNegotiations
  - CoreWCF.Channels.LocalServiceSecuritySettings.NegotiationTimeout
  - CoreWCF.Channels.LocalServiceSecuritySettings.NonceCache
  - CoreWCF.Channels.LocalServiceSecuritySettings.ReconnectTransportOnFailure
  - CoreWCF.Channels.LocalServiceSecuritySettings.ReplayCacheSize
  - CoreWCF.Channels.LocalServiceSecuritySettings.ReplayWindow
  - CoreWCF.Channels.LocalServiceSecuritySettings.SessionKeyRenewalInterval
  - CoreWCF.Channels.LocalServiceSecuritySettings.SessionKeyRolloverInterval
  - CoreWCF.Channels.LocalServiceSecuritySettings.TimestampValidityDuration
  langs:
  - csharp
  - vb
  name: LocalServiceSecuritySettings
  nameWithType: LocalServiceSecuritySettings
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings
  type: Class
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Channels
  summary: Provides local service security properties that can be set.
  remarks: "This class contains the local security settings used by the <xref:CoreWCF.Channels.SecurityBindingElement> to build the security channel. These settings are local to the service and are not represented in the service&apos;s security policy.  \n\n\n\n"
  syntax:
    content: 'public sealed class LocalServiceSecuritySettings : Object'
    content.vb: >-
      Public NotInheritable Class LocalServiceSecuritySettings
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.#ctor
  commentId: M:CoreWCF.Channels.LocalServiceSecuritySettings.#ctor
  id: '#ctor'
  parent: CoreWCF.Channels.LocalServiceSecuritySettings
  langs:
  - csharp
  - vb
  name: LocalServiceSecuritySettings()
  nameWithType: LocalServiceSecuritySettings.LocalServiceSecuritySettings()
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.LocalServiceSecuritySettings()
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Channels
  summary: "Initializes a new instance of the <xref:CoreWCF.Channels.LocalServiceSecuritySettings> class."
  syntax:
    content: public LocalServiceSecuritySettings()
    content.vb: Public Sub New
  overload: CoreWCF.Channels.LocalServiceSecuritySettings.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.Clone
  commentId: M:CoreWCF.Channels.LocalServiceSecuritySettings.Clone
  id: Clone
  parent: CoreWCF.Channels.LocalServiceSecuritySettings
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: LocalServiceSecuritySettings.Clone()
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.Clone()
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Channels
  summary: Creates a new instance of this class from the current instance.
  syntax:
    content: public LocalServiceSecuritySettings Clone()
    return:
      type: CoreWCF.Channels.LocalServiceSecuritySettings
      description: "A new instance of <xref:CoreWCF.Channels.LocalServiceSecuritySettings>."
    content.vb: Public Function Clone As LocalServiceSecuritySettings
  overload: CoreWCF.Channels.LocalServiceSecuritySettings.Clone*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.DetectReplays
  commentId: P:CoreWCF.Channels.LocalServiceSecuritySettings.DetectReplays
  id: DetectReplays
  parent: CoreWCF.Channels.LocalServiceSecuritySettings
  langs:
  - csharp
  - vb
  name: DetectReplays
  nameWithType: LocalServiceSecuritySettings.DetectReplays
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.DetectReplays
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Channels
  summary: Gets or sets a value that indicates whether replay detection is enabled on the service.
  syntax:
    content: public bool DetectReplays { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: "true if replay detection is enabled on the service; otherwise, false. The default is true."
    content.vb: Public Property DetectReplays As Boolean
  overload: CoreWCF.Channels.LocalServiceSecuritySettings.DetectReplays*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.ReplayCacheSize
  commentId: P:CoreWCF.Channels.LocalServiceSecuritySettings.ReplayCacheSize
  id: ReplayCacheSize
  parent: CoreWCF.Channels.LocalServiceSecuritySettings
  langs:
  - csharp
  - vb
  name: ReplayCacheSize
  nameWithType: LocalServiceSecuritySettings.ReplayCacheSize
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.ReplayCacheSize
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Channels
  summary: Gets or sets the size of the nonce cache used for replay detection.
  syntax:
    content: public int ReplayCacheSize { get; set; }
    parameters: []
    return:
      type: System.Int32
      description: The size of the nonce cache used for replay detection. The default is 900,000.
    content.vb: Public Property ReplayCacheSize As Integer
  overload: CoreWCF.Channels.LocalServiceSecuritySettings.ReplayCacheSize*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  remarks: "A nonce is a \"number used once\".<br /><br />If the nonce count is exceeded, the incoming message is rejected and a <xref:CoreWCF.Security.MessageSecurityException> is thrown. Old nonces are removed in a timely manner."
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.ReplayWindow
  commentId: P:CoreWCF.Channels.LocalServiceSecuritySettings.ReplayWindow
  id: ReplayWindow
  parent: CoreWCF.Channels.LocalServiceSecuritySettings
  langs:
  - csharp
  - vb
  name: ReplayWindow
  nameWithType: LocalServiceSecuritySettings.ReplayWindow
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.ReplayWindow
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Channels
  summary: Gets or sets the maximum amount of time within which the service can accept a message.
  syntax:
    content: public TimeSpan ReplayWindow { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
      description: "A [TimeSpan](https://learn.microsoft.com/en-us/dotnet/api/system.timespan?view=netframework-4.8.1) that represents the maximum amount of time within which the service can accept a message. The default is 5 minutes."
    content.vb: Public Property ReplayWindow As TimeSpan
  overload: CoreWCF.Channels.LocalServiceSecuritySettings.ReplayWindow*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  remarks: "A nonce is a \"number used once\".<br /><br />The service rejects all messages that are sent more than the ReplayWindow duration in the past. Messages that arrive within the <xref:CoreWCF.Channels.LocalServiceSecuritySettings.ReplayWindow> have their nonce checked for uniqueness."
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.MaxClockSkew
  commentId: P:CoreWCF.Channels.LocalServiceSecuritySettings.MaxClockSkew
  id: MaxClockSkew
  parent: CoreWCF.Channels.LocalServiceSecuritySettings
  langs:
  - csharp
  - vb
  name: MaxClockSkew
  nameWithType: LocalServiceSecuritySettings.MaxClockSkew
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.MaxClockSkew
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Channels
  summary: Gets or sets the maximum allowable time difference between the system clocks of the two parties that are communicating.
  syntax:
    content: public TimeSpan MaxClockSkew { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
      description: "A [TimeSpan]() that represents the maximum allowable time difference between the system clocks of the two parties that are communicating. The default is 5 minutes."
    content.vb: Public Property MaxClockSkew As TimeSpan
  overload: CoreWCF.Channels.LocalServiceSecuritySettings.MaxClockSkew*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  remarks: "The default value for this property is 5 minutes.<br /><br />Messages that do not pass the send-time test are rejected.<br /><br />This property is used in conjunction with the message timestamp verification and the [ReplayWindow](https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.channels.localclientsecuritysettings.replaywindow?view=netframework-4.8.1) property."
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.NonceCache
  commentId: P:CoreWCF.Channels.LocalServiceSecuritySettings.NonceCache
  id: NonceCache
  parent: CoreWCF.Channels.LocalServiceSecuritySettings
  langs:
  - csharp
  - vb
  name: NonceCache
  nameWithType: LocalServiceSecuritySettings.NonceCache
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.NonceCache
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Channels
  summary: Gets or sets the cache for the local service security settings.
  syntax:
    content: public NonceCache NonceCache { get; set; }
    parameters: []
    return:
      type: CoreWCF.Security.NonceCache
      description: The cache for the local service security settings.
    content.vb: Public Property NonceCache As NonceCache
  overload: CoreWCF.Channels.LocalServiceSecuritySettings.NonceCache*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.IssuedCookieLifetime
  commentId: P:CoreWCF.Channels.LocalServiceSecuritySettings.IssuedCookieLifetime
  id: IssuedCookieLifetime
  parent: CoreWCF.Channels.LocalServiceSecuritySettings
  langs:
  - csharp
  - vb
  name: IssuedCookieLifetime
  nameWithType: LocalServiceSecuritySettings.IssuedCookieLifetime
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.IssuedCookieLifetime
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Channels
  summary: "Gets or sets the lifetime for the [SecurityContextSecurityToken](https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.security.tokens.securitycontextsecuritytoken?view=netframework-4.8.1) that the service issues for the client."
  syntax:
    content: public TimeSpan IssuedCookieLifetime { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
      description: "A [TimeSpan](https://learn.microsoft.com/en-us/dotnet/api/system.timespan?view=netframework-4.8.1) that represents the lifetime for new security cookies. The default is 10 hours."
    content.vb: Public Property IssuedCookieLifetime As TimeSpan
  overload: CoreWCF.Channels.LocalServiceSecuritySettings.IssuedCookieLifetime*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  remarks: When the service issues secure conversation cookie tokens to the client, their validity period is determined by the value of this property.
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.MaxStatefulNegotiations
  commentId: P:CoreWCF.Channels.LocalServiceSecuritySettings.MaxStatefulNegotiations
  id: MaxStatefulNegotiations
  parent: CoreWCF.Channels.LocalServiceSecuritySettings
  langs:
  - csharp
  - vb
  name: MaxStatefulNegotiations
  nameWithType: LocalServiceSecuritySettings.MaxStatefulNegotiations
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.MaxStatefulNegotiations
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Channels
  summary: Gets or sets the maximum number of concurrent security negotiations with clients that the service can participate in.
  syntax:
    content: public int MaxStatefulNegotiations { get; set; }
    parameters: []
    return:
      type: System.Int32
      description: The maximum number of concurrent security negotiations with clients that the service can participate in. The default is 128.
    content.vb: Public Property MaxStatefulNegotiations As Integer
  overload: CoreWCF.Channels.LocalServiceSecuritySettings.MaxStatefulNegotiations*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  remarks: Negotiation sessions in excess of this limit are rejected and a SOAP fault is sent back to the client. The client typically must retry later, which allows some time for existing negotiations on the service to complete.
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.NegotiationTimeout
  commentId: P:CoreWCF.Channels.LocalServiceSecuritySettings.NegotiationTimeout
  id: NegotiationTimeout
  parent: CoreWCF.Channels.LocalServiceSecuritySettings
  langs:
  - csharp
  - vb
  name: NegotiationTimeout
  nameWithType: LocalServiceSecuritySettings.NegotiationTimeout
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.NegotiationTimeout
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Channels
  summary: Gets or sets the maximum duration of the security negotiation phase between client and service.
  syntax:
    content: public TimeSpan NegotiationTimeout { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
      description: "A [TimeSpan](https://learn.microsoft.com/en-us/dotnet/api/system.timespan?view=netframework-4.8.1) that represents the maximum duration of the security negotiation phase between client and service. Any negotiation with the service (for example during message level SPNego or SSL authentication) must complete within this time. The default is 1 minute."
    content.vb: Public Property NegotiationTimeout As TimeSpan
  overload: CoreWCF.Channels.LocalServiceSecuritySettings.NegotiationTimeout*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  remarks: If this limit is exceeded, an exception is thrown.
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.MaxPendingSessions
  commentId: P:CoreWCF.Channels.LocalServiceSecuritySettings.MaxPendingSessions
  id: MaxPendingSessions
  parent: CoreWCF.Channels.LocalServiceSecuritySettings
  langs:
  - csharp
  - vb
  name: MaxPendingSessions
  nameWithType: LocalServiceSecuritySettings.MaxPendingSessions
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.MaxPendingSessions
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Channels
  summary: Gets or sets the maximum number of concurrent security sessions that are established with the server for which it has issued a session token but for which no application messages are sent.
  syntax:
    content: public int MaxPendingSessions { get; set; }
    parameters: []
    return:
      type: System.Int32
      description: The maximum number of concurrent security sessions. The default is 128.
    content.vb: Public Property MaxPendingSessions As Integer
  overload: CoreWCF.Channels.LocalServiceSecuritySettings.MaxPendingSessions*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.InactivityTimeout
  commentId: P:CoreWCF.Channels.LocalServiceSecuritySettings.InactivityTimeout
  id: InactivityTimeout
  parent: CoreWCF.Channels.LocalServiceSecuritySettings
  langs:
  - csharp
  - vb
  name: InactivityTimeout
  nameWithType: LocalServiceSecuritySettings.InactivityTimeout
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.InactivityTimeout
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Channels
  summary: Gets or sets the duration to wait before the channel is closed due to inactivity.
  syntax:
    content: public TimeSpan InactivityTimeout { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
      description: "A [TimeSpan](https://learn.microsoft.com/en-us/dotnet/api/system.timespan?view=netframework-4.8.1) that represents the duration to wait before the security session with the client is closed due to inactivity. The default is 2 minutes."
    content.vb: Public Property InactivityTimeout As TimeSpan
  overload: CoreWCF.Channels.LocalServiceSecuritySettings.InactivityTimeout*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  remarks: "In a secure conversation session, note that both this property and the ReceiveTimeout property on the binding affect session timeout. The shorter of the two determines when timeouts occur.<br /><br />Session settings such as this one are applicable under any of the following conditions: \n* All client credential types for [WSDualHttpBinding](https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.wsdualhttpbinding?view=netframework-4.8.1) and <xref:CoreWCF.NetTcpBinding>.\n \n* If [\\<reliableSession\\> element](https://learn.microsoft.com/en-us/previous-versions/ms731375(v=vs.90)) is enabled.\n \n* If [\\<reliableSession\\> element](https://learn.microsoft.com/en-us/previous-versions/ms731375(v=vs.90)) is not enabled, on <xref:CoreWCF.WSHttpBinding> with [UserName](https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.description.clientcredentials.username?view=netframework-4.8.1) = true or [ClientCredentials.Windows](https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.description.clientcredentials.windows?view=netframework-4.8.1) = true.\n \nSession settings such as this one are not applicable under any of the following conditions:\n \n* For <xref:CoreWCF.BasicHttpBinding>.\n \n* For [NetNamedPipeBinding](https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.netnamedpipebinding?view=netframework-4.8.1).\n \n* If [\\<reliableSession\\> element](https://learn.microsoft.com/en-us/previous-versions/ms731375(v=vs.90)) is not enabled, on <xref:CoreWCF.WSHttpBinding> with [ClientCertificate](https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.description.clientcredentials.clientcertificate?view=netframework-4.8.1) = true or with none of the [ClientCredentials](https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.description.clientcredentials?view=netframework-4.8.1) properties set to true.\n"
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.SessionKeyRenewalInterval
  commentId: P:CoreWCF.Channels.LocalServiceSecuritySettings.SessionKeyRenewalInterval
  id: SessionKeyRenewalInterval
  parent: CoreWCF.Channels.LocalServiceSecuritySettings
  langs:
  - csharp
  - vb
  name: SessionKeyRenewalInterval
  nameWithType: LocalServiceSecuritySettings.SessionKeyRenewalInterval
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.SessionKeyRenewalInterval
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Channels
  summary: Gets or sets the lifetime of a key used in a security session. When this interval expires the key is automatically renewed.
  syntax:
    content: public TimeSpan SessionKeyRenewalInterval { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
      description: The time span after which the service requires that the initiator renew the key used for the security session. If the initiator does not renew the key within this time the service sends back a fault to the initiator. The default is 15 hours.
    content.vb: Public Property SessionKeyRenewalInterval As TimeSpan
  overload: CoreWCF.Channels.LocalServiceSecuritySettings.SessionKeyRenewalInterval*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  remarks: "Session settings such as this one are applicable under any of the following conditions: \n* All client credential types for [WSDualHttpBinding](https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.wsdualhttpbinding?view=netframework-4.8.1) and <xref:CoreWCF.NetTcpBinding>.\n \n* If [\\<reliableSession\\> element](https://learn.microsoft.com/en-us/previous-versions/ms731375(v=vs.90)) is enabled.\n \n* If [\\<reliableSession\\> element](https://learn.microsoft.com/en-us/previous-versions/ms731375(v=vs.90)) is not enabled, on <xref:CoreWCF.WSHttpBinding> with [UserName](https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.description.clientcredentials.username?view=netframework-4.8.1) = true or [ClientCredentials.Windows](https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.description.clientcredentials.windows?view=netframework-4.8.1) = true.\n \nSession settings such as this one are not applicable under any of the following conditions:\n \n* For <xref:CoreWCF.BasicHttpBinding>.\n \n* For [NetNamedPipeBinding](https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.netnamedpipebinding?view=netframework-4.8.1).\n \n* If [\\<reliableSession\\> element](https://learn.microsoft.com/en-us/previous-versions/ms731375(v=vs.90)) is not enabled, on <xref:CoreWCF.WSHttpBinding> with [ClientCertificate](https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.description.clientcredentials.clientcertificate?view=netframework-4.8.1) = true or with none of the [ClientCredentials](https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.description.clientcredentials?view=netframework-4.8.1) properties set to true.\n"
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.SessionKeyRolloverInterval
  commentId: P:CoreWCF.Channels.LocalServiceSecuritySettings.SessionKeyRolloverInterval
  id: SessionKeyRolloverInterval
  parent: CoreWCF.Channels.LocalServiceSecuritySettings
  langs:
  - csharp
  - vb
  name: SessionKeyRolloverInterval
  nameWithType: LocalServiceSecuritySettings.SessionKeyRolloverInterval
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.SessionKeyRolloverInterval
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Channels
  summary: Gets or sets the time interval after key renewal for which the previous session key is valid on incoming messages during a key renewal.
  syntax:
    content: public TimeSpan SessionKeyRolloverInterval { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
      description: The time interval after key renewal for which the previous session key is valid on incoming messages after a key renewal. The default is 5 minutes.
    content.vb: Public Property SessionKeyRolloverInterval As TimeSpan
  overload: CoreWCF.Channels.LocalServiceSecuritySettings.SessionKeyRolloverInterval*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  remarks: "\nAfter key renewal, the client and server should always send messages using the most current available key. Both parties can accept incoming messages secured with the previous session key until the rollover time expires. \n Session settings such as this one are applicable under any of the following conditions: \n* All client credential types for [WSDualHttpBinding](https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.wsdualhttpbinding?view=netframework-4.8.1) and <xref:CoreWCF.NetTcpBinding>.\n \n* If [\\<reliableSession\\> element](https://learn.microsoft.com/en-us/previous-versions/ms731375(v=vs.90)) is enabled.\n \n* If [\\<reliableSession\\> element](https://learn.microsoft.com/en-us/previous-versions/ms731375(v=vs.90)) is not enabled, on <xref:CoreWCF.WSHttpBinding> with [UserName](https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.description.clientcredentials.username?view=netframework-4.8.1) = true or [ClientCredentials.Windows](https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.description.clientcredentials.windows?view=netframework-4.8.1) = true.\n \nSession settings such as this one are not applicable under any of the following conditions:\n \n* For <xref:CoreWCF.BasicHttpBinding>.\n \n* For [NetNamedPipeBinding](https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.netnamedpipebinding?view=netframework-4.8.1).\n \n* If [\\<reliableSession\\> element](https://learn.microsoft.com/en-us/previous-versions/ms731375(v=vs.90)) is not enabled, on <xref:CoreWCF.WSHttpBinding> with [ClientCertificate](https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.description.clientcredentials.clientcertificate?view=netframework-4.8.1) = true or with none of the [ClientCredentials](https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.description.clientcredentials?view=netframework-4.8.1) properties set to true.\n"
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.ReconnectTransportOnFailure
  commentId: P:CoreWCF.Channels.LocalServiceSecuritySettings.ReconnectTransportOnFailure
  id: ReconnectTransportOnFailure
  parent: CoreWCF.Channels.LocalServiceSecuritySettings
  langs:
  - csharp
  - vb
  name: ReconnectTransportOnFailure
  nameWithType: LocalServiceSecuritySettings.ReconnectTransportOnFailure
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.ReconnectTransportOnFailure
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Channels
  summary: Gets or sets a value that indicates whether security sessions attempt to reconnect after transport failures.
  syntax:
    content: public bool ReconnectTransportOnFailure { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: true if security sessions attempt to reconnect after transport failures; otherwise false. The default is true.
    content.vb: Public Property ReconnectTransportOnFailure As Boolean
  overload: CoreWCF.Channels.LocalServiceSecuritySettings.ReconnectTransportOnFailure*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  remarks: If this flag is set to true, the service allows the client to send messages that correspond to a single security session over multiple transport connections. This is useful in the case of secure WS-ReliableMessaging because the client requires the session to tolerate transient transport failures.
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.TimestampValidityDuration
  commentId: P:CoreWCF.Channels.LocalServiceSecuritySettings.TimestampValidityDuration
  id: TimestampValidityDuration
  parent: CoreWCF.Channels.LocalServiceSecuritySettings
  langs:
  - csharp
  - vb
  name: TimestampValidityDuration
  nameWithType: LocalServiceSecuritySettings.TimestampValidityDuration
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.TimestampValidityDuration
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Channels
  summary: Gets or sets the maximum duration of time that messages are valid when sent by the service. If the client receives the service's message after this duration, it discards the message.
  syntax:
    content: public TimeSpan TimestampValidityDuration { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
      description: The maximum duration of time that messages are valid when sent by the service. The default is 5 minutes.
    content.vb: Public Property TimestampValidityDuration As TimeSpan
  overload: CoreWCF.Channels.LocalServiceSecuritySettings.TimestampValidityDuration*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.MaxCachedCookies
  commentId: P:CoreWCF.Channels.LocalServiceSecuritySettings.MaxCachedCookies
  id: MaxCachedCookies
  parent: CoreWCF.Channels.LocalServiceSecuritySettings
  langs:
  - csharp
  - vb
  name: MaxCachedCookies
  nameWithType: LocalServiceSecuritySettings.MaxCachedCookies
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.MaxCachedCookies
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Channels
  summary: "Gets or sets the maximum number of [SecurityContextSecurityTokens](https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.security.tokens.securitycontextsecuritytoken?view=netframework-4.8.1) that the service allows to cache at once."
  syntax:
    content: public int MaxCachedCookies { get; set; }
    parameters: []
    return:
      type: System.Int32
      description: The maximum number of secure conversation cookies that can be cached by the service. When this limit is reached the service removes the oldest cached secure conversation cookies to make room for new secure conversation cookies. The default is 1000.
    content.vb: Public Property MaxCachedCookies As Integer
  overload: CoreWCF.Channels.LocalServiceSecuritySettings.MaxCachedCookies*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: CoreWCF.Channels
  commentId: N:CoreWCF.Channels
  isExternal: true
  name: CoreWCF.Channels
  nameWithType: CoreWCF.Channels
  fullName: CoreWCF.Channels
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.#ctor*
  commentId: Overload:CoreWCF.Channels.LocalServiceSecuritySettings.#ctor
  isExternal: true
  name: LocalServiceSecuritySettings
  nameWithType: LocalServiceSecuritySettings.LocalServiceSecuritySettings
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.LocalServiceSecuritySettings
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.Clone*
  commentId: Overload:CoreWCF.Channels.LocalServiceSecuritySettings.Clone
  isExternal: true
  name: Clone
  nameWithType: LocalServiceSecuritySettings.Clone
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.Clone
- uid: CoreWCF.Channels.LocalServiceSecuritySettings
  commentId: T:CoreWCF.Channels.LocalServiceSecuritySettings
  parent: CoreWCF.Channels
  isExternal: true
  name: LocalServiceSecuritySettings
  nameWithType: LocalServiceSecuritySettings
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.DetectReplays*
  commentId: Overload:CoreWCF.Channels.LocalServiceSecuritySettings.DetectReplays
  isExternal: true
  name: DetectReplays
  nameWithType: LocalServiceSecuritySettings.DetectReplays
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.DetectReplays
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.ReplayCacheSize*
  commentId: Overload:CoreWCF.Channels.LocalServiceSecuritySettings.ReplayCacheSize
  isExternal: true
  name: ReplayCacheSize
  nameWithType: LocalServiceSecuritySettings.ReplayCacheSize
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.ReplayCacheSize
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.ReplayWindow*
  commentId: Overload:CoreWCF.Channels.LocalServiceSecuritySettings.ReplayWindow
  isExternal: true
  name: ReplayWindow
  nameWithType: LocalServiceSecuritySettings.ReplayWindow
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.ReplayWindow
- uid: System.TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.MaxClockSkew*
  commentId: Overload:CoreWCF.Channels.LocalServiceSecuritySettings.MaxClockSkew
  isExternal: true
  name: MaxClockSkew
  nameWithType: LocalServiceSecuritySettings.MaxClockSkew
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.MaxClockSkew
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.NonceCache*
  commentId: Overload:CoreWCF.Channels.LocalServiceSecuritySettings.NonceCache
  isExternal: true
  name: NonceCache
  nameWithType: LocalServiceSecuritySettings.NonceCache
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.NonceCache
- uid: CoreWCF.Security.NonceCache
  commentId: T:CoreWCF.Security.NonceCache
  parent: CoreWCF.Security
  isExternal: true
  name: NonceCache
  nameWithType: NonceCache
  fullName: CoreWCF.Security.NonceCache
- uid: CoreWCF.Security
  commentId: N:CoreWCF.Security
  isExternal: true
  name: CoreWCF.Security
  nameWithType: CoreWCF.Security
  fullName: CoreWCF.Security
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.IssuedCookieLifetime*
  commentId: Overload:CoreWCF.Channels.LocalServiceSecuritySettings.IssuedCookieLifetime
  isExternal: true
  name: IssuedCookieLifetime
  nameWithType: LocalServiceSecuritySettings.IssuedCookieLifetime
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.IssuedCookieLifetime
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.MaxStatefulNegotiations*
  commentId: Overload:CoreWCF.Channels.LocalServiceSecuritySettings.MaxStatefulNegotiations
  isExternal: true
  name: MaxStatefulNegotiations
  nameWithType: LocalServiceSecuritySettings.MaxStatefulNegotiations
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.MaxStatefulNegotiations
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.NegotiationTimeout*
  commentId: Overload:CoreWCF.Channels.LocalServiceSecuritySettings.NegotiationTimeout
  isExternal: true
  name: NegotiationTimeout
  nameWithType: LocalServiceSecuritySettings.NegotiationTimeout
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.NegotiationTimeout
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.MaxPendingSessions*
  commentId: Overload:CoreWCF.Channels.LocalServiceSecuritySettings.MaxPendingSessions
  isExternal: true
  name: MaxPendingSessions
  nameWithType: LocalServiceSecuritySettings.MaxPendingSessions
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.MaxPendingSessions
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.InactivityTimeout*
  commentId: Overload:CoreWCF.Channels.LocalServiceSecuritySettings.InactivityTimeout
  isExternal: true
  name: InactivityTimeout
  nameWithType: LocalServiceSecuritySettings.InactivityTimeout
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.InactivityTimeout
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.SessionKeyRenewalInterval*
  commentId: Overload:CoreWCF.Channels.LocalServiceSecuritySettings.SessionKeyRenewalInterval
  isExternal: true
  name: SessionKeyRenewalInterval
  nameWithType: LocalServiceSecuritySettings.SessionKeyRenewalInterval
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.SessionKeyRenewalInterval
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.SessionKeyRolloverInterval*
  commentId: Overload:CoreWCF.Channels.LocalServiceSecuritySettings.SessionKeyRolloverInterval
  isExternal: true
  name: SessionKeyRolloverInterval
  nameWithType: LocalServiceSecuritySettings.SessionKeyRolloverInterval
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.SessionKeyRolloverInterval
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.ReconnectTransportOnFailure*
  commentId: Overload:CoreWCF.Channels.LocalServiceSecuritySettings.ReconnectTransportOnFailure
  isExternal: true
  name: ReconnectTransportOnFailure
  nameWithType: LocalServiceSecuritySettings.ReconnectTransportOnFailure
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.ReconnectTransportOnFailure
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.TimestampValidityDuration*
  commentId: Overload:CoreWCF.Channels.LocalServiceSecuritySettings.TimestampValidityDuration
  isExternal: true
  name: TimestampValidityDuration
  nameWithType: LocalServiceSecuritySettings.TimestampValidityDuration
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.TimestampValidityDuration
- uid: CoreWCF.Channels.LocalServiceSecuritySettings.MaxCachedCookies*
  commentId: Overload:CoreWCF.Channels.LocalServiceSecuritySettings.MaxCachedCookies
  isExternal: true
  name: MaxCachedCookies
  nameWithType: LocalServiceSecuritySettings.MaxCachedCookies
  fullName: CoreWCF.Channels.LocalServiceSecuritySettings.MaxCachedCookies
