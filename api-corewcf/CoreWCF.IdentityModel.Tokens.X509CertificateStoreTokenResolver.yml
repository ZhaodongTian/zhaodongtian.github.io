### YamlMime:ManagedReference
items:
- uid: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver
  commentId: T:CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver
  id: X509CertificateStoreTokenResolver
  parent: CoreWCF.IdentityModel.Tokens
  children:
  - CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.#ctor
  - CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.#ctor(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation)
  - CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.#ctor(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)
  - CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.StoreLocation
  - CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.StoreName
  - CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  - CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  - CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  langs:
  - csharp
  - vb
  name: X509CertificateStoreTokenResolver
  nameWithType: X509CertificateStoreTokenResolver
  fullName: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver
  type: Class
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nToken Resolver that can resolve X509SecurityTokens against a given X.509 Certificate Store.\n"
  syntax:
    content: 'public class X509CertificateStoreTokenResolver : SecurityTokenResolver'
    content.vb: >-
      Public Class X509CertificateStoreTokenResolver
          Inherits SecurityTokenResolver
  inheritance:
  - System.Object
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  inheritedMembers:
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Tokens.SecurityToken},System.Boolean)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.#ctor
  commentId: M:CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.#ctor
  id: '#ctor'
  parent: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver
  langs:
  - csharp
  - vb
  name: X509CertificateStoreTokenResolver()
  nameWithType: X509CertificateStoreTokenResolver.X509CertificateStoreTokenResolver()
  fullName: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.X509CertificateStoreTokenResolver()
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nInitializes an instance of <xref href=\"CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver\" data-throw-if-not-resolved=\"false\"></xref>"
  syntax:
    content: public X509CertificateStoreTokenResolver()
    content.vb: Public Sub New
  overload: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.#ctor(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation)
  commentId: M:CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.#ctor(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation)
  id: '#ctor(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation)'
  parent: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver
  langs:
  - csharp
  - vb
  name: X509CertificateStoreTokenResolver(StoreName, StoreLocation)
  nameWithType: X509CertificateStoreTokenResolver.X509CertificateStoreTokenResolver(StoreName, StoreLocation)
  fullName: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.X509CertificateStoreTokenResolver(System.Security.Cryptography.X509Certificates.StoreName, System.Security.Cryptography.X509Certificates.StoreLocation)
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nInitializes an instance of <xref href=\"CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver\" data-throw-if-not-resolved=\"false\"></xref>"
  syntax:
    content: public X509CertificateStoreTokenResolver(StoreName storeName, StoreLocation storeLocation)
    parameters:
    - id: storeName
      type: System.Security.Cryptography.X509Certificates.StoreName
      description: StoreName of the X.509 Certificate Store.
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
      description: StoreLocation of the X.509 Certificate store.
    content.vb: Public Sub New(storeName As StoreName, storeLocation As StoreLocation)
  overload: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.#ctor(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)
  commentId: M:CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.#ctor(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)
  id: '#ctor(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)'
  parent: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver
  langs:
  - csharp
  - vb
  name: X509CertificateStoreTokenResolver(String, StoreLocation)
  nameWithType: X509CertificateStoreTokenResolver.X509CertificateStoreTokenResolver(String, StoreLocation)
  fullName: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.X509CertificateStoreTokenResolver(System.String, System.Security.Cryptography.X509Certificates.StoreLocation)
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nInitializes an instance of <xref href=\"CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver\" data-throw-if-not-resolved=\"false\"></xref>"
  syntax:
    content: public X509CertificateStoreTokenResolver(string storeName, StoreLocation storeLocation)
    parameters:
    - id: storeName
      type: System.String
      description: StoreName of the X.509 Certificate Store.
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
      description: StoreLocation of the X.509 Certificate store.
    content.vb: Public Sub New(storeName As String, storeLocation As StoreLocation)
  overload: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  commentId: M:CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  id: TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  parent: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver
  langs:
  - csharp
  - vb
  name: TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, out SecurityKey)
  nameWithType: X509CertificateStoreTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, out SecurityKey)
  fullName: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, out CoreWCF.IdentityModel.Tokens.SecurityKey)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nResolves the given SecurityKeyIdentifierClause to a SecurityKey.\n"
  syntax:
    content: protected override bool TryResolveSecurityKeyCore(SecurityKeyIdentifierClause keyIdentifierClause, out SecurityKey key)
    parameters:
    - id: keyIdentifierClause
      type: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
      description: SecurityKeyIdentifierClause to resolve
    - id: key
      type: CoreWCF.IdentityModel.Tokens.SecurityKey
      description: The resolved SecurityKey.
    return:
      type: System.Boolean
      description: True if successfully resolved.
    content.vb: Protected Overrides Function TryResolveSecurityKeyCore(keyIdentifierClause As SecurityKeyIdentifierClause, ByRef key As SecurityKey) As Boolean
  overridden: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  overload: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveSecurityKeyCore*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The input argument &apos;keyIdentifierClause&apos; is null.
  nameWithType.vb: X509CertificateStoreTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, ByRef SecurityKey)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, ByRef CoreWCF.IdentityModel.Tokens.SecurityKey)
  name.vb: TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, ByRef SecurityKey)
- uid: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  commentId: M:CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  id: TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  parent: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver
  langs:
  - csharp
  - vb
  name: TryResolveTokenCore(SecurityKeyIdentifier, out SecurityToken)
  nameWithType: X509CertificateStoreTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier, out SecurityToken)
  fullName: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier, out CoreWCF.IdentityModel.Tokens.SecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nResolves the given SecurityKeyIdentifier to a SecurityToken.\n"
  syntax:
    content: protected override bool TryResolveTokenCore(SecurityKeyIdentifier keyIdentifier, out SecurityToken token)
    parameters:
    - id: keyIdentifier
      type: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
      description: SecurityKeyIdentifier to resolve.
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
      description: The resolved SecurityToken.
    return:
      type: System.Boolean
      description: True if successfully resolved.
    content.vb: Protected Overrides Function TryResolveTokenCore(keyIdentifier As SecurityKeyIdentifier, ByRef token As SecurityToken) As Boolean
  overridden: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  overload: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveTokenCore*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The input argument &apos;keyIdentifier&apos; is null.
  nameWithType.vb: X509CertificateStoreTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier, ByRef SecurityToken)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier, ByRef CoreWCF.IdentityModel.Tokens.SecurityToken)
  name.vb: TryResolveTokenCore(SecurityKeyIdentifier, ByRef SecurityToken)
- uid: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  commentId: M:CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  id: TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  parent: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver
  langs:
  - csharp
  - vb
  name: TryResolveTokenCore(SecurityKeyIdentifierClause, out SecurityToken)
  nameWithType: X509CertificateStoreTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause, out SecurityToken)
  fullName: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, out CoreWCF.IdentityModel.Tokens.SecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nResolves the given SecurityKeyIdentifierClause to a SecurityToken.\n"
  syntax:
    content: protected override bool TryResolveTokenCore(SecurityKeyIdentifierClause keyIdentifierClause, out SecurityToken token)
    parameters:
    - id: keyIdentifierClause
      type: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
      description: SecurityKeyIdentifierClause to resolve.
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
      description: The resolved SecurityToken.
    return:
      type: System.Boolean
      description: True if successfully resolved.
    content.vb: Protected Overrides Function TryResolveTokenCore(keyIdentifierClause As SecurityKeyIdentifierClause, ByRef token As SecurityToken) As Boolean
  overridden: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  overload: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveTokenCore*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The input argument &apos;keyIdentifierClause&apos; is null.
  nameWithType.vb: X509CertificateStoreTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause, ByRef SecurityToken)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, ByRef CoreWCF.IdentityModel.Tokens.SecurityToken)
  name.vb: TryResolveTokenCore(SecurityKeyIdentifierClause, ByRef SecurityToken)
- uid: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.StoreName
  commentId: P:CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.StoreName
  id: StoreName
  parent: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver
  langs:
  - csharp
  - vb
  name: StoreName
  nameWithType: X509CertificateStoreTokenResolver.StoreName
  fullName: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.StoreName
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nGets the StoreName used by this TokenResolver.\n"
  syntax:
    content: public string StoreName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property StoreName As String
  overload: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.StoreName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.StoreLocation
  commentId: P:CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.StoreLocation
  id: StoreLocation
  parent: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver
  langs:
  - csharp
  - vb
  name: StoreLocation
  nameWithType: X509CertificateStoreTokenResolver.StoreLocation
  fullName: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.StoreLocation
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nGets the StoreLocation used by this TokenResolver.\n"
  syntax:
    content: public StoreLocation StoreLocation { get; }
    parameters: []
    return:
      type: System.Security.Cryptography.X509Certificates.StoreLocation
    content.vb: Public ReadOnly Property StoreLocation As StoreLocation
  overload: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.StoreLocation*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: CoreWCF.IdentityModel.Tokens
  commentId: N:CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: CoreWCF.IdentityModel.Tokens
  nameWithType: CoreWCF.IdentityModel.Tokens
  fullName: CoreWCF.IdentityModel.Tokens
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  commentId: T:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  parent: CoreWCF.IdentityModel.Selectors
  isExternal: true
  name: SecurityTokenResolver
  nameWithType: SecurityTokenResolver
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: ResolveToken(SecurityKeyIdentifier)
  nameWithType: SecurityTokenResolver.ResolveToken(SecurityKeyIdentifier)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
    name: ResolveToken
    nameWithType: SecurityTokenResolver.ResolveToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    name: SecurityKeyIdentifier
    nameWithType: SecurityKeyIdentifier
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
    name: ResolveToken
    nameWithType: SecurityTokenResolver.ResolveToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    name: SecurityKeyIdentifier
    nameWithType: SecurityKeyIdentifier
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: TryResolveToken(SecurityKeyIdentifier, SecurityToken)
  nameWithType: SecurityTokenResolver.TryResolveToken(SecurityKeyIdentifier, SecurityToken)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier, CoreWCF.IdentityModel.Tokens.SecurityToken)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
    name: TryResolveToken
    nameWithType: SecurityTokenResolver.TryResolveToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    name: SecurityKeyIdentifier
    nameWithType: SecurityKeyIdentifier
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
    name: TryResolveToken
    nameWithType: SecurityTokenResolver.TryResolveToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    name: SecurityKeyIdentifier
    nameWithType: SecurityKeyIdentifier
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: ResolveToken(SecurityKeyIdentifierClause)
  nameWithType: SecurityTokenResolver.ResolveToken(SecurityKeyIdentifierClause)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
    name: ResolveToken
    nameWithType: SecurityTokenResolver.ResolveToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
    name: ResolveToken
    nameWithType: SecurityTokenResolver.ResolveToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: TryResolveToken(SecurityKeyIdentifierClause, SecurityToken)
  nameWithType: SecurityTokenResolver.TryResolveToken(SecurityKeyIdentifierClause, SecurityToken)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, CoreWCF.IdentityModel.Tokens.SecurityToken)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
    name: TryResolveToken
    nameWithType: SecurityTokenResolver.TryResolveToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
    name: TryResolveToken
    nameWithType: SecurityTokenResolver.TryResolveToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: ResolveSecurityKey(SecurityKeyIdentifierClause)
  nameWithType: SecurityTokenResolver.ResolveSecurityKey(SecurityKeyIdentifierClause)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
    name: ResolveSecurityKey
    nameWithType: SecurityTokenResolver.ResolveSecurityKey
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
    name: ResolveSecurityKey
    nameWithType: SecurityTokenResolver.ResolveSecurityKey
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: TryResolveSecurityKey(SecurityKeyIdentifierClause, SecurityKey)
  nameWithType: SecurityTokenResolver.TryResolveSecurityKey(SecurityKeyIdentifierClause, SecurityKey)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, CoreWCF.IdentityModel.Tokens.SecurityKey)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
    name: TryResolveSecurityKey
    nameWithType: SecurityTokenResolver.TryResolveSecurityKey
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKey
    name: SecurityKey
    nameWithType: SecurityKey
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKey
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
    name: TryResolveSecurityKey
    nameWithType: SecurityTokenResolver.TryResolveSecurityKey
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKey
    name: SecurityKey
    nameWithType: SecurityKey
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKey
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Tokens.SecurityToken},System.Boolean)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Tokens.SecurityToken},System.Boolean)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: CreateDefaultSecurityTokenResolver(ReadOnlyCollection<SecurityToken>, Boolean)
  nameWithType: SecurityTokenResolver.CreateDefaultSecurityTokenResolver(ReadOnlyCollection<SecurityToken>, Boolean)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection<CoreWCF.IdentityModel.Tokens.SecurityToken>, System.Boolean)
  nameWithType.vb: SecurityTokenResolver.CreateDefaultSecurityTokenResolver(ReadOnlyCollection(Of SecurityToken), Boolean)
  fullName.vb: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection(Of CoreWCF.IdentityModel.Tokens.SecurityToken), System.Boolean)
  name.vb: CreateDefaultSecurityTokenResolver(ReadOnlyCollection(Of SecurityToken), Boolean)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Tokens.SecurityToken},System.Boolean)
    name: CreateDefaultSecurityTokenResolver
    nameWithType: SecurityTokenResolver.CreateDefaultSecurityTokenResolver
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Tokens.SecurityToken},System.Boolean)
    name: CreateDefaultSecurityTokenResolver
    nameWithType: SecurityTokenResolver.CreateDefaultSecurityTokenResolver
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CoreWCF.IdentityModel.Selectors
  commentId: N:CoreWCF.IdentityModel.Selectors
  isExternal: true
  name: CoreWCF.IdentityModel.Selectors
  nameWithType: CoreWCF.IdentityModel.Selectors
  fullName: CoreWCF.IdentityModel.Selectors
- uid: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.#ctor*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.#ctor
  isExternal: true
  name: X509CertificateStoreTokenResolver
  nameWithType: X509CertificateStoreTokenResolver.X509CertificateStoreTokenResolver
  fullName: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.X509CertificateStoreTokenResolver
- uid: System.Security.Cryptography.X509Certificates.StoreName
  isExternal: true
  name: StoreName
  nameWithType: StoreName
  fullName: System.Security.Cryptography.X509Certificates.StoreName
- uid: System.Security.Cryptography.X509Certificates.StoreLocation
  isExternal: true
  name: StoreLocation
  nameWithType: StoreLocation
  fullName: System.Security.Cryptography.X509Certificates.StoreLocation
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, SecurityKey)
  nameWithType: SecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, SecurityKey)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, CoreWCF.IdentityModel.Tokens.SecurityKey)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
    name: TryResolveSecurityKeyCore
    nameWithType: SecurityTokenResolver.TryResolveSecurityKeyCore
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKey
    name: SecurityKey
    nameWithType: SecurityKey
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKey
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
    name: TryResolveSecurityKeyCore
    nameWithType: SecurityTokenResolver.TryResolveSecurityKeyCore
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKey
    name: SecurityKey
    nameWithType: SecurityKey
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKey
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveSecurityKeyCore*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveSecurityKeyCore
  isExternal: true
  name: TryResolveSecurityKeyCore
  nameWithType: X509CertificateStoreTokenResolver.TryResolveSecurityKeyCore
  fullName: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveSecurityKeyCore
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
  commentId: T:CoreWCF.IdentityModel.SecurityKeyIdentifierClause
  parent: CoreWCF.IdentityModel
  isExternal: true
  name: SecurityKeyIdentifierClause
  nameWithType: SecurityKeyIdentifierClause
  fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
- uid: CoreWCF.IdentityModel.Tokens.SecurityKey
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityKey
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityKey
  nameWithType: SecurityKey
  fullName: CoreWCF.IdentityModel.Tokens.SecurityKey
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CoreWCF.IdentityModel
  commentId: N:CoreWCF.IdentityModel
  isExternal: true
  name: CoreWCF.IdentityModel
  nameWithType: CoreWCF.IdentityModel
  fullName: CoreWCF.IdentityModel
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: TryResolveTokenCore(SecurityKeyIdentifier, SecurityToken)
  nameWithType: SecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier, SecurityToken)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier, CoreWCF.IdentityModel.Tokens.SecurityToken)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
    name: TryResolveTokenCore
    nameWithType: SecurityTokenResolver.TryResolveTokenCore
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    name: SecurityKeyIdentifier
    nameWithType: SecurityKeyIdentifier
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
    name: TryResolveTokenCore
    nameWithType: SecurityTokenResolver.TryResolveTokenCore
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    name: SecurityKeyIdentifier
    nameWithType: SecurityKeyIdentifier
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveTokenCore*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveTokenCore
  isExternal: true
  name: TryResolveTokenCore
  nameWithType: X509CertificateStoreTokenResolver.TryResolveTokenCore
  fullName: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.TryResolveTokenCore
- uid: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityKeyIdentifier
  nameWithType: SecurityKeyIdentifier
  fullName: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
- uid: CoreWCF.IdentityModel.Tokens.SecurityToken
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityToken
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityToken
  nameWithType: SecurityToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: TryResolveTokenCore(SecurityKeyIdentifierClause, SecurityToken)
  nameWithType: SecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause, SecurityToken)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, CoreWCF.IdentityModel.Tokens.SecurityToken)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
    name: TryResolveTokenCore
    nameWithType: SecurityTokenResolver.TryResolveTokenCore
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
    name: TryResolveTokenCore
    nameWithType: SecurityTokenResolver.TryResolveTokenCore
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.StoreName*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.StoreName
  isExternal: true
  name: StoreName
  nameWithType: X509CertificateStoreTokenResolver.StoreName
  fullName: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.StoreName
- uid: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.StoreLocation*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.StoreLocation
  isExternal: true
  name: StoreLocation
  nameWithType: X509CertificateStoreTokenResolver.StoreLocation
  fullName: CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.StoreLocation
