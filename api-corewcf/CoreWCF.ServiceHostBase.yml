### YamlMime:ManagedReference
items:
- uid: CoreWCF.ServiceHostBase
  commentId: T:CoreWCF.ServiceHostBase
  id: ServiceHostBase
  parent: CoreWCF
  children:
  - CoreWCF.ServiceHostBase.#ctor
  - CoreWCF.ServiceHostBase.AddBaseAddress(System.Uri)
  - CoreWCF.ServiceHostBase.ApplyConfiguration
  - CoreWCF.ServiceHostBase.Authorization
  - CoreWCF.ServiceHostBase.BaseAddresses
  - CoreWCF.ServiceHostBase.ChannelDispatchers
  - CoreWCF.ServiceHostBase.CloseTimeout
  - CoreWCF.ServiceHostBase.CreateDescription(System.Collections.Generic.IDictionary{System.String,CoreWCF.Description.ContractDescription}@)
  - CoreWCF.ServiceHostBase.Credentials
  - CoreWCF.ServiceHostBase.DefaultCloseTimeout
  - CoreWCF.ServiceHostBase.DefaultOpenTimeout
  - CoreWCF.ServiceHostBase.Description
  - CoreWCF.ServiceHostBase.Extensions
  - CoreWCF.ServiceHostBase.ImplementedContracts
  - CoreWCF.ServiceHostBase.InitializeDescription(CoreWCF.UriSchemeKeyedCollection)
  - CoreWCF.ServiceHostBase.InitializeRuntime
  - CoreWCF.ServiceHostBase.ManualFlowControlLimit
  - CoreWCF.ServiceHostBase.OpenTimeout
  - CoreWCF.ServiceHostBase.UnknownMessageReceived
  langs:
  - csharp
  - vb
  name: ServiceHostBase
  nameWithType: ServiceHostBase
  fullName: CoreWCF.ServiceHostBase
  type: Class
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  summary: Extends the  class to implement hosts that expose custom programming models.
  remarks: "Use the &lt;xref:CoreWCF.ServiceHostBase> class to create hosts that provide a custom programming model. The Windows Communication Foundation (WCF) service programming model uses the &lt;xref:CoreWCF.ServiceHost> class.  \n\nSpecial note for Managed C++ users deriving from this class:  \n\n-   Put your cleanup code in (On)(Begin)Close (and/or OnAbort), not in a destructor.  \n\n-   Avoid destructors; they cause the compiler to auto-generate &lt;xref:System.IDisposable>.  \n\n-   Avoid non-reference members; they can cause the compiler to auto-generate &lt;xref:System.IDisposable>.  \n\n-   Avoid finalizers; but if you include one, you should suppress the build warning and call &lt;xref:System.GC.SuppressFinalize%28System.Object%29> and the finalizer itself from (On)(Begin)Close (and/or OnAbort) to emulate what would have been the auto-generated &lt;xref:System.IDisposable> behavior.  \n\n\n\n"
  syntax:
    content: 'public abstract class ServiceHostBase : CommunicationObject, ICommunicationObject, IExtensibleObject<ServiceHostBase>'
    content.vb: >-
      Public MustInherit Class ServiceHostBase
          Inherits CommunicationObject
          Implements ICommunicationObject, IExtensibleObject(Of ServiceHostBase)
  inheritance:
  - System.Object
  - CoreWCF.Channels.CommunicationObject
  implements:
  - CoreWCF.ICommunicationObject
  - CoreWCF.IExtensibleObject{CoreWCF.ServiceHostBase}
  - System.IDisposable
  inheritedMembers:
  - CoreWCF.Channels.CommunicationObject.Abort
  - CoreWCF.Channels.CommunicationObject.CloseAsync
  - CoreWCF.Channels.CommunicationObject.CloseAsync(System.Threading.CancellationToken)
  - CoreWCF.Channels.CommunicationObject.OpenAsync
  - CoreWCF.Channels.CommunicationObject.OpenAsync(System.Threading.CancellationToken)
  - CoreWCF.Channels.CommunicationObject.Fault(System.Exception)
  - CoreWCF.Channels.CommunicationObject.Fault
  - CoreWCF.Channels.CommunicationObject.GetCommunicationObjectType
  - CoreWCF.Channels.CommunicationObject.OnAbort
  - CoreWCF.Channels.CommunicationObject.OnCloseAsync(System.Threading.CancellationToken)
  - CoreWCF.Channels.CommunicationObject.OnOpenAsync(System.Threading.CancellationToken)
  - CoreWCF.Channels.CommunicationObject.OnClosed
  - CoreWCF.Channels.CommunicationObject.OnClosing
  - CoreWCF.Channels.CommunicationObject.OnFaulted
  - CoreWCF.Channels.CommunicationObject.OnOpened
  - CoreWCF.Channels.CommunicationObject.OnOpening
  - CoreWCF.Channels.CommunicationObject.ThrowIfDisposed
  - CoreWCF.Channels.CommunicationObject.ThrowIfDisposedOrImmutable
  - CoreWCF.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen
  - CoreWCF.Channels.CommunicationObject.ThrowIfNotOpened
  - CoreWCF.Channels.CommunicationObject.ThrowPending
  - CoreWCF.Channels.CommunicationObject.IsDisposed
  - CoreWCF.Channels.CommunicationObject.State
  - CoreWCF.Channels.CommunicationObject.ThisLock
  - CoreWCF.Channels.CommunicationObject.Closed
  - CoreWCF.Channels.CommunicationObject.Closing
  - CoreWCF.Channels.CommunicationObject.Faulted
  - CoreWCF.Channels.CommunicationObject.Opened
  - CoreWCF.Channels.CommunicationObject.Opening
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: CoreWCF.ServiceHostBase.#ctor
  commentId: M:CoreWCF.ServiceHostBase.#ctor
  id: '#ctor'
  parent: CoreWCF.ServiceHostBase
  langs:
  - csharp
  - vb
  name: ServiceHostBase()
  nameWithType: ServiceHostBase.ServiceHostBase()
  fullName: CoreWCF.ServiceHostBase.ServiceHostBase()
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: protected ServiceHostBase()
    content.vb: Protected Sub New
  overload: CoreWCF.ServiceHostBase.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: CoreWCF.ServiceHostBase.AddBaseAddress(System.Uri)
  commentId: M:CoreWCF.ServiceHostBase.AddBaseAddress(System.Uri)
  id: AddBaseAddress(System.Uri)
  parent: CoreWCF.ServiceHostBase
  langs:
  - csharp
  - vb
  name: AddBaseAddress(Uri)
  nameWithType: ServiceHostBase.AddBaseAddress(Uri)
  fullName: CoreWCF.ServiceHostBase.AddBaseAddress(System.Uri)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: protected void AddBaseAddress(Uri baseAddress)
    parameters:
    - id: baseAddress
      type: System.Uri
    content.vb: Protected Sub AddBaseAddress(baseAddress As Uri)
  overload: CoreWCF.ServiceHostBase.AddBaseAddress*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: CoreWCF.ServiceHostBase.ApplyConfiguration
  commentId: M:CoreWCF.ServiceHostBase.ApplyConfiguration
  id: ApplyConfiguration
  parent: CoreWCF.ServiceHostBase
  langs:
  - csharp
  - vb
  name: ApplyConfiguration()
  nameWithType: ServiceHostBase.ApplyConfiguration()
  fullName: CoreWCF.ServiceHostBase.ApplyConfiguration()
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: protected virtual void ApplyConfiguration()
    content.vb: Protected Overridable Sub ApplyConfiguration
  overload: CoreWCF.ServiceHostBase.ApplyConfiguration*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: CoreWCF.ServiceHostBase.CreateDescription(System.Collections.Generic.IDictionary{System.String,CoreWCF.Description.ContractDescription}@)
  commentId: M:CoreWCF.ServiceHostBase.CreateDescription(System.Collections.Generic.IDictionary{System.String,CoreWCF.Description.ContractDescription}@)
  id: CreateDescription(System.Collections.Generic.IDictionary{System.String,CoreWCF.Description.ContractDescription}@)
  parent: CoreWCF.ServiceHostBase
  langs:
  - csharp
  - vb
  name: CreateDescription(out IDictionary<String, ContractDescription>)
  nameWithType: ServiceHostBase.CreateDescription(out IDictionary<String, ContractDescription>)
  fullName: CoreWCF.ServiceHostBase.CreateDescription(out System.Collections.Generic.IDictionary<System.String, CoreWCF.Description.ContractDescription>)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: protected abstract ServiceDescription CreateDescription(out IDictionary<string, ContractDescription> implementedContracts)
    parameters:
    - id: implementedContracts
      type: System.Collections.Generic.IDictionary{System.String,CoreWCF.Description.ContractDescription}
    return:
      type: CoreWCF.Description.ServiceDescription
    content.vb: Protected MustOverride Function CreateDescription(ByRef implementedContracts As IDictionary(Of String, ContractDescription)) As ServiceDescription
  overload: CoreWCF.ServiceHostBase.CreateDescription*
  nameWithType.vb: ServiceHostBase.CreateDescription(ByRef IDictionary(Of String, ContractDescription))
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: CoreWCF.ServiceHostBase.CreateDescription(ByRef System.Collections.Generic.IDictionary(Of System.String, CoreWCF.Description.ContractDescription))
  name.vb: CreateDescription(ByRef IDictionary(Of String, ContractDescription))
- uid: CoreWCF.ServiceHostBase.InitializeRuntime
  commentId: M:CoreWCF.ServiceHostBase.InitializeRuntime
  id: InitializeRuntime
  parent: CoreWCF.ServiceHostBase
  langs:
  - csharp
  - vb
  name: InitializeRuntime()
  nameWithType: ServiceHostBase.InitializeRuntime()
  fullName: CoreWCF.ServiceHostBase.InitializeRuntime()
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: protected virtual void InitializeRuntime()
    content.vb: Protected Overridable Sub InitializeRuntime
  overload: CoreWCF.ServiceHostBase.InitializeRuntime*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: CoreWCF.ServiceHostBase.InitializeDescription(CoreWCF.UriSchemeKeyedCollection)
  commentId: M:CoreWCF.ServiceHostBase.InitializeDescription(CoreWCF.UriSchemeKeyedCollection)
  id: InitializeDescription(CoreWCF.UriSchemeKeyedCollection)
  parent: CoreWCF.ServiceHostBase
  langs:
  - csharp
  - vb
  name: InitializeDescription(UriSchemeKeyedCollection)
  nameWithType: ServiceHostBase.InitializeDescription(UriSchemeKeyedCollection)
  fullName: CoreWCF.ServiceHostBase.InitializeDescription(CoreWCF.UriSchemeKeyedCollection)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: protected void InitializeDescription(UriSchemeKeyedCollection baseAddresses)
    parameters:
    - id: baseAddresses
      type: CoreWCF.UriSchemeKeyedCollection
    content.vb: Protected Sub InitializeDescription(baseAddresses As UriSchemeKeyedCollection)
  overload: CoreWCF.ServiceHostBase.InitializeDescription*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: CoreWCF.ServiceHostBase.Authorization
  commentId: P:CoreWCF.ServiceHostBase.Authorization
  id: Authorization
  parent: CoreWCF.ServiceHostBase
  langs:
  - csharp
  - vb
  name: Authorization
  nameWithType: ServiceHostBase.Authorization
  fullName: CoreWCF.ServiceHostBase.Authorization
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: public ServiceAuthorizationBehavior Authorization { get; }
    parameters: []
    return:
      type: CoreWCF.Description.ServiceAuthorizationBehavior
    content.vb: Public ReadOnly Property Authorization As ServiceAuthorizationBehavior
  overload: CoreWCF.ServiceHostBase.Authorization*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CoreWCF.ServiceHostBase.BaseAddresses
  commentId: P:CoreWCF.ServiceHostBase.BaseAddresses
  id: BaseAddresses
  parent: CoreWCF.ServiceHostBase
  langs:
  - csharp
  - vb
  name: BaseAddresses
  nameWithType: ServiceHostBase.BaseAddresses
  fullName: CoreWCF.ServiceHostBase.BaseAddresses
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: public ReadOnlyCollection<Uri> BaseAddresses { get; }
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Uri}
    content.vb: Public ReadOnly Property BaseAddresses As ReadOnlyCollection(Of Uri)
  overload: CoreWCF.ServiceHostBase.BaseAddresses*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CoreWCF.ServiceHostBase.ChannelDispatchers
  commentId: P:CoreWCF.ServiceHostBase.ChannelDispatchers
  id: ChannelDispatchers
  parent: CoreWCF.ServiceHostBase
  langs:
  - csharp
  - vb
  name: ChannelDispatchers
  nameWithType: ServiceHostBase.ChannelDispatchers
  fullName: CoreWCF.ServiceHostBase.ChannelDispatchers
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: public ChannelDispatcherCollection ChannelDispatchers { get; }
    parameters: []
    return:
      type: CoreWCF.Dispatcher.ChannelDispatcherCollection
    content.vb: Public ReadOnly Property ChannelDispatchers As ChannelDispatcherCollection
  overload: CoreWCF.ServiceHostBase.ChannelDispatchers*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CoreWCF.ServiceHostBase.CloseTimeout
  commentId: P:CoreWCF.ServiceHostBase.CloseTimeout
  id: CloseTimeout
  parent: CoreWCF.ServiceHostBase
  langs:
  - csharp
  - vb
  name: CloseTimeout
  nameWithType: ServiceHostBase.CloseTimeout
  fullName: CoreWCF.ServiceHostBase.CloseTimeout
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: public TimeSpan CloseTimeout { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public Property CloseTimeout As TimeSpan
  overload: CoreWCF.ServiceHostBase.CloseTimeout*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CoreWCF.ServiceHostBase.Credentials
  commentId: P:CoreWCF.ServiceHostBase.Credentials
  id: Credentials
  parent: CoreWCF.ServiceHostBase
  langs:
  - csharp
  - vb
  name: Credentials
  nameWithType: ServiceHostBase.Credentials
  fullName: CoreWCF.ServiceHostBase.Credentials
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: public ServiceCredentials Credentials { get; }
    parameters: []
    return:
      type: CoreWCF.Description.ServiceCredentials
    content.vb: Public ReadOnly Property Credentials As ServiceCredentials
  overload: CoreWCF.ServiceHostBase.Credentials*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CoreWCF.ServiceHostBase.DefaultCloseTimeout
  commentId: P:CoreWCF.ServiceHostBase.DefaultCloseTimeout
  id: DefaultCloseTimeout
  parent: CoreWCF.ServiceHostBase
  langs:
  - csharp
  - vb
  name: DefaultCloseTimeout
  nameWithType: ServiceHostBase.DefaultCloseTimeout
  fullName: CoreWCF.ServiceHostBase.DefaultCloseTimeout
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: protected override TimeSpan DefaultCloseTimeout { get; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Protected Overrides ReadOnly Property DefaultCloseTimeout As TimeSpan
  overridden: CoreWCF.Channels.CommunicationObject.DefaultCloseTimeout
  overload: CoreWCF.ServiceHostBase.DefaultCloseTimeout*
  modifiers.csharp:
  - protected
  - override
  - get
  modifiers.vb:
  - Protected
  - Overrides
  - ReadOnly
- uid: CoreWCF.ServiceHostBase.DefaultOpenTimeout
  commentId: P:CoreWCF.ServiceHostBase.DefaultOpenTimeout
  id: DefaultOpenTimeout
  parent: CoreWCF.ServiceHostBase
  langs:
  - csharp
  - vb
  name: DefaultOpenTimeout
  nameWithType: ServiceHostBase.DefaultOpenTimeout
  fullName: CoreWCF.ServiceHostBase.DefaultOpenTimeout
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: protected override TimeSpan DefaultOpenTimeout { get; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Protected Overrides ReadOnly Property DefaultOpenTimeout As TimeSpan
  overridden: CoreWCF.Channels.CommunicationObject.DefaultOpenTimeout
  overload: CoreWCF.ServiceHostBase.DefaultOpenTimeout*
  modifiers.csharp:
  - protected
  - override
  - get
  modifiers.vb:
  - Protected
  - Overrides
  - ReadOnly
- uid: CoreWCF.ServiceHostBase.Description
  commentId: P:CoreWCF.ServiceHostBase.Description
  id: Description
  parent: CoreWCF.ServiceHostBase
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: ServiceHostBase.Description
  fullName: CoreWCF.ServiceHostBase.Description
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: public ServiceDescription Description { get; }
    parameters: []
    return:
      type: CoreWCF.Description.ServiceDescription
    content.vb: Public ReadOnly Property Description As ServiceDescription
  overload: CoreWCF.ServiceHostBase.Description*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CoreWCF.ServiceHostBase.Extensions
  commentId: P:CoreWCF.ServiceHostBase.Extensions
  id: Extensions
  parent: CoreWCF.ServiceHostBase
  langs:
  - csharp
  - vb
  name: Extensions
  nameWithType: ServiceHostBase.Extensions
  fullName: CoreWCF.ServiceHostBase.Extensions
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: public IExtensionCollection<ServiceHostBase> Extensions { get; }
    parameters: []
    return:
      type: CoreWCF.IExtensionCollection{CoreWCF.ServiceHostBase}
    content.vb: Public ReadOnly Property Extensions As IExtensionCollection(Of ServiceHostBase)
  overload: CoreWCF.ServiceHostBase.Extensions*
  implements:
  - CoreWCF.IExtensibleObject{CoreWCF.ServiceHostBase}.Extensions
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CoreWCF.ServiceHostBase.ImplementedContracts
  commentId: P:CoreWCF.ServiceHostBase.ImplementedContracts
  id: ImplementedContracts
  parent: CoreWCF.ServiceHostBase
  langs:
  - csharp
  - vb
  name: ImplementedContracts
  nameWithType: ServiceHostBase.ImplementedContracts
  fullName: CoreWCF.ServiceHostBase.ImplementedContracts
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: protected IDictionary<string, ContractDescription> ImplementedContracts { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,CoreWCF.Description.ContractDescription}
    content.vb: Protected ReadOnly Property ImplementedContracts As IDictionary(Of String, ContractDescription)
  overload: CoreWCF.ServiceHostBase.ImplementedContracts*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: CoreWCF.ServiceHostBase.ManualFlowControlLimit
  commentId: P:CoreWCF.ServiceHostBase.ManualFlowControlLimit
  id: ManualFlowControlLimit
  parent: CoreWCF.ServiceHostBase
  langs:
  - csharp
  - vb
  name: ManualFlowControlLimit
  nameWithType: ServiceHostBase.ManualFlowControlLimit
  fullName: CoreWCF.ServiceHostBase.ManualFlowControlLimit
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: public int ManualFlowControlLimit { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property ManualFlowControlLimit As Integer
  overload: CoreWCF.ServiceHostBase.ManualFlowControlLimit*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CoreWCF.ServiceHostBase.OpenTimeout
  commentId: P:CoreWCF.ServiceHostBase.OpenTimeout
  id: OpenTimeout
  parent: CoreWCF.ServiceHostBase
  langs:
  - csharp
  - vb
  name: OpenTimeout
  nameWithType: ServiceHostBase.OpenTimeout
  fullName: CoreWCF.ServiceHostBase.OpenTimeout
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: public TimeSpan OpenTimeout { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public Property OpenTimeout As TimeSpan
  overload: CoreWCF.ServiceHostBase.OpenTimeout*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CoreWCF.ServiceHostBase.UnknownMessageReceived
  commentId: E:CoreWCF.ServiceHostBase.UnknownMessageReceived
  id: UnknownMessageReceived
  parent: CoreWCF.ServiceHostBase
  langs:
  - csharp
  - vb
  name: UnknownMessageReceived
  nameWithType: ServiceHostBase.UnknownMessageReceived
  fullName: CoreWCF.ServiceHostBase.UnknownMessageReceived
  type: Event
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: public event EventHandler<UnknownMessageReceivedEventArgs> UnknownMessageReceived
    return:
      type: System.EventHandler{CoreWCF.UnknownMessageReceivedEventArgs}
    content.vb: Public Event UnknownMessageReceived As EventHandler(Of UnknownMessageReceivedEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: CoreWCF
  commentId: N:CoreWCF
  isExternal: true
  name: CoreWCF
  nameWithType: CoreWCF
  fullName: CoreWCF
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CoreWCF.Channels.CommunicationObject
  commentId: T:CoreWCF.Channels.CommunicationObject
  parent: CoreWCF.Channels
  isExternal: true
  name: CommunicationObject
  nameWithType: CommunicationObject
  fullName: CoreWCF.Channels.CommunicationObject
- uid: CoreWCF.ICommunicationObject
  commentId: T:CoreWCF.ICommunicationObject
  parent: CoreWCF
  isExternal: true
  name: ICommunicationObject
  nameWithType: ICommunicationObject
  fullName: CoreWCF.ICommunicationObject
- uid: CoreWCF.IExtensibleObject{CoreWCF.ServiceHostBase}
  commentId: T:CoreWCF.IExtensibleObject{CoreWCF.ServiceHostBase}
  parent: CoreWCF
  definition: CoreWCF.IExtensibleObject`1
  name: IExtensibleObject<ServiceHostBase>
  nameWithType: IExtensibleObject<ServiceHostBase>
  fullName: CoreWCF.IExtensibleObject<CoreWCF.ServiceHostBase>
  nameWithType.vb: IExtensibleObject(Of ServiceHostBase)
  fullName.vb: CoreWCF.IExtensibleObject(Of CoreWCF.ServiceHostBase)
  name.vb: IExtensibleObject(Of ServiceHostBase)
  spec.csharp:
  - uid: CoreWCF.IExtensibleObject`1
    name: IExtensibleObject
    nameWithType: IExtensibleObject
    fullName: CoreWCF.IExtensibleObject
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreWCF.ServiceHostBase
    name: ServiceHostBase
    nameWithType: ServiceHostBase
    fullName: CoreWCF.ServiceHostBase
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CoreWCF.IExtensibleObject`1
    name: IExtensibleObject
    nameWithType: IExtensibleObject
    fullName: CoreWCF.IExtensibleObject
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreWCF.ServiceHostBase
    name: ServiceHostBase
    nameWithType: ServiceHostBase
    fullName: CoreWCF.ServiceHostBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: CoreWCF.Channels.CommunicationObject.Abort
  commentId: M:CoreWCF.Channels.CommunicationObject.Abort
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: Abort()
  nameWithType: CommunicationObject.Abort()
  fullName: CoreWCF.Channels.CommunicationObject.Abort()
  spec.csharp:
  - uid: CoreWCF.Channels.CommunicationObject.Abort
    name: Abort
    nameWithType: CommunicationObject.Abort
    fullName: CoreWCF.Channels.CommunicationObject.Abort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Channels.CommunicationObject.Abort
    name: Abort
    nameWithType: CommunicationObject.Abort
    fullName: CoreWCF.Channels.CommunicationObject.Abort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Channels.CommunicationObject.CloseAsync
  commentId: M:CoreWCF.Channels.CommunicationObject.CloseAsync
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: CloseAsync()
  nameWithType: CommunicationObject.CloseAsync()
  fullName: CoreWCF.Channels.CommunicationObject.CloseAsync()
  spec.csharp:
  - uid: CoreWCF.Channels.CommunicationObject.CloseAsync
    name: CloseAsync
    nameWithType: CommunicationObject.CloseAsync
    fullName: CoreWCF.Channels.CommunicationObject.CloseAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Channels.CommunicationObject.CloseAsync
    name: CloseAsync
    nameWithType: CommunicationObject.CloseAsync
    fullName: CoreWCF.Channels.CommunicationObject.CloseAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Channels.CommunicationObject.CloseAsync(System.Threading.CancellationToken)
  commentId: M:CoreWCF.Channels.CommunicationObject.CloseAsync(System.Threading.CancellationToken)
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: CloseAsync(CancellationToken)
  nameWithType: CommunicationObject.CloseAsync(CancellationToken)
  fullName: CoreWCF.Channels.CommunicationObject.CloseAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: CoreWCF.Channels.CommunicationObject.CloseAsync(System.Threading.CancellationToken)
    name: CloseAsync
    nameWithType: CommunicationObject.CloseAsync
    fullName: CoreWCF.Channels.CommunicationObject.CloseAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Channels.CommunicationObject.CloseAsync(System.Threading.CancellationToken)
    name: CloseAsync
    nameWithType: CommunicationObject.CloseAsync
    fullName: CoreWCF.Channels.CommunicationObject.CloseAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Channels.CommunicationObject.OpenAsync
  commentId: M:CoreWCF.Channels.CommunicationObject.OpenAsync
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: OpenAsync()
  nameWithType: CommunicationObject.OpenAsync()
  fullName: CoreWCF.Channels.CommunicationObject.OpenAsync()
  spec.csharp:
  - uid: CoreWCF.Channels.CommunicationObject.OpenAsync
    name: OpenAsync
    nameWithType: CommunicationObject.OpenAsync
    fullName: CoreWCF.Channels.CommunicationObject.OpenAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Channels.CommunicationObject.OpenAsync
    name: OpenAsync
    nameWithType: CommunicationObject.OpenAsync
    fullName: CoreWCF.Channels.CommunicationObject.OpenAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Channels.CommunicationObject.OpenAsync(System.Threading.CancellationToken)
  commentId: M:CoreWCF.Channels.CommunicationObject.OpenAsync(System.Threading.CancellationToken)
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: OpenAsync(CancellationToken)
  nameWithType: CommunicationObject.OpenAsync(CancellationToken)
  fullName: CoreWCF.Channels.CommunicationObject.OpenAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: CoreWCF.Channels.CommunicationObject.OpenAsync(System.Threading.CancellationToken)
    name: OpenAsync
    nameWithType: CommunicationObject.OpenAsync
    fullName: CoreWCF.Channels.CommunicationObject.OpenAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Channels.CommunicationObject.OpenAsync(System.Threading.CancellationToken)
    name: OpenAsync
    nameWithType: CommunicationObject.OpenAsync
    fullName: CoreWCF.Channels.CommunicationObject.OpenAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Channels.CommunicationObject.Fault(System.Exception)
  commentId: M:CoreWCF.Channels.CommunicationObject.Fault(System.Exception)
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: Fault(Exception)
  nameWithType: CommunicationObject.Fault(Exception)
  fullName: CoreWCF.Channels.CommunicationObject.Fault(System.Exception)
  spec.csharp:
  - uid: CoreWCF.Channels.CommunicationObject.Fault(System.Exception)
    name: Fault
    nameWithType: CommunicationObject.Fault
    fullName: CoreWCF.Channels.CommunicationObject.Fault
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Channels.CommunicationObject.Fault(System.Exception)
    name: Fault
    nameWithType: CommunicationObject.Fault
    fullName: CoreWCF.Channels.CommunicationObject.Fault
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Channels.CommunicationObject.Fault
  commentId: M:CoreWCF.Channels.CommunicationObject.Fault
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: Fault()
  nameWithType: CommunicationObject.Fault()
  fullName: CoreWCF.Channels.CommunicationObject.Fault()
  spec.csharp:
  - uid: CoreWCF.Channels.CommunicationObject.Fault
    name: Fault
    nameWithType: CommunicationObject.Fault
    fullName: CoreWCF.Channels.CommunicationObject.Fault
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Channels.CommunicationObject.Fault
    name: Fault
    nameWithType: CommunicationObject.Fault
    fullName: CoreWCF.Channels.CommunicationObject.Fault
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Channels.CommunicationObject.GetCommunicationObjectType
  commentId: M:CoreWCF.Channels.CommunicationObject.GetCommunicationObjectType
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: GetCommunicationObjectType()
  nameWithType: CommunicationObject.GetCommunicationObjectType()
  fullName: CoreWCF.Channels.CommunicationObject.GetCommunicationObjectType()
  spec.csharp:
  - uid: CoreWCF.Channels.CommunicationObject.GetCommunicationObjectType
    name: GetCommunicationObjectType
    nameWithType: CommunicationObject.GetCommunicationObjectType
    fullName: CoreWCF.Channels.CommunicationObject.GetCommunicationObjectType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Channels.CommunicationObject.GetCommunicationObjectType
    name: GetCommunicationObjectType
    nameWithType: CommunicationObject.GetCommunicationObjectType
    fullName: CoreWCF.Channels.CommunicationObject.GetCommunicationObjectType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Channels.CommunicationObject.OnAbort
  commentId: M:CoreWCF.Channels.CommunicationObject.OnAbort
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: OnAbort()
  nameWithType: CommunicationObject.OnAbort()
  fullName: CoreWCF.Channels.CommunicationObject.OnAbort()
  spec.csharp:
  - uid: CoreWCF.Channels.CommunicationObject.OnAbort
    name: OnAbort
    nameWithType: CommunicationObject.OnAbort
    fullName: CoreWCF.Channels.CommunicationObject.OnAbort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Channels.CommunicationObject.OnAbort
    name: OnAbort
    nameWithType: CommunicationObject.OnAbort
    fullName: CoreWCF.Channels.CommunicationObject.OnAbort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Channels.CommunicationObject.OnCloseAsync(System.Threading.CancellationToken)
  commentId: M:CoreWCF.Channels.CommunicationObject.OnCloseAsync(System.Threading.CancellationToken)
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: OnCloseAsync(CancellationToken)
  nameWithType: CommunicationObject.OnCloseAsync(CancellationToken)
  fullName: CoreWCF.Channels.CommunicationObject.OnCloseAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: CoreWCF.Channels.CommunicationObject.OnCloseAsync(System.Threading.CancellationToken)
    name: OnCloseAsync
    nameWithType: CommunicationObject.OnCloseAsync
    fullName: CoreWCF.Channels.CommunicationObject.OnCloseAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Channels.CommunicationObject.OnCloseAsync(System.Threading.CancellationToken)
    name: OnCloseAsync
    nameWithType: CommunicationObject.OnCloseAsync
    fullName: CoreWCF.Channels.CommunicationObject.OnCloseAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Channels.CommunicationObject.OnOpenAsync(System.Threading.CancellationToken)
  commentId: M:CoreWCF.Channels.CommunicationObject.OnOpenAsync(System.Threading.CancellationToken)
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: OnOpenAsync(CancellationToken)
  nameWithType: CommunicationObject.OnOpenAsync(CancellationToken)
  fullName: CoreWCF.Channels.CommunicationObject.OnOpenAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: CoreWCF.Channels.CommunicationObject.OnOpenAsync(System.Threading.CancellationToken)
    name: OnOpenAsync
    nameWithType: CommunicationObject.OnOpenAsync
    fullName: CoreWCF.Channels.CommunicationObject.OnOpenAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Channels.CommunicationObject.OnOpenAsync(System.Threading.CancellationToken)
    name: OnOpenAsync
    nameWithType: CommunicationObject.OnOpenAsync
    fullName: CoreWCF.Channels.CommunicationObject.OnOpenAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Channels.CommunicationObject.OnClosed
  commentId: M:CoreWCF.Channels.CommunicationObject.OnClosed
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: OnClosed()
  nameWithType: CommunicationObject.OnClosed()
  fullName: CoreWCF.Channels.CommunicationObject.OnClosed()
  spec.csharp:
  - uid: CoreWCF.Channels.CommunicationObject.OnClosed
    name: OnClosed
    nameWithType: CommunicationObject.OnClosed
    fullName: CoreWCF.Channels.CommunicationObject.OnClosed
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Channels.CommunicationObject.OnClosed
    name: OnClosed
    nameWithType: CommunicationObject.OnClosed
    fullName: CoreWCF.Channels.CommunicationObject.OnClosed
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Channels.CommunicationObject.OnClosing
  commentId: M:CoreWCF.Channels.CommunicationObject.OnClosing
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: OnClosing()
  nameWithType: CommunicationObject.OnClosing()
  fullName: CoreWCF.Channels.CommunicationObject.OnClosing()
  spec.csharp:
  - uid: CoreWCF.Channels.CommunicationObject.OnClosing
    name: OnClosing
    nameWithType: CommunicationObject.OnClosing
    fullName: CoreWCF.Channels.CommunicationObject.OnClosing
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Channels.CommunicationObject.OnClosing
    name: OnClosing
    nameWithType: CommunicationObject.OnClosing
    fullName: CoreWCF.Channels.CommunicationObject.OnClosing
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Channels.CommunicationObject.OnFaulted
  commentId: M:CoreWCF.Channels.CommunicationObject.OnFaulted
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: OnFaulted()
  nameWithType: CommunicationObject.OnFaulted()
  fullName: CoreWCF.Channels.CommunicationObject.OnFaulted()
  spec.csharp:
  - uid: CoreWCF.Channels.CommunicationObject.OnFaulted
    name: OnFaulted
    nameWithType: CommunicationObject.OnFaulted
    fullName: CoreWCF.Channels.CommunicationObject.OnFaulted
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Channels.CommunicationObject.OnFaulted
    name: OnFaulted
    nameWithType: CommunicationObject.OnFaulted
    fullName: CoreWCF.Channels.CommunicationObject.OnFaulted
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Channels.CommunicationObject.OnOpened
  commentId: M:CoreWCF.Channels.CommunicationObject.OnOpened
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: OnOpened()
  nameWithType: CommunicationObject.OnOpened()
  fullName: CoreWCF.Channels.CommunicationObject.OnOpened()
  spec.csharp:
  - uid: CoreWCF.Channels.CommunicationObject.OnOpened
    name: OnOpened
    nameWithType: CommunicationObject.OnOpened
    fullName: CoreWCF.Channels.CommunicationObject.OnOpened
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Channels.CommunicationObject.OnOpened
    name: OnOpened
    nameWithType: CommunicationObject.OnOpened
    fullName: CoreWCF.Channels.CommunicationObject.OnOpened
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Channels.CommunicationObject.OnOpening
  commentId: M:CoreWCF.Channels.CommunicationObject.OnOpening
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: OnOpening()
  nameWithType: CommunicationObject.OnOpening()
  fullName: CoreWCF.Channels.CommunicationObject.OnOpening()
  spec.csharp:
  - uid: CoreWCF.Channels.CommunicationObject.OnOpening
    name: OnOpening
    nameWithType: CommunicationObject.OnOpening
    fullName: CoreWCF.Channels.CommunicationObject.OnOpening
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Channels.CommunicationObject.OnOpening
    name: OnOpening
    nameWithType: CommunicationObject.OnOpening
    fullName: CoreWCF.Channels.CommunicationObject.OnOpening
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Channels.CommunicationObject.ThrowIfDisposed
  commentId: M:CoreWCF.Channels.CommunicationObject.ThrowIfDisposed
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: ThrowIfDisposed()
  nameWithType: CommunicationObject.ThrowIfDisposed()
  fullName: CoreWCF.Channels.CommunicationObject.ThrowIfDisposed()
  spec.csharp:
  - uid: CoreWCF.Channels.CommunicationObject.ThrowIfDisposed
    name: ThrowIfDisposed
    nameWithType: CommunicationObject.ThrowIfDisposed
    fullName: CoreWCF.Channels.CommunicationObject.ThrowIfDisposed
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Channels.CommunicationObject.ThrowIfDisposed
    name: ThrowIfDisposed
    nameWithType: CommunicationObject.ThrowIfDisposed
    fullName: CoreWCF.Channels.CommunicationObject.ThrowIfDisposed
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Channels.CommunicationObject.ThrowIfDisposedOrImmutable
  commentId: M:CoreWCF.Channels.CommunicationObject.ThrowIfDisposedOrImmutable
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: ThrowIfDisposedOrImmutable()
  nameWithType: CommunicationObject.ThrowIfDisposedOrImmutable()
  fullName: CoreWCF.Channels.CommunicationObject.ThrowIfDisposedOrImmutable()
  spec.csharp:
  - uid: CoreWCF.Channels.CommunicationObject.ThrowIfDisposedOrImmutable
    name: ThrowIfDisposedOrImmutable
    nameWithType: CommunicationObject.ThrowIfDisposedOrImmutable
    fullName: CoreWCF.Channels.CommunicationObject.ThrowIfDisposedOrImmutable
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Channels.CommunicationObject.ThrowIfDisposedOrImmutable
    name: ThrowIfDisposedOrImmutable
    nameWithType: CommunicationObject.ThrowIfDisposedOrImmutable
    fullName: CoreWCF.Channels.CommunicationObject.ThrowIfDisposedOrImmutable
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen
  commentId: M:CoreWCF.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: ThrowIfDisposedOrNotOpen()
  nameWithType: CommunicationObject.ThrowIfDisposedOrNotOpen()
  fullName: CoreWCF.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen()
  spec.csharp:
  - uid: CoreWCF.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen
    name: ThrowIfDisposedOrNotOpen
    nameWithType: CommunicationObject.ThrowIfDisposedOrNotOpen
    fullName: CoreWCF.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen
    name: ThrowIfDisposedOrNotOpen
    nameWithType: CommunicationObject.ThrowIfDisposedOrNotOpen
    fullName: CoreWCF.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Channels.CommunicationObject.ThrowIfNotOpened
  commentId: M:CoreWCF.Channels.CommunicationObject.ThrowIfNotOpened
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: ThrowIfNotOpened()
  nameWithType: CommunicationObject.ThrowIfNotOpened()
  fullName: CoreWCF.Channels.CommunicationObject.ThrowIfNotOpened()
  spec.csharp:
  - uid: CoreWCF.Channels.CommunicationObject.ThrowIfNotOpened
    name: ThrowIfNotOpened
    nameWithType: CommunicationObject.ThrowIfNotOpened
    fullName: CoreWCF.Channels.CommunicationObject.ThrowIfNotOpened
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Channels.CommunicationObject.ThrowIfNotOpened
    name: ThrowIfNotOpened
    nameWithType: CommunicationObject.ThrowIfNotOpened
    fullName: CoreWCF.Channels.CommunicationObject.ThrowIfNotOpened
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Channels.CommunicationObject.ThrowPending
  commentId: M:CoreWCF.Channels.CommunicationObject.ThrowPending
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: ThrowPending()
  nameWithType: CommunicationObject.ThrowPending()
  fullName: CoreWCF.Channels.CommunicationObject.ThrowPending()
  spec.csharp:
  - uid: CoreWCF.Channels.CommunicationObject.ThrowPending
    name: ThrowPending
    nameWithType: CommunicationObject.ThrowPending
    fullName: CoreWCF.Channels.CommunicationObject.ThrowPending
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Channels.CommunicationObject.ThrowPending
    name: ThrowPending
    nameWithType: CommunicationObject.ThrowPending
    fullName: CoreWCF.Channels.CommunicationObject.ThrowPending
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Channels.CommunicationObject.IsDisposed
  commentId: P:CoreWCF.Channels.CommunicationObject.IsDisposed
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: IsDisposed
  nameWithType: CommunicationObject.IsDisposed
  fullName: CoreWCF.Channels.CommunicationObject.IsDisposed
- uid: CoreWCF.Channels.CommunicationObject.State
  commentId: P:CoreWCF.Channels.CommunicationObject.State
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: State
  nameWithType: CommunicationObject.State
  fullName: CoreWCF.Channels.CommunicationObject.State
- uid: CoreWCF.Channels.CommunicationObject.ThisLock
  commentId: P:CoreWCF.Channels.CommunicationObject.ThisLock
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: ThisLock
  nameWithType: CommunicationObject.ThisLock
  fullName: CoreWCF.Channels.CommunicationObject.ThisLock
- uid: CoreWCF.Channels.CommunicationObject.Closed
  commentId: E:CoreWCF.Channels.CommunicationObject.Closed
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: Closed
  nameWithType: CommunicationObject.Closed
  fullName: CoreWCF.Channels.CommunicationObject.Closed
- uid: CoreWCF.Channels.CommunicationObject.Closing
  commentId: E:CoreWCF.Channels.CommunicationObject.Closing
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: Closing
  nameWithType: CommunicationObject.Closing
  fullName: CoreWCF.Channels.CommunicationObject.Closing
- uid: CoreWCF.Channels.CommunicationObject.Faulted
  commentId: E:CoreWCF.Channels.CommunicationObject.Faulted
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: Faulted
  nameWithType: CommunicationObject.Faulted
  fullName: CoreWCF.Channels.CommunicationObject.Faulted
- uid: CoreWCF.Channels.CommunicationObject.Opened
  commentId: E:CoreWCF.Channels.CommunicationObject.Opened
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: Opened
  nameWithType: CommunicationObject.Opened
  fullName: CoreWCF.Channels.CommunicationObject.Opened
- uid: CoreWCF.Channels.CommunicationObject.Opening
  commentId: E:CoreWCF.Channels.CommunicationObject.Opening
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: Opening
  nameWithType: CommunicationObject.Opening
  fullName: CoreWCF.Channels.CommunicationObject.Opening
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CoreWCF.Channels
  commentId: N:CoreWCF.Channels
  isExternal: true
  name: CoreWCF.Channels
  nameWithType: CoreWCF.Channels
  fullName: CoreWCF.Channels
- uid: CoreWCF.IExtensibleObject`1
  commentId: T:CoreWCF.IExtensibleObject`1
  isExternal: true
  name: IExtensibleObject<T>
  nameWithType: IExtensibleObject<T>
  fullName: CoreWCF.IExtensibleObject<T>
  nameWithType.vb: IExtensibleObject(Of T)
  fullName.vb: CoreWCF.IExtensibleObject(Of T)
  name.vb: IExtensibleObject(Of T)
  spec.csharp:
  - uid: CoreWCF.IExtensibleObject`1
    name: IExtensibleObject
    nameWithType: IExtensibleObject
    fullName: CoreWCF.IExtensibleObject
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CoreWCF.IExtensibleObject`1
    name: IExtensibleObject
    nameWithType: IExtensibleObject
    fullName: CoreWCF.IExtensibleObject
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.ServiceHostBase.#ctor*
  commentId: Overload:CoreWCF.ServiceHostBase.#ctor
  isExternal: true
  name: ServiceHostBase
  nameWithType: ServiceHostBase.ServiceHostBase
  fullName: CoreWCF.ServiceHostBase.ServiceHostBase
- uid: CoreWCF.ServiceHostBase.AddBaseAddress*
  commentId: Overload:CoreWCF.ServiceHostBase.AddBaseAddress
  isExternal: true
  name: AddBaseAddress
  nameWithType: ServiceHostBase.AddBaseAddress
  fullName: CoreWCF.ServiceHostBase.AddBaseAddress
- uid: System.Uri
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: CoreWCF.ServiceHostBase.ApplyConfiguration*
  commentId: Overload:CoreWCF.ServiceHostBase.ApplyConfiguration
  isExternal: true
  name: ApplyConfiguration
  nameWithType: ServiceHostBase.ApplyConfiguration
  fullName: CoreWCF.ServiceHostBase.ApplyConfiguration
- uid: CoreWCF.ServiceHostBase.CreateDescription*
  commentId: Overload:CoreWCF.ServiceHostBase.CreateDescription
  isExternal: true
  name: CreateDescription
  nameWithType: ServiceHostBase.CreateDescription
  fullName: CoreWCF.ServiceHostBase.CreateDescription
- uid: System.Collections.Generic.IDictionary{System.String,CoreWCF.Description.ContractDescription}
  commentId: '!:System.Collections.Generic.IDictionary{System.String,CoreWCF.Description.ContractDescription}'
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, ContractDescription>
  nameWithType: IDictionary<String, ContractDescription>
  fullName: System.Collections.Generic.IDictionary<System.String, CoreWCF.Description.ContractDescription>
  nameWithType.vb: IDictionary(Of String, ContractDescription)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, CoreWCF.Description.ContractDescription)
  name.vb: IDictionary(Of String, ContractDescription)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.Description.ContractDescription
    name: ContractDescription
    nameWithType: ContractDescription
    fullName: CoreWCF.Description.ContractDescription
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.Description.ContractDescription
    name: ContractDescription
    nameWithType: ContractDescription
    fullName: CoreWCF.Description.ContractDescription
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Description.ServiceDescription
  commentId: T:CoreWCF.Description.ServiceDescription
  parent: CoreWCF.Description
  isExternal: true
  name: ServiceDescription
  nameWithType: ServiceDescription
  fullName: CoreWCF.Description.ServiceDescription
- uid: System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<, >
  nameWithType: IDictionary<, >
  fullName: System.Collections.Generic.IDictionary<, >
  nameWithType.vb: IDictionary(Of , )
  fullName.vb: System.Collections.Generic.IDictionary(Of , )
  name.vb: IDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Description
  commentId: N:CoreWCF.Description
  isExternal: true
  name: CoreWCF.Description
  nameWithType: CoreWCF.Description
  fullName: CoreWCF.Description
- uid: CoreWCF.ServiceHostBase.InitializeRuntime*
  commentId: Overload:CoreWCF.ServiceHostBase.InitializeRuntime
  isExternal: true
  name: InitializeRuntime
  nameWithType: ServiceHostBase.InitializeRuntime
  fullName: CoreWCF.ServiceHostBase.InitializeRuntime
- uid: CoreWCF.ServiceHostBase.InitializeDescription*
  commentId: Overload:CoreWCF.ServiceHostBase.InitializeDescription
  isExternal: true
  name: InitializeDescription
  nameWithType: ServiceHostBase.InitializeDescription
  fullName: CoreWCF.ServiceHostBase.InitializeDescription
- uid: CoreWCF.UriSchemeKeyedCollection
  commentId: T:CoreWCF.UriSchemeKeyedCollection
  parent: CoreWCF
  isExternal: true
  name: UriSchemeKeyedCollection
  nameWithType: UriSchemeKeyedCollection
  fullName: CoreWCF.UriSchemeKeyedCollection
- uid: CoreWCF.ServiceHostBase.Authorization*
  commentId: Overload:CoreWCF.ServiceHostBase.Authorization
  isExternal: true
  name: Authorization
  nameWithType: ServiceHostBase.Authorization
  fullName: CoreWCF.ServiceHostBase.Authorization
- uid: CoreWCF.Description.ServiceAuthorizationBehavior
  commentId: T:CoreWCF.Description.ServiceAuthorizationBehavior
  parent: CoreWCF.Description
  isExternal: true
  name: ServiceAuthorizationBehavior
  nameWithType: ServiceAuthorizationBehavior
  fullName: CoreWCF.Description.ServiceAuthorizationBehavior
- uid: CoreWCF.ServiceHostBase.BaseAddresses*
  commentId: Overload:CoreWCF.ServiceHostBase.BaseAddresses
  isExternal: true
  name: BaseAddresses
  nameWithType: ServiceHostBase.BaseAddresses
  fullName: CoreWCF.ServiceHostBase.BaseAddresses
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Uri}
  commentId: '!:System.Collections.ObjectModel.ReadOnlyCollection{System.Uri}'
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<Uri>
  nameWithType: ReadOnlyCollection<Uri>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Uri>
  nameWithType.vb: ReadOnlyCollection(Of Uri)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.Uri)
  name.vb: ReadOnlyCollection(Of Uri)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<>
  nameWithType: ReadOnlyCollection<>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<>
  nameWithType.vb: ReadOnlyCollection(Of )
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of )
  name.vb: ReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.ServiceHostBase.ChannelDispatchers*
  commentId: Overload:CoreWCF.ServiceHostBase.ChannelDispatchers
  isExternal: true
  name: ChannelDispatchers
  nameWithType: ServiceHostBase.ChannelDispatchers
  fullName: CoreWCF.ServiceHostBase.ChannelDispatchers
- uid: CoreWCF.Dispatcher.ChannelDispatcherCollection
  commentId: T:CoreWCF.Dispatcher.ChannelDispatcherCollection
  parent: CoreWCF.Dispatcher
  isExternal: true
  name: ChannelDispatcherCollection
  nameWithType: ChannelDispatcherCollection
  fullName: CoreWCF.Dispatcher.ChannelDispatcherCollection
- uid: CoreWCF.Dispatcher
  commentId: N:CoreWCF.Dispatcher
  isExternal: true
  name: CoreWCF.Dispatcher
  nameWithType: CoreWCF.Dispatcher
  fullName: CoreWCF.Dispatcher
- uid: CoreWCF.ServiceHostBase.CloseTimeout*
  commentId: Overload:CoreWCF.ServiceHostBase.CloseTimeout
  isExternal: true
  name: CloseTimeout
  nameWithType: ServiceHostBase.CloseTimeout
  fullName: CoreWCF.ServiceHostBase.CloseTimeout
- uid: System.TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: CoreWCF.ServiceHostBase.Credentials*
  commentId: Overload:CoreWCF.ServiceHostBase.Credentials
  isExternal: true
  name: Credentials
  nameWithType: ServiceHostBase.Credentials
  fullName: CoreWCF.ServiceHostBase.Credentials
- uid: CoreWCF.Description.ServiceCredentials
  commentId: T:CoreWCF.Description.ServiceCredentials
  parent: CoreWCF.Description
  isExternal: true
  name: ServiceCredentials
  nameWithType: ServiceCredentials
  fullName: CoreWCF.Description.ServiceCredentials
- uid: CoreWCF.Channels.CommunicationObject.DefaultCloseTimeout
  commentId: P:CoreWCF.Channels.CommunicationObject.DefaultCloseTimeout
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: DefaultCloseTimeout
  nameWithType: CommunicationObject.DefaultCloseTimeout
  fullName: CoreWCF.Channels.CommunicationObject.DefaultCloseTimeout
- uid: CoreWCF.ServiceHostBase.DefaultCloseTimeout*
  commentId: Overload:CoreWCF.ServiceHostBase.DefaultCloseTimeout
  isExternal: true
  name: DefaultCloseTimeout
  nameWithType: ServiceHostBase.DefaultCloseTimeout
  fullName: CoreWCF.ServiceHostBase.DefaultCloseTimeout
- uid: CoreWCF.Channels.CommunicationObject.DefaultOpenTimeout
  commentId: P:CoreWCF.Channels.CommunicationObject.DefaultOpenTimeout
  parent: CoreWCF.Channels.CommunicationObject
  isExternal: true
  name: DefaultOpenTimeout
  nameWithType: CommunicationObject.DefaultOpenTimeout
  fullName: CoreWCF.Channels.CommunicationObject.DefaultOpenTimeout
- uid: CoreWCF.ServiceHostBase.DefaultOpenTimeout*
  commentId: Overload:CoreWCF.ServiceHostBase.DefaultOpenTimeout
  isExternal: true
  name: DefaultOpenTimeout
  nameWithType: ServiceHostBase.DefaultOpenTimeout
  fullName: CoreWCF.ServiceHostBase.DefaultOpenTimeout
- uid: CoreWCF.ServiceHostBase.Description*
  commentId: Overload:CoreWCF.ServiceHostBase.Description
  isExternal: true
  name: Description
  nameWithType: ServiceHostBase.Description
  fullName: CoreWCF.ServiceHostBase.Description
- uid: CoreWCF.ServiceHostBase.Extensions*
  commentId: Overload:CoreWCF.ServiceHostBase.Extensions
  isExternal: true
  name: Extensions
  nameWithType: ServiceHostBase.Extensions
  fullName: CoreWCF.ServiceHostBase.Extensions
- uid: CoreWCF.IExtensibleObject{CoreWCF.ServiceHostBase}.Extensions
  commentId: P:CoreWCF.IExtensibleObject{CoreWCF.ServiceHostBase}.Extensions
  parent: CoreWCF.IExtensibleObject{CoreWCF.ServiceHostBase}
  definition: CoreWCF.IExtensibleObject`1.Extensions
  name: Extensions
  nameWithType: IExtensibleObject<ServiceHostBase>.Extensions
  fullName: CoreWCF.IExtensibleObject<CoreWCF.ServiceHostBase>.Extensions
  nameWithType.vb: IExtensibleObject(Of ServiceHostBase).Extensions
  fullName.vb: CoreWCF.IExtensibleObject(Of CoreWCF.ServiceHostBase).Extensions
- uid: CoreWCF.IExtensionCollection{CoreWCF.ServiceHostBase}
  commentId: T:CoreWCF.IExtensionCollection{CoreWCF.ServiceHostBase}
  parent: CoreWCF
  definition: CoreWCF.IExtensionCollection`1
  name: IExtensionCollection<ServiceHostBase>
  nameWithType: IExtensionCollection<ServiceHostBase>
  fullName: CoreWCF.IExtensionCollection<CoreWCF.ServiceHostBase>
  nameWithType.vb: IExtensionCollection(Of ServiceHostBase)
  fullName.vb: CoreWCF.IExtensionCollection(Of CoreWCF.ServiceHostBase)
  name.vb: IExtensionCollection(Of ServiceHostBase)
  spec.csharp:
  - uid: CoreWCF.IExtensionCollection`1
    name: IExtensionCollection
    nameWithType: IExtensionCollection
    fullName: CoreWCF.IExtensionCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreWCF.ServiceHostBase
    name: ServiceHostBase
    nameWithType: ServiceHostBase
    fullName: CoreWCF.ServiceHostBase
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CoreWCF.IExtensionCollection`1
    name: IExtensionCollection
    nameWithType: IExtensionCollection
    fullName: CoreWCF.IExtensionCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreWCF.ServiceHostBase
    name: ServiceHostBase
    nameWithType: ServiceHostBase
    fullName: CoreWCF.ServiceHostBase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IExtensibleObject`1.Extensions
  commentId: P:CoreWCF.IExtensibleObject`1.Extensions
  isExternal: true
  name: Extensions
  nameWithType: IExtensibleObject<T>.Extensions
  fullName: CoreWCF.IExtensibleObject<T>.Extensions
  nameWithType.vb: IExtensibleObject(Of T).Extensions
  fullName.vb: CoreWCF.IExtensibleObject(Of T).Extensions
- uid: CoreWCF.IExtensionCollection`1
  commentId: T:CoreWCF.IExtensionCollection`1
  isExternal: true
  name: IExtensionCollection<T>
  nameWithType: IExtensionCollection<T>
  fullName: CoreWCF.IExtensionCollection<T>
  nameWithType.vb: IExtensionCollection(Of T)
  fullName.vb: CoreWCF.IExtensionCollection(Of T)
  name.vb: IExtensionCollection(Of T)
  spec.csharp:
  - uid: CoreWCF.IExtensionCollection`1
    name: IExtensionCollection
    nameWithType: IExtensionCollection
    fullName: CoreWCF.IExtensionCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CoreWCF.IExtensionCollection`1
    name: IExtensionCollection
    nameWithType: IExtensionCollection
    fullName: CoreWCF.IExtensionCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.ServiceHostBase.ImplementedContracts*
  commentId: Overload:CoreWCF.ServiceHostBase.ImplementedContracts
  isExternal: true
  name: ImplementedContracts
  nameWithType: ServiceHostBase.ImplementedContracts
  fullName: CoreWCF.ServiceHostBase.ImplementedContracts
- uid: CoreWCF.ServiceHostBase.ManualFlowControlLimit*
  commentId: Overload:CoreWCF.ServiceHostBase.ManualFlowControlLimit
  isExternal: true
  name: ManualFlowControlLimit
  nameWithType: ServiceHostBase.ManualFlowControlLimit
  fullName: CoreWCF.ServiceHostBase.ManualFlowControlLimit
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: CoreWCF.ServiceHostBase.OpenTimeout*
  commentId: Overload:CoreWCF.ServiceHostBase.OpenTimeout
  isExternal: true
  name: OpenTimeout
  nameWithType: ServiceHostBase.OpenTimeout
  fullName: CoreWCF.ServiceHostBase.OpenTimeout
- uid: System.EventHandler{CoreWCF.UnknownMessageReceivedEventArgs}
  commentId: '!:System.EventHandler{CoreWCF.UnknownMessageReceivedEventArgs}'
  definition: System.EventHandler`1
  name: EventHandler<UnknownMessageReceivedEventArgs>
  nameWithType: EventHandler<UnknownMessageReceivedEventArgs>
  fullName: System.EventHandler<CoreWCF.UnknownMessageReceivedEventArgs>
  nameWithType.vb: EventHandler(Of UnknownMessageReceivedEventArgs)
  fullName.vb: System.EventHandler(Of CoreWCF.UnknownMessageReceivedEventArgs)
  name.vb: EventHandler(Of UnknownMessageReceivedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreWCF.UnknownMessageReceivedEventArgs
    name: UnknownMessageReceivedEventArgs
    nameWithType: UnknownMessageReceivedEventArgs
    fullName: CoreWCF.UnknownMessageReceivedEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreWCF.UnknownMessageReceivedEventArgs
    name: UnknownMessageReceivedEventArgs
    nameWithType: UnknownMessageReceivedEventArgs
    fullName: CoreWCF.UnknownMessageReceivedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  isExternal: true
  name: EventHandler<>
  nameWithType: EventHandler<>
  fullName: System.EventHandler<>
  nameWithType.vb: EventHandler(Of )
  fullName.vb: System.EventHandler(Of )
  name.vb: EventHandler(Of )
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
