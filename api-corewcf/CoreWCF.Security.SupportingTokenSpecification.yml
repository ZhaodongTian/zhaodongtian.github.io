### YamlMime:ManagedReference
items:
- uid: CoreWCF.Security.SupportingTokenSpecification
  commentId: T:CoreWCF.Security.SupportingTokenSpecification
  id: SupportingTokenSpecification
  parent: CoreWCF.Security
  children:
  - CoreWCF.Security.SupportingTokenSpecification.#ctor(CoreWCF.IdentityModel.Tokens.SecurityToken,System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy},CoreWCF.Security.SecurityTokenAttachmentMode)
  - CoreWCF.Security.SupportingTokenSpecification.#ctor(CoreWCF.IdentityModel.Tokens.SecurityToken,System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy},CoreWCF.Security.SecurityTokenAttachmentMode,CoreWCF.Security.Tokens.SecurityTokenParameters)
  - CoreWCF.Security.SupportingTokenSpecification.SecurityTokenAttachmentMode
  langs:
  - csharp
  - vb
  name: SupportingTokenSpecification
  nameWithType: SupportingTokenSpecification
  fullName: CoreWCF.Security.SupportingTokenSpecification
  type: Class
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security
  summary: Represents a supporting security token and its authorization policies.
  remarks: "Supporting tokens augment the claims provided by the token associated with the message signature. There are 4 different kinds of supporting tokens, and the &lt;xref:CoreWCF.Security.SupportingTokenSpecification.SecurityTokenAttachmentMode%2A> enumeration specifies which kind this instance is.  \n\n"
  syntax:
    content: 'public class SupportingTokenSpecification : SecurityTokenSpecification'
    content.vb: >-
      Public Class SupportingTokenSpecification
          Inherits SecurityTokenSpecification
  inheritance:
  - System.Object
  - CoreWCF.Security.SecurityTokenSpecification
  inheritedMembers:
  - CoreWCF.Security.SecurityTokenSpecification.SecurityToken
  - CoreWCF.Security.SecurityTokenSpecification.SecurityTokenPolicies
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CoreWCF.Security.SupportingTokenSpecification.#ctor(CoreWCF.IdentityModel.Tokens.SecurityToken,System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy},CoreWCF.Security.SecurityTokenAttachmentMode)
  commentId: M:CoreWCF.Security.SupportingTokenSpecification.#ctor(CoreWCF.IdentityModel.Tokens.SecurityToken,System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy},CoreWCF.Security.SecurityTokenAttachmentMode)
  id: '#ctor(CoreWCF.IdentityModel.Tokens.SecurityToken,System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy},CoreWCF.Security.SecurityTokenAttachmentMode)'
  parent: CoreWCF.Security.SupportingTokenSpecification
  langs:
  - csharp
  - vb
  name: SupportingTokenSpecification(SecurityToken, ReadOnlyCollection<IAuthorizationPolicy>, SecurityTokenAttachmentMode)
  nameWithType: SupportingTokenSpecification.SupportingTokenSpecification(SecurityToken, ReadOnlyCollection<IAuthorizationPolicy>, SecurityTokenAttachmentMode)
  fullName: CoreWCF.Security.SupportingTokenSpecification.SupportingTokenSpecification(CoreWCF.IdentityModel.Tokens.SecurityToken, System.Collections.ObjectModel.ReadOnlyCollection<CoreWCF.IdentityModel.Policy.IAuthorizationPolicy>, CoreWCF.Security.SecurityTokenAttachmentMode)
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security
  syntax:
    content: public SupportingTokenSpecification(SecurityToken token, ReadOnlyCollection<IAuthorizationPolicy> tokenPolicies, SecurityTokenAttachmentMode attachmentMode)
    parameters:
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    - id: tokenPolicies
      type: System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy}
    - id: attachmentMode
      type: CoreWCF.Security.SecurityTokenAttachmentMode
    content.vb: Public Sub New(token As SecurityToken, tokenPolicies As ReadOnlyCollection(Of IAuthorizationPolicy), attachmentMode As SecurityTokenAttachmentMode)
  overload: CoreWCF.Security.SupportingTokenSpecification.#ctor*
  nameWithType.vb: SupportingTokenSpecification.SupportingTokenSpecification(SecurityToken, ReadOnlyCollection(Of IAuthorizationPolicy), SecurityTokenAttachmentMode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.Security.SupportingTokenSpecification.SupportingTokenSpecification(CoreWCF.IdentityModel.Tokens.SecurityToken, System.Collections.ObjectModel.ReadOnlyCollection(Of CoreWCF.IdentityModel.Policy.IAuthorizationPolicy), CoreWCF.Security.SecurityTokenAttachmentMode)
  name.vb: SupportingTokenSpecification(SecurityToken, ReadOnlyCollection(Of IAuthorizationPolicy), SecurityTokenAttachmentMode)
- uid: CoreWCF.Security.SupportingTokenSpecification.#ctor(CoreWCF.IdentityModel.Tokens.SecurityToken,System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy},CoreWCF.Security.SecurityTokenAttachmentMode,CoreWCF.Security.Tokens.SecurityTokenParameters)
  commentId: M:CoreWCF.Security.SupportingTokenSpecification.#ctor(CoreWCF.IdentityModel.Tokens.SecurityToken,System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy},CoreWCF.Security.SecurityTokenAttachmentMode,CoreWCF.Security.Tokens.SecurityTokenParameters)
  id: '#ctor(CoreWCF.IdentityModel.Tokens.SecurityToken,System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy},CoreWCF.Security.SecurityTokenAttachmentMode,CoreWCF.Security.Tokens.SecurityTokenParameters)'
  parent: CoreWCF.Security.SupportingTokenSpecification
  langs:
  - csharp
  - vb
  name: SupportingTokenSpecification(SecurityToken, ReadOnlyCollection<IAuthorizationPolicy>, SecurityTokenAttachmentMode, SecurityTokenParameters)
  nameWithType: SupportingTokenSpecification.SupportingTokenSpecification(SecurityToken, ReadOnlyCollection<IAuthorizationPolicy>, SecurityTokenAttachmentMode, SecurityTokenParameters)
  fullName: CoreWCF.Security.SupportingTokenSpecification.SupportingTokenSpecification(CoreWCF.IdentityModel.Tokens.SecurityToken, System.Collections.ObjectModel.ReadOnlyCollection<CoreWCF.IdentityModel.Policy.IAuthorizationPolicy>, CoreWCF.Security.SecurityTokenAttachmentMode, CoreWCF.Security.Tokens.SecurityTokenParameters)
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security
  syntax:
    content: public SupportingTokenSpecification(SecurityToken token, ReadOnlyCollection<IAuthorizationPolicy> tokenPolicies, SecurityTokenAttachmentMode attachmentMode, SecurityTokenParameters tokenParameters)
    parameters:
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    - id: tokenPolicies
      type: System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy}
    - id: attachmentMode
      type: CoreWCF.Security.SecurityTokenAttachmentMode
    - id: tokenParameters
      type: CoreWCF.Security.Tokens.SecurityTokenParameters
    content.vb: Public Sub New(token As SecurityToken, tokenPolicies As ReadOnlyCollection(Of IAuthorizationPolicy), attachmentMode As SecurityTokenAttachmentMode, tokenParameters As SecurityTokenParameters)
  overload: CoreWCF.Security.SupportingTokenSpecification.#ctor*
  nameWithType.vb: SupportingTokenSpecification.SupportingTokenSpecification(SecurityToken, ReadOnlyCollection(Of IAuthorizationPolicy), SecurityTokenAttachmentMode, SecurityTokenParameters)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.Security.SupportingTokenSpecification.SupportingTokenSpecification(CoreWCF.IdentityModel.Tokens.SecurityToken, System.Collections.ObjectModel.ReadOnlyCollection(Of CoreWCF.IdentityModel.Policy.IAuthorizationPolicy), CoreWCF.Security.SecurityTokenAttachmentMode, CoreWCF.Security.Tokens.SecurityTokenParameters)
  name.vb: SupportingTokenSpecification(SecurityToken, ReadOnlyCollection(Of IAuthorizationPolicy), SecurityTokenAttachmentMode, SecurityTokenParameters)
- uid: CoreWCF.Security.SupportingTokenSpecification.SecurityTokenAttachmentMode
  commentId: P:CoreWCF.Security.SupportingTokenSpecification.SecurityTokenAttachmentMode
  id: SecurityTokenAttachmentMode
  parent: CoreWCF.Security.SupportingTokenSpecification
  langs:
  - csharp
  - vb
  name: SecurityTokenAttachmentMode
  nameWithType: SupportingTokenSpecification.SecurityTokenAttachmentMode
  fullName: CoreWCF.Security.SupportingTokenSpecification.SecurityTokenAttachmentMode
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security
  syntax:
    content: public SecurityTokenAttachmentMode SecurityTokenAttachmentMode { get; }
    parameters: []
    return:
      type: CoreWCF.Security.SecurityTokenAttachmentMode
    content.vb: Public ReadOnly Property SecurityTokenAttachmentMode As SecurityTokenAttachmentMode
  overload: CoreWCF.Security.SupportingTokenSpecification.SecurityTokenAttachmentMode*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: CoreWCF.Security
  commentId: N:CoreWCF.Security
  isExternal: true
  name: CoreWCF.Security
  nameWithType: CoreWCF.Security
  fullName: CoreWCF.Security
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CoreWCF.Security.SecurityTokenSpecification
  commentId: T:CoreWCF.Security.SecurityTokenSpecification
  parent: CoreWCF.Security
  isExternal: true
  name: SecurityTokenSpecification
  nameWithType: SecurityTokenSpecification
  fullName: CoreWCF.Security.SecurityTokenSpecification
- uid: CoreWCF.Security.SecurityTokenSpecification.SecurityToken
  commentId: P:CoreWCF.Security.SecurityTokenSpecification.SecurityToken
  parent: CoreWCF.Security.SecurityTokenSpecification
  isExternal: true
  name: SecurityToken
  nameWithType: SecurityTokenSpecification.SecurityToken
  fullName: CoreWCF.Security.SecurityTokenSpecification.SecurityToken
- uid: CoreWCF.Security.SecurityTokenSpecification.SecurityTokenPolicies
  commentId: P:CoreWCF.Security.SecurityTokenSpecification.SecurityTokenPolicies
  parent: CoreWCF.Security.SecurityTokenSpecification
  isExternal: true
  name: SecurityTokenPolicies
  nameWithType: SecurityTokenSpecification.SecurityTokenPolicies
  fullName: CoreWCF.Security.SecurityTokenSpecification.SecurityTokenPolicies
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CoreWCF.Security.SupportingTokenSpecification.#ctor*
  commentId: Overload:CoreWCF.Security.SupportingTokenSpecification.#ctor
  isExternal: true
  name: SupportingTokenSpecification
  nameWithType: SupportingTokenSpecification.SupportingTokenSpecification
  fullName: CoreWCF.Security.SupportingTokenSpecification.SupportingTokenSpecification
- uid: CoreWCF.IdentityModel.Tokens.SecurityToken
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityToken
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityToken
  nameWithType: SecurityToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
- uid: System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy}
  commentId: '!:System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy}'
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<IAuthorizationPolicy>
  nameWithType: ReadOnlyCollection<IAuthorizationPolicy>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<CoreWCF.IdentityModel.Policy.IAuthorizationPolicy>
  nameWithType.vb: ReadOnlyCollection(Of IAuthorizationPolicy)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of CoreWCF.IdentityModel.Policy.IAuthorizationPolicy)
  name.vb: ReadOnlyCollection(Of IAuthorizationPolicy)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreWCF.IdentityModel.Policy.IAuthorizationPolicy
    name: IAuthorizationPolicy
    nameWithType: IAuthorizationPolicy
    fullName: CoreWCF.IdentityModel.Policy.IAuthorizationPolicy
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreWCF.IdentityModel.Policy.IAuthorizationPolicy
    name: IAuthorizationPolicy
    nameWithType: IAuthorizationPolicy
    fullName: CoreWCF.IdentityModel.Policy.IAuthorizationPolicy
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Security.SecurityTokenAttachmentMode
  commentId: T:CoreWCF.Security.SecurityTokenAttachmentMode
  parent: CoreWCF.Security
  isExternal: true
  name: SecurityTokenAttachmentMode
  nameWithType: SecurityTokenAttachmentMode
  fullName: CoreWCF.Security.SecurityTokenAttachmentMode
- uid: CoreWCF.IdentityModel.Tokens
  commentId: N:CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: CoreWCF.IdentityModel.Tokens
  nameWithType: CoreWCF.IdentityModel.Tokens
  fullName: CoreWCF.IdentityModel.Tokens
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<>
  nameWithType: ReadOnlyCollection<>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<>
  nameWithType.vb: ReadOnlyCollection(Of )
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of )
  name.vb: ReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Security.Tokens.SecurityTokenParameters
  commentId: T:CoreWCF.Security.Tokens.SecurityTokenParameters
  parent: CoreWCF.Security.Tokens
  isExternal: true
  name: SecurityTokenParameters
  nameWithType: SecurityTokenParameters
  fullName: CoreWCF.Security.Tokens.SecurityTokenParameters
- uid: CoreWCF.Security.Tokens
  commentId: N:CoreWCF.Security.Tokens
  isExternal: true
  name: CoreWCF.Security.Tokens
  nameWithType: CoreWCF.Security.Tokens
  fullName: CoreWCF.Security.Tokens
- uid: CoreWCF.Security.SupportingTokenSpecification.SecurityTokenAttachmentMode*
  commentId: Overload:CoreWCF.Security.SupportingTokenSpecification.SecurityTokenAttachmentMode
  isExternal: true
  name: SecurityTokenAttachmentMode
  nameWithType: SupportingTokenSpecification.SecurityTokenAttachmentMode
  fullName: CoreWCF.Security.SupportingTokenSpecification.SecurityTokenAttachmentMode
