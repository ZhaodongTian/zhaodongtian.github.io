### YamlMime:ManagedReference
items:
- uid: CoreWCF.Channels.IRequestChannel
  commentId: T:CoreWCF.Channels.IRequestChannel
  id: IRequestChannel
  parent: CoreWCF.Channels
  children:
  - CoreWCF.Channels.IRequestChannel.RemoteAddress
  - CoreWCF.Channels.IRequestChannel.RequestAsync(CoreWCF.Channels.Message)
  - CoreWCF.Channels.IRequestChannel.RequestAsync(CoreWCF.Channels.Message,System.Threading.CancellationToken)
  - CoreWCF.Channels.IRequestChannel.Via
  langs:
  - csharp
  - vb
  name: IRequestChannel
  nameWithType: IRequestChannel
  fullName: CoreWCF.Channels.IRequestChannel
  type: Interface
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Channels
  summary: Defines the contract that a channel must implement to be on the requesting side of a request-reply communication between messaging endpoints.
  remarks: "\n\n\nThe <xref:CoreWCF.Channels.IRequestChannel> defines synchronous and asynchronous variants of a [IRequestChannel.Request](https://learn.microsoft.com/en-us/dotnet/api/system.servicemodel.clientbase-1.channelbase-1.system-servicemodel-channels-irequestchannel-request?view=dotnet-plat-ext-7.0) method that returns a response message. It also provides a <xref:CoreWCF.Channels.IRequestChannel.RemoteAddress%2A> and <xref:CoreWCF.Channels.IRequestChannel.Via%2A> properties to retrieve the endpoint address and URI to which the request message is sent.  \n\n"
  syntax:
    content: 'public interface IRequestChannel : IChannel, ICommunicationObject'
    content.vb: >-
      Public Interface IRequestChannel
          Inherits IChannel, ICommunicationObject
  inheritedMembers:
  - CoreWCF.Channels.IChannel.GetProperty``1
  - CoreWCF.Channels.IChannel.ChannelDispatcher
  - CoreWCF.ICommunicationObject.Abort
  - CoreWCF.ICommunicationObject.CloseAsync
  - CoreWCF.ICommunicationObject.CloseAsync(System.Threading.CancellationToken)
  - CoreWCF.ICommunicationObject.OpenAsync
  - CoreWCF.ICommunicationObject.OpenAsync(System.Threading.CancellationToken)
  - CoreWCF.ICommunicationObject.State
  - CoreWCF.ICommunicationObject.Closed
  - CoreWCF.ICommunicationObject.Closing
  - CoreWCF.ICommunicationObject.Faulted
  - CoreWCF.ICommunicationObject.Opened
  - CoreWCF.ICommunicationObject.Opening
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: CoreWCF.Channels.IRequestChannel.RequestAsync(CoreWCF.Channels.Message)
  commentId: M:CoreWCF.Channels.IRequestChannel.RequestAsync(CoreWCF.Channels.Message)
  id: RequestAsync(CoreWCF.Channels.Message)
  parent: CoreWCF.Channels.IRequestChannel
  langs:
  - csharp
  - vb
  name: RequestAsync(Message)
  nameWithType: IRequestChannel.RequestAsync(Message)
  fullName: CoreWCF.Channels.IRequestChannel.RequestAsync(CoreWCF.Channels.Message)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Channels
  syntax:
    content: Task<Message> RequestAsync(Message message)
    parameters:
    - id: message
      type: CoreWCF.Channels.Message
    return:
      type: System.Threading.Tasks.Task{CoreWCF.Channels.Message}
    content.vb: Function RequestAsync(message As Message) As Task(Of Message)
  overload: CoreWCF.Channels.IRequestChannel.RequestAsync*
- uid: CoreWCF.Channels.IRequestChannel.RequestAsync(CoreWCF.Channels.Message,System.Threading.CancellationToken)
  commentId: M:CoreWCF.Channels.IRequestChannel.RequestAsync(CoreWCF.Channels.Message,System.Threading.CancellationToken)
  id: RequestAsync(CoreWCF.Channels.Message,System.Threading.CancellationToken)
  parent: CoreWCF.Channels.IRequestChannel
  langs:
  - csharp
  - vb
  name: RequestAsync(Message, CancellationToken)
  nameWithType: IRequestChannel.RequestAsync(Message, CancellationToken)
  fullName: CoreWCF.Channels.IRequestChannel.RequestAsync(CoreWCF.Channels.Message, System.Threading.CancellationToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Channels
  syntax:
    content: Task<Message> RequestAsync(Message message, CancellationToken token)
    parameters:
    - id: message
      type: CoreWCF.Channels.Message
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{CoreWCF.Channels.Message}
    content.vb: Function RequestAsync(message As Message, token As CancellationToken) As Task(Of Message)
  overload: CoreWCF.Channels.IRequestChannel.RequestAsync*
- uid: CoreWCF.Channels.IRequestChannel.RemoteAddress
  commentId: P:CoreWCF.Channels.IRequestChannel.RemoteAddress
  id: RemoteAddress
  parent: CoreWCF.Channels.IRequestChannel
  langs:
  - csharp
  - vb
  name: RemoteAddress
  nameWithType: IRequestChannel.RemoteAddress
  fullName: CoreWCF.Channels.IRequestChannel.RemoteAddress
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Channels
  summary: "Gets the remote address to which the request channel sends messages."
  syntax:
    content: EndpointAddress RemoteAddress { get; }
    parameters: []
    return:
      type: CoreWCF.EndpointAddress
      description: "The <xref:CoreWCF.EndpointAddress> to which the request channel sends messages."
    content.vb: ReadOnly Property RemoteAddress As EndpointAddress
  overload: CoreWCF.Channels.IRequestChannel.RemoteAddress*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  remarks: "The <xref:CoreWCF.EndpointAddress> serves as both the ultimate destination and the physical address if a <xref:CoreWCF.Channels.IRequestChannel.Via> is not specified. If the <xref:CoreWCF.Channels.IRequestChannel.Via> is specified, then that is the actual physical address to which the message is sent and through which the message must go to arrive at its destination."
- uid: CoreWCF.Channels.IRequestChannel.Via
  commentId: P:CoreWCF.Channels.IRequestChannel.Via
  id: Via
  parent: CoreWCF.Channels.IRequestChannel
  langs:
  - csharp
  - vb
  name: Via
  nameWithType: IRequestChannel.Via
  fullName: CoreWCF.Channels.IRequestChannel.Via
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Channels
  summary: Gets the transport address to which the request is send.
  syntax:
    content: Uri Via { get; }
    parameters: []
    return:
      type: System.Uri
      description: "The [Uri](https://learn.microsoft.com/en-us/dotnet/api/system.uri?view=net-7.0&viewFallbackFrom=dotnet-plat-ext-7.0) that contains the transport address to which the message is sent."
    content.vb: ReadOnly Property Via As Uri
  overload: CoreWCF.Channels.IRequestChannel.Via*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  remarks: "The <xref:CoreWCF.EndpointAddress> serves as both the ultimate destination and the physical address if a <xref:CoreWCF.Channels.IRequestChannel.Via> is not specified. If the <xref:CoreWCF.Channels.IRequestChannel.Via> is specified, then that is the actual physical address to which the message is sent and through which the message must go to arrive at its destination."
references:
- uid: CoreWCF.Channels
  commentId: N:CoreWCF.Channels
  isExternal: true
  name: CoreWCF.Channels
  nameWithType: CoreWCF.Channels
  fullName: CoreWCF.Channels
- uid: CoreWCF.Channels.IChannel.GetProperty``1
  commentId: M:CoreWCF.Channels.IChannel.GetProperty``1
  parent: CoreWCF.Channels.IChannel
  isExternal: true
  name: GetProperty<T>()
  nameWithType: IChannel.GetProperty<T>()
  fullName: CoreWCF.Channels.IChannel.GetProperty<T>()
  nameWithType.vb: IChannel.GetProperty(Of T)()
  fullName.vb: CoreWCF.Channels.IChannel.GetProperty(Of T)()
  name.vb: GetProperty(Of T)()
  spec.csharp:
  - uid: CoreWCF.Channels.IChannel.GetProperty``1
    name: GetProperty<T>
    nameWithType: IChannel.GetProperty<T>
    fullName: CoreWCF.Channels.IChannel.GetProperty<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Channels.IChannel.GetProperty``1
    name: GetProperty(Of T)
    nameWithType: IChannel.GetProperty(Of T)
    fullName: CoreWCF.Channels.IChannel.GetProperty(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Channels.IChannel.ChannelDispatcher
  commentId: P:CoreWCF.Channels.IChannel.ChannelDispatcher
  parent: CoreWCF.Channels.IChannel
  isExternal: true
  name: ChannelDispatcher
  nameWithType: IChannel.ChannelDispatcher
  fullName: CoreWCF.Channels.IChannel.ChannelDispatcher
- uid: CoreWCF.ICommunicationObject.Abort
  commentId: M:CoreWCF.ICommunicationObject.Abort
  parent: CoreWCF.ICommunicationObject
  isExternal: true
  name: Abort()
  nameWithType: ICommunicationObject.Abort()
  fullName: CoreWCF.ICommunicationObject.Abort()
  spec.csharp:
  - uid: CoreWCF.ICommunicationObject.Abort
    name: Abort
    nameWithType: ICommunicationObject.Abort
    fullName: CoreWCF.ICommunicationObject.Abort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.ICommunicationObject.Abort
    name: Abort
    nameWithType: ICommunicationObject.Abort
    fullName: CoreWCF.ICommunicationObject.Abort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.ICommunicationObject.CloseAsync
  commentId: M:CoreWCF.ICommunicationObject.CloseAsync
  parent: CoreWCF.ICommunicationObject
  isExternal: true
  name: CloseAsync()
  nameWithType: ICommunicationObject.CloseAsync()
  fullName: CoreWCF.ICommunicationObject.CloseAsync()
  spec.csharp:
  - uid: CoreWCF.ICommunicationObject.CloseAsync
    name: CloseAsync
    nameWithType: ICommunicationObject.CloseAsync
    fullName: CoreWCF.ICommunicationObject.CloseAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.ICommunicationObject.CloseAsync
    name: CloseAsync
    nameWithType: ICommunicationObject.CloseAsync
    fullName: CoreWCF.ICommunicationObject.CloseAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.ICommunicationObject.CloseAsync(System.Threading.CancellationToken)
  commentId: M:CoreWCF.ICommunicationObject.CloseAsync(System.Threading.CancellationToken)
  parent: CoreWCF.ICommunicationObject
  isExternal: true
  name: CloseAsync(CancellationToken)
  nameWithType: ICommunicationObject.CloseAsync(CancellationToken)
  fullName: CoreWCF.ICommunicationObject.CloseAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: CoreWCF.ICommunicationObject.CloseAsync(System.Threading.CancellationToken)
    name: CloseAsync
    nameWithType: ICommunicationObject.CloseAsync
    fullName: CoreWCF.ICommunicationObject.CloseAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.ICommunicationObject.CloseAsync(System.Threading.CancellationToken)
    name: CloseAsync
    nameWithType: ICommunicationObject.CloseAsync
    fullName: CoreWCF.ICommunicationObject.CloseAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.ICommunicationObject.OpenAsync
  commentId: M:CoreWCF.ICommunicationObject.OpenAsync
  parent: CoreWCF.ICommunicationObject
  isExternal: true
  name: OpenAsync()
  nameWithType: ICommunicationObject.OpenAsync()
  fullName: CoreWCF.ICommunicationObject.OpenAsync()
  spec.csharp:
  - uid: CoreWCF.ICommunicationObject.OpenAsync
    name: OpenAsync
    nameWithType: ICommunicationObject.OpenAsync
    fullName: CoreWCF.ICommunicationObject.OpenAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.ICommunicationObject.OpenAsync
    name: OpenAsync
    nameWithType: ICommunicationObject.OpenAsync
    fullName: CoreWCF.ICommunicationObject.OpenAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.ICommunicationObject.OpenAsync(System.Threading.CancellationToken)
  commentId: M:CoreWCF.ICommunicationObject.OpenAsync(System.Threading.CancellationToken)
  parent: CoreWCF.ICommunicationObject
  isExternal: true
  name: OpenAsync(CancellationToken)
  nameWithType: ICommunicationObject.OpenAsync(CancellationToken)
  fullName: CoreWCF.ICommunicationObject.OpenAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: CoreWCF.ICommunicationObject.OpenAsync(System.Threading.CancellationToken)
    name: OpenAsync
    nameWithType: ICommunicationObject.OpenAsync
    fullName: CoreWCF.ICommunicationObject.OpenAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.ICommunicationObject.OpenAsync(System.Threading.CancellationToken)
    name: OpenAsync
    nameWithType: ICommunicationObject.OpenAsync
    fullName: CoreWCF.ICommunicationObject.OpenAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.ICommunicationObject.State
  commentId: P:CoreWCF.ICommunicationObject.State
  parent: CoreWCF.ICommunicationObject
  isExternal: true
  name: State
  nameWithType: ICommunicationObject.State
  fullName: CoreWCF.ICommunicationObject.State
- uid: CoreWCF.ICommunicationObject.Closed
  commentId: E:CoreWCF.ICommunicationObject.Closed
  parent: CoreWCF.ICommunicationObject
  isExternal: true
  name: Closed
  nameWithType: ICommunicationObject.Closed
  fullName: CoreWCF.ICommunicationObject.Closed
- uid: CoreWCF.ICommunicationObject.Closing
  commentId: E:CoreWCF.ICommunicationObject.Closing
  parent: CoreWCF.ICommunicationObject
  isExternal: true
  name: Closing
  nameWithType: ICommunicationObject.Closing
  fullName: CoreWCF.ICommunicationObject.Closing
- uid: CoreWCF.ICommunicationObject.Faulted
  commentId: E:CoreWCF.ICommunicationObject.Faulted
  parent: CoreWCF.ICommunicationObject
  isExternal: true
  name: Faulted
  nameWithType: ICommunicationObject.Faulted
  fullName: CoreWCF.ICommunicationObject.Faulted
- uid: CoreWCF.ICommunicationObject.Opened
  commentId: E:CoreWCF.ICommunicationObject.Opened
  parent: CoreWCF.ICommunicationObject
  isExternal: true
  name: Opened
  nameWithType: ICommunicationObject.Opened
  fullName: CoreWCF.ICommunicationObject.Opened
- uid: CoreWCF.ICommunicationObject.Opening
  commentId: E:CoreWCF.ICommunicationObject.Opening
  parent: CoreWCF.ICommunicationObject
  isExternal: true
  name: Opening
  nameWithType: ICommunicationObject.Opening
  fullName: CoreWCF.ICommunicationObject.Opening
- uid: CoreWCF.Channels.IChannel
  commentId: T:CoreWCF.Channels.IChannel
  parent: CoreWCF.Channels
  isExternal: true
  name: IChannel
  nameWithType: IChannel
  fullName: CoreWCF.Channels.IChannel
- uid: CoreWCF.ICommunicationObject
  commentId: T:CoreWCF.ICommunicationObject
  parent: CoreWCF
  isExternal: true
  name: ICommunicationObject
  nameWithType: ICommunicationObject
  fullName: CoreWCF.ICommunicationObject
- uid: CoreWCF
  commentId: N:CoreWCF
  isExternal: true
  name: CoreWCF
  nameWithType: CoreWCF
  fullName: CoreWCF
- uid: CoreWCF.Channels.IRequestChannel.RequestAsync*
  commentId: Overload:CoreWCF.Channels.IRequestChannel.RequestAsync
  isExternal: true
  name: RequestAsync
  nameWithType: IRequestChannel.RequestAsync
  fullName: CoreWCF.Channels.IRequestChannel.RequestAsync
- uid: CoreWCF.Channels.Message
  commentId: T:CoreWCF.Channels.Message
  parent: CoreWCF.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: CoreWCF.Channels.Message
- uid: System.Threading.Tasks.Task{CoreWCF.Channels.Message}
  commentId: '!:System.Threading.Tasks.Task{CoreWCF.Channels.Message}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Message>
  nameWithType: Task<Message>
  fullName: System.Threading.Tasks.Task<CoreWCF.Channels.Message>
  nameWithType.vb: Task(Of Message)
  fullName.vb: System.Threading.Tasks.Task(Of CoreWCF.Channels.Message)
  name.vb: Task(Of Message)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreWCF.Channels.Message
    name: Message
    nameWithType: Message
    fullName: CoreWCF.Channels.Message
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreWCF.Channels.Message
    name: Message
    nameWithType: Message
    fullName: CoreWCF.Channels.Message
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: CoreWCF.Channels.IRequestChannel.RemoteAddress*
  commentId: Overload:CoreWCF.Channels.IRequestChannel.RemoteAddress
  isExternal: true
  name: RemoteAddress
  nameWithType: IRequestChannel.RemoteAddress
  fullName: CoreWCF.Channels.IRequestChannel.RemoteAddress
- uid: CoreWCF.EndpointAddress
  commentId: T:CoreWCF.EndpointAddress
  parent: CoreWCF
  isExternal: true
  name: EndpointAddress
  nameWithType: EndpointAddress
  fullName: CoreWCF.EndpointAddress
- uid: CoreWCF.Channels.IRequestChannel.Via*
  commentId: Overload:CoreWCF.Channels.IRequestChannel.Via
  isExternal: true
  name: Via
  nameWithType: IRequestChannel.Via
  fullName: CoreWCF.Channels.IRequestChannel.Via
- uid: System.Uri
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
