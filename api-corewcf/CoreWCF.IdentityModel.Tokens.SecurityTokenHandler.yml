### YamlMime:ManagedReference
items:
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  id: SecurityTokenHandler
  parent: CoreWCF.IdentityModel.Tokens
  children:
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.#ctor
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.Configuration
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(CoreWCF.IdentityModel.Tokens.SecurityToken,System.Boolean)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.TokenType
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,CoreWCF.IdentityModel.Tokens.SecurityToken)
  langs:
  - csharp
  - vb
  name: SecurityTokenHandler
  nameWithType: SecurityTokenHandler
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  type: Class
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nDefines the interface for a Security Token Handler.\n"
  syntax:
    content: 'public abstract class SecurityTokenHandler : Object'
    content.vb: >-
      Public MustInherit Class SecurityTokenHandler
          Inherits Object
  inheritance:
  - System.Object
  derivedClasses:
  - CoreWCF.IdentityModel.Tokens.EncryptedSecurityTokenHandler
  - CoreWCF.IdentityModel.Tokens.Saml2SecurityTokenHandler
  - CoreWCF.IdentityModel.Tokens.SamlSecurityTokenHandler
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  - CoreWCF.IdentityModel.Tokens.UserNameSecurityTokenHandler
  - CoreWCF.IdentityModel.Tokens.X509SecurityTokenHandler
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.#ctor
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.#ctor
  id: '#ctor'
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  - vb
  name: SecurityTokenHandler()
  nameWithType: SecurityTokenHandler.SecurityTokenHandler()
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.SecurityTokenHandler()
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nCreates an instance of <xref href=\"CoreWCF.IdentityModel.Tokens.SecurityTokenHandler\" data-throw-if-not-resolved=\"false\"></xref>"
  syntax:
    content: protected SecurityTokenHandler()
    content.vb: Protected Sub New
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  id: CanReadToken(System.Xml.XmlReader)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  - vb
  name: CanReadToken(XmlReader)
  nameWithType: SecurityTokenHandler.CanReadToken(XmlReader)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nIndicates whether the current XML element can be read as a token \nof the type handled by this instance.\n"
  syntax:
    content: public virtual bool CanReadToken(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "An XML reader positioned at a start \n      element. The reader should not be advanced."
    return:
      type: System.Boolean
      description: '&apos;True&apos; if the ReadToken method can the element.'
    content.vb: Public Overridable Function CanReadToken(reader As XmlReader) As Boolean
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)
  id: CanReadToken(System.String)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  - vb
  name: CanReadToken(String)
  nameWithType: SecurityTokenHandler.CanReadToken(String)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nIndicates whether the current token string can be read as a token \nof the type handled by this instance.\n"
  syntax:
    content: public virtual bool CanReadToken(string tokenString)
    parameters:
    - id: tokenString
      type: System.String
      description: The token string thats needs to be read.
    return:
      type: System.Boolean
      description: '&apos;True&apos; if the ReadToken method can parse the token string.'
    content.vb: Public Overridable Function CanReadToken(tokenString As String) As Boolean
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  id: ReadToken(System.Xml.XmlReader)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  - vb
  name: ReadToken(XmlReader)
  nameWithType: SecurityTokenHandler.ReadToken(XmlReader)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nDeserializes from XML a token of the type handled by this instance.\n"
  syntax:
    content: public virtual SecurityToken ReadToken(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "An XML reader positioned at the token&apos;s start \n      element."
    return:
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
      description: SecurityToken instance.
    content.vb: Public Overridable Function ReadToken(reader As XmlReader) As SecurityToken
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
  id: ReadToken(System.Xml.XmlReader,CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  - vb
  name: ReadToken(XmlReader, SecurityTokenResolver)
  nameWithType: SecurityTokenHandler.ReadToken(XmlReader, SecurityTokenResolver)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader, CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nDeserializes from XML a token of the type handled by this instance.\n"
  syntax:
    content: public virtual SecurityToken ReadToken(XmlReader reader, SecurityTokenResolver tokenResolver)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "An XML reader positioned at the token&apos;s start \n      element."
    - id: tokenResolver
      type: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
      description: The SecrityTokenResolver that contains out-of-band and cached tokens.
    return:
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
      description: SecurityToken instance.
    content.vb: Public Overridable Function ReadToken(reader As XmlReader, tokenResolver As SecurityTokenResolver) As SecurityToken
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)
  id: ReadToken(System.String)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  - vb
  name: ReadToken(String)
  nameWithType: SecurityTokenHandler.ReadToken(String)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nDeserializes from string a token of the type handled by this instance.\n"
  syntax:
    content: public virtual SecurityToken ReadToken(string tokenString)
    parameters:
    - id: tokenString
      type: System.String
      description: The string to be deserialized.
    return:
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
      description: SecurityToken instance which represents the serialized token.
    content.vb: Public Overridable Function ReadToken(tokenString As String) As SecurityToken
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,CoreWCF.IdentityModel.Tokens.SecurityToken)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,CoreWCF.IdentityModel.Tokens.SecurityToken)
  id: WriteToken(System.Xml.XmlWriter,CoreWCF.IdentityModel.Tokens.SecurityToken)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  - vb
  name: WriteToken(XmlWriter, SecurityToken)
  nameWithType: SecurityTokenHandler.WriteToken(XmlWriter, SecurityToken)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter, CoreWCF.IdentityModel.Tokens.SecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nSerializes to XML a token of the type handled by this instance.\n"
  syntax:
    content: public virtual void WriteToken(XmlWriter writer, SecurityToken token)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: The XML writer.
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
      description: A token of type TokenType.
    content.vb: Public Overridable Sub WriteToken(writer As XmlWriter, token As SecurityToken)
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  id: WriteToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  - vb
  name: WriteToken(SecurityToken)
  nameWithType: SecurityTokenHandler.WriteToken(SecurityToken)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nSerializes to string a token of the type handled by this instance.\n"
  syntax:
    content: public virtual string WriteToken(SecurityToken token)
    parameters:
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
      description: A token of type TokenType.
    return:
      type: System.String
      description: The serialized token.
    content.vb: Public Overridable Function WriteToken(token As SecurityToken) As String
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)
  id: CanReadKeyIdentifierClause(System.Xml.XmlReader)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  - vb
  name: CanReadKeyIdentifierClause(XmlReader)
  nameWithType: SecurityTokenHandler.CanReadKeyIdentifierClause(XmlReader)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nIndicates if the current XML element is pointing to a KeyIdentifierClause that\ncan be serialized by this instance.\n"
  syntax:
    content: public virtual bool CanReadKeyIdentifierClause(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "An XML reader positioned at the start element. \n      The reader should not be advanced."
    return:
      type: System.Boolean
      description: true if the ReadKeyIdentifierClause can read the element.
    content.vb: Public Overridable Function CanReadKeyIdentifierClause(reader As XmlReader) As Boolean
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)
  id: ReadKeyIdentifierClause(System.Xml.XmlReader)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  - vb
  name: ReadKeyIdentifierClause(XmlReader)
  nameWithType: SecurityTokenHandler.ReadKeyIdentifierClause(XmlReader)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nDeserializes the XML to a KeyIdentifierClause that references a token \nhandled by this instance.\n"
  syntax:
    content: public virtual SecurityKeyIdentifierClause ReadKeyIdentifierClause(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: An XML reader positioned at the KeyIdentifierClause start element.
    return:
      type: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
      description: SecurityKeyIdentifierClause instance.
    content.vb: Public Overridable Function ReadKeyIdentifierClause(reader As XmlReader) As SecurityKeyIdentifierClause
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  id: CanWriteKeyIdentifierClause(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  - vb
  name: CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause)
  nameWithType: SecurityTokenHandler.CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nIndicates if the given SecurityKeyIdentifierClause can be serialized by this\ninstance.\n"
  syntax:
    content: public virtual bool CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause securityKeyIdentifierClause)
    parameters:
    - id: securityKeyIdentifierClause
      type: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
      description: SecurityKeyIdentifierClause to be serialized.
    return:
      type: System.Boolean
      description: true if the given SecurityKeyIdentifierClause can be serialized.
    content.vb: Public Overridable Function CanWriteKeyIdentifierClause(securityKeyIdentifierClause As SecurityKeyIdentifierClause) As Boolean
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  id: WriteKeyIdentifierClause(System.Xml.XmlWriter,CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  - vb
  name: WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause)
  nameWithType: SecurityTokenHandler.WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter, CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nSerializes to XML a SecurityKeyIdentifierClause that this instance supports.\n"
  syntax:
    content: public virtual void WriteKeyIdentifierClause(XmlWriter writer, SecurityKeyIdentifierClause securityKeyIdentifierClause)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: The XML writer.
    - id: securityKeyIdentifierClause
      type: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
      description: The SecurityKeyIdentifierClause to be used to serialize the token.
    content.vb: Public Overridable Sub WriteKeyIdentifierClause(writer As XmlWriter, securityKeyIdentifierClause As SecurityKeyIdentifierClause)
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor)
  id: CreateToken(CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  - vb
  name: CreateToken(SecurityTokenDescriptor)
  nameWithType: SecurityTokenHandler.CreateToken(SecurityTokenDescriptor)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nCalled by the STS to create a token given a token descriptor. \n"
  syntax:
    content: public virtual SecurityToken CreateToken(SecurityTokenDescriptor tokenDescriptor)
    parameters:
    - id: tokenDescriptor
      type: CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor
      description: "Describes the token; properties such \n      as ValidFrom, AppliesTo, EncryptingCredentials, Claims, etc., are filled in \n      before the call to create token. "
    return:
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
      description: A SecurityToken that matches the properties of the token descriptor.
    content.vb: Public Overridable Function CreateToken(tokenDescriptor As SecurityTokenDescriptor) As SecurityToken
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateToken*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(CoreWCF.IdentityModel.Tokens.SecurityToken,System.Boolean)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(CoreWCF.IdentityModel.Tokens.SecurityToken,System.Boolean)
  id: CreateSecurityTokenReference(CoreWCF.IdentityModel.Tokens.SecurityToken,System.Boolean)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  - vb
  name: CreateSecurityTokenReference(SecurityToken, Boolean)
  nameWithType: SecurityTokenHandler.CreateSecurityTokenReference(SecurityToken, Boolean)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(CoreWCF.IdentityModel.Tokens.SecurityToken, System.Boolean)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nCreates the security token reference for tokens handled by this instance.\n"
  syntax:
    content: public virtual SecurityKeyIdentifierClause CreateSecurityTokenReference(SecurityToken token, bool attached)
    parameters:
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
      description: >-
        The SecurityToken instance for which the references needs to be
              created.
    - id: attached
      type: System.Boolean
      description: >-
        Boolean that indicates if a attached or unattached
              reference needs to be created.
    return:
      type: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
      description: A SecurityKeyIdentifierClause that identifies the given token.
    content.vb: Public Overridable Function CreateSecurityTokenReference(token As SecurityToken, attached As Boolean) As SecurityKeyIdentifierClause
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers
  id: GetTokenTypeIdentifiers
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  - vb
  name: GetTokenTypeIdentifiers()
  nameWithType: SecurityTokenHandler.GetTokenTypeIdentifiers()
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers()
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nThe URI used in requests to identify a token of the type handled\nby this instance. \n"
  remarks: "\nFor example, this should be the URI value used \nin the RequestSecurityToken&apos;s TokenType element to request this\nsort of token.\n"
  syntax:
    content: public abstract string[] GetTokenTypeIdentifiers()
    return:
      type: System.String[]
      description: The set of URIs that identify the token this handler supports.
    content.vb: Public MustOverride Function GetTokenTypeIdentifiers As String()
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  id: ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  - vb
  name: ValidateToken(SecurityToken)
  nameWithType: SecurityTokenHandler.ValidateToken(SecurityToken)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nValidates a <xref href=\"CoreWCF.IdentityModel.Tokens.SecurityToken\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: Derived types will validate specific tokens.
  syntax:
    content: public virtual ReadOnlyCollection<ClaimsIdentity> ValidateToken(SecurityToken token)
    parameters:
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
      description: The <xref href="CoreWCF.IdentityModel.Tokens.SecurityToken" data-throw-if-not-resolved="false"></xref> to validate.
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}
      description: The <xref href="System.Collections.ObjectModel.ReadOnlyCollection%601" data-throw-if-not-resolved="false"></xref> of <xref href="System.Security.Claims.ClaimsIdentity" data-throw-if-not-resolved="false"></xref> representing the identities contained in the token.
    content.vb: Public Overridable Function ValidateToken(token As SecurityToken) As ReadOnlyCollection(Of ClaimsIdentity)
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  id: DetectReplayedToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  - vb
  name: DetectReplayedToken(SecurityToken)
  nameWithType: SecurityTokenHandler.DetectReplayedToken(SecurityToken)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nThrows if a token is detected as being replayed.\nOverride this method in your derived class to detect replays.\n"
  syntax:
    content: protected virtual void DetectReplayedToken(SecurityToken token)
    parameters:
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
      description: The token to check for replay.
    content.vb: Protected Overridable Sub DetectReplayedToken(token As SecurityToken)
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken
  commentId: P:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken
  id: CanValidateToken
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  - vb
  name: CanValidateToken
  nameWithType: SecurityTokenHandler.CanValidateToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nGets a value indicating whether this handler supports validation of tokens \nhandled by this instance.\n"
  syntax:
    content: public virtual bool CanValidateToken { get; }
    parameters: []
    return:
      type: System.Boolean
      description: >-
        &apos;True&apos; if the instance is capable of SecurityToken

        validation.
    content.vb: Public Overridable ReadOnly Property CanValidateToken As Boolean
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken
  commentId: P:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken
  id: CanWriteToken
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  - vb
  name: CanWriteToken
  nameWithType: SecurityTokenHandler.CanWriteToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nGets a value indicating whether the class provides serialization functionality to serialize token handled \nby this instance.\n"
  syntax:
    content: public virtual bool CanWriteToken { get; }
    parameters: []
    return:
      type: System.Boolean
      description: true if the WriteToken method can serialize this token.
    content.vb: Public Overridable ReadOnly Property CanWriteToken As Boolean
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.Configuration
  commentId: P:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.Configuration
  id: Configuration
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  - vb
  name: Configuration
  nameWithType: SecurityTokenHandler.Configuration
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.Configuration
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nGets or sets the <xref href=\"CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration\" data-throw-if-not-resolved=\"false\"></xref>"
  syntax:
    content: public SecurityTokenHandlerConfiguration Configuration { get; set; }
    parameters: []
    return:
      type: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration
    content.vb: Public Property Configuration As SecurityTokenHandlerConfiguration
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.Configuration*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection
  commentId: P:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection
  id: ContainingCollection
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  - vb
  name: ContainingCollection
  nameWithType: SecurityTokenHandler.ContainingCollection
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nGets or sets the SecurityTokenHandlerCollection that this SecurityTokenHandler\nis part of. This property should never be set directly. When the SecurityTokenHandler\nis added to a collection this property is automatically set.\n"
  syntax:
    content: public SecurityTokenHandlerCollection ContainingCollection { get; }
    parameters: []
    return:
      type: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
    content.vb: Public ReadOnly Property ContainingCollection As SecurityTokenHandlerCollection
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.TokenType
  commentId: P:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.TokenType
  id: TokenType
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  langs:
  - csharp
  - vb
  name: TokenType
  nameWithType: SecurityTokenHandler.TokenType
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.TokenType
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nGets the System.Type of the SecurityToken this instance handles.\n"
  syntax:
    content: public abstract Type TokenType { get; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public MustOverride ReadOnly Property TokenType As Type
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.TokenType*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
references:
- uid: CoreWCF.IdentityModel.Tokens
  commentId: N:CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: CoreWCF.IdentityModel.Tokens
  nameWithType: CoreWCF.IdentityModel.Tokens
  fullName: CoreWCF.IdentityModel.Tokens
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.#ctor*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.#ctor
  isExternal: true
  name: SecurityTokenHandler
  nameWithType: SecurityTokenHandler.SecurityTokenHandler
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.SecurityTokenHandler
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken
  isExternal: true
  name: CanReadToken
  nameWithType: SecurityTokenHandler.CanReadToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken
- uid: System.Xml.XmlReader
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken
  isExternal: true
  name: ReadToken
  nameWithType: SecurityTokenHandler.ReadToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken
- uid: CoreWCF.IdentityModel.Tokens.SecurityToken
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityToken
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityToken
  nameWithType: SecurityToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  commentId: T:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  parent: CoreWCF.IdentityModel.Selectors
  isExternal: true
  name: SecurityTokenResolver
  nameWithType: SecurityTokenResolver
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
- uid: CoreWCF.IdentityModel.Selectors
  commentId: N:CoreWCF.IdentityModel.Selectors
  isExternal: true
  name: CoreWCF.IdentityModel.Selectors
  nameWithType: CoreWCF.IdentityModel.Selectors
  fullName: CoreWCF.IdentityModel.Selectors
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken
  isExternal: true
  name: WriteToken
  nameWithType: SecurityTokenHandler.WriteToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken
- uid: System.Xml.XmlWriter
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause
  isExternal: true
  name: CanReadKeyIdentifierClause
  nameWithType: SecurityTokenHandler.CanReadKeyIdentifierClause
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause
  isExternal: true
  name: ReadKeyIdentifierClause
  nameWithType: SecurityTokenHandler.ReadKeyIdentifierClause
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause
- uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
  commentId: T:CoreWCF.IdentityModel.SecurityKeyIdentifierClause
  parent: CoreWCF.IdentityModel
  isExternal: true
  name: SecurityKeyIdentifierClause
  nameWithType: SecurityKeyIdentifierClause
  fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
- uid: CoreWCF.IdentityModel
  commentId: N:CoreWCF.IdentityModel
  isExternal: true
  name: CoreWCF.IdentityModel
  nameWithType: CoreWCF.IdentityModel
  fullName: CoreWCF.IdentityModel
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause
  isExternal: true
  name: CanWriteKeyIdentifierClause
  nameWithType: SecurityTokenHandler.CanWriteKeyIdentifierClause
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause
  isExternal: true
  name: WriteKeyIdentifierClause
  nameWithType: SecurityTokenHandler.WriteKeyIdentifierClause
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateToken*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateToken
  isExternal: true
  name: CreateToken
  nameWithType: SecurityTokenHandler.CreateToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateToken
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityTokenDescriptor
  nameWithType: SecurityTokenDescriptor
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference
  isExternal: true
  name: CreateSecurityTokenReference
  nameWithType: SecurityTokenHandler.CreateSecurityTokenReference
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers
  isExternal: true
  name: GetTokenTypeIdentifiers
  nameWithType: SecurityTokenHandler.GetTokenTypeIdentifiers
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken
  isExternal: true
  name: ValidateToken
  nameWithType: SecurityTokenHandler.ValidateToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}
  commentId: '!:System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}'
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<ClaimsIdentity>
  nameWithType: ReadOnlyCollection<ClaimsIdentity>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Security.Claims.ClaimsIdentity>
  nameWithType.vb: ReadOnlyCollection(Of ClaimsIdentity)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.Security.Claims.ClaimsIdentity)
  name.vb: ReadOnlyCollection(Of ClaimsIdentity)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: System.Security.Claims.ClaimsIdentity
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: System.Security.Claims.ClaimsIdentity
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<>
  nameWithType: ReadOnlyCollection<>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<>
  nameWithType.vb: ReadOnlyCollection(Of )
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of )
  name.vb: ReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken
  isExternal: true
  name: DetectReplayedToken
  nameWithType: SecurityTokenHandler.DetectReplayedToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken
  isExternal: true
  name: CanValidateToken
  nameWithType: SecurityTokenHandler.CanValidateToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken
  isExternal: true
  name: CanWriteToken
  nameWithType: SecurityTokenHandler.CanWriteToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.Configuration*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.Configuration
  isExternal: true
  name: Configuration
  nameWithType: SecurityTokenHandler.Configuration
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.Configuration
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityTokenHandlerConfiguration
  nameWithType: SecurityTokenHandlerConfiguration
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection
  isExternal: true
  name: ContainingCollection
  nameWithType: SecurityTokenHandler.ContainingCollection
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityTokenHandlerCollection
  nameWithType: SecurityTokenHandlerCollection
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.TokenType*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.TokenType
  isExternal: true
  name: TokenType
  nameWithType: SecurityTokenHandler.TokenType
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.TokenType
- uid: System.Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
