### YamlMime:ManagedReference
items:
- uid: CoreWCF.Runtime.AsyncManualResetEvent
  commentId: T:CoreWCF.Runtime.AsyncManualResetEvent
  id: AsyncManualResetEvent
  parent: CoreWCF.Runtime
  children:
  - CoreWCF.Runtime.AsyncManualResetEvent.#ctor
  - CoreWCF.Runtime.AsyncManualResetEvent.Dispose
  - CoreWCF.Runtime.AsyncManualResetEvent.Reset
  - CoreWCF.Runtime.AsyncManualResetEvent.Set
  - CoreWCF.Runtime.AsyncManualResetEvent.WaitAsync
  - CoreWCF.Runtime.AsyncManualResetEvent.WaitAsync(System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: AsyncManualResetEvent
  nameWithType: AsyncManualResetEvent
  fullName: CoreWCF.Runtime.AsyncManualResetEvent
  type: Class
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Runtime
  syntax:
    content: 'public class AsyncManualResetEvent : Object'
    content.vb: >-
      Public Class AsyncManualResetEvent
          Inherits Object
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CoreWCF.Runtime.AsyncManualResetEvent.WaitAsync
  commentId: M:CoreWCF.Runtime.AsyncManualResetEvent.WaitAsync
  id: WaitAsync
  parent: CoreWCF.Runtime.AsyncManualResetEvent
  langs:
  - csharp
  - vb
  name: WaitAsync()
  nameWithType: AsyncManualResetEvent.WaitAsync()
  fullName: CoreWCF.Runtime.AsyncManualResetEvent.WaitAsync()
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Runtime
  syntax:
    content: public Task WaitAsync()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function WaitAsync As Task
  overload: CoreWCF.Runtime.AsyncManualResetEvent.WaitAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.Runtime.AsyncManualResetEvent.WaitAsync(System.Threading.CancellationToken)
  commentId: M:CoreWCF.Runtime.AsyncManualResetEvent.WaitAsync(System.Threading.CancellationToken)
  id: WaitAsync(System.Threading.CancellationToken)
  parent: CoreWCF.Runtime.AsyncManualResetEvent
  langs:
  - csharp
  - vb
  name: WaitAsync(CancellationToken)
  nameWithType: AsyncManualResetEvent.WaitAsync(CancellationToken)
  fullName: CoreWCF.Runtime.AsyncManualResetEvent.WaitAsync(System.Threading.CancellationToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Runtime
  syntax:
    content: public Task<bool> WaitAsync(CancellationToken token)
    parameters:
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
    content.vb: Public Function WaitAsync(token As CancellationToken) As Task(Of Boolean)
  overload: CoreWCF.Runtime.AsyncManualResetEvent.WaitAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.Runtime.AsyncManualResetEvent.Set
  commentId: M:CoreWCF.Runtime.AsyncManualResetEvent.Set
  id: Set
  parent: CoreWCF.Runtime.AsyncManualResetEvent
  langs:
  - csharp
  - vb
  name: Set()
  nameWithType: AsyncManualResetEvent.Set()
  fullName: CoreWCF.Runtime.AsyncManualResetEvent.Set()
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Runtime
  syntax:
    content: public void Set()
    content.vb: Public Sub Set
  overload: CoreWCF.Runtime.AsyncManualResetEvent.Set*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.Runtime.AsyncManualResetEvent.Reset
  commentId: M:CoreWCF.Runtime.AsyncManualResetEvent.Reset
  id: Reset
  parent: CoreWCF.Runtime.AsyncManualResetEvent
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: AsyncManualResetEvent.Reset()
  fullName: CoreWCF.Runtime.AsyncManualResetEvent.Reset()
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Runtime
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  overload: CoreWCF.Runtime.AsyncManualResetEvent.Reset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.Runtime.AsyncManualResetEvent.Dispose
  commentId: M:CoreWCF.Runtime.AsyncManualResetEvent.Dispose
  id: Dispose
  parent: CoreWCF.Runtime.AsyncManualResetEvent
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: AsyncManualResetEvent.Dispose()
  fullName: CoreWCF.Runtime.AsyncManualResetEvent.Dispose()
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Runtime
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: CoreWCF.Runtime.AsyncManualResetEvent.Dispose*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.Runtime.AsyncManualResetEvent.#ctor
  commentId: M:CoreWCF.Runtime.AsyncManualResetEvent.#ctor
  id: '#ctor'
  parent: CoreWCF.Runtime.AsyncManualResetEvent
  langs:
  - csharp
  - vb
  name: AsyncManualResetEvent()
  nameWithType: AsyncManualResetEvent.AsyncManualResetEvent()
  fullName: CoreWCF.Runtime.AsyncManualResetEvent.AsyncManualResetEvent()
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Runtime
  syntax:
    content: public AsyncManualResetEvent()
    content.vb: Public Sub New
  overload: CoreWCF.Runtime.AsyncManualResetEvent.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: CoreWCF.Runtime
  commentId: N:CoreWCF.Runtime
  isExternal: true
  name: CoreWCF.Runtime
  nameWithType: CoreWCF.Runtime
  fullName: CoreWCF.Runtime
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CoreWCF.Runtime.AsyncManualResetEvent.WaitAsync*
  commentId: Overload:CoreWCF.Runtime.AsyncManualResetEvent.WaitAsync
  isExternal: true
  name: WaitAsync
  nameWithType: AsyncManualResetEvent.WaitAsync
  fullName: CoreWCF.Runtime.AsyncManualResetEvent.WaitAsync
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: '!:System.Threading.Tasks.Task{System.Boolean}'
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Runtime.AsyncManualResetEvent.Set*
  commentId: Overload:CoreWCF.Runtime.AsyncManualResetEvent.Set
  isExternal: true
  name: Set
  nameWithType: AsyncManualResetEvent.Set
  fullName: CoreWCF.Runtime.AsyncManualResetEvent.Set
- uid: CoreWCF.Runtime.AsyncManualResetEvent.Reset*
  commentId: Overload:CoreWCF.Runtime.AsyncManualResetEvent.Reset
  isExternal: true
  name: Reset
  nameWithType: AsyncManualResetEvent.Reset
  fullName: CoreWCF.Runtime.AsyncManualResetEvent.Reset
- uid: CoreWCF.Runtime.AsyncManualResetEvent.Dispose*
  commentId: Overload:CoreWCF.Runtime.AsyncManualResetEvent.Dispose
  isExternal: true
  name: Dispose
  nameWithType: AsyncManualResetEvent.Dispose
  fullName: CoreWCF.Runtime.AsyncManualResetEvent.Dispose
- uid: CoreWCF.Runtime.AsyncManualResetEvent.#ctor*
  commentId: Overload:CoreWCF.Runtime.AsyncManualResetEvent.#ctor
  isExternal: true
  name: AsyncManualResetEvent
  nameWithType: AsyncManualResetEvent.AsyncManualResetEvent
  fullName: CoreWCF.Runtime.AsyncManualResetEvent.AsyncManualResetEvent
