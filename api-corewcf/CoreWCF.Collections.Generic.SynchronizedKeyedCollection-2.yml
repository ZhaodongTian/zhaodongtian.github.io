### YamlMime:ManagedReference
items:
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2
  commentId: T:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2
  id: SynchronizedKeyedCollection`2
  parent: CoreWCF.Collections.Generic
  children:
  - CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.#ctor
  - CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.#ctor(System.Object)
  - CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.#ctor(System.Object,System.Collections.Generic.IEqualityComparer{`0})
  - CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.#ctor(System.Object,System.Collections.Generic.IEqualityComparer{`0},System.Int32)
  - CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.ChangeItemKey(`1,`0)
  - CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.ClearItems
  - CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.Contains(`0)
  - CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.Dictionary
  - CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.GetKeyForItem(`1)
  - CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.InsertItem(System.Int32,`1)
  - CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.Item(`0)
  - CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.Remove(`0)
  - CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.RemoveItem(System.Int32)
  - CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.SetItem(System.Int32,`1)
  langs:
  - csharp
  - vb
  name: SynchronizedKeyedCollection<K, T>
  nameWithType: SynchronizedKeyedCollection<K, T>
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>
  type: Class
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: Provides a thread-safe collection that contains objects of a type specified by a generic parameter and that are grouped by keys.
  remarks: "Inherited by <xref:CoreWCF.UriSchemeKeyedCollection> for use hosting.  \n\n"
  syntax:
    content: 'public abstract class SynchronizedKeyedCollection<K, T> : SynchronizedCollection<T>'
    typeParameters:
    - id: K
      description: The type of the key used to group the items contained in the collection.
    - id: T
      description: "The type of items contained in the thread-safe, keyed collection."
    content.vb: >-
      Public MustInherit Class SynchronizedKeyedCollection(Of K, T)
          Inherits SynchronizedCollection(Of T)
  inheritance:
  - System.Object
  - CoreWCF.Collections.Generic.SynchronizedCollection{{T}}
  derivedClasses:
  - CoreWCF.UriSchemeKeyedCollection
  implements:
  - System.Collections.Generic.IList{{T}}
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  - System.Collections.IList
  - System.Collections.ICollection
  inheritedMembers:
  - CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.Add({T})
  - CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.Clear
  - CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.CopyTo({T}[],System.Int32)
  - CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.Contains({T})
  - CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.GetEnumerator
  - CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.IndexOf({T})
  - CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.Insert(System.Int32,{T})
  - CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.Remove({T})
  - CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.RemoveAt(System.Int32)
  - CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.Count
  - CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.Items
  - CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.SyncRoot
  - CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.Item(System.Int32)
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T)
  name.vb: SynchronizedKeyedCollection(Of K, T)
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.#ctor
  commentId: M:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.#ctor
  id: '#ctor'
  parent: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2
  langs:
  - csharp
  - vb
  name: SynchronizedKeyedCollection()
  nameWithType: SynchronizedKeyedCollection<K, T>.SynchronizedKeyedCollection()
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.SynchronizedKeyedCollection()
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: "Initializes a new instance of the <xref:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2> class."
  syntax:
    content: protected SynchronizedKeyedCollection()
    content.vb: Protected Sub New
  overload: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.#ctor*
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).SynchronizedKeyedCollection()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).SynchronizedKeyedCollection()
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.#ctor(System.Object)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2
  langs:
  - csharp
  - vb
  name: SynchronizedKeyedCollection(Object)
  nameWithType: SynchronizedKeyedCollection<K, T>.SynchronizedKeyedCollection(Object)
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.SynchronizedKeyedCollection(System.Object)
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: "Initializes a new instance of the <xref:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2> class with access synchronized by an explicitly specified object."
  syntax:
    content: protected SynchronizedKeyedCollection(object syncRoot)
    parameters:
    - id: syncRoot
      type: System.Object
      description: "The object used to synchronize access to the thread-safe collection."
    content.vb: Protected Sub New(syncRoot As Object)
  overload: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.#ctor*
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).SynchronizedKeyedCollection(Object)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).SynchronizedKeyedCollection(System.Object)
  remarks: "If multiple instances of the <xref:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2> are created using the same syncRoot, then access is protected across all instances."
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.#ctor(System.Object,System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.#ctor(System.Object,System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Object,System.Collections.Generic.IEqualityComparer{`0})'
  parent: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2
  langs:
  - csharp
  - vb
  name: SynchronizedKeyedCollection(Object, IEqualityComparer<K>)
  nameWithType: SynchronizedKeyedCollection<K, T>.SynchronizedKeyedCollection(Object, IEqualityComparer<K>)
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.SynchronizedKeyedCollection(System.Object, System.Collections.Generic.IEqualityComparer<K>)
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: "Initializes a new instance of the <xref:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2> class with access synchronized by an explicitly specified object and with keys compared in a specified way."
  syntax:
    content: protected SynchronizedKeyedCollection(object syncRoot, IEqualityComparer<K> comparer)
    parameters:
    - id: syncRoot
      type: System.Object
      description: "The object used to synchronize access to the thread-safe collection."
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{K}}
      description: "The [IEqualityComparer\\<T\\>](https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.iequalitycomparer-1?view=netframework-4.8.1) of type `K` used to compare key objects of type K for equality."
    content.vb: Protected Sub New(syncRoot As Object, comparer As IEqualityComparer(Of K))
  overload: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.#ctor*
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).SynchronizedKeyedCollection(Object, IEqualityComparer(Of K))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).SynchronizedKeyedCollection(System.Object, System.Collections.Generic.IEqualityComparer(Of K))
  name.vb: SynchronizedKeyedCollection(Object, IEqualityComparer(Of K))
  remarks: "The generic parameter `K` used by the [IEqualityComparer\\<T\\>](https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.iequalitycomparer-1?view=netframework-4.8.1) input parameter is the first generic parameter for this class. This allows us to compare keys for equality in a customized way that can be used, for example, to optimize on the most critical aspects of the comparison."
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.#ctor(System.Object,System.Collections.Generic.IEqualityComparer{`0},System.Int32)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.#ctor(System.Object,System.Collections.Generic.IEqualityComparer{`0},System.Int32)
  id: '#ctor(System.Object,System.Collections.Generic.IEqualityComparer{`0},System.Int32)'
  parent: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2
  langs:
  - csharp
  - vb
  name: SynchronizedKeyedCollection(Object, IEqualityComparer<K>, Int32)
  nameWithType: SynchronizedKeyedCollection<K, T>.SynchronizedKeyedCollection(Object, IEqualityComparer<K>, Int32)
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.SynchronizedKeyedCollection(System.Object, System.Collections.Generic.IEqualityComparer<K>, System.Int32)
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: "Initializes a new instance of the <xref:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2> class with access synchronized by an explicitly specified object and with keys compared in a specified way."
  syntax:
    content: protected SynchronizedKeyedCollection(object syncRoot, IEqualityComparer<K> comparer, int dictionaryCreationThreshold)
    parameters:
    - id: syncRoot
      type: System.Object
      description: "The object used to synchronize access to the thread-safe collection."
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{K}}
      description: "The [IEqualityComparer\\<T\\>](https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.iequalitycomparer-1?view=netframework-4.8.1) of type `K` used to compare key objects of type `K` for equality."
    - id: dictionaryCreationThreshold
      type: System.Int32
      description: "The number of items required to create a dictionary for the collection."
    content.vb: Protected Sub New(syncRoot As Object, comparer As IEqualityComparer(Of K), dictionaryCreationThreshold As Integer)
  overload: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.#ctor*
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).SynchronizedKeyedCollection(Object, IEqualityComparer(Of K), Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).SynchronizedKeyedCollection(System.Object, System.Collections.Generic.IEqualityComparer(Of K), System.Int32)
  name.vb: SynchronizedKeyedCollection(Object, IEqualityComparer(Of K), Int32)
  remarks: "Setting `dictionaryCreationThreshold` to -1 assigns the [MaxValue](https://learn.microsoft.com/en-us/dotnet/api/system.int32.maxvalue?view=netframework-4.8.1) (2,147,483,647; hexadecimal 0x7FFFFFFF) to it."
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.ChangeItemKey(`1,`0)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.ChangeItemKey(`1,`0)
  id: ChangeItemKey(`1,`0)
  parent: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2
  langs:
  - csharp
  - vb
  name: ChangeItemKey(T, K)
  nameWithType: SynchronizedKeyedCollection<K, T>.ChangeItemKey(T, K)
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.ChangeItemKey(T, K)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: Changes the key for a specified item in the synchronized collection.
  syntax:
    content: protected void ChangeItemKey(T item, K newKey)
    parameters:
    - id: item
      type: '{T}'
      description: "The item whose key is being changed."
    - id: newKey
      type: '{K}'
      description: "The new key for the specified item."
    content.vb: Protected Sub ChangeItemKey(item As T, newKey As K)
  overload: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.ChangeItemKey*
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).ChangeItemKey(T, K)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).ChangeItemKey(T, K)
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.ClearItems
  commentId: M:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.ClearItems
  id: ClearItems
  parent: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2
  langs:
  - csharp
  - vb
  name: ClearItems()
  nameWithType: SynchronizedKeyedCollection<K, T>.ClearItems()
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.ClearItems()
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: Clears all items from the collection.
  syntax:
    content: protected override void ClearItems()
    content.vb: Protected Overrides Sub ClearItems
  overridden: CoreWCF.Collections.Generic.SynchronizedCollection`1.ClearItems
  overload: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.ClearItems*
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).ClearItems()
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).ClearItems()
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.Contains(`0)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.Contains(`0)
  id: Contains(`0)
  parent: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2
  langs:
  - csharp
  - vb
  name: Contains(K)
  nameWithType: SynchronizedKeyedCollection<K, T>.Contains(K)
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.Contains(K)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: "Returns a value that indicates whether the collection contains an item with a specified key."
  syntax:
    content: public bool Contains(K key)
    parameters:
    - id: key
      type: '{K}'
      description: "The key of type `K` being tested for."
    return:
      type: System.Boolean
      description: "`true` if the collection contains an item with the key specified; otherwise, `false`."
    content.vb: Public Function Contains(key As K) As Boolean
  overload: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.Contains*
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).Contains(K)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).Contains(K)
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.GetKeyForItem(`1)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.GetKeyForItem(`1)
  id: GetKeyForItem(`1)
  parent: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2
  langs:
  - csharp
  - vb
  name: GetKeyForItem(T)
  nameWithType: SynchronizedKeyedCollection<K, T>.GetKeyForItem(T)
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.GetKeyForItem(T)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: "When overridden in a derived class, gets the key for a specified item."
  syntax:
    content: protected abstract K GetKeyForItem(T item)
    parameters:
    - id: item
      type: '{T}'
      description: "The item of type `T` whose key is being retrieved."
    return:
      type: '{K}'
      description: "The key of type K for the specified `item` of type `T`."
    content.vb: Protected MustOverride Function GetKeyForItem(item As T) As K
  overload: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.GetKeyForItem*
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).GetKeyForItem(T)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).GetKeyForItem(T)
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.InsertItem(System.Int32,`1)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.InsertItem(System.Int32,`1)
  id: InsertItem(System.Int32,`1)
  parent: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2
  langs:
  - csharp
  - vb
  name: InsertItem(Int32, T)
  nameWithType: SynchronizedKeyedCollection<K, T>.InsertItem(Int32, T)
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.InsertItem(System.Int32, T)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: "Inserts an item into the collection at a specified location."
  syntax:
    content: protected override void InsertItem(int index, T item)
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index that specifies the insertion location for the item in the collection."
    - id: item
      type: '{T}'
      description: "The item of type `T` to be inserted into the collection."
    content.vb: Protected Overrides Sub InsertItem(index As Integer, item As T)
  overridden: CoreWCF.Collections.Generic.SynchronizedCollection`1.InsertItem(System.Int32,`0)
  overload: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.InsertItem*
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).InsertItem(Int32, T)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).InsertItem(System.Int32, T)
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.Remove(`0)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.Remove(`0)
  id: Remove(`0)
  parent: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2
  langs:
  - csharp
  - vb
  name: Remove(K)
  nameWithType: SynchronizedKeyedCollection<K, T>.Remove(K)
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.Remove(K)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: "Removes an item with a specified key from the collection and returns a value that indicates whether an item was removed."
  syntax:
    content: public bool Remove(K key)
    parameters:
    - id: key
      type: '{K}'
      description: "The key of the item to be removed."
    return:
      type: System.Boolean
      description: "`true` if an item with the specified key was removed; otherwise, `false`."
    content.vb: Public Function Remove(key As K) As Boolean
  overload: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.Remove*
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).Remove(K)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).Remove(K)
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.RemoveItem(System.Int32)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.RemoveItem(System.Int32)
  id: RemoveItem(System.Int32)
  parent: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2
  langs:
  - csharp
  - vb
  name: RemoveItem(Int32)
  nameWithType: SynchronizedKeyedCollection<K, T>.RemoveItem(Int32)
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.RemoveItem(System.Int32)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: "Removes an item at a specified location from the collection."
  syntax:
    content: protected override void RemoveItem(int index)
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index that specifies the location of the item that is removed from the collection."
    content.vb: Protected Overrides Sub RemoveItem(index As Integer)
  overridden: CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveItem(System.Int32)
  overload: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.RemoveItem*
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).RemoveItem(Int32)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).RemoveItem(System.Int32)
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.SetItem(System.Int32,`1)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.SetItem(System.Int32,`1)
  id: SetItem(System.Int32,`1)
  parent: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2
  langs:
  - csharp
  - vb
  name: SetItem(Int32, T)
  nameWithType: SynchronizedKeyedCollection<K, T>.SetItem(Int32, T)
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.SetItem(System.Int32, T)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: "Replaces an item at a specified location of the collection with a new item."
  syntax:
    content: protected override void SetItem(int index, T item)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index that specifies the insertion location for the item in the collection.
    - id: item
      type: '{T}'
      description: "The item of type `T` to be inserted into the collection."
    content.vb: Protected Overrides Sub SetItem(index As Integer, item As T)
  overridden: CoreWCF.Collections.Generic.SynchronizedCollection`1.SetItem(System.Int32,`0)
  overload: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.SetItem*
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).SetItem(Int32, T)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).SetItem(System.Int32, T)
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.Item(`0)
  commentId: P:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.Item(`0)
  id: Item(`0)
  parent: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2
  langs:
  - csharp
  - vb
  name: Item[K]
  nameWithType: SynchronizedKeyedCollection<K, T>.Item[K]
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.Item[K]
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: 'Gets the items with a specified key from the collection.'
  syntax:
    content: public T this[K key] { get; }
    parameters:
    - id: key
      type: '{K}'
      description: "The key for the item being retrieved."
    return:
      type: '{T}'
      description: "The item of type `T` from the collection with the key specified."
    content.vb: Public ReadOnly Property Item(key As K) As T
  overload: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.Item*
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).Item(K)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).Item(K)
  name.vb: Item(K)
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.Dictionary
  commentId: P:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.Dictionary
  id: Dictionary
  parent: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2
  langs:
  - csharp
  - vb
  name: Dictionary
  nameWithType: SynchronizedKeyedCollection<K, T>.Dictionary
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.Dictionary
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: Gets the dictionary associated with the collection.
  syntax:
    content: protected IDictionary<K, T> Dictionary { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{{K},{T}}
      description: "The [IDictionary\\<TKey,TValue\\>](https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.idictionary-2?view=netframework-4.8.1) that contains the key-item pairs for the collection."
    content.vb: Protected ReadOnly Property Dictionary As IDictionary(Of K, T)
  overload: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.Dictionary*
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).Dictionary
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).Dictionary
references:
- uid: CoreWCF.Collections.Generic
  commentId: N:CoreWCF.Collections.Generic
  isExternal: true
  name: CoreWCF.Collections.Generic
  nameWithType: CoreWCF.Collections.Generic
  fullName: CoreWCF.Collections.Generic
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}
  commentId: T:CoreWCF.Collections.Generic.SynchronizedCollection{`1}
  parent: CoreWCF.Collections.Generic
  definition: CoreWCF.Collections.Generic.SynchronizedCollection`1
  name: SynchronizedCollection<T>
  nameWithType: SynchronizedCollection<T>
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>
  nameWithType.vb: SynchronizedCollection(Of T)
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T)
  name.vb: SynchronizedCollection(Of T)
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1
    name: SynchronizedCollection
    nameWithType: SynchronizedCollection
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1
    name: SynchronizedCollection
    nameWithType: SynchronizedCollection
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{{T}}
  commentId: '!:System.Collections.Generic.IList{`0}'
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: '!:System.Collections.Generic.ICollection{`0}'
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: '!:System.Collections.Generic.IEnumerable{`0}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.IList
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.Add({T})
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection{`1}.Add(`1)
  parent: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}
  definition: CoreWCF.Collections.Generic.SynchronizedCollection`1.Add(`0)
  name: Add(T)
  nameWithType: SynchronizedCollection<T>.Add(T)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Add(T)
  nameWithType.vb: SynchronizedCollection(Of T).Add(T)
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Add(T)
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Add(`0)
    name: Add
    nameWithType: SynchronizedCollection<T>.Add
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Add(`0)
    name: Add
    nameWithType: SynchronizedCollection(Of T).Add
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.Clear
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection{`1}.Clear
  parent: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}
  definition: CoreWCF.Collections.Generic.SynchronizedCollection`1.Clear
  name: Clear()
  nameWithType: SynchronizedCollection<T>.Clear()
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Clear()
  nameWithType.vb: SynchronizedCollection(Of T).Clear()
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Clear()
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Clear
    name: Clear
    nameWithType: SynchronizedCollection<T>.Clear
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Clear
    name: Clear
    nameWithType: SynchronizedCollection(Of T).Clear
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.CopyTo({T}[],System.Int32)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection{`1}.CopyTo(`1[],System.Int32)
  parent: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}
  definition: CoreWCF.Collections.Generic.SynchronizedCollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(T[], Int32)
  nameWithType: SynchronizedCollection<T>.CopyTo(T[], Int32)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: SynchronizedCollection(Of T).CopyTo(T(), Int32)
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: SynchronizedCollection<T>.CopyTo
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: SynchronizedCollection(Of T).CopyTo
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.Contains({T})
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection{`1}.Contains(`1)
  parent: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}
  definition: CoreWCF.Collections.Generic.SynchronizedCollection`1.Contains(`0)
  name: Contains(T)
  nameWithType: SynchronizedCollection<T>.Contains(T)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Contains(T)
  nameWithType.vb: SynchronizedCollection(Of T).Contains(T)
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Contains(T)
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Contains(`0)
    name: Contains
    nameWithType: SynchronizedCollection<T>.Contains
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Contains(`0)
    name: Contains
    nameWithType: SynchronizedCollection(Of T).Contains
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.GetEnumerator
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection{`1}.GetEnumerator
  parent: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}
  definition: CoreWCF.Collections.Generic.SynchronizedCollection`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: SynchronizedCollection<T>.GetEnumerator()
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.GetEnumerator()
  nameWithType.vb: SynchronizedCollection(Of T).GetEnumerator()
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).GetEnumerator()
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.GetEnumerator
    name: GetEnumerator
    nameWithType: SynchronizedCollection<T>.GetEnumerator
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.GetEnumerator
    name: GetEnumerator
    nameWithType: SynchronizedCollection(Of T).GetEnumerator
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.IndexOf({T})
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection{`1}.IndexOf(`1)
  parent: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}
  definition: CoreWCF.Collections.Generic.SynchronizedCollection`1.IndexOf(`0)
  name: IndexOf(T)
  nameWithType: SynchronizedCollection<T>.IndexOf(T)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.IndexOf(T)
  nameWithType.vb: SynchronizedCollection(Of T).IndexOf(T)
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).IndexOf(T)
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.IndexOf(`0)
    name: IndexOf
    nameWithType: SynchronizedCollection<T>.IndexOf
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.IndexOf(`0)
    name: IndexOf
    nameWithType: SynchronizedCollection(Of T).IndexOf
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.Insert(System.Int32,{T})
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection{`1}.Insert(System.Int32,`1)
  parent: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}
  definition: CoreWCF.Collections.Generic.SynchronizedCollection`1.Insert(System.Int32,`0)
  name: Insert(Int32, T)
  nameWithType: SynchronizedCollection<T>.Insert(Int32, T)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Insert(System.Int32, T)
  nameWithType.vb: SynchronizedCollection(Of T).Insert(Int32, T)
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: SynchronizedCollection<T>.Insert
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: SynchronizedCollection(Of T).Insert
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.Remove({T})
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection{`1}.Remove(`1)
  parent: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}
  definition: CoreWCF.Collections.Generic.SynchronizedCollection`1.Remove(`0)
  name: Remove(T)
  nameWithType: SynchronizedCollection<T>.Remove(T)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Remove(T)
  nameWithType.vb: SynchronizedCollection(Of T).Remove(T)
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Remove(T)
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Remove(`0)
    name: Remove
    nameWithType: SynchronizedCollection<T>.Remove
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Remove(`0)
    name: Remove
    nameWithType: SynchronizedCollection(Of T).Remove
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.RemoveAt(System.Int32)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection{`1}.RemoveAt(System.Int32)
  parent: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}
  definition: CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: SynchronizedCollection<T>.RemoveAt(Int32)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.RemoveAt(System.Int32)
  nameWithType.vb: SynchronizedCollection(Of T).RemoveAt(Int32)
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: SynchronizedCollection<T>.RemoveAt
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: SynchronizedCollection(Of T).RemoveAt
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.Count
  commentId: P:CoreWCF.Collections.Generic.SynchronizedCollection{`1}.Count
  parent: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}
  definition: CoreWCF.Collections.Generic.SynchronizedCollection`1.Count
  name: Count
  nameWithType: SynchronizedCollection<T>.Count
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Count
  nameWithType.vb: SynchronizedCollection(Of T).Count
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Count
- uid: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.Items
  commentId: P:CoreWCF.Collections.Generic.SynchronizedCollection{`1}.Items
  parent: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}
  definition: CoreWCF.Collections.Generic.SynchronizedCollection`1.Items
  name: Items
  nameWithType: SynchronizedCollection<T>.Items
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Items
  nameWithType.vb: SynchronizedCollection(Of T).Items
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Items
- uid: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.SyncRoot
  commentId: P:CoreWCF.Collections.Generic.SynchronizedCollection{`1}.SyncRoot
  parent: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}
  definition: CoreWCF.Collections.Generic.SynchronizedCollection`1.SyncRoot
  name: SyncRoot
  nameWithType: SynchronizedCollection<T>.SyncRoot
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.SyncRoot
  nameWithType.vb: SynchronizedCollection(Of T).SyncRoot
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).SyncRoot
- uid: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.Item(System.Int32)
  commentId: P:CoreWCF.Collections.Generic.SynchronizedCollection{`1}.Item(System.Int32)
  parent: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}
  definition: CoreWCF.Collections.Generic.SynchronizedCollection`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: SynchronizedCollection<T>.Item[Int32]
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Item[System.Int32]
  nameWithType.vb: SynchronizedCollection(Of T).Item(Int32)
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Item(System.Int32)
    name: Item
    nameWithType: SynchronizedCollection<T>.Item
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Item(System.Int32)
    name: Item
    nameWithType: SynchronizedCollection(Of T).Item
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1
  commentId: T:CoreWCF.Collections.Generic.SynchronizedCollection`1
  isExternal: true
  name: SynchronizedCollection<T>
  nameWithType: SynchronizedCollection<T>
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>
  nameWithType.vb: SynchronizedCollection(Of T)
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T)
  name.vb: SynchronizedCollection(Of T)
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1
    name: SynchronizedCollection
    nameWithType: SynchronizedCollection
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1
    name: SynchronizedCollection
    nameWithType: SynchronizedCollection
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  isExternal: true
  name: IList<>
  nameWithType: IList<>
  fullName: System.Collections.Generic.IList<>
  nameWithType.vb: IList(Of )
  fullName.vb: System.Collections.Generic.IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<>
  nameWithType: ICollection<>
  fullName: System.Collections.Generic.ICollection<>
  nameWithType.vb: ICollection(Of )
  fullName.vb: System.Collections.Generic.ICollection(Of )
  name.vb: ICollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Add(`0)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: SynchronizedCollection<T>.Add(T)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Add(T)
  nameWithType.vb: SynchronizedCollection(Of T).Add(T)
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Add(T)
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Add(`0)
    name: Add
    nameWithType: SynchronizedCollection<T>.Add
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Add(`0)
    name: Add
    nameWithType: SynchronizedCollection(Of T).Add
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Clear
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: SynchronizedCollection<T>.Clear()
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Clear()
  nameWithType.vb: SynchronizedCollection(Of T).Clear()
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Clear()
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Clear
    name: Clear
    nameWithType: SynchronizedCollection<T>.Clear
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Clear
    name: Clear
    nameWithType: SynchronizedCollection(Of T).Clear
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.CopyTo(`0[],System.Int32)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: SynchronizedCollection<T>.CopyTo(T[], Int32)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: SynchronizedCollection(Of T).CopyTo(T(), Int32)
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: SynchronizedCollection<T>.CopyTo
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: SynchronizedCollection(Of T).CopyTo
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Contains(`0)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: SynchronizedCollection<T>.Contains(T)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Contains(T)
  nameWithType.vb: SynchronizedCollection(Of T).Contains(T)
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Contains(T)
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Contains(`0)
    name: Contains
    nameWithType: SynchronizedCollection<T>.Contains
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Contains(`0)
    name: Contains
    nameWithType: SynchronizedCollection(Of T).Contains
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.GetEnumerator
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: SynchronizedCollection<T>.GetEnumerator()
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.GetEnumerator()
  nameWithType.vb: SynchronizedCollection(Of T).GetEnumerator()
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).GetEnumerator()
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.GetEnumerator
    name: GetEnumerator
    nameWithType: SynchronizedCollection<T>.GetEnumerator
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.GetEnumerator
    name: GetEnumerator
    nameWithType: SynchronizedCollection(Of T).GetEnumerator
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.IndexOf(`0)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: SynchronizedCollection<T>.IndexOf(T)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.IndexOf(T)
  nameWithType.vb: SynchronizedCollection(Of T).IndexOf(T)
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).IndexOf(T)
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.IndexOf(`0)
    name: IndexOf
    nameWithType: SynchronizedCollection<T>.IndexOf
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.IndexOf(`0)
    name: IndexOf
    nameWithType: SynchronizedCollection(Of T).IndexOf
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Insert(System.Int32,`0)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: SynchronizedCollection<T>.Insert(Int32, T)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Insert(System.Int32, T)
  nameWithType.vb: SynchronizedCollection(Of T).Insert(Int32, T)
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: SynchronizedCollection<T>.Insert
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: SynchronizedCollection(Of T).Insert
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Remove(`0)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: SynchronizedCollection<T>.Remove(T)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Remove(T)
  nameWithType.vb: SynchronizedCollection(Of T).Remove(T)
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Remove(T)
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Remove(`0)
    name: Remove
    nameWithType: SynchronizedCollection<T>.Remove
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Remove(`0)
    name: Remove
    nameWithType: SynchronizedCollection(Of T).Remove
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveAt(System.Int32)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: SynchronizedCollection<T>.RemoveAt(Int32)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.RemoveAt(System.Int32)
  nameWithType.vb: SynchronizedCollection(Of T).RemoveAt(Int32)
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: SynchronizedCollection<T>.RemoveAt
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: SynchronizedCollection(Of T).RemoveAt
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Count
  commentId: P:CoreWCF.Collections.Generic.SynchronizedCollection`1.Count
  isExternal: true
  name: Count
  nameWithType: SynchronizedCollection<T>.Count
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Count
  nameWithType.vb: SynchronizedCollection(Of T).Count
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Count
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Items
  commentId: P:CoreWCF.Collections.Generic.SynchronizedCollection`1.Items
  isExternal: true
  name: Items
  nameWithType: SynchronizedCollection<T>.Items
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Items
  nameWithType.vb: SynchronizedCollection(Of T).Items
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Items
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.SyncRoot
  commentId: P:CoreWCF.Collections.Generic.SynchronizedCollection`1.SyncRoot
  isExternal: true
  name: SyncRoot
  nameWithType: SynchronizedCollection<T>.SyncRoot
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.SyncRoot
  nameWithType.vb: SynchronizedCollection(Of T).SyncRoot
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).SyncRoot
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Item(System.Int32)
  commentId: P:CoreWCF.Collections.Generic.SynchronizedCollection`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: SynchronizedCollection<T>.Item[Int32]
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Item[System.Int32]
  nameWithType.vb: SynchronizedCollection(Of T).Item(Int32)
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Item(System.Int32)
    name: Item
    nameWithType: SynchronizedCollection<T>.Item
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Item(System.Int32)
    name: Item
    nameWithType: SynchronizedCollection(Of T).Item
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.#ctor*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.#ctor
  isExternal: true
  name: SynchronizedKeyedCollection
  nameWithType: SynchronizedKeyedCollection<K, T>.SynchronizedKeyedCollection
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.SynchronizedKeyedCollection
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).SynchronizedKeyedCollection
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).SynchronizedKeyedCollection
- uid: System.Collections.Generic.IEqualityComparer{{K}}
  commentId: '!:System.Collections.Generic.IEqualityComparer{`0}'
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<K>
  nameWithType: IEqualityComparer<K>
  fullName: System.Collections.Generic.IEqualityComparer<K>
  nameWithType.vb: IEqualityComparer(Of K)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of K)
  name.vb: IEqualityComparer(Of K)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<>
  nameWithType: IEqualityComparer<>
  fullName: System.Collections.Generic.IEqualityComparer<>
  nameWithType.vb: IEqualityComparer(Of )
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of )
  name.vb: IEqualityComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.ChangeItemKey*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.ChangeItemKey
  isExternal: true
  name: ChangeItemKey
  nameWithType: SynchronizedKeyedCollection<K, T>.ChangeItemKey
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.ChangeItemKey
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).ChangeItemKey
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).ChangeItemKey
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: '{K}'
  commentId: '!:K'
  definition: K
  name: K
  nameWithType: K
  fullName: K
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: K
  name: K
  nameWithType: K
  fullName: K
- uid: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.ClearItems
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection{`1}.ClearItems
  parent: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}
  definition: CoreWCF.Collections.Generic.SynchronizedCollection`1.ClearItems
  name: ClearItems()
  nameWithType: SynchronizedCollection<T>.ClearItems()
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.ClearItems()
  nameWithType.vb: SynchronizedCollection(Of T).ClearItems()
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).ClearItems()
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.ClearItems
    name: ClearItems
    nameWithType: SynchronizedCollection<T>.ClearItems
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.ClearItems
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.ClearItems
    name: ClearItems
    nameWithType: SynchronizedCollection(Of T).ClearItems
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).ClearItems
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.ClearItems*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.ClearItems
  isExternal: true
  name: ClearItems
  nameWithType: SynchronizedKeyedCollection<K, T>.ClearItems
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.ClearItems
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).ClearItems
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).ClearItems
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.ClearItems
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.ClearItems
  isExternal: true
  name: ClearItems()
  nameWithType: SynchronizedCollection<T>.ClearItems()
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.ClearItems()
  nameWithType.vb: SynchronizedCollection(Of T).ClearItems()
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).ClearItems()
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.ClearItems
    name: ClearItems
    nameWithType: SynchronizedCollection<T>.ClearItems
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.ClearItems
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.ClearItems
    name: ClearItems
    nameWithType: SynchronizedCollection(Of T).ClearItems
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).ClearItems
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.Contains*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.Contains
  isExternal: true
  name: Contains
  nameWithType: SynchronizedKeyedCollection<K, T>.Contains
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.Contains
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).Contains
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).Contains
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.GetKeyForItem*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.GetKeyForItem
  isExternal: true
  name: GetKeyForItem
  nameWithType: SynchronizedKeyedCollection<K, T>.GetKeyForItem
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.GetKeyForItem
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).GetKeyForItem
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).GetKeyForItem
- uid: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.InsertItem(System.Int32,{T})
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection{`1}.InsertItem(System.Int32,`1)
  parent: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}
  definition: CoreWCF.Collections.Generic.SynchronizedCollection`1.InsertItem(System.Int32,`0)
  name: InsertItem(Int32, T)
  nameWithType: SynchronizedCollection<T>.InsertItem(Int32, T)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.InsertItem(System.Int32, T)
  nameWithType.vb: SynchronizedCollection(Of T).InsertItem(Int32, T)
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).InsertItem(System.Int32, T)
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.InsertItem(System.Int32,`0)
    name: InsertItem
    nameWithType: SynchronizedCollection<T>.InsertItem
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.InsertItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.InsertItem(System.Int32,`0)
    name: InsertItem
    nameWithType: SynchronizedCollection(Of T).InsertItem
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).InsertItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.InsertItem*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.InsertItem
  isExternal: true
  name: InsertItem
  nameWithType: SynchronizedKeyedCollection<K, T>.InsertItem
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.InsertItem
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).InsertItem
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).InsertItem
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.InsertItem(System.Int32,`0)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.InsertItem(System.Int32,`0)
  isExternal: true
  name: InsertItem(Int32, T)
  nameWithType: SynchronizedCollection<T>.InsertItem(Int32, T)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.InsertItem(System.Int32, T)
  nameWithType.vb: SynchronizedCollection(Of T).InsertItem(Int32, T)
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).InsertItem(System.Int32, T)
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.InsertItem(System.Int32,`0)
    name: InsertItem
    nameWithType: SynchronizedCollection<T>.InsertItem
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.InsertItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.InsertItem(System.Int32,`0)
    name: InsertItem
    nameWithType: SynchronizedCollection(Of T).InsertItem
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).InsertItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.Remove*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.Remove
  isExternal: true
  name: Remove
  nameWithType: SynchronizedKeyedCollection<K, T>.Remove
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.Remove
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).Remove
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).Remove
- uid: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.RemoveItem(System.Int32)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection{`1}.RemoveItem(System.Int32)
  parent: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}
  definition: CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveItem(System.Int32)
  name: RemoveItem(Int32)
  nameWithType: SynchronizedCollection<T>.RemoveItem(Int32)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.RemoveItem(System.Int32)
  nameWithType.vb: SynchronizedCollection(Of T).RemoveItem(Int32)
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).RemoveItem(System.Int32)
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveItem(System.Int32)
    name: RemoveItem
    nameWithType: SynchronizedCollection<T>.RemoveItem
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.RemoveItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveItem(System.Int32)
    name: RemoveItem
    nameWithType: SynchronizedCollection(Of T).RemoveItem
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).RemoveItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.RemoveItem*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.RemoveItem
  isExternal: true
  name: RemoveItem
  nameWithType: SynchronizedKeyedCollection<K, T>.RemoveItem
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.RemoveItem
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).RemoveItem
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).RemoveItem
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveItem(System.Int32)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveItem(System.Int32)
  isExternal: true
  name: RemoveItem(Int32)
  nameWithType: SynchronizedCollection<T>.RemoveItem(Int32)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.RemoveItem(System.Int32)
  nameWithType.vb: SynchronizedCollection(Of T).RemoveItem(Int32)
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).RemoveItem(System.Int32)
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveItem(System.Int32)
    name: RemoveItem
    nameWithType: SynchronizedCollection<T>.RemoveItem
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.RemoveItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveItem(System.Int32)
    name: RemoveItem
    nameWithType: SynchronizedCollection(Of T).RemoveItem
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).RemoveItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}.SetItem(System.Int32,{T})
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection{`1}.SetItem(System.Int32,`1)
  parent: CoreWCF.Collections.Generic.SynchronizedCollection{{T}}
  definition: CoreWCF.Collections.Generic.SynchronizedCollection`1.SetItem(System.Int32,`0)
  name: SetItem(Int32, T)
  nameWithType: SynchronizedCollection<T>.SetItem(Int32, T)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.SetItem(System.Int32, T)
  nameWithType.vb: SynchronizedCollection(Of T).SetItem(Int32, T)
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).SetItem(System.Int32, T)
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.SetItem(System.Int32,`0)
    name: SetItem
    nameWithType: SynchronizedCollection<T>.SetItem
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.SetItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.SetItem(System.Int32,`0)
    name: SetItem
    nameWithType: SynchronizedCollection(Of T).SetItem
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).SetItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.SetItem*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.SetItem
  isExternal: true
  name: SetItem
  nameWithType: SynchronizedKeyedCollection<K, T>.SetItem
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.SetItem
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).SetItem
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).SetItem
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.SetItem(System.Int32,`0)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.SetItem(System.Int32,`0)
  isExternal: true
  name: SetItem(Int32, T)
  nameWithType: SynchronizedCollection<T>.SetItem(Int32, T)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.SetItem(System.Int32, T)
  nameWithType.vb: SynchronizedCollection(Of T).SetItem(Int32, T)
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).SetItem(System.Int32, T)
  spec.csharp:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.SetItem(System.Int32,`0)
    name: SetItem
    nameWithType: SynchronizedCollection<T>.SetItem
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.SetItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.SetItem(System.Int32,`0)
    name: SetItem
    nameWithType: SynchronizedCollection(Of T).SetItem
    fullName: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).SetItem
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.Item*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.Item
  isExternal: true
  name: Item
  nameWithType: SynchronizedKeyedCollection<K, T>.Item
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.Item
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).Item
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).Item
- uid: CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.Dictionary*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2.Dictionary
  isExternal: true
  name: Dictionary
  nameWithType: SynchronizedKeyedCollection<K, T>.Dictionary
  fullName: CoreWCF.Collections.Generic.SynchronizedKeyedCollection<K, T>.Dictionary
  nameWithType.vb: SynchronizedKeyedCollection(Of K, T).Dictionary
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedKeyedCollection(Of K, T).Dictionary
- uid: System.Collections.Generic.IDictionary{{K},{T}}
  commentId: '!:System.Collections.Generic.IDictionary{`0,`1}'
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<K, T>
  nameWithType: IDictionary<K, T>
  fullName: System.Collections.Generic.IDictionary<K, T>
  nameWithType.vb: IDictionary(Of K, T)
  fullName.vb: System.Collections.Generic.IDictionary(Of K, T)
  name.vb: IDictionary(Of K, T)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: K
    nameWithType: K
    fullName: K
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<, >
  nameWithType: IDictionary<, >
  fullName: System.Collections.Generic.IDictionary<, >
  nameWithType.vb: IDictionary(Of , )
  fullName.vb: System.Collections.Generic.IDictionary(Of , )
  name.vb: IDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
