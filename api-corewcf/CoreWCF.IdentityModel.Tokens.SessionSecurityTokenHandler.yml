### YamlMime:ManagedReference
items:
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  commentId: T:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  id: SessionSecurityTokenHandler
  parent: CoreWCF.IdentityModel.Tokens
  children:
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.CookieTransform})
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.CookieTransform},System.TimeSpan)
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(System.Byte[],System.Boolean)
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.DateTime,System.DateTime)
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken(CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor)
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Byte[],CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader,CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(System.Collections.Generic.IEnumerable{CoreWCF.IdentityModel.CookieTransform})
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession(CoreWCF.IdentityModel.Tokens.SessionSecurityToken)
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(CoreWCF.IdentityModel.Tokens.SessionSecurityToken,System.String)
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(CoreWCF.IdentityModel.Tokens.SessionSecurityToken)
  - CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,CoreWCF.IdentityModel.Tokens.SecurityToken)
  langs:
  - csharp
  - vb
  name: SessionSecurityTokenHandler
  nameWithType: SessionSecurityTokenHandler
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  type: Class
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nA <xref href=\"CoreWCF.IdentityModel.Tokens.SecurityTokenHandler\" data-throw-if-not-resolved=\"false\"></xref> that processes <xref href=\"CoreWCF.IdentityModel.Tokens.SessionSecurityToken\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: 'public class SessionSecurityTokenHandler : SecurityTokenHandler'
    content.vb: >-
      Public Class SessionSecurityTokenHandler
          Inherits SecurityTokenHandler
  inheritance:
  - System.Object
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  inheritedMembers:
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(CoreWCF.IdentityModel.Tokens.SecurityToken,System.Boolean)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.Configuration
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime
  commentId: F:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime
  id: DefaultLifetime
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: DefaultLifetime
  nameWithType: SessionSecurityTokenHandler.DefaultLifetime
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime
  type: Field
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public static readonly TimeSpan DefaultLifetime
    return:
      type: System.TimeSpan
    content.vb: Public Shared ReadOnly DefaultLifetime As TimeSpan
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.CookieTransform})
  commentId: M:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.CookieTransform})
  id: '#ctor(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.CookieTransform})'
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>)
  nameWithType: SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>)
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.SessionSecurityTokenHandler(System.Collections.ObjectModel.ReadOnlyCollection<CoreWCF.IdentityModel.CookieTransform>)
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nInitializes an instance of <xref href=\"CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler\" data-throw-if-not-resolved=\"false\"></xref>"
  remarks: "\nProperties are used for the remaining defaults:\nDefaultLifetime\n"
  syntax:
    content: public SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform> transforms)
    parameters:
    - id: transforms
      type: System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.CookieTransform}
      description: The transforms to apply when encoding the cookie.
    content.vb: Public Sub New(transforms As ReadOnlyCollection(Of CookieTransform))
  overload: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor*
  nameWithType.vb: SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection(Of CookieTransform))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.SessionSecurityTokenHandler(System.Collections.ObjectModel.ReadOnlyCollection(Of CoreWCF.IdentityModel.CookieTransform))
  name.vb: SessionSecurityTokenHandler(ReadOnlyCollection(Of CookieTransform))
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.CookieTransform},System.TimeSpan)
  commentId: M:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.CookieTransform},System.TimeSpan)
  id: '#ctor(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.CookieTransform},System.TimeSpan)'
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>, TimeSpan)
  nameWithType: SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>, TimeSpan)
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.SessionSecurityTokenHandler(System.Collections.ObjectModel.ReadOnlyCollection<CoreWCF.IdentityModel.CookieTransform>, System.TimeSpan)
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nInitializes an instance of <xref href=\"CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler\" data-throw-if-not-resolved=\"false\"></xref>"
  syntax:
    content: public SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform> transforms, TimeSpan tokenLifetime)
    parameters:
    - id: transforms
      type: System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.CookieTransform}
      description: The transforms to apply when encoding the cookie.
    - id: tokenLifetime
      type: System.TimeSpan
      description: The default for a token.
    content.vb: Public Sub New(transforms As ReadOnlyCollection(Of CookieTransform), tokenLifetime As TimeSpan)
  overload: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Is thrown if &apos;transforms&apos; is null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Is thrown if &apos;tokenLifetime&apos; is less than or equal to TimeSpan.Zero.
  nameWithType.vb: SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection(Of CookieTransform), TimeSpan)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.SessionSecurityTokenHandler(System.Collections.ObjectModel.ReadOnlyCollection(Of CoreWCF.IdentityModel.CookieTransform), System.TimeSpan)
  name.vb: SessionSecurityTokenHandler(ReadOnlyCollection(Of CookieTransform), TimeSpan)
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(System.Byte[],System.Boolean)
  commentId: M:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(System.Byte[],System.Boolean)
  id: ApplyTransforms(System.Byte[],System.Boolean)
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: ApplyTransforms(Byte[], Boolean)
  nameWithType: SessionSecurityTokenHandler.ApplyTransforms(Byte[], Boolean)
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(System.Byte[], System.Boolean)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nApplies Transforms to the cookie.\n"
  syntax:
    content: protected virtual byte[] ApplyTransforms(byte[] cookie, bool outbound)
    parameters:
    - id: cookie
      type: System.Byte[]
      description: The cookie that will be transformed.
    - id: outbound
      type: System.Boolean
      description: Controls if the cookie should be encoded (true) or decoded (false)
    return:
      type: System.Byte[]
      description: Encoded cookie.
    content.vb: Protected Overridable Function ApplyTransforms(cookie As Byte(), outbound As Boolean) As Byte()
  overload: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms*
  nameWithType.vb: SessionSecurityTokenHandler.ApplyTransforms(Byte(), Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(System.Byte(), System.Boolean)
  name.vb: ApplyTransforms(Byte(), Boolean)
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  commentId: M:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  id: CanReadToken(System.Xml.XmlReader)
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: CanReadToken(XmlReader)
  nameWithType: SessionSecurityTokenHandler.CanReadToken(XmlReader)
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public override bool CanReadToken(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
    return:
      type: System.Boolean
    content.vb: Public Overrides Function CanReadToken(reader As XmlReader) As Boolean
  overridden: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  overload: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken(CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor)
  commentId: M:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken(CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor)
  id: CreateToken(CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor)
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: CreateToken(SecurityTokenDescriptor)
  nameWithType: SessionSecurityTokenHandler.CreateToken(SecurityTokenDescriptor)
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken(CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public override SecurityToken CreateToken(SecurityTokenDescriptor tokenDescriptor)
    parameters:
    - id: tokenDescriptor
      type: CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor
    return:
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    content.vb: Public Overrides Function CreateToken(tokenDescriptor As SecurityTokenDescriptor) As SecurityToken
  overridden: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor)
  overload: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.DateTime,System.DateTime)
  commentId: M:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.DateTime,System.DateTime)
  id: CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.DateTime,System.DateTime)
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: CreateSessionSecurityToken(ClaimsPrincipal, String, String, DateTime, DateTime)
  nameWithType: SessionSecurityTokenHandler.CreateSessionSecurityToken(ClaimsPrincipal, String, String, DateTime, DateTime)
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal, System.String, System.String, System.DateTime, System.DateTime)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nCreates a <xref href=\"CoreWCF.IdentityModel.Tokens.SessionSecurityToken\" data-throw-if-not-resolved=\"false\"></xref> based on an <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> and a valid time range.\n"
  syntax:
    content: public virtual SessionSecurityToken CreateSessionSecurityToken(ClaimsPrincipal principal, string context, string endpointId, DateTime validFrom, DateTime validTo)
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "\n<xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref>\n"
    - id: context
      type: System.String
      description: Caller defined context string
    - id: endpointId
      type: System.String
      description: Identifier of the endpoint to which the token is scoped.
    - id: validFrom
      type: System.DateTime
      description: Earliest valid time.
    - id: validTo
      type: System.DateTime
      description: Latest valid time.
    return:
      type: CoreWCF.IdentityModel.Tokens.SessionSecurityToken
    content.vb: Public Overridable Function CreateSessionSecurityToken(principal As ClaimsPrincipal, context As String, endpointId As String, validFrom As DateTime, validTo As DateTime) As SessionSecurityToken
  overload: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Byte[],CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
  commentId: M:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Byte[],CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
  id: ReadToken(System.Byte[],CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: ReadToken(Byte[], SecurityTokenResolver)
  nameWithType: SessionSecurityTokenHandler.ReadToken(Byte[], SecurityTokenResolver)
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Byte[], CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public virtual SecurityToken ReadToken(byte[] token, SecurityTokenResolver tokenResolver)
    parameters:
    - id: token
      type: System.Byte[]
    - id: tokenResolver
      type: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
    return:
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    content.vb: Public Overridable Function ReadToken(token As Byte(), tokenResolver As SecurityTokenResolver) As SecurityToken
  overload: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken*
  nameWithType.vb: SessionSecurityTokenHandler.ReadToken(Byte(), SecurityTokenResolver)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Byte(), CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
  name.vb: ReadToken(Byte(), SecurityTokenResolver)
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  commentId: M:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  id: ReadToken(System.Xml.XmlReader)
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: ReadToken(XmlReader)
  nameWithType: SessionSecurityTokenHandler.ReadToken(XmlReader)
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public override SecurityToken ReadToken(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
    return:
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    content.vb: Public Overrides Function ReadToken(reader As XmlReader) As SecurityToken
  overridden: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  overload: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader,CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
  commentId: M:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader,CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
  id: ReadToken(System.Xml.XmlReader,CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: ReadToken(XmlReader, SecurityTokenResolver)
  nameWithType: SessionSecurityTokenHandler.ReadToken(XmlReader, SecurityTokenResolver)
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader, CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public override SecurityToken ReadToken(XmlReader reader, SecurityTokenResolver tokenResolver)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
    - id: tokenResolver
      type: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
    return:
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    content.vb: Public Overrides Function ReadToken(reader As XmlReader, tokenResolver As SecurityTokenResolver) As SecurityToken
  overridden: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
  overload: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers
  commentId: M:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers
  id: GetTokenTypeIdentifiers
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: GetTokenTypeIdentifiers()
  nameWithType: SessionSecurityTokenHandler.GetTokenTypeIdentifiers()
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers()
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nGets the token type URIs\n"
  syntax:
    content: public override string[] GetTokenTypeIdentifiers()
    return:
      type: System.String[]
    content.vb: Public Overrides Function GetTokenTypeIdentifiers As String()
  overridden: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers
  overload: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(System.Collections.Generic.IEnumerable{CoreWCF.IdentityModel.CookieTransform})
  commentId: M:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(System.Collections.Generic.IEnumerable{CoreWCF.IdentityModel.CookieTransform})
  id: SetTransforms(System.Collections.Generic.IEnumerable{CoreWCF.IdentityModel.CookieTransform})
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: SetTransforms(IEnumerable<CookieTransform>)
  nameWithType: SessionSecurityTokenHandler.SetTransforms(IEnumerable<CookieTransform>)
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(System.Collections.Generic.IEnumerable<CoreWCF.IdentityModel.CookieTransform>)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nSets the transforms that will be applied to cookies.\n"
  syntax:
    content: protected void SetTransforms(IEnumerable<CookieTransform> transforms)
    parameters:
    - id: transforms
      type: System.Collections.Generic.IEnumerable{CoreWCF.IdentityModel.CookieTransform}
      description: 'The <xref href="CoreWCF.IdentityModel.CookieTransform" data-throw-if-not-resolved="false"></xref> objects to use.  '
    content.vb: Protected Sub SetTransforms(transforms As IEnumerable(Of CookieTransform))
  overload: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms*
  nameWithType.vb: SessionSecurityTokenHandler.SetTransforms(IEnumerable(Of CookieTransform))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(System.Collections.Generic.IEnumerable(Of CoreWCF.IdentityModel.CookieTransform))
  name.vb: SetTransforms(IEnumerable(Of CookieTransform))
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  commentId: M:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  id: ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: ValidateToken(SecurityToken)
  nameWithType: SessionSecurityTokenHandler.ValidateToken(SecurityToken)
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public override ReadOnlyCollection<ClaimsIdentity> ValidateToken(SecurityToken token)
    parameters:
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}
    content.vb: Public Overrides Function ValidateToken(token As SecurityToken) As ReadOnlyCollection(Of ClaimsIdentity)
  overridden: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  overload: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(CoreWCF.IdentityModel.Tokens.SessionSecurityToken,System.String)
  commentId: M:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(CoreWCF.IdentityModel.Tokens.SessionSecurityToken,System.String)
  id: ValidateToken(CoreWCF.IdentityModel.Tokens.SessionSecurityToken,System.String)
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: ValidateToken(SessionSecurityToken, String)
  nameWithType: SessionSecurityTokenHandler.ValidateToken(SessionSecurityToken, String)
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(CoreWCF.IdentityModel.Tokens.SessionSecurityToken, System.String)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public virtual ReadOnlyCollection<ClaimsIdentity> ValidateToken(SessionSecurityToken token, string endpointId)
    parameters:
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SessionSecurityToken
    - id: endpointId
      type: System.String
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}
    content.vb: Public Overridable Function ValidateToken(token As SessionSecurityToken, endpointId As String) As ReadOnlyCollection(Of ClaimsIdentity)
  overload: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession(CoreWCF.IdentityModel.Tokens.SessionSecurityToken)
  commentId: M:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession(CoreWCF.IdentityModel.Tokens.SessionSecurityToken)
  id: ValidateSession(CoreWCF.IdentityModel.Tokens.SessionSecurityToken)
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: ValidateSession(SessionSecurityToken)
  nameWithType: SessionSecurityTokenHandler.ValidateSession(SessionSecurityToken)
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession(CoreWCF.IdentityModel.Tokens.SessionSecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: protected virtual void ValidateSession(SessionSecurityToken securityToken)
    parameters:
    - id: securityToken
      type: CoreWCF.IdentityModel.Tokens.SessionSecurityToken
    content.vb: Protected Overridable Sub ValidateSession(securityToken As SessionSecurityToken)
  overload: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(CoreWCF.IdentityModel.Tokens.SessionSecurityToken)
  commentId: M:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(CoreWCF.IdentityModel.Tokens.SessionSecurityToken)
  id: WriteToken(CoreWCF.IdentityModel.Tokens.SessionSecurityToken)
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: WriteToken(SessionSecurityToken)
  nameWithType: SessionSecurityTokenHandler.WriteToken(SessionSecurityToken)
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(CoreWCF.IdentityModel.Tokens.SessionSecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nWrites the token into a byte array.\n"
  syntax:
    content: public virtual byte[] WriteToken(SessionSecurityToken sessionToken)
    parameters:
    - id: sessionToken
      type: CoreWCF.IdentityModel.Tokens.SessionSecurityToken
      description: The SessionSecurityToken to write.
    return:
      type: System.Byte[]
      description: An encoded byte array.
    content.vb: Public Overridable Function WriteToken(sessionToken As SessionSecurityToken) As Byte()
  overload: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if &apos;sessiontoken&apos; is null.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,CoreWCF.IdentityModel.Tokens.SecurityToken)
  commentId: M:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,CoreWCF.IdentityModel.Tokens.SecurityToken)
  id: WriteToken(System.Xml.XmlWriter,CoreWCF.IdentityModel.Tokens.SecurityToken)
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: WriteToken(XmlWriter, SecurityToken)
  nameWithType: SessionSecurityTokenHandler.WriteToken(XmlWriter, SecurityToken)
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.Xml.XmlWriter, CoreWCF.IdentityModel.Tokens.SecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public override void WriteToken(XmlWriter writer, SecurityToken token)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    content.vb: Public Overrides Sub WriteToken(writer As XmlWriter, token As SecurityToken)
  overridden: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,CoreWCF.IdentityModel.Tokens.SecurityToken)
  overload: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName
  commentId: P:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName
  id: CookieElementName
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: CookieElementName
  nameWithType: SessionSecurityTokenHandler.CookieElementName
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nGets the name for the cookie element.\n"
  syntax:
    content: public virtual string CookieElementName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable ReadOnly Property CookieElementName As String
  overload: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace
  commentId: P:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace
  id: CookieNamespace
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: CookieNamespace
  nameWithType: SessionSecurityTokenHandler.CookieNamespace
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nGets the namspace for the cookie element.\n"
  syntax:
    content: public virtual string CookieNamespace { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Overridable ReadOnly Property CookieNamespace As String
  overload: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken
  commentId: P:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken
  id: CanValidateToken
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: CanValidateToken
  nameWithType: SessionSecurityTokenHandler.CanValidateToken
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nIndicates whether this handler supports validation of tokens.\n"
  syntax:
    content: public override bool CanValidateToken { get; }
    parameters: []
    return:
      type: System.Boolean
      description: '&apos;True&apos; if the class is capable of SecurityToken validation.'
    content.vb: Public Overrides ReadOnly Property CanValidateToken As Boolean
  overridden: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken
  overload: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken
  commentId: P:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken
  id: CanWriteToken
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: CanWriteToken
  nameWithType: SessionSecurityTokenHandler.CanWriteToken
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nGets information on whether this Token Handler can write tokens.\n"
  syntax:
    content: public override bool CanWriteToken { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property CanWriteToken As Boolean
  overridden: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken
  overload: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime
  commentId: P:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime
  id: DefaultTokenLifetime
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: DefaultTokenLifetime
  nameWithType: SessionSecurityTokenHandler.DefaultTokenLifetime
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nGets the default token lifetime\n"
  syntax:
    content: public static TimeSpan DefaultTokenLifetime { get; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public Shared ReadOnly Property DefaultTokenLifetime As TimeSpan
  overload: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime
  commentId: P:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime
  id: TokenLifetime
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: TokenLifetime
  nameWithType: SessionSecurityTokenHandler.TokenLifetime
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nGets or sets the TokenLifetime.\n"
  syntax:
    content: public virtual TimeSpan TokenLifetime { get; set; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public Overridable Property TokenLifetime As TimeSpan
  overload: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType
  commentId: P:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType
  id: TokenType
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: TokenType
  nameWithType: SessionSecurityTokenHandler.TokenType
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nGets the type of token this handler can work with.\n"
  syntax:
    content: public override Type TokenType { get; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public Overrides ReadOnly Property TokenType As Type
  overridden: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.TokenType
  overload: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms
  commentId: P:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms
  id: Transforms
  parent: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  - vb
  name: Transforms
  nameWithType: SessionSecurityTokenHandler.Transforms
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nGets the transforms that will be applied to the cookie.\n"
  syntax:
    content: public ReadOnlyCollection<CookieTransform> Transforms { get; }
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.CookieTransform}
    content.vb: Public ReadOnly Property Transforms As ReadOnlyCollection(Of CookieTransform)
  overload: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: CoreWCF.IdentityModel.Tokens
  commentId: N:CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: CoreWCF.IdentityModel.Tokens
  nameWithType: CoreWCF.IdentityModel.Tokens
  fullName: CoreWCF.IdentityModel.Tokens
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityTokenHandler
  nameWithType: SecurityTokenHandler
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: true
  name: CanReadToken(String)
  nameWithType: SecurityTokenHandler.CanReadToken(String)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)
    name: CanReadToken
    nameWithType: SecurityTokenHandler.CanReadToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)
    name: CanReadToken
    nameWithType: SecurityTokenHandler.CanReadToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: true
  name: ReadToken(String)
  nameWithType: SecurityTokenHandler.ReadToken(String)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)
    name: ReadToken
    nameWithType: SecurityTokenHandler.ReadToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)
    name: ReadToken
    nameWithType: SecurityTokenHandler.ReadToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: true
  name: WriteToken(SecurityToken)
  nameWithType: SecurityTokenHandler.WriteToken(SecurityToken)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
    name: WriteToken
    nameWithType: SecurityTokenHandler.WriteToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
    name: WriteToken
    nameWithType: SecurityTokenHandler.WriteToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: true
  name: CanReadKeyIdentifierClause(XmlReader)
  nameWithType: SecurityTokenHandler.CanReadKeyIdentifierClause(XmlReader)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)
    name: CanReadKeyIdentifierClause
    nameWithType: SecurityTokenHandler.CanReadKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)
    name: CanReadKeyIdentifierClause
    nameWithType: SecurityTokenHandler.CanReadKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: true
  name: ReadKeyIdentifierClause(XmlReader)
  nameWithType: SecurityTokenHandler.ReadKeyIdentifierClause(XmlReader)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)
    name: ReadKeyIdentifierClause
    nameWithType: SecurityTokenHandler.ReadKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)
    name: ReadKeyIdentifierClause
    nameWithType: SecurityTokenHandler.ReadKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: true
  name: CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause)
  nameWithType: SecurityTokenHandler.CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
    name: CanWriteKeyIdentifierClause
    nameWithType: SecurityTokenHandler.CanWriteKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
    name: CanWriteKeyIdentifierClause
    nameWithType: SecurityTokenHandler.CanWriteKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: true
  name: WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause)
  nameWithType: SecurityTokenHandler.WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter, CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
    name: WriteKeyIdentifierClause
    nameWithType: SecurityTokenHandler.WriteKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
    name: WriteKeyIdentifierClause
    nameWithType: SecurityTokenHandler.WriteKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(CoreWCF.IdentityModel.Tokens.SecurityToken,System.Boolean)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(CoreWCF.IdentityModel.Tokens.SecurityToken,System.Boolean)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: true
  name: CreateSecurityTokenReference(SecurityToken, Boolean)
  nameWithType: SecurityTokenHandler.CreateSecurityTokenReference(SecurityToken, Boolean)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(CoreWCF.IdentityModel.Tokens.SecurityToken, System.Boolean)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(CoreWCF.IdentityModel.Tokens.SecurityToken,System.Boolean)
    name: CreateSecurityTokenReference
    nameWithType: SecurityTokenHandler.CreateSecurityTokenReference
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(CoreWCF.IdentityModel.Tokens.SecurityToken,System.Boolean)
    name: CreateSecurityTokenReference
    nameWithType: SecurityTokenHandler.CreateSecurityTokenReference
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: true
  name: DetectReplayedToken(SecurityToken)
  nameWithType: SecurityTokenHandler.DetectReplayedToken(SecurityToken)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
    name: DetectReplayedToken
    nameWithType: SecurityTokenHandler.DetectReplayedToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
    name: DetectReplayedToken
    nameWithType: SecurityTokenHandler.DetectReplayedToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.Configuration
  commentId: P:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.Configuration
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: true
  name: Configuration
  nameWithType: SecurityTokenHandler.Configuration
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.Configuration
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection
  commentId: P:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: true
  name: ContainingCollection
  nameWithType: SecurityTokenHandler.ContainingCollection
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor
  isExternal: true
  name: SessionSecurityTokenHandler
  nameWithType: SessionSecurityTokenHandler.SessionSecurityTokenHandler
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.SessionSecurityTokenHandler
- uid: System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.CookieTransform}
  commentId: '!:System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.CookieTransform}'
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<CookieTransform>
  nameWithType: ReadOnlyCollection<CookieTransform>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<CoreWCF.IdentityModel.CookieTransform>
  nameWithType.vb: ReadOnlyCollection(Of CookieTransform)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of CoreWCF.IdentityModel.CookieTransform)
  name.vb: ReadOnlyCollection(Of CookieTransform)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreWCF.IdentityModel.CookieTransform
    name: CookieTransform
    nameWithType: CookieTransform
    fullName: CoreWCF.IdentityModel.CookieTransform
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreWCF.IdentityModel.CookieTransform
    name: CookieTransform
    nameWithType: CookieTransform
    fullName: CoreWCF.IdentityModel.CookieTransform
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<>
  nameWithType: ReadOnlyCollection<>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<>
  nameWithType.vb: ReadOnlyCollection(Of )
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of )
  name.vb: ReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms
  isExternal: true
  name: ApplyTransforms
  nameWithType: SessionSecurityTokenHandler.ApplyTransforms
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: true
  name: CanReadToken(XmlReader)
  nameWithType: SecurityTokenHandler.CanReadToken(XmlReader)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
    name: CanReadToken
    nameWithType: SecurityTokenHandler.CanReadToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
    name: CanReadToken
    nameWithType: SecurityTokenHandler.CanReadToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken
  isExternal: true
  name: CanReadToken
  nameWithType: SessionSecurityTokenHandler.CanReadToken
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken
- uid: System.Xml.XmlReader
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: true
  name: CreateToken(SecurityTokenDescriptor)
  nameWithType: SecurityTokenHandler.CreateToken(SecurityTokenDescriptor)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor)
    name: CreateToken
    nameWithType: SecurityTokenHandler.CreateToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor
    name: SecurityTokenDescriptor
    nameWithType: SecurityTokenDescriptor
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor)
    name: CreateToken
    nameWithType: SecurityTokenHandler.CreateToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CreateToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor
    name: SecurityTokenDescriptor
    nameWithType: SecurityTokenDescriptor
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken
  isExternal: true
  name: CreateToken
  nameWithType: SessionSecurityTokenHandler.CreateToken
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityTokenDescriptor
  nameWithType: SecurityTokenDescriptor
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor
- uid: CoreWCF.IdentityModel.Tokens.SecurityToken
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityToken
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityToken
  nameWithType: SecurityToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken
  isExternal: true
  name: CreateSessionSecurityToken
  nameWithType: SessionSecurityTokenHandler.CreateSessionSecurityToken
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken
- uid: System.Security.Claims.ClaimsPrincipal
  isExternal: true
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityToken
  commentId: T:CoreWCF.IdentityModel.Tokens.SessionSecurityToken
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SessionSecurityToken
  nameWithType: SessionSecurityToken
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityToken
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken
  isExternal: true
  name: ReadToken
  nameWithType: SessionSecurityTokenHandler.ReadToken
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  commentId: T:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  parent: CoreWCF.IdentityModel.Selectors
  isExternal: true
  name: SecurityTokenResolver
  nameWithType: SecurityTokenResolver
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
- uid: CoreWCF.IdentityModel.Selectors
  commentId: N:CoreWCF.IdentityModel.Selectors
  isExternal: true
  name: CoreWCF.IdentityModel.Selectors
  nameWithType: CoreWCF.IdentityModel.Selectors
  fullName: CoreWCF.IdentityModel.Selectors
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: true
  name: ReadToken(XmlReader)
  nameWithType: SecurityTokenHandler.ReadToken(XmlReader)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)
    name: ReadToken
    nameWithType: SecurityTokenHandler.ReadToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader)
    name: ReadToken
    nameWithType: SecurityTokenHandler.ReadToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: true
  name: ReadToken(XmlReader, SecurityTokenResolver)
  nameWithType: SecurityTokenHandler.ReadToken(XmlReader, SecurityTokenResolver)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader, CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
    name: ReadToken
    nameWithType: SecurityTokenHandler.ReadToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
    name: SecurityTokenResolver
    nameWithType: SecurityTokenResolver
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader,CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
    name: ReadToken
    nameWithType: SecurityTokenHandler.ReadToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ReadToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlReader
    name: XmlReader
    nameWithType: XmlReader
    fullName: System.Xml.XmlReader
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
    name: SecurityTokenResolver
    nameWithType: SecurityTokenResolver
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: true
  name: GetTokenTypeIdentifiers()
  nameWithType: SecurityTokenHandler.GetTokenTypeIdentifiers()
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers()
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers
    name: GetTokenTypeIdentifiers
    nameWithType: SecurityTokenHandler.GetTokenTypeIdentifiers
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers
    name: GetTokenTypeIdentifiers
    nameWithType: SecurityTokenHandler.GetTokenTypeIdentifiers
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.GetTokenTypeIdentifiers
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers
  isExternal: true
  name: GetTokenTypeIdentifiers
  nameWithType: SessionSecurityTokenHandler.GetTokenTypeIdentifiers
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms
  isExternal: true
  name: SetTransforms
  nameWithType: SessionSecurityTokenHandler.SetTransforms
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms
- uid: System.Collections.Generic.IEnumerable{CoreWCF.IdentityModel.CookieTransform}
  commentId: '!:System.Collections.Generic.IEnumerable{CoreWCF.IdentityModel.CookieTransform}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<CookieTransform>
  nameWithType: IEnumerable<CookieTransform>
  fullName: System.Collections.Generic.IEnumerable<CoreWCF.IdentityModel.CookieTransform>
  nameWithType.vb: IEnumerable(Of CookieTransform)
  fullName.vb: System.Collections.Generic.IEnumerable(Of CoreWCF.IdentityModel.CookieTransform)
  name.vb: IEnumerable(Of CookieTransform)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreWCF.IdentityModel.CookieTransform
    name: CookieTransform
    nameWithType: CookieTransform
    fullName: CoreWCF.IdentityModel.CookieTransform
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreWCF.IdentityModel.CookieTransform
    name: CookieTransform
    nameWithType: CookieTransform
    fullName: CoreWCF.IdentityModel.CookieTransform
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: true
  name: ValidateToken(SecurityToken)
  nameWithType: SecurityTokenHandler.ValidateToken(SecurityToken)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
    name: ValidateToken
    nameWithType: SecurityTokenHandler.ValidateToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
    name: ValidateToken
    nameWithType: SecurityTokenHandler.ValidateToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken
  isExternal: true
  name: ValidateToken
  nameWithType: SessionSecurityTokenHandler.ValidateToken
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}
  commentId: '!:System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}'
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<ClaimsIdentity>
  nameWithType: ReadOnlyCollection<ClaimsIdentity>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Security.Claims.ClaimsIdentity>
  nameWithType.vb: ReadOnlyCollection(Of ClaimsIdentity)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.Security.Claims.ClaimsIdentity)
  name.vb: ReadOnlyCollection(Of ClaimsIdentity)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: System.Security.Claims.ClaimsIdentity
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: System.Security.Claims.ClaimsIdentity
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession
  isExternal: true
  name: ValidateSession
  nameWithType: SessionSecurityTokenHandler.ValidateSession
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken
  isExternal: true
  name: WriteToken
  nameWithType: SessionSecurityTokenHandler.WriteToken
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,CoreWCF.IdentityModel.Tokens.SecurityToken)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,CoreWCF.IdentityModel.Tokens.SecurityToken)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: true
  name: WriteToken(XmlWriter, SecurityToken)
  nameWithType: SecurityTokenHandler.WriteToken(XmlWriter, SecurityToken)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter, CoreWCF.IdentityModel.Tokens.SecurityToken)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,CoreWCF.IdentityModel.Tokens.SecurityToken)
    name: WriteToken
    nameWithType: SecurityTokenHandler.WriteToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.Xml.XmlWriter,CoreWCF.IdentityModel.Tokens.SecurityToken)
    name: WriteToken
    nameWithType: SecurityTokenHandler.WriteToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.WriteToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    nameWithType: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.XmlWriter
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName
  isExternal: true
  name: CookieElementName
  nameWithType: SessionSecurityTokenHandler.CookieElementName
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace
  isExternal: true
  name: CookieNamespace
  nameWithType: SessionSecurityTokenHandler.CookieNamespace
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken
  commentId: P:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: true
  name: CanValidateToken
  nameWithType: SecurityTokenHandler.CanValidateToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken
  isExternal: true
  name: CanValidateToken
  nameWithType: SessionSecurityTokenHandler.CanValidateToken
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken
  commentId: P:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: true
  name: CanWriteToken
  nameWithType: SecurityTokenHandler.CanWriteToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken
  isExternal: true
  name: CanWriteToken
  nameWithType: SessionSecurityTokenHandler.CanWriteToken
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime
  isExternal: true
  name: DefaultTokenLifetime
  nameWithType: SessionSecurityTokenHandler.DefaultTokenLifetime
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime
  isExternal: true
  name: TokenLifetime
  nameWithType: SessionSecurityTokenHandler.TokenLifetime
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.TokenType
  commentId: P:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.TokenType
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: true
  name: TokenType
  nameWithType: SecurityTokenHandler.TokenType
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.TokenType
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType
  isExternal: true
  name: TokenType
  nameWithType: SessionSecurityTokenHandler.TokenType
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType
- uid: System.Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms
  isExternal: true
  name: Transforms
  nameWithType: SessionSecurityTokenHandler.Transforms
  fullName: CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms
