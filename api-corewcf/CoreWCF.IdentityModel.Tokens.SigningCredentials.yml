### YamlMime:ManagedReference
items:
- uid: CoreWCF.IdentityModel.Tokens.SigningCredentials
  commentId: T:CoreWCF.IdentityModel.Tokens.SigningCredentials
  id: SigningCredentials
  parent: CoreWCF.IdentityModel.Tokens
  children:
  - CoreWCF.IdentityModel.Tokens.SigningCredentials.#ctor(CoreWCF.IdentityModel.Tokens.SecurityKey,System.String,System.String)
  - CoreWCF.IdentityModel.Tokens.SigningCredentials.#ctor(CoreWCF.IdentityModel.Tokens.SecurityKey,System.String,System.String,CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
  - CoreWCF.IdentityModel.Tokens.SigningCredentials.DigestAlgorithm
  - CoreWCF.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm
  - CoreWCF.IdentityModel.Tokens.SigningCredentials.SigningKey
  - CoreWCF.IdentityModel.Tokens.SigningCredentials.SigningKeyIdentifier
  langs:
  - csharp
  - vb
  name: SigningCredentials
  nameWithType: SigningCredentials
  fullName: CoreWCF.IdentityModel.Tokens.SigningCredentials
  type: Class
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: Represents the cryptographic key and security algorithms that are used to generate a digital signature.
  remarks: "Use the &lt;xref:System.IdentityModel.Tokens.SigningCredentials> class to specify the signing key, signing key identifier, and security algorithms that are used by WCF to generate the digital signature for a &lt;xref:System.IdentityModel.Tokens.SamlAssertion>. To set the digital signature details, set the &lt;xref:System.IdentityModel.Tokens.SamlAssertion.SigningCredentials%2A> property of the &lt;xref:System.IdentityModel.Tokens.SamlAssertion> class.  \n\n"
  syntax:
    content: 'public class SigningCredentials : Object'
    content.vb: >-
      Public Class SigningCredentials
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CoreWCF.IdentityModel.Tokens.SigningCredentials.#ctor(CoreWCF.IdentityModel.Tokens.SecurityKey,System.String,System.String)
  commentId: M:CoreWCF.IdentityModel.Tokens.SigningCredentials.#ctor(CoreWCF.IdentityModel.Tokens.SecurityKey,System.String,System.String)
  id: '#ctor(CoreWCF.IdentityModel.Tokens.SecurityKey,System.String,System.String)'
  parent: CoreWCF.IdentityModel.Tokens.SigningCredentials
  langs:
  - csharp
  - vb
  name: SigningCredentials(SecurityKey, String, String)
  nameWithType: SigningCredentials.SigningCredentials(SecurityKey, String, String)
  fullName: CoreWCF.IdentityModel.Tokens.SigningCredentials.SigningCredentials(CoreWCF.IdentityModel.Tokens.SecurityKey, System.String, System.String)
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public SigningCredentials(SecurityKey signingKey, string signatureAlgorithm, string digestAlgorithm)
    parameters:
    - id: signingKey
      type: CoreWCF.IdentityModel.Tokens.SecurityKey
    - id: signatureAlgorithm
      type: System.String
    - id: digestAlgorithm
      type: System.String
    content.vb: Public Sub New(signingKey As SecurityKey, signatureAlgorithm As String, digestAlgorithm As String)
  overload: CoreWCF.IdentityModel.Tokens.SigningCredentials.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.SigningCredentials.#ctor(CoreWCF.IdentityModel.Tokens.SecurityKey,System.String,System.String,CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
  commentId: M:CoreWCF.IdentityModel.Tokens.SigningCredentials.#ctor(CoreWCF.IdentityModel.Tokens.SecurityKey,System.String,System.String,CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
  id: '#ctor(CoreWCF.IdentityModel.Tokens.SecurityKey,System.String,System.String,CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)'
  parent: CoreWCF.IdentityModel.Tokens.SigningCredentials
  langs:
  - csharp
  - vb
  name: SigningCredentials(SecurityKey, String, String, SecurityKeyIdentifier)
  nameWithType: SigningCredentials.SigningCredentials(SecurityKey, String, String, SecurityKeyIdentifier)
  fullName: CoreWCF.IdentityModel.Tokens.SigningCredentials.SigningCredentials(CoreWCF.IdentityModel.Tokens.SecurityKey, System.String, System.String, CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public SigningCredentials(SecurityKey signingKey, string signatureAlgorithm, string digestAlgorithm, SecurityKeyIdentifier signingKeyIdentifier)
    parameters:
    - id: signingKey
      type: CoreWCF.IdentityModel.Tokens.SecurityKey
    - id: signatureAlgorithm
      type: System.String
    - id: digestAlgorithm
      type: System.String
    - id: signingKeyIdentifier
      type: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    content.vb: Public Sub New(signingKey As SecurityKey, signatureAlgorithm As String, digestAlgorithm As String, signingKeyIdentifier As SecurityKeyIdentifier)
  overload: CoreWCF.IdentityModel.Tokens.SigningCredentials.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.SigningCredentials.DigestAlgorithm
  commentId: P:CoreWCF.IdentityModel.Tokens.SigningCredentials.DigestAlgorithm
  id: DigestAlgorithm
  parent: CoreWCF.IdentityModel.Tokens.SigningCredentials
  langs:
  - csharp
  - vb
  name: DigestAlgorithm
  nameWithType: SigningCredentials.DigestAlgorithm
  fullName: CoreWCF.IdentityModel.Tokens.SigningCredentials.DigestAlgorithm
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public string DigestAlgorithm { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property DigestAlgorithm As String
  overload: CoreWCF.IdentityModel.Tokens.SigningCredentials.DigestAlgorithm*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CoreWCF.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm
  commentId: P:CoreWCF.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: CoreWCF.IdentityModel.Tokens.SigningCredentials
  langs:
  - csharp
  - vb
  name: SignatureAlgorithm
  nameWithType: SigningCredentials.SignatureAlgorithm
  fullName: CoreWCF.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public string SignatureAlgorithm { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property SignatureAlgorithm As String
  overload: CoreWCF.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CoreWCF.IdentityModel.Tokens.SigningCredentials.SigningKey
  commentId: P:CoreWCF.IdentityModel.Tokens.SigningCredentials.SigningKey
  id: SigningKey
  parent: CoreWCF.IdentityModel.Tokens.SigningCredentials
  langs:
  - csharp
  - vb
  name: SigningKey
  nameWithType: SigningCredentials.SigningKey
  fullName: CoreWCF.IdentityModel.Tokens.SigningCredentials.SigningKey
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public SecurityKey SigningKey { get; }
    parameters: []
    return:
      type: CoreWCF.IdentityModel.Tokens.SecurityKey
    content.vb: Public ReadOnly Property SigningKey As SecurityKey
  overload: CoreWCF.IdentityModel.Tokens.SigningCredentials.SigningKey*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CoreWCF.IdentityModel.Tokens.SigningCredentials.SigningKeyIdentifier
  commentId: P:CoreWCF.IdentityModel.Tokens.SigningCredentials.SigningKeyIdentifier
  id: SigningKeyIdentifier
  parent: CoreWCF.IdentityModel.Tokens.SigningCredentials
  langs:
  - csharp
  - vb
  name: SigningKeyIdentifier
  nameWithType: SigningCredentials.SigningKeyIdentifier
  fullName: CoreWCF.IdentityModel.Tokens.SigningCredentials.SigningKeyIdentifier
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public SecurityKeyIdentifier SigningKeyIdentifier { get; }
    parameters: []
    return:
      type: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    content.vb: Public ReadOnly Property SigningKeyIdentifier As SecurityKeyIdentifier
  overload: CoreWCF.IdentityModel.Tokens.SigningCredentials.SigningKeyIdentifier*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: CoreWCF.IdentityModel.Tokens
  commentId: N:CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: CoreWCF.IdentityModel.Tokens
  nameWithType: CoreWCF.IdentityModel.Tokens
  fullName: CoreWCF.IdentityModel.Tokens
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CoreWCF.IdentityModel.Tokens.SigningCredentials.#ctor*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SigningCredentials.#ctor
  isExternal: true
  name: SigningCredentials
  nameWithType: SigningCredentials.SigningCredentials
  fullName: CoreWCF.IdentityModel.Tokens.SigningCredentials.SigningCredentials
- uid: CoreWCF.IdentityModel.Tokens.SecurityKey
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityKey
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityKey
  nameWithType: SecurityKey
  fullName: CoreWCF.IdentityModel.Tokens.SecurityKey
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityKeyIdentifier
  nameWithType: SecurityKeyIdentifier
  fullName: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
- uid: CoreWCF.IdentityModel.Tokens.SigningCredentials.DigestAlgorithm*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SigningCredentials.DigestAlgorithm
  isExternal: true
  name: DigestAlgorithm
  nameWithType: SigningCredentials.DigestAlgorithm
  fullName: CoreWCF.IdentityModel.Tokens.SigningCredentials.DigestAlgorithm
- uid: CoreWCF.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm
  isExternal: true
  name: SignatureAlgorithm
  nameWithType: SigningCredentials.SignatureAlgorithm
  fullName: CoreWCF.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm
- uid: CoreWCF.IdentityModel.Tokens.SigningCredentials.SigningKey*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SigningCredentials.SigningKey
  isExternal: true
  name: SigningKey
  nameWithType: SigningCredentials.SigningKey
  fullName: CoreWCF.IdentityModel.Tokens.SigningCredentials.SigningKey
- uid: CoreWCF.IdentityModel.Tokens.SigningCredentials.SigningKeyIdentifier*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SigningCredentials.SigningKeyIdentifier
  isExternal: true
  name: SigningKeyIdentifier
  nameWithType: SigningCredentials.SigningKeyIdentifier
  fullName: CoreWCF.IdentityModel.Tokens.SigningCredentials.SigningKeyIdentifier
