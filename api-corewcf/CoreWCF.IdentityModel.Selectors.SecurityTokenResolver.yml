### YamlMime:ManagedReference
items:
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  commentId: T:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  id: SecurityTokenResolver
  parent: CoreWCF.IdentityModel.Selectors
  children:
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.#ctor
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Tokens.SecurityToken},System.Boolean)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  langs:
  - csharp
  - vb
  name: SecurityTokenResolver
  nameWithType: SecurityTokenResolver
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  type: Class
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Selectors
  summary: Represents a utility class that can retrieve security tokens or keys when you have a key identifier or key identifier clause.
  remarks: "Use the &lt;xref:System.IdentityModel.Selectors.SecurityTokenResolver> class to retrieve a key or security token when you have a key identifier or key identifier clause. The &lt;xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A> and &lt;xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A> methods retrieve a token given that there is a key identifier or key identifier clause. The &lt;xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey%2A> and &lt;xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey%2A> retrieve a key given that there is a key identifier clause. The methods with a `Try` prefix return `false` when the retrieval is unsuccessful, whereas the methods without a `Try` prefix throw an exception.  \n\n"
  syntax:
    content: 'public abstract class SecurityTokenResolver : Object'
    content.vb: >-
      Public MustInherit Class SecurityTokenResolver
          Inherits Object
  inheritance:
  - System.Object
  derivedClasses:
  - CoreWCF.IdentityModel.Tokens.IssuerTokenResolver
  - CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver
  - CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
  id: ResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  langs:
  - csharp
  - vb
  name: ResolveToken(SecurityKeyIdentifier)
  nameWithType: SecurityTokenResolver.ResolveToken(SecurityKeyIdentifier)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Selectors
  syntax:
    content: public SecurityToken ResolveToken(SecurityKeyIdentifier keyIdentifier)
    parameters:
    - id: keyIdentifier
      type: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    return:
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    content.vb: Public Function ResolveToken(keyIdentifier As SecurityKeyIdentifier) As SecurityToken
  overload: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  id: TryResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  langs:
  - csharp
  - vb
  name: TryResolveToken(SecurityKeyIdentifier, out SecurityToken)
  nameWithType: SecurityTokenResolver.TryResolveToken(SecurityKeyIdentifier, out SecurityToken)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier, out CoreWCF.IdentityModel.Tokens.SecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Selectors
  syntax:
    content: public bool TryResolveToken(SecurityKeyIdentifier keyIdentifier, out SecurityToken token)
    parameters:
    - id: keyIdentifier
      type: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    return:
      type: System.Boolean
    content.vb: Public Function TryResolveToken(keyIdentifier As SecurityKeyIdentifier, ByRef token As SecurityToken) As Boolean
  overload: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken*
  nameWithType.vb: SecurityTokenResolver.TryResolveToken(SecurityKeyIdentifier, ByRef SecurityToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier, ByRef CoreWCF.IdentityModel.Tokens.SecurityToken)
  name.vb: TryResolveToken(SecurityKeyIdentifier, ByRef SecurityToken)
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  id: ResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  langs:
  - csharp
  - vb
  name: ResolveToken(SecurityKeyIdentifierClause)
  nameWithType: SecurityTokenResolver.ResolveToken(SecurityKeyIdentifierClause)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Selectors
  syntax:
    content: public SecurityToken ResolveToken(SecurityKeyIdentifierClause keyIdentifierClause)
    parameters:
    - id: keyIdentifierClause
      type: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    return:
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    content.vb: Public Function ResolveToken(keyIdentifierClause As SecurityKeyIdentifierClause) As SecurityToken
  overload: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  id: TryResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  langs:
  - csharp
  - vb
  name: TryResolveToken(SecurityKeyIdentifierClause, out SecurityToken)
  nameWithType: SecurityTokenResolver.TryResolveToken(SecurityKeyIdentifierClause, out SecurityToken)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, out CoreWCF.IdentityModel.Tokens.SecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Selectors
  syntax:
    content: public bool TryResolveToken(SecurityKeyIdentifierClause keyIdentifierClause, out SecurityToken token)
    parameters:
    - id: keyIdentifierClause
      type: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    return:
      type: System.Boolean
    content.vb: Public Function TryResolveToken(keyIdentifierClause As SecurityKeyIdentifierClause, ByRef token As SecurityToken) As Boolean
  overload: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken*
  nameWithType.vb: SecurityTokenResolver.TryResolveToken(SecurityKeyIdentifierClause, ByRef SecurityToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, ByRef CoreWCF.IdentityModel.Tokens.SecurityToken)
  name.vb: TryResolveToken(SecurityKeyIdentifierClause, ByRef SecurityToken)
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  id: ResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  langs:
  - csharp
  - vb
  name: ResolveSecurityKey(SecurityKeyIdentifierClause)
  nameWithType: SecurityTokenResolver.ResolveSecurityKey(SecurityKeyIdentifierClause)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Selectors
  syntax:
    content: public SecurityKey ResolveSecurityKey(SecurityKeyIdentifierClause keyIdentifierClause)
    parameters:
    - id: keyIdentifierClause
      type: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    return:
      type: CoreWCF.IdentityModel.Tokens.SecurityKey
    content.vb: Public Function ResolveSecurityKey(keyIdentifierClause As SecurityKeyIdentifierClause) As SecurityKey
  overload: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  id: TryResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  langs:
  - csharp
  - vb
  name: TryResolveSecurityKey(SecurityKeyIdentifierClause, out SecurityKey)
  nameWithType: SecurityTokenResolver.TryResolveSecurityKey(SecurityKeyIdentifierClause, out SecurityKey)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, out CoreWCF.IdentityModel.Tokens.SecurityKey)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Selectors
  syntax:
    content: public bool TryResolveSecurityKey(SecurityKeyIdentifierClause keyIdentifierClause, out SecurityKey key)
    parameters:
    - id: keyIdentifierClause
      type: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    - id: key
      type: CoreWCF.IdentityModel.Tokens.SecurityKey
    return:
      type: System.Boolean
    content.vb: Public Function TryResolveSecurityKey(keyIdentifierClause As SecurityKeyIdentifierClause, ByRef key As SecurityKey) As Boolean
  overload: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey*
  nameWithType.vb: SecurityTokenResolver.TryResolveSecurityKey(SecurityKeyIdentifierClause, ByRef SecurityKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, ByRef CoreWCF.IdentityModel.Tokens.SecurityKey)
  name.vb: TryResolveSecurityKey(SecurityKeyIdentifierClause, ByRef SecurityKey)
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  id: TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  langs:
  - csharp
  - vb
  name: TryResolveTokenCore(SecurityKeyIdentifier, out SecurityToken)
  nameWithType: SecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier, out SecurityToken)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier, out CoreWCF.IdentityModel.Tokens.SecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Selectors
  syntax:
    content: protected abstract bool TryResolveTokenCore(SecurityKeyIdentifier keyIdentifier, out SecurityToken token)
    parameters:
    - id: keyIdentifier
      type: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    return:
      type: System.Boolean
    content.vb: Protected MustOverride Function TryResolveTokenCore(keyIdentifier As SecurityKeyIdentifier, ByRef token As SecurityToken) As Boolean
  overload: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore*
  nameWithType.vb: SecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier, ByRef SecurityToken)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier, ByRef CoreWCF.IdentityModel.Tokens.SecurityToken)
  name.vb: TryResolveTokenCore(SecurityKeyIdentifier, ByRef SecurityToken)
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  id: TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  langs:
  - csharp
  - vb
  name: TryResolveTokenCore(SecurityKeyIdentifierClause, out SecurityToken)
  nameWithType: SecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause, out SecurityToken)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, out CoreWCF.IdentityModel.Tokens.SecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Selectors
  syntax:
    content: protected abstract bool TryResolveTokenCore(SecurityKeyIdentifierClause keyIdentifierClause, out SecurityToken token)
    parameters:
    - id: keyIdentifierClause
      type: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    return:
      type: System.Boolean
    content.vb: Protected MustOverride Function TryResolveTokenCore(keyIdentifierClause As SecurityKeyIdentifierClause, ByRef token As SecurityToken) As Boolean
  overload: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore*
  nameWithType.vb: SecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause, ByRef SecurityToken)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, ByRef CoreWCF.IdentityModel.Tokens.SecurityToken)
  name.vb: TryResolveTokenCore(SecurityKeyIdentifierClause, ByRef SecurityToken)
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  id: TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  langs:
  - csharp
  - vb
  name: TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, out SecurityKey)
  nameWithType: SecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, out SecurityKey)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, out CoreWCF.IdentityModel.Tokens.SecurityKey)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Selectors
  syntax:
    content: protected abstract bool TryResolveSecurityKeyCore(SecurityKeyIdentifierClause keyIdentifierClause, out SecurityKey key)
    parameters:
    - id: keyIdentifierClause
      type: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    - id: key
      type: CoreWCF.IdentityModel.Tokens.SecurityKey
    return:
      type: System.Boolean
    content.vb: Protected MustOverride Function TryResolveSecurityKeyCore(keyIdentifierClause As SecurityKeyIdentifierClause, ByRef key As SecurityKey) As Boolean
  overload: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore*
  nameWithType.vb: SecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, ByRef SecurityKey)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, ByRef CoreWCF.IdentityModel.Tokens.SecurityKey)
  name.vb: TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, ByRef SecurityKey)
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Tokens.SecurityToken},System.Boolean)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Tokens.SecurityToken},System.Boolean)
  id: CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Tokens.SecurityToken},System.Boolean)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  langs:
  - csharp
  - vb
  name: CreateDefaultSecurityTokenResolver(ReadOnlyCollection<SecurityToken>, Boolean)
  nameWithType: SecurityTokenResolver.CreateDefaultSecurityTokenResolver(ReadOnlyCollection<SecurityToken>, Boolean)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection<CoreWCF.IdentityModel.Tokens.SecurityToken>, System.Boolean)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Selectors
  syntax:
    content: public static SecurityTokenResolver CreateDefaultSecurityTokenResolver(ReadOnlyCollection<SecurityToken> tokens, bool canMatchLocalId)
    parameters:
    - id: tokens
      type: System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Tokens.SecurityToken}
    - id: canMatchLocalId
      type: System.Boolean
    return:
      type: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
    content.vb: Public Shared Function CreateDefaultSecurityTokenResolver(tokens As ReadOnlyCollection(Of SecurityToken), canMatchLocalId As Boolean) As SecurityTokenResolver
  overload: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver*
  nameWithType.vb: SecurityTokenResolver.CreateDefaultSecurityTokenResolver(ReadOnlyCollection(Of SecurityToken), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection(Of CoreWCF.IdentityModel.Tokens.SecurityToken), System.Boolean)
  name.vb: CreateDefaultSecurityTokenResolver(ReadOnlyCollection(Of SecurityToken), Boolean)
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.#ctor
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.#ctor
  id: '#ctor'
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  langs:
  - csharp
  - vb
  name: SecurityTokenResolver()
  nameWithType: SecurityTokenResolver.SecurityTokenResolver()
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.SecurityTokenResolver()
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Selectors
  syntax:
    content: protected SecurityTokenResolver()
    content.vb: Protected Sub New
  overload: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: CoreWCF.IdentityModel.Selectors
  commentId: N:CoreWCF.IdentityModel.Selectors
  isExternal: true
  name: CoreWCF.IdentityModel.Selectors
  nameWithType: CoreWCF.IdentityModel.Selectors
  fullName: CoreWCF.IdentityModel.Selectors
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken*
  commentId: Overload:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken
  isExternal: true
  name: ResolveToken
  nameWithType: SecurityTokenResolver.ResolveToken
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken
- uid: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityKeyIdentifier
  nameWithType: SecurityKeyIdentifier
  fullName: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
- uid: CoreWCF.IdentityModel.Tokens.SecurityToken
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityToken
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityToken
  nameWithType: SecurityToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
- uid: CoreWCF.IdentityModel.Tokens
  commentId: N:CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: CoreWCF.IdentityModel.Tokens
  nameWithType: CoreWCF.IdentityModel.Tokens
  fullName: CoreWCF.IdentityModel.Tokens
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken*
  commentId: Overload:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken
  isExternal: true
  name: TryResolveToken
  nameWithType: SecurityTokenResolver.TryResolveToken
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
  commentId: T:CoreWCF.IdentityModel.SecurityKeyIdentifierClause
  parent: CoreWCF.IdentityModel
  isExternal: true
  name: SecurityKeyIdentifierClause
  nameWithType: SecurityKeyIdentifierClause
  fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
- uid: CoreWCF.IdentityModel
  commentId: N:CoreWCF.IdentityModel
  isExternal: true
  name: CoreWCF.IdentityModel
  nameWithType: CoreWCF.IdentityModel
  fullName: CoreWCF.IdentityModel
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey*
  commentId: Overload:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey
  isExternal: true
  name: ResolveSecurityKey
  nameWithType: SecurityTokenResolver.ResolveSecurityKey
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey
- uid: CoreWCF.IdentityModel.Tokens.SecurityKey
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityKey
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityKey
  nameWithType: SecurityKey
  fullName: CoreWCF.IdentityModel.Tokens.SecurityKey
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey*
  commentId: Overload:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey
  isExternal: true
  name: TryResolveSecurityKey
  nameWithType: SecurityTokenResolver.TryResolveSecurityKey
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore*
  commentId: Overload:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore
  isExternal: true
  name: TryResolveTokenCore
  nameWithType: SecurityTokenResolver.TryResolveTokenCore
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore*
  commentId: Overload:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore
  isExternal: true
  name: TryResolveSecurityKeyCore
  nameWithType: SecurityTokenResolver.TryResolveSecurityKeyCore
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver*
  commentId: Overload:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver
  isExternal: true
  name: CreateDefaultSecurityTokenResolver
  nameWithType: SecurityTokenResolver.CreateDefaultSecurityTokenResolver
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver
- uid: System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Tokens.SecurityToken}
  commentId: '!:System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Tokens.SecurityToken}'
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<SecurityToken>
  nameWithType: ReadOnlyCollection<SecurityToken>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<CoreWCF.IdentityModel.Tokens.SecurityToken>
  nameWithType.vb: ReadOnlyCollection(Of SecurityToken)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of CoreWCF.IdentityModel.Tokens.SecurityToken)
  name.vb: ReadOnlyCollection(Of SecurityToken)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  commentId: T:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  parent: CoreWCF.IdentityModel.Selectors
  isExternal: true
  name: SecurityTokenResolver
  nameWithType: SecurityTokenResolver
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<>
  nameWithType: ReadOnlyCollection<>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<>
  nameWithType.vb: ReadOnlyCollection(Of )
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of )
  name.vb: ReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.#ctor*
  commentId: Overload:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.#ctor
  isExternal: true
  name: SecurityTokenResolver
  nameWithType: SecurityTokenResolver.SecurityTokenResolver
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.SecurityTokenResolver
