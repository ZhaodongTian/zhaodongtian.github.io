### YamlMime:ManagedReference
items:
- uid: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement
  commentId: T:CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement
  id: SamlSecurityTokenRequirement
  parent: CoreWCF.IdentityModel.Tokens
  children:
  - CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.#ctor
  - CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.CertificateValidator
  - CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.NameClaimType
  - CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.RoleClaimType
  - CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.ShouldEnforceAudienceRestriction(CoreWCF.IdentityModel.Selectors.AudienceUriMode,CoreWCF.IdentityModel.Tokens.SecurityToken)
  - CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.ValidateAudienceRestriction(System.Collections.Generic.IList{System.Uri},System.Collections.Generic.IList{System.Uri})
  langs:
  - csharp
  - vb
  name: SamlSecurityTokenRequirement
  nameWithType: SamlSecurityTokenRequirement
  fullName: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement
  type: Class
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: Extends the  class by adding new properties that are useful for issued tokens.
  remarks: To be added.
  syntax:
    content: 'public class SamlSecurityTokenRequirement : Object'
    content.vb: >-
      Public Class SamlSecurityTokenRequirement
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.#ctor
  commentId: M:CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.#ctor
  id: '#ctor'
  parent: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement
  langs:
  - csharp
  - vb
  name: SamlSecurityTokenRequirement()
  nameWithType: SamlSecurityTokenRequirement.SamlSecurityTokenRequirement()
  fullName: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.SamlSecurityTokenRequirement()
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nCreates an instance of <xref href=\"CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement\" data-throw-if-not-resolved=\"false\"></xref>"
  syntax:
    content: public SamlSecurityTokenRequirement()
    content.vb: Public Sub New
  overload: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.ShouldEnforceAudienceRestriction(CoreWCF.IdentityModel.Selectors.AudienceUriMode,CoreWCF.IdentityModel.Tokens.SecurityToken)
  commentId: M:CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.ShouldEnforceAudienceRestriction(CoreWCF.IdentityModel.Selectors.AudienceUriMode,CoreWCF.IdentityModel.Tokens.SecurityToken)
  id: ShouldEnforceAudienceRestriction(CoreWCF.IdentityModel.Selectors.AudienceUriMode,CoreWCF.IdentityModel.Tokens.SecurityToken)
  parent: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement
  langs:
  - csharp
  - vb
  name: ShouldEnforceAudienceRestriction(AudienceUriMode, SecurityToken)
  nameWithType: SamlSecurityTokenRequirement.ShouldEnforceAudienceRestriction(AudienceUriMode, SecurityToken)
  fullName: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.ShouldEnforceAudienceRestriction(CoreWCF.IdentityModel.Selectors.AudienceUriMode, CoreWCF.IdentityModel.Tokens.SecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nChecks if Audience Enforcement checks are required for the given token \nbased on this SamlSecurityTokenRequirement settings.\n"
  syntax:
    content: public virtual bool ShouldEnforceAudienceRestriction(AudienceUriMode audienceUriMode, SecurityToken token)
    parameters:
    - id: audienceUriMode
      type: CoreWCF.IdentityModel.Selectors.AudienceUriMode
      description: "\nThe <xref href=\"CoreWCF.IdentityModel.Selectors.AudienceUriMode\" data-throw-if-not-resolved=\"false\"></xref> defining the audience requirement.\n"
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
      description: "The Security token to be tested for Audience \n      Enforcement."
    return:
      type: System.Boolean
      description: True if Audience Enforcement should be applied.
    content.vb: Public Overridable Function ShouldEnforceAudienceRestriction(audienceUriMode As AudienceUriMode, token As SecurityToken) As Boolean
  overload: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.ShouldEnforceAudienceRestriction*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The input argument &apos;token&apos; is null.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.ValidateAudienceRestriction(System.Collections.Generic.IList{System.Uri},System.Collections.Generic.IList{System.Uri})
  commentId: M:CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.ValidateAudienceRestriction(System.Collections.Generic.IList{System.Uri},System.Collections.Generic.IList{System.Uri})
  id: ValidateAudienceRestriction(System.Collections.Generic.IList{System.Uri},System.Collections.Generic.IList{System.Uri})
  parent: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement
  langs:
  - csharp
  - vb
  name: ValidateAudienceRestriction(IList<Uri>, IList<Uri>)
  nameWithType: SamlSecurityTokenRequirement.ValidateAudienceRestriction(IList<Uri>, IList<Uri>)
  fullName: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.ValidateAudienceRestriction(System.Collections.Generic.IList<System.Uri>, System.Collections.Generic.IList<System.Uri>)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nChecks the given list of Audience URIs with the AllowedAudienceUri list.\n"
  syntax:
    content: public virtual void ValidateAudienceRestriction(IList<Uri> allowedAudienceUris, IList<Uri> tokenAudiences)
    parameters:
    - id: allowedAudienceUris
      type: System.Collections.Generic.IList{System.Uri}
      description: Collection of AudienceUris.
    - id: tokenAudiences
      type: System.Collections.Generic.IList{System.Uri}
      description: Collection of audience URIs the token applies to.
    content.vb: Public Overridable Sub ValidateAudienceRestriction(allowedAudienceUris As IList(Of Uri), tokenAudiences As IList(Of Uri))
  overload: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.ValidateAudienceRestriction*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The input argument &apos;allowedAudienceUris&apos; is null.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The input argument &apos;tokenAudiences&apos; is null.
  - type: CoreWCF.IdentityModel.Tokens.AudienceUriValidationFailedException
    commentId: T:CoreWCF.IdentityModel.Tokens.AudienceUriValidationFailedException
    description: >-
      Either the input argument &apos;tokenAudiences&apos; or the configured
            &apos;AudienceUris&apos; collection is empty.
  nameWithType.vb: SamlSecurityTokenRequirement.ValidateAudienceRestriction(IList(Of Uri), IList(Of Uri))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.ValidateAudienceRestriction(System.Collections.Generic.IList(Of System.Uri), System.Collections.Generic.IList(Of System.Uri))
  name.vb: ValidateAudienceRestriction(IList(Of Uri), IList(Of Uri))
- uid: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.CertificateValidator
  commentId: P:CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.CertificateValidator
  id: CertificateValidator
  parent: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement
  langs:
  - csharp
  - vb
  name: CertificateValidator
  nameWithType: SamlSecurityTokenRequirement.CertificateValidator
  fullName: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.CertificateValidator
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nGets/sets the X509CertificateValidator associated with this token requirement\n"
  syntax:
    content: public X509CertificateValidator CertificateValidator { get; set; }
    parameters: []
    return:
      type: CoreWCF.IdentityModel.Selectors.X509CertificateValidator
    content.vb: Public Property CertificateValidator As X509CertificateValidator
  overload: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.CertificateValidator*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.NameClaimType
  commentId: P:CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.NameClaimType
  id: NameClaimType
  parent: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement
  langs:
  - csharp
  - vb
  name: NameClaimType
  nameWithType: SamlSecurityTokenRequirement.NameClaimType
  fullName: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.NameClaimType
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nGets or sets the Claim Type that will be used to generate the \nFederatedIdentity.Name property.\n"
  syntax:
    content: public string NameClaimType { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property NameClaimType As String
  overload: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.NameClaimType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.RoleClaimType
  commentId: P:CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.RoleClaimType
  id: RoleClaimType
  parent: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement
  langs:
  - csharp
  - vb
  name: RoleClaimType
  nameWithType: SamlSecurityTokenRequirement.RoleClaimType
  fullName: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.RoleClaimType
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nGets the Claim Types that are used to generate the\nFederatedIdentity.Roles property.\n"
  syntax:
    content: public string RoleClaimType { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property RoleClaimType As String
  overload: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.RoleClaimType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: CoreWCF.IdentityModel.Tokens
  commentId: N:CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: CoreWCF.IdentityModel.Tokens
  nameWithType: CoreWCF.IdentityModel.Tokens
  fullName: CoreWCF.IdentityModel.Tokens
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.#ctor*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.#ctor
  isExternal: true
  name: SamlSecurityTokenRequirement
  nameWithType: SamlSecurityTokenRequirement.SamlSecurityTokenRequirement
  fullName: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.SamlSecurityTokenRequirement
- uid: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.ShouldEnforceAudienceRestriction*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.ShouldEnforceAudienceRestriction
  isExternal: true
  name: ShouldEnforceAudienceRestriction
  nameWithType: SamlSecurityTokenRequirement.ShouldEnforceAudienceRestriction
  fullName: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.ShouldEnforceAudienceRestriction
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: CoreWCF.IdentityModel.Selectors.AudienceUriMode
  commentId: T:CoreWCF.IdentityModel.Selectors.AudienceUriMode
  parent: CoreWCF.IdentityModel.Selectors
  isExternal: true
  name: AudienceUriMode
  nameWithType: AudienceUriMode
  fullName: CoreWCF.IdentityModel.Selectors.AudienceUriMode
- uid: CoreWCF.IdentityModel.Tokens.SecurityToken
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityToken
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityToken
  nameWithType: SecurityToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CoreWCF.IdentityModel.Selectors
  commentId: N:CoreWCF.IdentityModel.Selectors
  isExternal: true
  name: CoreWCF.IdentityModel.Selectors
  nameWithType: CoreWCF.IdentityModel.Selectors
  fullName: CoreWCF.IdentityModel.Selectors
- uid: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.ValidateAudienceRestriction*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.ValidateAudienceRestriction
  isExternal: true
  name: ValidateAudienceRestriction
  nameWithType: SamlSecurityTokenRequirement.ValidateAudienceRestriction
  fullName: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.ValidateAudienceRestriction
- uid: CoreWCF.IdentityModel.Tokens.AudienceUriValidationFailedException
  commentId: T:CoreWCF.IdentityModel.Tokens.AudienceUriValidationFailedException
  isExternal: true
  name: AudienceUriValidationFailedException
  nameWithType: AudienceUriValidationFailedException
  fullName: CoreWCF.IdentityModel.Tokens.AudienceUriValidationFailedException
- uid: System.Collections.Generic.IList{System.Uri}
  commentId: '!:System.Collections.Generic.IList{System.Uri}'
  definition: System.Collections.Generic.IList`1
  name: IList<Uri>
  nameWithType: IList<Uri>
  fullName: System.Collections.Generic.IList<System.Uri>
  nameWithType.vb: IList(Of Uri)
  fullName.vb: System.Collections.Generic.IList(Of System.Uri)
  name.vb: IList(Of Uri)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  isExternal: true
  name: IList<>
  nameWithType: IList<>
  fullName: System.Collections.Generic.IList<>
  nameWithType.vb: IList(Of )
  fullName.vb: System.Collections.Generic.IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.CertificateValidator*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.CertificateValidator
  isExternal: true
  name: CertificateValidator
  nameWithType: SamlSecurityTokenRequirement.CertificateValidator
  fullName: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.CertificateValidator
- uid: CoreWCF.IdentityModel.Selectors.X509CertificateValidator
  commentId: T:CoreWCF.IdentityModel.Selectors.X509CertificateValidator
  parent: CoreWCF.IdentityModel.Selectors
  isExternal: true
  name: X509CertificateValidator
  nameWithType: X509CertificateValidator
  fullName: CoreWCF.IdentityModel.Selectors.X509CertificateValidator
- uid: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.NameClaimType*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.NameClaimType
  isExternal: true
  name: NameClaimType
  nameWithType: SamlSecurityTokenRequirement.NameClaimType
  fullName: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.NameClaimType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.RoleClaimType*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.RoleClaimType
  isExternal: true
  name: RoleClaimType
  nameWithType: SamlSecurityTokenRequirement.RoleClaimType
  fullName: CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.RoleClaimType
