### YamlMime:ManagedReference
items:
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1
  commentId: T:CoreWCF.Collections.Generic.SynchronizedCollection`1
  id: SynchronizedCollection`1
  parent: CoreWCF.Collections.Generic
  children:
  - CoreWCF.Collections.Generic.SynchronizedCollection`1.#ctor
  - CoreWCF.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object)
  - CoreWCF.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object,`0[])
  - CoreWCF.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})
  - CoreWCF.Collections.Generic.SynchronizedCollection`1.Add(`0)
  - CoreWCF.Collections.Generic.SynchronizedCollection`1.Clear
  - CoreWCF.Collections.Generic.SynchronizedCollection`1.ClearItems
  - CoreWCF.Collections.Generic.SynchronizedCollection`1.Contains(`0)
  - CoreWCF.Collections.Generic.SynchronizedCollection`1.CopyTo(`0[],System.Int32)
  - CoreWCF.Collections.Generic.SynchronizedCollection`1.Count
  - CoreWCF.Collections.Generic.SynchronizedCollection`1.GetEnumerator
  - CoreWCF.Collections.Generic.SynchronizedCollection`1.IndexOf(`0)
  - CoreWCF.Collections.Generic.SynchronizedCollection`1.Insert(System.Int32,`0)
  - CoreWCF.Collections.Generic.SynchronizedCollection`1.InsertItem(System.Int32,`0)
  - CoreWCF.Collections.Generic.SynchronizedCollection`1.Item(System.Int32)
  - CoreWCF.Collections.Generic.SynchronizedCollection`1.Items
  - CoreWCF.Collections.Generic.SynchronizedCollection`1.Remove(`0)
  - CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveAt(System.Int32)
  - CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveItem(System.Int32)
  - CoreWCF.Collections.Generic.SynchronizedCollection`1.SetItem(System.Int32,`0)
  - CoreWCF.Collections.Generic.SynchronizedCollection`1.SyncRoot
  langs:
  - csharp
  - vb
  name: SynchronizedCollection<T>
  nameWithType: SynchronizedCollection<T>
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>
  type: Class
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: Provides a thread-safe collection that contains objects of a type specified by the generic parameter as elements.
  remarks: "The <xref:System.Collections.Generic.SynchronizedCollection%601> stores data in a <xref:System.Collections.Generic.List%601> container and provides an object that can be set and used to synchronize access to the collection so that it is thread-safe. The <xref:System.Collections.Generic.IList%601> container can be recovered using the <xref:System.Collections.Generic.SynchronizedCollection%601.Items%2A> property. The synchronized object can be recovered using the <xref:System.Collections.Generic.SynchronizedCollection%601.SyncRoot%2A> property. It can only be set using one of the constructors that take the `syncRoot` parameter.  \n\n"
  syntax:
    content: 'public class SynchronizedCollection<T> : Object'
    typeParameters:
    - id: T
      description: The type of object contained as items in the thread-safe collection.
    content.vb: >-
      Public Class SynchronizedCollection(Of T)
          Inherits Object
  inheritance:
  - System.Object
  derivedClasses:
  - CoreWCF.Collections.Generic.SynchronizedKeyedCollection`2
  - CoreWCF.Dispatcher.ChannelDispatcherCollection
  - CoreWCF.ExtensionCollection`1
  implements:
  - System.Collections.Generic.IList{{T}}
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  - System.Collections.IList
  - System.Collections.ICollection
  nameWithType.vb: SynchronizedCollection(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T)
  name.vb: SynchronizedCollection(Of T)
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.#ctor
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.#ctor
  id: '#ctor'
  parent: CoreWCF.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  - vb
  name: SynchronizedCollection()
  nameWithType: SynchronizedCollection<T>.SynchronizedCollection()
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.SynchronizedCollection()
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: "Initializes a new instance of the <xref:CoreWCF.Collections.Generic.SynchronizedCollection`1> class."
  syntax:
    content: public SynchronizedCollection()
    content.vb: Public Sub New
  overload: CoreWCF.Collections.Generic.SynchronizedCollection`1.#ctor*
  nameWithType.vb: SynchronizedCollection(Of T).SynchronizedCollection()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).SynchronizedCollection()
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: CoreWCF.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  - vb
  name: SynchronizedCollection(Object)
  nameWithType: SynchronizedCollection<T>.SynchronizedCollection(Object)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.SynchronizedCollection(System.Object)
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: "Initializes a new instance of the <xref:CoreWCF.Collections.Generic.SynchronizedCollection`1> class with the object used to synchronize access to the thread-safe collection."
  syntax:
    content: public SynchronizedCollection(object syncRoot)
    parameters:
    - id: syncRoot
      type: System.Object
      description: "The object used to synchronize access the thread-safe collection."
    content.vb: Public Sub New(syncRoot As Object)
  overload: CoreWCF.Collections.Generic.SynchronizedCollection`1.#ctor*
  nameWithType.vb: SynchronizedCollection(Of T).SynchronizedCollection(Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).SynchronizedCollection(System.Object)
  remarks: "If multiple instances of the <xref:CoreWCF.Collections.Generic.SynchronizedCollection`1> are created using the same `syncRoot`, then access is protected across all instances."
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})'
  parent: CoreWCF.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  - vb
  name: SynchronizedCollection(Object, IEnumerable<T>)
  nameWithType: SynchronizedCollection<T>.SynchronizedCollection(Object, IEnumerable<T>)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.SynchronizedCollection(System.Object, System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: "Initializes a new instance of the <xref:CoreWCF.Collections.Generic.SynchronizedCollection`1> class from a specified enumerable list of elements and with the object used to synchronize access to the thread-safe collection."
  syntax:
    content: public SynchronizedCollection(object syncRoot, IEnumerable<T> list)
    parameters:
    - id: syncRoot
      type: System.Object
      description: "The object used to synchronize access to the thread-safe collection."
    - id: list
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "The [IEnumerable\\<T\\>](https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1?view=net-7.0&viewFallbackFrom=dotnet-plat-ext-7.0) collection of elements used to initialize the thread-safe collection."
    content.vb: Public Sub New(syncRoot As Object, list As IEnumerable(Of T))
  overload: CoreWCF.Collections.Generic.SynchronizedCollection`1.#ctor*
  nameWithType.vb: SynchronizedCollection(Of T).SynchronizedCollection(Object, IEnumerable(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).SynchronizedCollection(System.Object, System.Collections.Generic.IEnumerable(Of T))
  name.vb: SynchronizedCollection(Object, IEnumerable(Of T))
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object,`0[])
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object,`0[])
  id: '#ctor(System.Object,`0[])'
  parent: CoreWCF.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  - vb
  name: SynchronizedCollection(Object, T[])
  nameWithType: SynchronizedCollection<T>.SynchronizedCollection(Object, T[])
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.SynchronizedCollection(System.Object, T[])
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: "Initializes a new instance of the <xref:CoreWCF.Collections.Generic.SynchronizedCollection`1>  class from a specified array of elements and with the object used to synchronize access to the thread-safe collection."
  syntax:
    content: public SynchronizedCollection(object syncRoot, params T[] list)
    parameters:
    - id: syncRoot
      type: System.Object
      description: "The object used to synchronize access the thread-safe collection."
    - id: list
      type: '{T}[]'
      description: "The [Array](https://learn.microsoft.com/en-us/dotnet/api/system.array?view=net-7.0&viewFallbackFrom=dotnet-plat-ext-7.0) of type `T` elements used to initialize the thread-safe collection."
    content.vb: Public Sub New(syncRoot As Object, ParamArray list As T())
  overload: CoreWCF.Collections.Generic.SynchronizedCollection`1.#ctor*
  nameWithType.vb: SynchronizedCollection(Of T).SynchronizedCollection(Object, T())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).SynchronizedCollection(System.Object, T())
  name.vb: SynchronizedCollection(Object, T())
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Add(`0)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.Add(`0)
  id: Add(`0)
  parent: CoreWCF.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  - vb
  name: Add(T)
  nameWithType: SynchronizedCollection<T>.Add(T)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Add(T)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: "Adds an item to the thread-safe, read-only collection."
  syntax:
    content: public void Add(T item)
    parameters:
    - id: item
      type: '{T}'
      description: Adds an item to the thread-safe, read-only collection.
    content.vb: Public Sub Add(item As T)
  overload: CoreWCF.Collections.Generic.SynchronizedCollection`1.Add*
  nameWithType.vb: SynchronizedCollection(Of T).Add(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Add(T)
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Clear
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.Clear
  id: Clear
  parent: CoreWCF.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: SynchronizedCollection<T>.Clear()
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Clear()
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: "Removes all items from the collection."
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: CoreWCF.Collections.Generic.SynchronizedCollection`1.Clear*
  nameWithType.vb: SynchronizedCollection(Of T).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Clear()
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.CopyTo(`0[],System.Int32)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: CoreWCF.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  nameWithType: SynchronizedCollection<T>.CopyTo(T[], Int32)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: Copies the elements of the collection to a specified array, starting at a particular index.
  syntax:
    content: public void CopyTo(T[] array, int index)
    parameters:
    - id: array
      type: '{T}[]'
      description: "The destination [Array](https://learn.microsoft.com/en-us/dotnet/api/system.array?view=net-7.0&viewFallbackFrom=dotnet-plat-ext-7.0) for the elements of type `T` copied from the collection."
    - id: index
      type: System.Int32
      description: "The zero-based index in the array at which copying begins."
    content.vb: Public Sub CopyTo(array As T(), index As Integer)
  overload: CoreWCF.Collections.Generic.SynchronizedCollection`1.CopyTo*
  nameWithType.vb: SynchronizedCollection(Of T).CopyTo(T(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Contains(`0)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.Contains(`0)
  id: Contains(`0)
  parent: CoreWCF.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: SynchronizedCollection<T>.Contains(T)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Contains(T)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: "Determines whether the collection contains an element with a specific value."
  syntax:
    content: public bool Contains(T item)
    parameters:
    - id: item
      type: '{T}'
      description: "The object to locate in the collection."
    return:
      type: System.Boolean
      description: "`true` if the element value is found in the collection; otherwise `false`."
    content.vb: Public Function Contains(item As T) As Boolean
  overload: CoreWCF.Collections.Generic.SynchronizedCollection`1.Contains*
  nameWithType.vb: SynchronizedCollection(Of T).Contains(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Contains(T)
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.GetEnumerator
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.GetEnumerator
  id: GetEnumerator
  parent: CoreWCF.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: SynchronizedCollection<T>.GetEnumerator()
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.GetEnumerator()
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: Returns an enumerator that iterates through the synchronized collection.
  syntax:
    content: public IEnumerator<T> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
      description: "An [IEnumerator\\<T\\>](https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerator-1?view=net-7.0&viewFallbackFrom=dotnet-plat-ext-7.0) for objects of the type stored in the collection."
    content.vb: Public Function GetEnumerator As IEnumerator(Of T)
  overload: CoreWCF.Collections.Generic.SynchronizedCollection`1.GetEnumerator*
  nameWithType.vb: SynchronizedCollection(Of T).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).GetEnumerator()
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.IndexOf(`0)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: CoreWCF.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  - vb
  name: IndexOf(T)
  nameWithType: SynchronizedCollection<T>.IndexOf(T)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.IndexOf(T)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: "Returns the index of the first occurrence of a value in the collection."
  syntax:
    content: public int IndexOf(T item)
    parameters:
    - id: item
      type: '{T}'
      description: "Removes all items from the collection."
    return:
      type: System.Int32
      description: "The zero-based index of the first occurrence of the value in the collection."
    content.vb: Public Function IndexOf(item As T) As Integer
  overload: CoreWCF.Collections.Generic.SynchronizedCollection`1.IndexOf*
  nameWithType.vb: SynchronizedCollection(Of T).IndexOf(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).IndexOf(T)
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Insert(System.Int32,`0)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: CoreWCF.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  - vb
  name: Insert(Int32, T)
  nameWithType: SynchronizedCollection<T>.Insert(Int32, T)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Insert(System.Int32, T)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: Inserts an item into the collection at a specified index.
  syntax:
    content: public void Insert(int index, T item)
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index of the element to be retrieved from the collection."
    - id: item
      type: '{T}'
      description: "The object to be inserted into the collection as an element."
    content.vb: Public Sub Insert(index As Integer, item As T)
  overload: CoreWCF.Collections.Generic.SynchronizedCollection`1.Insert*
  nameWithType.vb: SynchronizedCollection(Of T).Insert(Int32, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Insert(System.Int32, T)
  remarks: "If the `index` is equal to the number of elements in the collection, the item is appended to the list. If the `index` is less than the number of elements in the collection, the elements that follow the point of insertion of the item move down to accommodate the new element."
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Remove(`0)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.Remove(`0)
  id: Remove(`0)
  parent: CoreWCF.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  nameWithType: SynchronizedCollection<T>.Remove(T)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Remove(T)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: "Removes the first occurrence of a specified item from the collection."
  syntax:
    content: public bool Remove(T item)
    parameters:
    - id: item
      type: '{T}'
      description: "The object to remove from the collection."
    return:
      type: System.Boolean
      description: "`true` if item was successfully removed from the collection; otherwise, `false`."
    content.vb: Public Function Remove(item As T) As Boolean
  overload: CoreWCF.Collections.Generic.SynchronizedCollection`1.Remove*
  nameWithType.vb: SynchronizedCollection(Of T).Remove(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Remove(T)
  remarks: "The elements in the collection that follow the removed element move up to occupy the vacated spot and their indices are updated accordingly."
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveAt(System.Int32)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: CoreWCF.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: SynchronizedCollection<T>.RemoveAt(Int32)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.RemoveAt(System.Int32)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: Removes an item at a specified index from the collection.
  syntax:
    content: public void RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index of the element to be retrieved from the collection."
    content.vb: Public Sub RemoveAt(index As Integer)
  overload: CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveAt*
  nameWithType.vb: SynchronizedCollection(Of T).RemoveAt(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).RemoveAt(System.Int32)
  remarks: The elements in the collection that follow the removed element move up to occupy the vacated spot and their indices are updated accordingly.
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.ClearItems
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.ClearItems
  id: ClearItems
  parent: CoreWCF.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  - vb
  name: ClearItems()
  nameWithType: SynchronizedCollection<T>.ClearItems()
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.ClearItems()
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: "Removes all items from the collection."
  syntax:
    content: protected virtual void ClearItems()
    content.vb: Protected Overridable Sub ClearItems
  overload: CoreWCF.Collections.Generic.SynchronizedCollection`1.ClearItems*
  nameWithType.vb: SynchronizedCollection(Of T).ClearItems()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).ClearItems()
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.InsertItem(System.Int32,`0)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.InsertItem(System.Int32,`0)
  id: InsertItem(System.Int32,`0)
  parent: CoreWCF.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  - vb
  name: InsertItem(Int32, T)
  nameWithType: SynchronizedCollection<T>.InsertItem(Int32, T)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.InsertItem(System.Int32, T)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: "Inserts an item into the collection at a specified index."
  syntax:
    content: protected virtual void InsertItem(int index, T item)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the collection where the object is to be inserted.
    - id: item
      type: '{T}'
      description: The object to be inserted into the collection.
    content.vb: Protected Overridable Sub InsertItem(index As Integer, item As T)
  overload: CoreWCF.Collections.Generic.SynchronizedCollection`1.InsertItem*
  nameWithType.vb: SynchronizedCollection(Of T).InsertItem(Int32, T)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).InsertItem(System.Int32, T)
  remarks: "If the `index` is equal to the number of elements in the collection, the item is appended to the list. If the `index` is less than the number of elements in the collection, the elements that follow the point of insertion of the item move down to accommodate the new element."
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveItem(System.Int32)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveItem(System.Int32)
  id: RemoveItem(System.Int32)
  parent: CoreWCF.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  - vb
  name: RemoveItem(Int32)
  nameWithType: SynchronizedCollection<T>.RemoveItem(Int32)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.RemoveItem(System.Int32)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: "Removes an item at a specified `index` from the collection."
  syntax:
    content: protected virtual void RemoveItem(int index)
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index of the element to be retrieved from the collection."
    content.vb: Protected Overridable Sub RemoveItem(index As Integer)
  overload: CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveItem*
  nameWithType.vb: SynchronizedCollection(Of T).RemoveItem(Int32)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).RemoveItem(System.Int32)
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.SetItem(System.Int32,`0)
  commentId: M:CoreWCF.Collections.Generic.SynchronizedCollection`1.SetItem(System.Int32,`0)
  id: SetItem(System.Int32,`0)
  parent: CoreWCF.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  - vb
  name: SetItem(Int32, T)
  nameWithType: SynchronizedCollection<T>.SetItem(Int32, T)
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.SetItem(System.Int32, T)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: Replaces the item at a specified index with another item.
  syntax:
    content: protected virtual void SetItem(int index, T item)
    parameters:
    - id: index
      type: System.Int32
      description: "The zero-based index of the object to be replaced."
    - id: item
      type: '{T}'
      description: "The object to replace."
    content.vb: Protected Overridable Sub SetItem(index As Integer, item As T)
  overload: CoreWCF.Collections.Generic.SynchronizedCollection`1.SetItem*
  nameWithType.vb: SynchronizedCollection(Of T).SetItem(Int32, T)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).SetItem(System.Int32, T)
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Count
  commentId: P:CoreWCF.Collections.Generic.SynchronizedCollection`1.Count
  id: Count
  parent: CoreWCF.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: SynchronizedCollection<T>.Count
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Count
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: Gets the number of elements contained in the thread-safe collection.
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
      description: The number of elements contained in the thread-safe, read-only collection.
    content.vb: Public ReadOnly Property Count As Integer
  overload: CoreWCF.Collections.Generic.SynchronizedCollection`1.Count*
  nameWithType.vb: SynchronizedCollection(Of T).Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Count
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Items
  commentId: P:CoreWCF.Collections.Generic.SynchronizedCollection`1.Items
  id: Items
  parent: CoreWCF.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  - vb
  name: Items
  nameWithType: SynchronizedCollection<T>.Items
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Items
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: Gets the list of elements contained in the thread-safe collection.
  syntax:
    content: protected List<T> Items { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{{T}}
      description: "The [IList\\<T\\>](https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ilist-1?view=net-7.0&viewFallbackFrom=dotnet-plat-ext-7.0) of elements that are contained in the thread-safe, read-only collection."
    content.vb: Protected ReadOnly Property Items As List(Of T)
  overload: CoreWCF.Collections.Generic.SynchronizedCollection`1.Items*
  nameWithType.vb: SynchronizedCollection(Of T).Items
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Items
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.SyncRoot
  commentId: P:CoreWCF.Collections.Generic.SynchronizedCollection`1.SyncRoot
  id: SyncRoot
  parent: CoreWCF.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  - vb
  name: SyncRoot
  nameWithType: SynchronizedCollection<T>.SyncRoot
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.SyncRoot
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: Gets the object used to synchronize access to the thread-safe collection.
  syntax:
    content: public object SyncRoot { get; }
    parameters: []
    return:
      type: System.Object
      description: An object used to synchronize access to the thread-safe collection.
    content.vb: Public ReadOnly Property SyncRoot As Object
  overload: CoreWCF.Collections.Generic.SynchronizedCollection`1.SyncRoot*
  nameWithType.vb: SynchronizedCollection(Of T).SyncRoot
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).SyncRoot
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Item(System.Int32)
  commentId: P:CoreWCF.Collections.Generic.SynchronizedCollection`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: CoreWCF.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: SynchronizedCollection<T>.Item[Int32]
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Item[System.Int32]
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Collections.Generic
  summary: Gets an element from the thread-safe collection with a specified index.
  syntax:
    content: public T this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to be retrieved from the collection.
    return:
      type: '{T}'
      description: "The object in the collection that has the specified `index`."
    content.vb: Public Property Item(index As Integer) As T
  overload: CoreWCF.Collections.Generic.SynchronizedCollection`1.Item*
  nameWithType.vb: SynchronizedCollection(Of T).Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Item(System.Int32)
  name.vb: Item(Int32)
references:
- uid: CoreWCF.Collections.Generic
  commentId: N:CoreWCF.Collections.Generic
  isExternal: true
  name: CoreWCF.Collections.Generic
  nameWithType: CoreWCF.Collections.Generic
  fullName: CoreWCF.Collections.Generic
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IList{{T}}
  commentId: '!:System.Collections.Generic.IList{`0}'
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: '!:System.Collections.Generic.ICollection{`0}'
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: '!:System.Collections.Generic.IEnumerable{`0}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.IList
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IList`1
  isExternal: true
  name: IList<>
  nameWithType: IList<>
  fullName: System.Collections.Generic.IList<>
  nameWithType.vb: IList(Of )
  fullName.vb: System.Collections.Generic.IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<>
  nameWithType: ICollection<>
  fullName: System.Collections.Generic.ICollection<>
  nameWithType.vb: ICollection(Of )
  fullName.vb: System.Collections.Generic.ICollection(Of )
  name.vb: ICollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.#ctor*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedCollection`1.#ctor
  isExternal: true
  name: SynchronizedCollection
  nameWithType: SynchronizedCollection<T>.SynchronizedCollection
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.SynchronizedCollection
  nameWithType.vb: SynchronizedCollection(Of T).SynchronizedCollection
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).SynchronizedCollection
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Add*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedCollection`1.Add
  isExternal: true
  name: Add
  nameWithType: SynchronizedCollection<T>.Add
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Add
  nameWithType.vb: SynchronizedCollection(Of T).Add
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Add
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Clear*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedCollection`1.Clear
  isExternal: true
  name: Clear
  nameWithType: SynchronizedCollection<T>.Clear
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Clear
  nameWithType.vb: SynchronizedCollection(Of T).Clear
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Clear
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.CopyTo*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedCollection`1.CopyTo
  isExternal: true
  name: CopyTo
  nameWithType: SynchronizedCollection<T>.CopyTo
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.CopyTo
  nameWithType.vb: SynchronizedCollection(Of T).CopyTo
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).CopyTo
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Contains*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedCollection`1.Contains
  isExternal: true
  name: Contains
  nameWithType: SynchronizedCollection<T>.Contains
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Contains
  nameWithType.vb: SynchronizedCollection(Of T).Contains
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Contains
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.GetEnumerator*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedCollection`1.GetEnumerator
  isExternal: true
  name: GetEnumerator
  nameWithType: SynchronizedCollection<T>.GetEnumerator
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.GetEnumerator
  nameWithType.vb: SynchronizedCollection(Of T).GetEnumerator
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).GetEnumerator
- uid: System.Collections.Generic.IEnumerator{{T}}
  commentId: '!:System.Collections.Generic.IEnumerator{`0}'
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<>
  nameWithType: IEnumerator<>
  fullName: System.Collections.Generic.IEnumerator<>
  nameWithType.vb: IEnumerator(Of )
  fullName.vb: System.Collections.Generic.IEnumerator(Of )
  name.vb: IEnumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.IndexOf*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedCollection`1.IndexOf
  isExternal: true
  name: IndexOf
  nameWithType: SynchronizedCollection<T>.IndexOf
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.IndexOf
  nameWithType.vb: SynchronizedCollection(Of T).IndexOf
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).IndexOf
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Insert*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedCollection`1.Insert
  isExternal: true
  name: Insert
  nameWithType: SynchronizedCollection<T>.Insert
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Insert
  nameWithType.vb: SynchronizedCollection(Of T).Insert
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Insert
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Remove*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedCollection`1.Remove
  isExternal: true
  name: Remove
  nameWithType: SynchronizedCollection<T>.Remove
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Remove
  nameWithType.vb: SynchronizedCollection(Of T).Remove
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Remove
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveAt*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveAt
  isExternal: true
  name: RemoveAt
  nameWithType: SynchronizedCollection<T>.RemoveAt
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.RemoveAt
  nameWithType.vb: SynchronizedCollection(Of T).RemoveAt
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).RemoveAt
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.ClearItems*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedCollection`1.ClearItems
  isExternal: true
  name: ClearItems
  nameWithType: SynchronizedCollection<T>.ClearItems
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.ClearItems
  nameWithType.vb: SynchronizedCollection(Of T).ClearItems
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).ClearItems
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.InsertItem*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedCollection`1.InsertItem
  isExternal: true
  name: InsertItem
  nameWithType: SynchronizedCollection<T>.InsertItem
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.InsertItem
  nameWithType.vb: SynchronizedCollection(Of T).InsertItem
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).InsertItem
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveItem*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedCollection`1.RemoveItem
  isExternal: true
  name: RemoveItem
  nameWithType: SynchronizedCollection<T>.RemoveItem
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.RemoveItem
  nameWithType.vb: SynchronizedCollection(Of T).RemoveItem
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).RemoveItem
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.SetItem*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedCollection`1.SetItem
  isExternal: true
  name: SetItem
  nameWithType: SynchronizedCollection<T>.SetItem
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.SetItem
  nameWithType.vb: SynchronizedCollection(Of T).SetItem
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).SetItem
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Count*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedCollection`1.Count
  isExternal: true
  name: Count
  nameWithType: SynchronizedCollection<T>.Count
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Count
  nameWithType.vb: SynchronizedCollection(Of T).Count
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Count
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Items*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedCollection`1.Items
  isExternal: true
  name: Items
  nameWithType: SynchronizedCollection<T>.Items
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Items
  nameWithType.vb: SynchronizedCollection(Of T).Items
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Items
- uid: System.Collections.Generic.List{{T}}
  commentId: '!:System.Collections.Generic.List{`0}'
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.SyncRoot*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedCollection`1.SyncRoot
  isExternal: true
  name: SyncRoot
  nameWithType: SynchronizedCollection<T>.SyncRoot
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.SyncRoot
  nameWithType.vb: SynchronizedCollection(Of T).SyncRoot
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).SyncRoot
- uid: CoreWCF.Collections.Generic.SynchronizedCollection`1.Item*
  commentId: Overload:CoreWCF.Collections.Generic.SynchronizedCollection`1.Item
  isExternal: true
  name: Item
  nameWithType: SynchronizedCollection<T>.Item
  fullName: CoreWCF.Collections.Generic.SynchronizedCollection<T>.Item
  nameWithType.vb: SynchronizedCollection(Of T).Item
  fullName.vb: CoreWCF.Collections.Generic.SynchronizedCollection(Of T).Item
