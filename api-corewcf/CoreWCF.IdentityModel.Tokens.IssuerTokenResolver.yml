### YamlMime:ManagedReference
items:
- uid: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver
  commentId: T:CoreWCF.IdentityModel.Tokens.IssuerTokenResolver
  id: IssuerTokenResolver
  parent: CoreWCF.IdentityModel.Tokens
  children:
  - CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.#ctor
  - CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.#ctor(CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
  - CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.DefaultStoreLocation
  - CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.DefaultStoreName
  - CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  - CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  - CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  - CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver
  langs:
  - csharp
  - vb
  name: IssuerTokenResolver
  nameWithType: IssuerTokenResolver
  fullName: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver
  type: Class
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nResolves issuer tokens received from service partners.\n"
  syntax:
    content: 'public class IssuerTokenResolver : SecurityTokenResolver'
    content.vb: >-
      Public Class IssuerTokenResolver
          Inherits SecurityTokenResolver
  inheritance:
  - System.Object
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  inheritedMembers:
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Tokens.SecurityToken},System.Boolean)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.DefaultStoreName
  commentId: F:CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.DefaultStoreName
  id: DefaultStoreName
  parent: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver
  langs:
  - csharp
  - vb
  name: DefaultStoreName
  nameWithType: IssuerTokenResolver.DefaultStoreName
  fullName: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.DefaultStoreName
  type: Field
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nDefault store for resolving X509 certificates.\n"
  syntax:
    content: public static readonly StoreName DefaultStoreName
    return:
      type: System.Security.Cryptography.X509Certificates.StoreName
    content.vb: Public Shared ReadOnly DefaultStoreName As StoreName
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.DefaultStoreLocation
  commentId: F:CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.DefaultStoreLocation
  id: DefaultStoreLocation
  parent: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver
  langs:
  - csharp
  - vb
  name: DefaultStoreLocation
  nameWithType: IssuerTokenResolver.DefaultStoreLocation
  fullName: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.DefaultStoreLocation
  type: Field
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nDefault store location for resolving X509 certificates.\n"
  syntax:
    content: public static readonly StoreLocation DefaultStoreLocation
    return:
      type: System.Security.Cryptography.X509Certificates.StoreLocation
    content.vb: Public Shared ReadOnly DefaultStoreLocation As StoreLocation
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.#ctor
  commentId: M:CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.#ctor
  id: '#ctor'
  parent: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver
  langs:
  - csharp
  - vb
  name: IssuerTokenResolver()
  nameWithType: IssuerTokenResolver.IssuerTokenResolver()
  fullName: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.IssuerTokenResolver()
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nCreates an instance of IssuerTokenResolver.\n"
  syntax:
    content: public IssuerTokenResolver()
    content.vb: Public Sub New
  overload: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.#ctor(CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
  commentId: M:CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.#ctor(CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
  id: '#ctor(CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)'
  parent: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver
  langs:
  - csharp
  - vb
  name: IssuerTokenResolver(SecurityTokenResolver)
  nameWithType: IssuerTokenResolver.IssuerTokenResolver(SecurityTokenResolver)
  fullName: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.IssuerTokenResolver(CoreWCF.IdentityModel.Selectors.SecurityTokenResolver)
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nCreates an instance of IssuerTokenResolver using a given <xref href=\"CoreWCF.IdentityModel.Selectors.SecurityTokenResolver\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: public IssuerTokenResolver(SecurityTokenResolver wrappedTokenResolver)
    parameters:
    - id: wrappedTokenResolver
      type: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
      description: The <xref href="CoreWCF.IdentityModel.Selectors.SecurityTokenResolver" data-throw-if-not-resolved="false"></xref> to use.
    content.vb: Public Sub New(wrappedTokenResolver As SecurityTokenResolver)
  overload: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  commentId: M:CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  id: TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  parent: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver
  langs:
  - csharp
  - vb
  name: TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, out SecurityKey)
  nameWithType: IssuerTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, out SecurityKey)
  fullName: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, out CoreWCF.IdentityModel.Tokens.SecurityKey)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nInherited from <xref href=\"CoreWCF.IdentityModel.Selectors.SecurityTokenResolver\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: protected override bool TryResolveSecurityKeyCore(SecurityKeyIdentifierClause keyIdentifierClause, out SecurityKey key)
    parameters:
    - id: keyIdentifierClause
      type: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    - id: key
      type: CoreWCF.IdentityModel.Tokens.SecurityKey
    return:
      type: System.Boolean
    content.vb: Protected Overrides Function TryResolveSecurityKeyCore(keyIdentifierClause As SecurityKeyIdentifierClause, ByRef key As SecurityKey) As Boolean
  overridden: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  overload: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.TryResolveSecurityKeyCore*
  nameWithType.vb: IssuerTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, ByRef SecurityKey)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, ByRef CoreWCF.IdentityModel.Tokens.SecurityKey)
  name.vb: TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, ByRef SecurityKey)
- uid: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  commentId: M:CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  id: TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  parent: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver
  langs:
  - csharp
  - vb
  name: TryResolveTokenCore(SecurityKeyIdentifier, out SecurityToken)
  nameWithType: IssuerTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier, out SecurityToken)
  fullName: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier, out CoreWCF.IdentityModel.Tokens.SecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nInherited from <xref href=\"CoreWCF.IdentityModel.Selectors.SecurityTokenResolver\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: protected override bool TryResolveTokenCore(SecurityKeyIdentifier keyIdentifier, out SecurityToken token)
    parameters:
    - id: keyIdentifier
      type: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    return:
      type: System.Boolean
    content.vb: Protected Overrides Function TryResolveTokenCore(keyIdentifier As SecurityKeyIdentifier, ByRef token As SecurityToken) As Boolean
  overridden: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  overload: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore*
  nameWithType.vb: IssuerTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier, ByRef SecurityToken)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier, ByRef CoreWCF.IdentityModel.Tokens.SecurityToken)
  name.vb: TryResolveTokenCore(SecurityKeyIdentifier, ByRef SecurityToken)
- uid: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  commentId: M:CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  id: TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  parent: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver
  langs:
  - csharp
  - vb
  name: TryResolveTokenCore(SecurityKeyIdentifierClause, out SecurityToken)
  nameWithType: IssuerTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause, out SecurityToken)
  fullName: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, out CoreWCF.IdentityModel.Tokens.SecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nInherited from <xref href=\"CoreWCF.IdentityModel.Selectors.SecurityTokenResolver\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  syntax:
    content: protected override bool TryResolveTokenCore(SecurityKeyIdentifierClause keyIdentifierClause, out SecurityToken token)
    parameters:
    - id: keyIdentifierClause
      type: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    return:
      type: System.Boolean
    content.vb: Protected Overrides Function TryResolveTokenCore(keyIdentifierClause As SecurityKeyIdentifierClause, ByRef token As SecurityToken) As Boolean
  overridden: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  overload: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore*
  nameWithType.vb: IssuerTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause, ByRef SecurityToken)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, ByRef CoreWCF.IdentityModel.Tokens.SecurityToken)
  name.vb: TryResolveTokenCore(SecurityKeyIdentifierClause, ByRef SecurityToken)
- uid: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver
  commentId: P:CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver
  id: WrappedTokenResolver
  parent: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver
  langs:
  - csharp
  - vb
  name: WrappedTokenResolver
  nameWithType: IssuerTokenResolver.WrappedTokenResolver
  fullName: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nGets the <xref href=\"CoreWCF.IdentityModel.Selectors.SecurityTokenResolver\" data-throw-if-not-resolved=\"false\"></xref> wrapped by this class.\n"
  syntax:
    content: public SecurityTokenResolver WrappedTokenResolver { get; }
    parameters: []
    return:
      type: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
    content.vb: Public ReadOnly Property WrappedTokenResolver As SecurityTokenResolver
  overload: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: CoreWCF.IdentityModel.Tokens
  commentId: N:CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: CoreWCF.IdentityModel.Tokens
  nameWithType: CoreWCF.IdentityModel.Tokens
  fullName: CoreWCF.IdentityModel.Tokens
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  commentId: T:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  parent: CoreWCF.IdentityModel.Selectors
  isExternal: true
  name: SecurityTokenResolver
  nameWithType: SecurityTokenResolver
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: ResolveToken(SecurityKeyIdentifier)
  nameWithType: SecurityTokenResolver.ResolveToken(SecurityKeyIdentifier)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
    name: ResolveToken
    nameWithType: SecurityTokenResolver.ResolveToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    name: SecurityKeyIdentifier
    nameWithType: SecurityKeyIdentifier
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
    name: ResolveToken
    nameWithType: SecurityTokenResolver.ResolveToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    name: SecurityKeyIdentifier
    nameWithType: SecurityKeyIdentifier
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: TryResolveToken(SecurityKeyIdentifier, SecurityToken)
  nameWithType: SecurityTokenResolver.TryResolveToken(SecurityKeyIdentifier, SecurityToken)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier, CoreWCF.IdentityModel.Tokens.SecurityToken)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
    name: TryResolveToken
    nameWithType: SecurityTokenResolver.TryResolveToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    name: SecurityKeyIdentifier
    nameWithType: SecurityKeyIdentifier
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
    name: TryResolveToken
    nameWithType: SecurityTokenResolver.TryResolveToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    name: SecurityKeyIdentifier
    nameWithType: SecurityKeyIdentifier
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: ResolveToken(SecurityKeyIdentifierClause)
  nameWithType: SecurityTokenResolver.ResolveToken(SecurityKeyIdentifierClause)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
    name: ResolveToken
    nameWithType: SecurityTokenResolver.ResolveToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
    name: ResolveToken
    nameWithType: SecurityTokenResolver.ResolveToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: TryResolveToken(SecurityKeyIdentifierClause, SecurityToken)
  nameWithType: SecurityTokenResolver.TryResolveToken(SecurityKeyIdentifierClause, SecurityToken)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, CoreWCF.IdentityModel.Tokens.SecurityToken)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
    name: TryResolveToken
    nameWithType: SecurityTokenResolver.TryResolveToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
    name: TryResolveToken
    nameWithType: SecurityTokenResolver.TryResolveToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: ResolveSecurityKey(SecurityKeyIdentifierClause)
  nameWithType: SecurityTokenResolver.ResolveSecurityKey(SecurityKeyIdentifierClause)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
    name: ResolveSecurityKey
    nameWithType: SecurityTokenResolver.ResolveSecurityKey
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
    name: ResolveSecurityKey
    nameWithType: SecurityTokenResolver.ResolveSecurityKey
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: TryResolveSecurityKey(SecurityKeyIdentifierClause, SecurityKey)
  nameWithType: SecurityTokenResolver.TryResolveSecurityKey(SecurityKeyIdentifierClause, SecurityKey)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, CoreWCF.IdentityModel.Tokens.SecurityKey)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
    name: TryResolveSecurityKey
    nameWithType: SecurityTokenResolver.TryResolveSecurityKey
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKey
    name: SecurityKey
    nameWithType: SecurityKey
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKey
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
    name: TryResolveSecurityKey
    nameWithType: SecurityTokenResolver.TryResolveSecurityKey
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKey
    name: SecurityKey
    nameWithType: SecurityKey
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKey
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Tokens.SecurityToken},System.Boolean)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Tokens.SecurityToken},System.Boolean)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: CreateDefaultSecurityTokenResolver(ReadOnlyCollection<SecurityToken>, Boolean)
  nameWithType: SecurityTokenResolver.CreateDefaultSecurityTokenResolver(ReadOnlyCollection<SecurityToken>, Boolean)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection<CoreWCF.IdentityModel.Tokens.SecurityToken>, System.Boolean)
  nameWithType.vb: SecurityTokenResolver.CreateDefaultSecurityTokenResolver(ReadOnlyCollection(Of SecurityToken), Boolean)
  fullName.vb: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection(Of CoreWCF.IdentityModel.Tokens.SecurityToken), System.Boolean)
  name.vb: CreateDefaultSecurityTokenResolver(ReadOnlyCollection(Of SecurityToken), Boolean)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Tokens.SecurityToken},System.Boolean)
    name: CreateDefaultSecurityTokenResolver
    nameWithType: SecurityTokenResolver.CreateDefaultSecurityTokenResolver
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Tokens.SecurityToken},System.Boolean)
    name: CreateDefaultSecurityTokenResolver
    nameWithType: SecurityTokenResolver.CreateDefaultSecurityTokenResolver
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CoreWCF.IdentityModel.Selectors
  commentId: N:CoreWCF.IdentityModel.Selectors
  isExternal: true
  name: CoreWCF.IdentityModel.Selectors
  nameWithType: CoreWCF.IdentityModel.Selectors
  fullName: CoreWCF.IdentityModel.Selectors
- uid: System.Security.Cryptography.X509Certificates.StoreName
  isExternal: true
  name: StoreName
  nameWithType: StoreName
  fullName: System.Security.Cryptography.X509Certificates.StoreName
- uid: System.Security.Cryptography.X509Certificates.StoreLocation
  isExternal: true
  name: StoreLocation
  nameWithType: StoreLocation
  fullName: System.Security.Cryptography.X509Certificates.StoreLocation
- uid: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.#ctor*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.#ctor
  isExternal: true
  name: IssuerTokenResolver
  nameWithType: IssuerTokenResolver.IssuerTokenResolver
  fullName: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.IssuerTokenResolver
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, SecurityKey)
  nameWithType: SecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, SecurityKey)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, CoreWCF.IdentityModel.Tokens.SecurityKey)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
    name: TryResolveSecurityKeyCore
    nameWithType: SecurityTokenResolver.TryResolveSecurityKeyCore
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKey
    name: SecurityKey
    nameWithType: SecurityKey
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKey
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
    name: TryResolveSecurityKeyCore
    nameWithType: SecurityTokenResolver.TryResolveSecurityKeyCore
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKey
    name: SecurityKey
    nameWithType: SecurityKey
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKey
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.TryResolveSecurityKeyCore*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.TryResolveSecurityKeyCore
  isExternal: true
  name: TryResolveSecurityKeyCore
  nameWithType: IssuerTokenResolver.TryResolveSecurityKeyCore
  fullName: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.TryResolveSecurityKeyCore
- uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
  commentId: T:CoreWCF.IdentityModel.SecurityKeyIdentifierClause
  parent: CoreWCF.IdentityModel
  isExternal: true
  name: SecurityKeyIdentifierClause
  nameWithType: SecurityKeyIdentifierClause
  fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
- uid: CoreWCF.IdentityModel.Tokens.SecurityKey
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityKey
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityKey
  nameWithType: SecurityKey
  fullName: CoreWCF.IdentityModel.Tokens.SecurityKey
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CoreWCF.IdentityModel
  commentId: N:CoreWCF.IdentityModel
  isExternal: true
  name: CoreWCF.IdentityModel
  nameWithType: CoreWCF.IdentityModel
  fullName: CoreWCF.IdentityModel
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: TryResolveTokenCore(SecurityKeyIdentifier, SecurityToken)
  nameWithType: SecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier, SecurityToken)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier, CoreWCF.IdentityModel.Tokens.SecurityToken)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
    name: TryResolveTokenCore
    nameWithType: SecurityTokenResolver.TryResolveTokenCore
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    name: SecurityKeyIdentifier
    nameWithType: SecurityKeyIdentifier
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
    name: TryResolveTokenCore
    nameWithType: SecurityTokenResolver.TryResolveTokenCore
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    name: SecurityKeyIdentifier
    nameWithType: SecurityKeyIdentifier
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore
  isExternal: true
  name: TryResolveTokenCore
  nameWithType: IssuerTokenResolver.TryResolveTokenCore
  fullName: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.TryResolveTokenCore
- uid: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityKeyIdentifier
  nameWithType: SecurityKeyIdentifier
  fullName: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
- uid: CoreWCF.IdentityModel.Tokens.SecurityToken
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityToken
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityToken
  nameWithType: SecurityToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: TryResolveTokenCore(SecurityKeyIdentifierClause, SecurityToken)
  nameWithType: SecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause, SecurityToken)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, CoreWCF.IdentityModel.Tokens.SecurityToken)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
    name: TryResolveTokenCore
    nameWithType: SecurityTokenResolver.TryResolveTokenCore
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
    name: TryResolveTokenCore
    nameWithType: SecurityTokenResolver.TryResolveTokenCore
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver
  isExternal: true
  name: WrappedTokenResolver
  nameWithType: IssuerTokenResolver.WrappedTokenResolver
  fullName: CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.WrappedTokenResolver
