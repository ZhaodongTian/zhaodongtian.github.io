### YamlMime:ManagedReference
items:
- uid: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator
  commentId: T:CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator
  id: UserNameSecurityTokenAuthenticator
  parent: CoreWCF.IdentityModel.Selectors
  children:
  - CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.#ctor
  - CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.CanValidateTokenCore(CoreWCF.IdentityModel.Tokens.SecurityToken)
  - CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateTokenCoreAsync(CoreWCF.IdentityModel.Tokens.SecurityToken)
  - CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCore(System.String,System.String)
  - CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCoreAsync(System.String,System.String)
  langs:
  - csharp
  - vb
  name: UserNameSecurityTokenAuthenticator
  nameWithType: UserNameSecurityTokenAuthenticator
  fullName: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator
  type: Class
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Selectors
  summary: Authenticates a  security token.
  remarks: "Override the &lt;xref:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator> class to authenticate security tokens based on a user name and password.  \n\nWindows Communication Foundation ships with the following classes that provide support for authenticating &lt;xref:System.IdentityModel.Tokens.UserNameSecurityToken> security tokens.  \n\n|Type|Description|  \n|----------|-----------------|  \n|&lt;xref:System.IdentityModel.Selectors.CustomUserNameSecurityTokenAuthenticator>|Allows an application to provide a custom authentication scheme for user names and passwords. The authentication scheme is provided using a class deriving from the &lt;xref:System.IdentityModel.Selectors.UserNamePasswordValidator> class.|  \n|&lt;xref:System.IdentityModel.Selectors.WindowsUserNameSecurityTokenAuthenticator>|Authenticates the user name and password as a Windows account.|  \n\nMost custom authentication schemes can use the use the &lt;xref:System.IdentityModel.Selectors.CustomUserNameSecurityTokenAuthenticator> class and implement a class that derives from the &lt;xref:System.IdentityModel.Selectors.UserNamePasswordValidator> class.  However, if additional flexibility is needed, you can derive a class from the &lt;xref:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator> class and override the &lt;xref:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCore%2A> method.  \n\n\n\n"
  syntax:
    content: 'public abstract class UserNameSecurityTokenAuthenticator : SecurityTokenAuthenticator'
    content.vb: >-
      Public MustInherit Class UserNameSecurityTokenAuthenticator
          Inherits SecurityTokenAuthenticator
  inheritance:
  - System.Object
  - CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator
  inheritedMembers:
  - CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.CanValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenAsync(CoreWCF.IdentityModel.Tokens.SecurityToken)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenCore(CoreWCF.IdentityModel.Tokens.SecurityToken)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.#ctor
  commentId: M:CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.#ctor
  id: '#ctor'
  parent: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator
  langs:
  - csharp
  - vb
  name: UserNameSecurityTokenAuthenticator()
  nameWithType: UserNameSecurityTokenAuthenticator.UserNameSecurityTokenAuthenticator()
  fullName: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.UserNameSecurityTokenAuthenticator()
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Selectors
  syntax:
    content: protected UserNameSecurityTokenAuthenticator()
    content.vb: Protected Sub New
  overload: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.CanValidateTokenCore(CoreWCF.IdentityModel.Tokens.SecurityToken)
  commentId: M:CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.CanValidateTokenCore(CoreWCF.IdentityModel.Tokens.SecurityToken)
  id: CanValidateTokenCore(CoreWCF.IdentityModel.Tokens.SecurityToken)
  parent: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator
  langs:
  - csharp
  - vb
  name: CanValidateTokenCore(SecurityToken)
  nameWithType: UserNameSecurityTokenAuthenticator.CanValidateTokenCore(SecurityToken)
  fullName: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.CanValidateTokenCore(CoreWCF.IdentityModel.Tokens.SecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Selectors
  syntax:
    content: protected override bool CanValidateTokenCore(SecurityToken token)
    parameters:
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    return:
      type: System.Boolean
    content.vb: Protected Overrides Function CanValidateTokenCore(token As SecurityToken) As Boolean
  overridden: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.CanValidateTokenCore(CoreWCF.IdentityModel.Tokens.SecurityToken)
  overload: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.CanValidateTokenCore*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateTokenCoreAsync(CoreWCF.IdentityModel.Tokens.SecurityToken)
  commentId: M:CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateTokenCoreAsync(CoreWCF.IdentityModel.Tokens.SecurityToken)
  id: ValidateTokenCoreAsync(CoreWCF.IdentityModel.Tokens.SecurityToken)
  parent: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator
  langs:
  - csharp
  - vb
  name: ValidateTokenCoreAsync(SecurityToken)
  nameWithType: UserNameSecurityTokenAuthenticator.ValidateTokenCoreAsync(SecurityToken)
  fullName: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateTokenCoreAsync(CoreWCF.IdentityModel.Tokens.SecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Selectors
  syntax:
    content: protected override ValueTask<ReadOnlyCollection<IAuthorizationPolicy>> ValidateTokenCoreAsync(SecurityToken token)
    parameters:
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    return:
      type: System.Threading.Tasks.ValueTask{System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy}}
    content.vb: Protected Overrides Function ValidateTokenCoreAsync(token As SecurityToken) As ValueTask(Of ReadOnlyCollection(Of IAuthorizationPolicy))
  overridden: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenCoreAsync(CoreWCF.IdentityModel.Tokens.SecurityToken)
  overload: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateTokenCoreAsync*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCore(System.String,System.String)
  commentId: M:CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCore(System.String,System.String)
  id: ValidateUserNamePasswordCore(System.String,System.String)
  parent: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator
  langs:
  - csharp
  - vb
  name: ValidateUserNamePasswordCore(String, String)
  nameWithType: UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCore(String, String)
  fullName: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCore(System.String, System.String)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Selectors
  syntax:
    content: protected virtual ReadOnlyCollection<IAuthorizationPolicy> ValidateUserNamePasswordCore(string userName, string password)
    parameters:
    - id: userName
      type: System.String
    - id: password
      type: System.String
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy}
    content.vb: Protected Overridable Function ValidateUserNamePasswordCore(userName As String, password As String) As ReadOnlyCollection(Of IAuthorizationPolicy)
  overload: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCore*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCoreAsync(System.String,System.String)
  commentId: M:CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCoreAsync(System.String,System.String)
  id: ValidateUserNamePasswordCoreAsync(System.String,System.String)
  parent: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator
  langs:
  - csharp
  - vb
  name: ValidateUserNamePasswordCoreAsync(String, String)
  nameWithType: UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCoreAsync(String, String)
  fullName: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCoreAsync(System.String, System.String)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Selectors
  syntax:
    content: protected virtual ValueTask<ReadOnlyCollection<IAuthorizationPolicy>> ValidateUserNamePasswordCoreAsync(string userName, string password)
    parameters:
    - id: userName
      type: System.String
    - id: password
      type: System.String
    return:
      type: System.Threading.Tasks.ValueTask{System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy}}
    content.vb: Protected Overridable Function ValidateUserNamePasswordCoreAsync(userName As String, password As String) As ValueTask(Of ReadOnlyCollection(Of IAuthorizationPolicy))
  overload: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCoreAsync*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: CoreWCF.IdentityModel.Selectors
  commentId: N:CoreWCF.IdentityModel.Selectors
  isExternal: true
  name: CoreWCF.IdentityModel.Selectors
  nameWithType: CoreWCF.IdentityModel.Selectors
  fullName: CoreWCF.IdentityModel.Selectors
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator
  commentId: T:CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator
  parent: CoreWCF.IdentityModel.Selectors
  isExternal: true
  name: SecurityTokenAuthenticator
  nameWithType: SecurityTokenAuthenticator
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.CanValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.CanValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator
  isExternal: true
  name: CanValidateToken(SecurityToken)
  nameWithType: SecurityTokenAuthenticator.CanValidateToken(SecurityToken)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.CanValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.CanValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
    name: CanValidateToken
    nameWithType: SecurityTokenAuthenticator.CanValidateToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.CanValidateToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.CanValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
    name: CanValidateToken
    nameWithType: SecurityTokenAuthenticator.CanValidateToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.CanValidateToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator
  isExternal: true
  name: ValidateToken(SecurityToken)
  nameWithType: SecurityTokenAuthenticator.ValidateToken(SecurityToken)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
    name: ValidateToken
    nameWithType: SecurityTokenAuthenticator.ValidateToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
    name: ValidateToken
    nameWithType: SecurityTokenAuthenticator.ValidateToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenAsync(CoreWCF.IdentityModel.Tokens.SecurityToken)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenAsync(CoreWCF.IdentityModel.Tokens.SecurityToken)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator
  isExternal: true
  name: ValidateTokenAsync(SecurityToken)
  nameWithType: SecurityTokenAuthenticator.ValidateTokenAsync(SecurityToken)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenAsync(CoreWCF.IdentityModel.Tokens.SecurityToken)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenAsync(CoreWCF.IdentityModel.Tokens.SecurityToken)
    name: ValidateTokenAsync
    nameWithType: SecurityTokenAuthenticator.ValidateTokenAsync
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenAsync(CoreWCF.IdentityModel.Tokens.SecurityToken)
    name: ValidateTokenAsync
    nameWithType: SecurityTokenAuthenticator.ValidateTokenAsync
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenCore(CoreWCF.IdentityModel.Tokens.SecurityToken)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenCore(CoreWCF.IdentityModel.Tokens.SecurityToken)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator
  isExternal: true
  name: ValidateTokenCore(SecurityToken)
  nameWithType: SecurityTokenAuthenticator.ValidateTokenCore(SecurityToken)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenCore(CoreWCF.IdentityModel.Tokens.SecurityToken)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenCore(CoreWCF.IdentityModel.Tokens.SecurityToken)
    name: ValidateTokenCore
    nameWithType: SecurityTokenAuthenticator.ValidateTokenCore
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenCore
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenCore(CoreWCF.IdentityModel.Tokens.SecurityToken)
    name: ValidateTokenCore
    nameWithType: SecurityTokenAuthenticator.ValidateTokenCore
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenCore
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.#ctor*
  commentId: Overload:CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.#ctor
  isExternal: true
  name: UserNameSecurityTokenAuthenticator
  nameWithType: UserNameSecurityTokenAuthenticator.UserNameSecurityTokenAuthenticator
  fullName: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.UserNameSecurityTokenAuthenticator
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.CanValidateTokenCore(CoreWCF.IdentityModel.Tokens.SecurityToken)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.CanValidateTokenCore(CoreWCF.IdentityModel.Tokens.SecurityToken)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator
  isExternal: true
  name: CanValidateTokenCore(SecurityToken)
  nameWithType: SecurityTokenAuthenticator.CanValidateTokenCore(SecurityToken)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.CanValidateTokenCore(CoreWCF.IdentityModel.Tokens.SecurityToken)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.CanValidateTokenCore(CoreWCF.IdentityModel.Tokens.SecurityToken)
    name: CanValidateTokenCore
    nameWithType: SecurityTokenAuthenticator.CanValidateTokenCore
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.CanValidateTokenCore
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.CanValidateTokenCore(CoreWCF.IdentityModel.Tokens.SecurityToken)
    name: CanValidateTokenCore
    nameWithType: SecurityTokenAuthenticator.CanValidateTokenCore
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.CanValidateTokenCore
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.CanValidateTokenCore*
  commentId: Overload:CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.CanValidateTokenCore
  isExternal: true
  name: CanValidateTokenCore
  nameWithType: UserNameSecurityTokenAuthenticator.CanValidateTokenCore
  fullName: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.CanValidateTokenCore
- uid: CoreWCF.IdentityModel.Tokens.SecurityToken
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityToken
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityToken
  nameWithType: SecurityToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CoreWCF.IdentityModel.Tokens
  commentId: N:CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: CoreWCF.IdentityModel.Tokens
  nameWithType: CoreWCF.IdentityModel.Tokens
  fullName: CoreWCF.IdentityModel.Tokens
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenCoreAsync(CoreWCF.IdentityModel.Tokens.SecurityToken)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenCoreAsync(CoreWCF.IdentityModel.Tokens.SecurityToken)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator
  isExternal: true
  name: ValidateTokenCoreAsync(SecurityToken)
  nameWithType: SecurityTokenAuthenticator.ValidateTokenCoreAsync(SecurityToken)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenCoreAsync(CoreWCF.IdentityModel.Tokens.SecurityToken)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenCoreAsync(CoreWCF.IdentityModel.Tokens.SecurityToken)
    name: ValidateTokenCoreAsync
    nameWithType: SecurityTokenAuthenticator.ValidateTokenCoreAsync
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenCoreAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenCoreAsync(CoreWCF.IdentityModel.Tokens.SecurityToken)
    name: ValidateTokenCoreAsync
    nameWithType: SecurityTokenAuthenticator.ValidateTokenCoreAsync
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenCoreAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateTokenCoreAsync*
  commentId: Overload:CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateTokenCoreAsync
  isExternal: true
  name: ValidateTokenCoreAsync
  nameWithType: UserNameSecurityTokenAuthenticator.ValidateTokenCoreAsync
  fullName: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateTokenCoreAsync
- uid: System.Threading.Tasks.ValueTask{System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy}}
  commentId: '!:System.Threading.Tasks.ValueTask{System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy}}'
  definition: System.Threading.Tasks.ValueTask`1
  name: ValueTask<ReadOnlyCollection<IAuthorizationPolicy>>
  nameWithType: ValueTask<ReadOnlyCollection<IAuthorizationPolicy>>
  fullName: System.Threading.Tasks.ValueTask<System.Collections.ObjectModel.ReadOnlyCollection<CoreWCF.IdentityModel.Policy.IAuthorizationPolicy>>
  nameWithType.vb: ValueTask(Of ReadOnlyCollection(Of IAuthorizationPolicy))
  fullName.vb: System.Threading.Tasks.ValueTask(Of System.Collections.ObjectModel.ReadOnlyCollection(Of CoreWCF.IdentityModel.Policy.IAuthorizationPolicy))
  name.vb: ValueTask(Of ReadOnlyCollection(Of IAuthorizationPolicy))
  spec.csharp:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreWCF.IdentityModel.Policy.IAuthorizationPolicy
    name: IAuthorizationPolicy
    nameWithType: IAuthorizationPolicy
    fullName: CoreWCF.IdentityModel.Policy.IAuthorizationPolicy
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreWCF.IdentityModel.Policy.IAuthorizationPolicy
    name: IAuthorizationPolicy
    nameWithType: IAuthorizationPolicy
    fullName: CoreWCF.IdentityModel.Policy.IAuthorizationPolicy
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.ValueTask`1
  isExternal: true
  name: ValueTask<>
  nameWithType: ValueTask<>
  fullName: System.Threading.Tasks.ValueTask<>
  nameWithType.vb: ValueTask(Of )
  fullName.vb: System.Threading.Tasks.ValueTask(Of )
  name.vb: ValueTask(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.ValueTask`1
    name: ValueTask
    nameWithType: ValueTask
    fullName: System.Threading.Tasks.ValueTask
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCore*
  commentId: Overload:CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCore
  isExternal: true
  name: ValidateUserNamePasswordCore
  nameWithType: UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCore
  fullName: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCore
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy}
  commentId: '!:System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy}'
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<IAuthorizationPolicy>
  nameWithType: ReadOnlyCollection<IAuthorizationPolicy>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<CoreWCF.IdentityModel.Policy.IAuthorizationPolicy>
  nameWithType.vb: ReadOnlyCollection(Of IAuthorizationPolicy)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of CoreWCF.IdentityModel.Policy.IAuthorizationPolicy)
  name.vb: ReadOnlyCollection(Of IAuthorizationPolicy)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreWCF.IdentityModel.Policy.IAuthorizationPolicy
    name: IAuthorizationPolicy
    nameWithType: IAuthorizationPolicy
    fullName: CoreWCF.IdentityModel.Policy.IAuthorizationPolicy
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreWCF.IdentityModel.Policy.IAuthorizationPolicy
    name: IAuthorizationPolicy
    nameWithType: IAuthorizationPolicy
    fullName: CoreWCF.IdentityModel.Policy.IAuthorizationPolicy
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<>
  nameWithType: ReadOnlyCollection<>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<>
  nameWithType.vb: ReadOnlyCollection(Of )
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of )
  name.vb: ReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCoreAsync*
  commentId: Overload:CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCoreAsync
  isExternal: true
  name: ValidateUserNamePasswordCoreAsync
  nameWithType: UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCoreAsync
  fullName: CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCoreAsync
