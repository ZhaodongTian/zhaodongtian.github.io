### YamlMime:ManagedReference
items:
- uid: CoreWCF.Configuration.IServiceDispatcher
  commentId: T:CoreWCF.Configuration.IServiceDispatcher
  id: IServiceDispatcher
  parent: CoreWCF.Configuration
  children:
  - CoreWCF.Configuration.IServiceDispatcher.BaseAddress
  - CoreWCF.Configuration.IServiceDispatcher.Binding
  - CoreWCF.Configuration.IServiceDispatcher.CreateServiceChannelDispatcherAsync(CoreWCF.Channels.IChannel)
  - CoreWCF.Configuration.IServiceDispatcher.Host
  - CoreWCF.Configuration.IServiceDispatcher.SupportedChannelTypes
  langs:
  - csharp
  - vb
  name: IServiceDispatcher
  nameWithType: IServiceDispatcher
  fullName: CoreWCF.Configuration.IServiceDispatcher
  type: Interface
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Configuration
  syntax:
    content: public interface IServiceDispatcher
    content.vb: Public Interface IServiceDispatcher
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: CoreWCF.Configuration.IServiceDispatcher.CreateServiceChannelDispatcherAsync(CoreWCF.Channels.IChannel)
  commentId: M:CoreWCF.Configuration.IServiceDispatcher.CreateServiceChannelDispatcherAsync(CoreWCF.Channels.IChannel)
  id: CreateServiceChannelDispatcherAsync(CoreWCF.Channels.IChannel)
  parent: CoreWCF.Configuration.IServiceDispatcher
  langs:
  - csharp
  - vb
  name: CreateServiceChannelDispatcherAsync(IChannel)
  nameWithType: IServiceDispatcher.CreateServiceChannelDispatcherAsync(IChannel)
  fullName: CoreWCF.Configuration.IServiceDispatcher.CreateServiceChannelDispatcherAsync(CoreWCF.Channels.IChannel)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Configuration
  syntax:
    content: Task<IServiceChannelDispatcher> CreateServiceChannelDispatcherAsync(IChannel channel)
    parameters:
    - id: channel
      type: CoreWCF.Channels.IChannel
    return:
      type: System.Threading.Tasks.Task{CoreWCF.Configuration.IServiceChannelDispatcher}
    content.vb: Function CreateServiceChannelDispatcherAsync(channel As IChannel) As Task(Of IServiceChannelDispatcher)
  overload: CoreWCF.Configuration.IServiceDispatcher.CreateServiceChannelDispatcherAsync*
- uid: CoreWCF.Configuration.IServiceDispatcher.BaseAddress
  commentId: P:CoreWCF.Configuration.IServiceDispatcher.BaseAddress
  id: BaseAddress
  parent: CoreWCF.Configuration.IServiceDispatcher
  langs:
  - csharp
  - vb
  name: BaseAddress
  nameWithType: IServiceDispatcher.BaseAddress
  fullName: CoreWCF.Configuration.IServiceDispatcher.BaseAddress
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Configuration
  syntax:
    content: Uri BaseAddress { get; }
    parameters: []
    return:
      type: System.Uri
    content.vb: ReadOnly Property BaseAddress As Uri
  overload: CoreWCF.Configuration.IServiceDispatcher.BaseAddress*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: CoreWCF.Configuration.IServiceDispatcher.Binding
  commentId: P:CoreWCF.Configuration.IServiceDispatcher.Binding
  id: Binding
  parent: CoreWCF.Configuration.IServiceDispatcher
  langs:
  - csharp
  - vb
  name: Binding
  nameWithType: IServiceDispatcher.Binding
  fullName: CoreWCF.Configuration.IServiceDispatcher.Binding
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Configuration
  syntax:
    content: Binding Binding { get; }
    parameters: []
    return:
      type: CoreWCF.Channels.Binding
    content.vb: ReadOnly Property Binding As Binding
  overload: CoreWCF.Configuration.IServiceDispatcher.Binding*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: CoreWCF.Configuration.IServiceDispatcher.Host
  commentId: P:CoreWCF.Configuration.IServiceDispatcher.Host
  id: Host
  parent: CoreWCF.Configuration.IServiceDispatcher
  langs:
  - csharp
  - vb
  name: Host
  nameWithType: IServiceDispatcher.Host
  fullName: CoreWCF.Configuration.IServiceDispatcher.Host
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Configuration
  syntax:
    content: ServiceHostBase Host { get; }
    parameters: []
    return:
      type: CoreWCF.ServiceHostBase
    content.vb: ReadOnly Property Host As ServiceHostBase
  overload: CoreWCF.Configuration.IServiceDispatcher.Host*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: CoreWCF.Configuration.IServiceDispatcher.SupportedChannelTypes
  commentId: P:CoreWCF.Configuration.IServiceDispatcher.SupportedChannelTypes
  id: SupportedChannelTypes
  parent: CoreWCF.Configuration.IServiceDispatcher
  langs:
  - csharp
  - vb
  name: SupportedChannelTypes
  nameWithType: IServiceDispatcher.SupportedChannelTypes
  fullName: CoreWCF.Configuration.IServiceDispatcher.SupportedChannelTypes
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Configuration
  syntax:
    content: IList<Type> SupportedChannelTypes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Type}
    content.vb: ReadOnly Property SupportedChannelTypes As IList(Of Type)
  overload: CoreWCF.Configuration.IServiceDispatcher.SupportedChannelTypes*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: CoreWCF.Configuration
  commentId: N:CoreWCF.Configuration
  isExternal: true
  name: CoreWCF.Configuration
  nameWithType: CoreWCF.Configuration
  fullName: CoreWCF.Configuration
- uid: CoreWCF.Configuration.IServiceDispatcher.CreateServiceChannelDispatcherAsync*
  commentId: Overload:CoreWCF.Configuration.IServiceDispatcher.CreateServiceChannelDispatcherAsync
  isExternal: true
  name: CreateServiceChannelDispatcherAsync
  nameWithType: IServiceDispatcher.CreateServiceChannelDispatcherAsync
  fullName: CoreWCF.Configuration.IServiceDispatcher.CreateServiceChannelDispatcherAsync
- uid: CoreWCF.Channels.IChannel
  commentId: T:CoreWCF.Channels.IChannel
  parent: CoreWCF.Channels
  isExternal: true
  name: IChannel
  nameWithType: IChannel
  fullName: CoreWCF.Channels.IChannel
- uid: System.Threading.Tasks.Task{CoreWCF.Configuration.IServiceChannelDispatcher}
  commentId: '!:System.Threading.Tasks.Task{CoreWCF.Configuration.IServiceChannelDispatcher}'
  definition: System.Threading.Tasks.Task`1
  name: Task<IServiceChannelDispatcher>
  nameWithType: Task<IServiceChannelDispatcher>
  fullName: System.Threading.Tasks.Task<CoreWCF.Configuration.IServiceChannelDispatcher>
  nameWithType.vb: Task(Of IServiceChannelDispatcher)
  fullName.vb: System.Threading.Tasks.Task(Of CoreWCF.Configuration.IServiceChannelDispatcher)
  name.vb: Task(Of IServiceChannelDispatcher)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreWCF.Configuration.IServiceChannelDispatcher
    name: IServiceChannelDispatcher
    nameWithType: IServiceChannelDispatcher
    fullName: CoreWCF.Configuration.IServiceChannelDispatcher
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreWCF.Configuration.IServiceChannelDispatcher
    name: IServiceChannelDispatcher
    nameWithType: IServiceChannelDispatcher
    fullName: CoreWCF.Configuration.IServiceChannelDispatcher
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Channels
  commentId: N:CoreWCF.Channels
  isExternal: true
  name: CoreWCF.Channels
  nameWithType: CoreWCF.Channels
  fullName: CoreWCF.Channels
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Configuration.IServiceDispatcher.BaseAddress*
  commentId: Overload:CoreWCF.Configuration.IServiceDispatcher.BaseAddress
  isExternal: true
  name: BaseAddress
  nameWithType: IServiceDispatcher.BaseAddress
  fullName: CoreWCF.Configuration.IServiceDispatcher.BaseAddress
- uid: System.Uri
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: CoreWCF.Configuration.IServiceDispatcher.Binding*
  commentId: Overload:CoreWCF.Configuration.IServiceDispatcher.Binding
  isExternal: true
  name: Binding
  nameWithType: IServiceDispatcher.Binding
  fullName: CoreWCF.Configuration.IServiceDispatcher.Binding
- uid: CoreWCF.Channels.Binding
  commentId: T:CoreWCF.Channels.Binding
  parent: CoreWCF.Channels
  isExternal: true
  name: Binding
  nameWithType: Binding
  fullName: CoreWCF.Channels.Binding
- uid: CoreWCF.Configuration.IServiceDispatcher.Host*
  commentId: Overload:CoreWCF.Configuration.IServiceDispatcher.Host
  isExternal: true
  name: Host
  nameWithType: IServiceDispatcher.Host
  fullName: CoreWCF.Configuration.IServiceDispatcher.Host
- uid: CoreWCF.ServiceHostBase
  commentId: T:CoreWCF.ServiceHostBase
  parent: CoreWCF
  isExternal: true
  name: ServiceHostBase
  nameWithType: ServiceHostBase
  fullName: CoreWCF.ServiceHostBase
- uid: CoreWCF
  commentId: N:CoreWCF
  isExternal: true
  name: CoreWCF
  nameWithType: CoreWCF
  fullName: CoreWCF
- uid: CoreWCF.Configuration.IServiceDispatcher.SupportedChannelTypes*
  commentId: Overload:CoreWCF.Configuration.IServiceDispatcher.SupportedChannelTypes
  isExternal: true
  name: SupportedChannelTypes
  nameWithType: IServiceDispatcher.SupportedChannelTypes
  fullName: CoreWCF.Configuration.IServiceDispatcher.SupportedChannelTypes
- uid: System.Collections.Generic.IList{System.Type}
  commentId: '!:System.Collections.Generic.IList{System.Type}'
  definition: System.Collections.Generic.IList`1
  name: IList<Type>
  nameWithType: IList<Type>
  fullName: System.Collections.Generic.IList<System.Type>
  nameWithType.vb: IList(Of Type)
  fullName.vb: System.Collections.Generic.IList(Of System.Type)
  name.vb: IList(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  isExternal: true
  name: IList<>
  nameWithType: IList<>
  fullName: System.Collections.Generic.IList<>
  nameWithType.vb: IList(Of )
  fullName.vb: System.Collections.Generic.IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
