### YamlMime:ManagedReference
items:
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache
  commentId: T:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache
  id: ISecurityContextSecurityTokenCache
  parent: CoreWCF.Security.Tokens
  children:
  - CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.AddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  - CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.ClearContexts
  - CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetAllContexts(System.Xml.UniqueId)
  - CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetContext(System.Xml.UniqueId,System.Xml.UniqueId)
  - CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveAllContexts(System.Xml.UniqueId)
  - CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)
  - CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.TryAddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  - CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.UpdateContextCachingTime(CoreWCF.Security.Tokens.SecurityContextSecurityToken,System.DateTime)
  langs:
  - csharp
  - vb
  name: ISecurityContextSecurityTokenCache
  nameWithType: ISecurityContextSecurityTokenCache
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache
  type: Interface
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  summary: When implemented, this interface specifies a contract for a security context token cache.
  remarks: To be added.
  syntax:
    content: public interface ISecurityContextSecurityTokenCache
    content.vb: Public Interface ISecurityContextSecurityTokenCache
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.AddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  commentId: M:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.AddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  id: AddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  parent: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache
  langs:
  - csharp
  - vb
  name: AddContext(SecurityContextSecurityToken)
  nameWithType: ISecurityContextSecurityTokenCache.AddContext(SecurityContextSecurityToken)
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.AddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  syntax:
    content: void AddContext(SecurityContextSecurityToken token)
    parameters:
    - id: token
      type: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    content.vb: Sub AddContext(token As SecurityContextSecurityToken)
  overload: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.AddContext*
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.TryAddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  commentId: M:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.TryAddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  id: TryAddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  parent: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache
  langs:
  - csharp
  - vb
  name: TryAddContext(SecurityContextSecurityToken)
  nameWithType: ISecurityContextSecurityTokenCache.TryAddContext(SecurityContextSecurityToken)
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.TryAddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  syntax:
    content: bool TryAddContext(SecurityContextSecurityToken token)
    parameters:
    - id: token
      type: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    return:
      type: System.Boolean
    content.vb: Function TryAddContext(token As SecurityContextSecurityToken) As Boolean
  overload: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.TryAddContext*
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.ClearContexts
  commentId: M:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.ClearContexts
  id: ClearContexts
  parent: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache
  langs:
  - csharp
  - vb
  name: ClearContexts()
  nameWithType: ISecurityContextSecurityTokenCache.ClearContexts()
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.ClearContexts()
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  syntax:
    content: void ClearContexts()
    content.vb: Sub ClearContexts
  overload: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.ClearContexts*
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)
  commentId: M:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)
  id: RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)
  parent: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache
  langs:
  - csharp
  - vb
  name: RemoveContext(UniqueId, UniqueId)
  nameWithType: ISecurityContextSecurityTokenCache.RemoveContext(UniqueId, UniqueId)
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveContext(System.Xml.UniqueId, System.Xml.UniqueId)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  syntax:
    content: void RemoveContext(UniqueId contextId, UniqueId generation)
    parameters:
    - id: contextId
      type: System.Xml.UniqueId
    - id: generation
      type: System.Xml.UniqueId
    content.vb: Sub RemoveContext(contextId As UniqueId, generation As UniqueId)
  overload: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveContext*
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveAllContexts(System.Xml.UniqueId)
  commentId: M:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveAllContexts(System.Xml.UniqueId)
  id: RemoveAllContexts(System.Xml.UniqueId)
  parent: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache
  langs:
  - csharp
  - vb
  name: RemoveAllContexts(UniqueId)
  nameWithType: ISecurityContextSecurityTokenCache.RemoveAllContexts(UniqueId)
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveAllContexts(System.Xml.UniqueId)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  syntax:
    content: void RemoveAllContexts(UniqueId contextId)
    parameters:
    - id: contextId
      type: System.Xml.UniqueId
    content.vb: Sub RemoveAllContexts(contextId As UniqueId)
  overload: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveAllContexts*
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetContext(System.Xml.UniqueId,System.Xml.UniqueId)
  commentId: M:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetContext(System.Xml.UniqueId,System.Xml.UniqueId)
  id: GetContext(System.Xml.UniqueId,System.Xml.UniqueId)
  parent: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache
  langs:
  - csharp
  - vb
  name: GetContext(UniqueId, UniqueId)
  nameWithType: ISecurityContextSecurityTokenCache.GetContext(UniqueId, UniqueId)
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetContext(System.Xml.UniqueId, System.Xml.UniqueId)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  syntax:
    content: SecurityContextSecurityToken GetContext(UniqueId contextId, UniqueId generation)
    parameters:
    - id: contextId
      type: System.Xml.UniqueId
    - id: generation
      type: System.Xml.UniqueId
    return:
      type: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    content.vb: Function GetContext(contextId As UniqueId, generation As UniqueId) As SecurityContextSecurityToken
  overload: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetContext*
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetAllContexts(System.Xml.UniqueId)
  commentId: M:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetAllContexts(System.Xml.UniqueId)
  id: GetAllContexts(System.Xml.UniqueId)
  parent: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache
  langs:
  - csharp
  - vb
  name: GetAllContexts(UniqueId)
  nameWithType: ISecurityContextSecurityTokenCache.GetAllContexts(UniqueId)
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetAllContexts(System.Xml.UniqueId)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  syntax:
    content: Collection<SecurityContextSecurityToken> GetAllContexts(UniqueId contextId)
    parameters:
    - id: contextId
      type: System.Xml.UniqueId
    return:
      type: System.Collections.ObjectModel.Collection{CoreWCF.Security.Tokens.SecurityContextSecurityToken}
    content.vb: Function GetAllContexts(contextId As UniqueId) As Collection(Of SecurityContextSecurityToken)
  overload: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetAllContexts*
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.UpdateContextCachingTime(CoreWCF.Security.Tokens.SecurityContextSecurityToken,System.DateTime)
  commentId: M:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.UpdateContextCachingTime(CoreWCF.Security.Tokens.SecurityContextSecurityToken,System.DateTime)
  id: UpdateContextCachingTime(CoreWCF.Security.Tokens.SecurityContextSecurityToken,System.DateTime)
  parent: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache
  langs:
  - csharp
  - vb
  name: UpdateContextCachingTime(SecurityContextSecurityToken, DateTime)
  nameWithType: ISecurityContextSecurityTokenCache.UpdateContextCachingTime(SecurityContextSecurityToken, DateTime)
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.UpdateContextCachingTime(CoreWCF.Security.Tokens.SecurityContextSecurityToken, System.DateTime)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  syntax:
    content: void UpdateContextCachingTime(SecurityContextSecurityToken context, DateTime expirationTime)
    parameters:
    - id: context
      type: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    - id: expirationTime
      type: System.DateTime
    content.vb: Sub UpdateContextCachingTime(context As SecurityContextSecurityToken, expirationTime As DateTime)
  overload: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.UpdateContextCachingTime*
references:
- uid: CoreWCF.Security.Tokens
  commentId: N:CoreWCF.Security.Tokens
  isExternal: true
  name: CoreWCF.Security.Tokens
  nameWithType: CoreWCF.Security.Tokens
  fullName: CoreWCF.Security.Tokens
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.AddContext*
  commentId: Overload:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.AddContext
  isExternal: true
  name: AddContext
  nameWithType: ISecurityContextSecurityTokenCache.AddContext
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.AddContext
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityToken
  commentId: T:CoreWCF.Security.Tokens.SecurityContextSecurityToken
  parent: CoreWCF.Security.Tokens
  isExternal: true
  name: SecurityContextSecurityToken
  nameWithType: SecurityContextSecurityToken
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityToken
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.TryAddContext*
  commentId: Overload:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.TryAddContext
  isExternal: true
  name: TryAddContext
  nameWithType: ISecurityContextSecurityTokenCache.TryAddContext
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.TryAddContext
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.ClearContexts*
  commentId: Overload:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.ClearContexts
  isExternal: true
  name: ClearContexts
  nameWithType: ISecurityContextSecurityTokenCache.ClearContexts
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.ClearContexts
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveContext*
  commentId: Overload:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveContext
  isExternal: true
  name: RemoveContext
  nameWithType: ISecurityContextSecurityTokenCache.RemoveContext
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveContext
- uid: System.Xml.UniqueId
  isExternal: true
  name: UniqueId
  nameWithType: UniqueId
  fullName: System.Xml.UniqueId
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveAllContexts*
  commentId: Overload:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveAllContexts
  isExternal: true
  name: RemoveAllContexts
  nameWithType: ISecurityContextSecurityTokenCache.RemoveAllContexts
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveAllContexts
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetContext*
  commentId: Overload:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetContext
  isExternal: true
  name: GetContext
  nameWithType: ISecurityContextSecurityTokenCache.GetContext
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetContext
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetAllContexts*
  commentId: Overload:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetAllContexts
  isExternal: true
  name: GetAllContexts
  nameWithType: ISecurityContextSecurityTokenCache.GetAllContexts
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetAllContexts
- uid: System.Collections.ObjectModel.Collection{CoreWCF.Security.Tokens.SecurityContextSecurityToken}
  commentId: '!:System.Collections.ObjectModel.Collection{CoreWCF.Security.Tokens.SecurityContextSecurityToken}'
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<SecurityContextSecurityToken>
  nameWithType: Collection<SecurityContextSecurityToken>
  fullName: System.Collections.ObjectModel.Collection<CoreWCF.Security.Tokens.SecurityContextSecurityToken>
  nameWithType.vb: Collection(Of SecurityContextSecurityToken)
  fullName.vb: System.Collections.ObjectModel.Collection(Of CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  name.vb: Collection(Of SecurityContextSecurityToken)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    name: SecurityContextSecurityToken
    nameWithType: SecurityContextSecurityToken
    fullName: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    name: SecurityContextSecurityToken
    nameWithType: SecurityContextSecurityToken
    fullName: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.Collection`1
  isExternal: true
  name: Collection<>
  nameWithType: Collection<>
  fullName: System.Collections.ObjectModel.Collection<>
  nameWithType.vb: Collection(Of )
  fullName.vb: System.Collections.ObjectModel.Collection(Of )
  name.vb: Collection(Of )
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.UpdateContextCachingTime*
  commentId: Overload:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.UpdateContextCachingTime
  isExternal: true
  name: UpdateContextCachingTime
  nameWithType: ISecurityContextSecurityTokenCache.UpdateContextCachingTime
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.UpdateContextCachingTime
- uid: System.DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
