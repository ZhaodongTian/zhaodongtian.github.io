### YamlMime:ManagedReference
items:
- uid: CoreWCF.IExtensionCollection`1
  commentId: T:CoreWCF.IExtensionCollection`1
  id: IExtensionCollection`1
  parent: CoreWCF
  children:
  - CoreWCF.IExtensionCollection`1.Find``1
  - CoreWCF.IExtensionCollection`1.FindAll``1
  langs:
  - csharp
  - vb
  name: IExtensionCollection<T>
  nameWithType: IExtensionCollection<T>
  fullName: CoreWCF.IExtensionCollection<T>
  type: Interface
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  summary: A collection of the  objects that allow for retrieving the  by its type.
  remarks: To be added.
  syntax:
    content: >-
      public interface IExtensionCollection<T>
          where T : IExtensibleObject<T>
    typeParameters:
    - id: T
    content.vb: >-
      Public Interface IExtensionCollection(Of T As IExtensibleObject(Of T))
          Inherits ICollection(Of IExtension(Of T)), IEnumerable(Of IExtension(Of T)), IEnumerable
  nameWithType.vb: IExtensionCollection(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: CoreWCF.IExtensionCollection(Of T)
  name.vb: IExtensionCollection(Of T)
- uid: CoreWCF.IExtensionCollection`1.Find``1
  commentId: M:CoreWCF.IExtensionCollection`1.Find``1
  id: Find``1
  parent: CoreWCF.IExtensionCollection`1
  langs:
  - csharp
  - vb
  name: Find<E>()
  nameWithType: IExtensionCollection<T>.Find<E>()
  fullName: CoreWCF.IExtensionCollection<T>.Find<E>()
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: E Find<E>()
    typeParameters:
    - id: E
    return:
      type: '{E}'
    content.vb: Function Find(Of E) As E
  overload: CoreWCF.IExtensionCollection`1.Find*
  nameWithType.vb: IExtensionCollection(Of T).Find(Of E)()
  fullName.vb: CoreWCF.IExtensionCollection(Of T).Find(Of E)()
  name.vb: Find(Of E)()
- uid: CoreWCF.IExtensionCollection`1.FindAll``1
  commentId: M:CoreWCF.IExtensionCollection`1.FindAll``1
  id: FindAll``1
  parent: CoreWCF.IExtensionCollection`1
  langs:
  - csharp
  - vb
  name: FindAll<E>()
  nameWithType: IExtensionCollection<T>.FindAll<E>()
  fullName: CoreWCF.IExtensionCollection<T>.FindAll<E>()
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: Collection<E> FindAll<E>()
    typeParameters:
    - id: E
    return:
      type: System.Collections.ObjectModel.Collection{{E}}
    content.vb: Function FindAll(Of E) As Collection(Of E)
  overload: CoreWCF.IExtensionCollection`1.FindAll*
  nameWithType.vb: IExtensionCollection(Of T).FindAll(Of E)()
  fullName.vb: CoreWCF.IExtensionCollection(Of T).FindAll(Of E)()
  name.vb: FindAll(Of E)()
references:
- uid: CoreWCF
  commentId: N:CoreWCF
  isExternal: true
  name: CoreWCF
  nameWithType: CoreWCF
  fullName: CoreWCF
- uid: CoreWCF.IExtensionCollection`1.Find*
  commentId: Overload:CoreWCF.IExtensionCollection`1.Find
  isExternal: true
  name: Find
  nameWithType: IExtensionCollection<T>.Find
  fullName: CoreWCF.IExtensionCollection<T>.Find
  nameWithType.vb: IExtensionCollection(Of T).Find
  fullName.vb: CoreWCF.IExtensionCollection(Of T).Find
- uid: '{E}'
  commentId: '!:E'
  definition: E
  name: E
  nameWithType: E
  fullName: E
- uid: E
  commentId: '!:E'
  name: E
  nameWithType: E
  fullName: E
- uid: CoreWCF.IExtensionCollection`1.FindAll*
  commentId: Overload:CoreWCF.IExtensionCollection`1.FindAll
  isExternal: true
  name: FindAll
  nameWithType: IExtensionCollection<T>.FindAll
  fullName: CoreWCF.IExtensionCollection<T>.FindAll
  nameWithType.vb: IExtensionCollection(Of T).FindAll
  fullName.vb: CoreWCF.IExtensionCollection(Of T).FindAll
- uid: System.Collections.ObjectModel.Collection{{E}}
  commentId: '!:System.Collections.ObjectModel.Collection{``0}'
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<E>
  nameWithType: Collection<E>
  fullName: System.Collections.ObjectModel.Collection<E>
  nameWithType.vb: Collection(Of E)
  fullName.vb: System.Collections.ObjectModel.Collection(Of E)
  name.vb: Collection(Of E)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: E
    nameWithType: E
    fullName: E
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: E
    nameWithType: E
    fullName: E
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.Collection`1
  isExternal: true
  name: Collection<>
  nameWithType: Collection<>
  fullName: System.Collections.ObjectModel.Collection<>
  nameWithType.vb: Collection(Of )
  fullName.vb: System.Collections.ObjectModel.Collection(Of )
  name.vb: Collection(Of )
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
