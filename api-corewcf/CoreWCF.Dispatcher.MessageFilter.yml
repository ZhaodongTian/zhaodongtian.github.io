### YamlMime:ManagedReference
items:
- uid: CoreWCF.Dispatcher.MessageFilter
  commentId: T:CoreWCF.Dispatcher.MessageFilter
  id: MessageFilter
  parent: CoreWCF.Dispatcher
  children:
  - CoreWCF.Dispatcher.MessageFilter.#ctor
  - CoreWCF.Dispatcher.MessageFilter.CreateFilterTable``1
  - CoreWCF.Dispatcher.MessageFilter.Match(CoreWCF.Channels.Message)
  - CoreWCF.Dispatcher.MessageFilter.Match(CoreWCF.Channels.MessageBuffer)
  langs:
  - csharp
  - vb
  name: MessageFilter
  nameWithType: MessageFilter
  fullName: CoreWCF.Dispatcher.MessageFilter
  type: Class
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Dispatcher
  summary: base class for different classes of filters used to query messages.
  remarks: "&lt;xref:CoreWCF.Dispatcher.MessageFilter> is an `abstract` class that developers implement in order to specify the criteria to use for inspecting messages. Typically, filters are used by an endpoint application to determine what to do with a message based on an examination of some part of the message. A queuing process, for example, can use an XPath 1.0 query to check the priority element of a known header to determine whether to move a message to the front of the queue.  \n\nFilters are stored in a filter table that implements &lt;xref:CoreWCF.Dispatcher.IMessageFilterTable%601>. Each filter in the table is associated with specified filter data that can be used to indicate what actions to take if a message matches the filter. The &lt;xref:CoreWCF.Dispatcher.MessageFilter.Match%2A> methods are used to determine if a message satisfies a filter.  \n\nThe criteria used by a filter cannot be changed once the filter is constructed because the filter tables have no way to detect a change. The only way to modify the criteria of a filter is to construct a new one and delete the existing filter.  \n\nThe following classes implement the `abstract` &lt;xref:CoreWCF.Dispatcher.MessageFilter> class:  \n\n-   &lt;xref:CoreWCF.Dispatcher.XPathMessageFilter> uses an XPath 1.0 expression to specify the criteria for a match.  \n\n-   &lt;xref:CoreWCF.Dispatcher.MatchAllMessageFilter> matches all messages.  \n\n-   &lt;xref:CoreWCF.Dispatcher.MatchNoneMessageFilter> matches none of the messages.  \n\n-   &lt;xref:CoreWCF.Dispatcher.ActionMessageFilter> tests whether the action of a message is one of a specified set of actions.  \n\n-   &lt;xref:CoreWCF.Dispatcher.EndpointAddressMessageFilter> tests whether a message satisfies a specified endpoint address.  \n\n&lt;xref:CoreWCF.Channels.ChannelListenerBase%601> is an `abstract` base class that you can use for writing non-queuing listeners.  \n\n"
  syntax:
    content: 'public abstract class MessageFilter : Object'
    content.vb: >-
      Public MustInherit Class MessageFilter
          Inherits Object
  inheritance:
  - System.Object
  derivedClasses:
  - CoreWCF.Dispatcher.MatchAllMessageFilter
  - CoreWCF.Dispatcher.PrefixEndpointAddressMessageFilter
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: CoreWCF.Dispatcher.MessageFilter.#ctor
  commentId: M:CoreWCF.Dispatcher.MessageFilter.#ctor
  id: '#ctor'
  parent: CoreWCF.Dispatcher.MessageFilter
  langs:
  - csharp
  - vb
  name: MessageFilter()
  nameWithType: MessageFilter.MessageFilter()
  fullName: CoreWCF.Dispatcher.MessageFilter.MessageFilter()
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Dispatcher
  syntax:
    content: protected MessageFilter()
    content.vb: Protected Sub New
  overload: CoreWCF.Dispatcher.MessageFilter.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: CoreWCF.Dispatcher.MessageFilter.CreateFilterTable``1
  commentId: M:CoreWCF.Dispatcher.MessageFilter.CreateFilterTable``1
  id: CreateFilterTable``1
  parent: CoreWCF.Dispatcher.MessageFilter
  langs:
  - csharp
  - vb
  name: CreateFilterTable<FilterData>()
  nameWithType: MessageFilter.CreateFilterTable<FilterData>()
  fullName: CoreWCF.Dispatcher.MessageFilter.CreateFilterTable<FilterData>()
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Dispatcher
  syntax:
    content: protected virtual IMessageFilterTable<FilterData> CreateFilterTable<FilterData>()
    typeParameters:
    - id: FilterData
    return:
      type: CoreWCF.Dispatcher.IMessageFilterTable{{FilterData}}
    content.vb: Protected Overridable Function CreateFilterTable(Of FilterData) As IMessageFilterTable(Of FilterData)
  overload: CoreWCF.Dispatcher.MessageFilter.CreateFilterTable*
  nameWithType.vb: MessageFilter.CreateFilterTable(Of FilterData)()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: CoreWCF.Dispatcher.MessageFilter.CreateFilterTable(Of FilterData)()
  name.vb: CreateFilterTable(Of FilterData)()
- uid: CoreWCF.Dispatcher.MessageFilter.Match(CoreWCF.Channels.MessageBuffer)
  commentId: M:CoreWCF.Dispatcher.MessageFilter.Match(CoreWCF.Channels.MessageBuffer)
  id: Match(CoreWCF.Channels.MessageBuffer)
  parent: CoreWCF.Dispatcher.MessageFilter
  langs:
  - csharp
  - vb
  name: Match(MessageBuffer)
  nameWithType: MessageFilter.Match(MessageBuffer)
  fullName: CoreWCF.Dispatcher.MessageFilter.Match(CoreWCF.Channels.MessageBuffer)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Dispatcher
  summary: "\nTests whether the filter matches the given message.\n"
  syntax:
    content: public abstract bool Match(MessageBuffer buffer)
    parameters:
    - id: buffer
      type: CoreWCF.Channels.MessageBuffer
    return:
      type: System.Boolean
    content.vb: Public MustOverride Function Match(buffer As MessageBuffer) As Boolean
  overload: CoreWCF.Dispatcher.MessageFilter.Match*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: CoreWCF.Dispatcher.MessageFilter.Match(CoreWCF.Channels.Message)
  commentId: M:CoreWCF.Dispatcher.MessageFilter.Match(CoreWCF.Channels.Message)
  id: Match(CoreWCF.Channels.Message)
  parent: CoreWCF.Dispatcher.MessageFilter
  langs:
  - csharp
  - vb
  name: Match(Message)
  nameWithType: MessageFilter.Match(Message)
  fullName: CoreWCF.Dispatcher.MessageFilter.Match(CoreWCF.Channels.Message)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Dispatcher
  summary: "\nTests whether the filter matches the given message without examining its body.\nNote: since this method never probes the message body, it should NOT close the message\nIf the filter probes the message body, then the filter must THROW an Exception. The filter should not return false\nThis is deliberate - we don&apos;t want to produce false positives. \n"
  syntax:
    content: public abstract bool Match(Message message)
    parameters:
    - id: message
      type: CoreWCF.Channels.Message
    return:
      type: System.Boolean
    content.vb: Public MustOverride Function Match(message As Message) As Boolean
  overload: CoreWCF.Dispatcher.MessageFilter.Match*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: CoreWCF.Dispatcher
  commentId: N:CoreWCF.Dispatcher
  isExternal: true
  name: CoreWCF.Dispatcher
  nameWithType: CoreWCF.Dispatcher
  fullName: CoreWCF.Dispatcher
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CoreWCF.Dispatcher.MessageFilter.#ctor*
  commentId: Overload:CoreWCF.Dispatcher.MessageFilter.#ctor
  isExternal: true
  name: MessageFilter
  nameWithType: MessageFilter.MessageFilter
  fullName: CoreWCF.Dispatcher.MessageFilter.MessageFilter
- uid: CoreWCF.Dispatcher.MessageFilter.CreateFilterTable*
  commentId: Overload:CoreWCF.Dispatcher.MessageFilter.CreateFilterTable
  isExternal: true
  name: CreateFilterTable
  nameWithType: MessageFilter.CreateFilterTable
  fullName: CoreWCF.Dispatcher.MessageFilter.CreateFilterTable
- uid: CoreWCF.Dispatcher.IMessageFilterTable{{FilterData}}
  commentId: T:CoreWCF.Dispatcher.IMessageFilterTable{``0}
  parent: CoreWCF.Dispatcher
  definition: CoreWCF.Dispatcher.IMessageFilterTable`1
  name: IMessageFilterTable<FilterData>
  nameWithType: IMessageFilterTable<FilterData>
  fullName: CoreWCF.Dispatcher.IMessageFilterTable<FilterData>
  nameWithType.vb: IMessageFilterTable(Of FilterData)
  fullName.vb: CoreWCF.Dispatcher.IMessageFilterTable(Of FilterData)
  name.vb: IMessageFilterTable(Of FilterData)
  spec.csharp:
  - uid: CoreWCF.Dispatcher.IMessageFilterTable`1
    name: IMessageFilterTable
    nameWithType: IMessageFilterTable
    fullName: CoreWCF.Dispatcher.IMessageFilterTable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: FilterData
    nameWithType: FilterData
    fullName: FilterData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CoreWCF.Dispatcher.IMessageFilterTable`1
    name: IMessageFilterTable
    nameWithType: IMessageFilterTable
    fullName: CoreWCF.Dispatcher.IMessageFilterTable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: FilterData
    nameWithType: FilterData
    fullName: FilterData
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Dispatcher.IMessageFilterTable`1
  commentId: T:CoreWCF.Dispatcher.IMessageFilterTable`1
  isExternal: true
  name: IMessageFilterTable<TFilterData>
  nameWithType: IMessageFilterTable<TFilterData>
  fullName: CoreWCF.Dispatcher.IMessageFilterTable<TFilterData>
  nameWithType.vb: IMessageFilterTable(Of TFilterData)
  fullName.vb: CoreWCF.Dispatcher.IMessageFilterTable(Of TFilterData)
  name.vb: IMessageFilterTable(Of TFilterData)
  spec.csharp:
  - uid: CoreWCF.Dispatcher.IMessageFilterTable`1
    name: IMessageFilterTable
    nameWithType: IMessageFilterTable
    fullName: CoreWCF.Dispatcher.IMessageFilterTable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TFilterData
    nameWithType: TFilterData
    fullName: TFilterData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CoreWCF.Dispatcher.IMessageFilterTable`1
    name: IMessageFilterTable
    nameWithType: IMessageFilterTable
    fullName: CoreWCF.Dispatcher.IMessageFilterTable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFilterData
    nameWithType: TFilterData
    fullName: TFilterData
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Dispatcher.MessageFilter.Match*
  commentId: Overload:CoreWCF.Dispatcher.MessageFilter.Match
  isExternal: true
  name: Match
  nameWithType: MessageFilter.Match
  fullName: CoreWCF.Dispatcher.MessageFilter.Match
- uid: CoreWCF.Channels.MessageBuffer
  commentId: T:CoreWCF.Channels.MessageBuffer
  parent: CoreWCF.Channels
  isExternal: true
  name: MessageBuffer
  nameWithType: MessageBuffer
  fullName: CoreWCF.Channels.MessageBuffer
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CoreWCF.Channels
  commentId: N:CoreWCF.Channels
  isExternal: true
  name: CoreWCF.Channels
  nameWithType: CoreWCF.Channels
  fullName: CoreWCF.Channels
- uid: CoreWCF.Channels.Message
  commentId: T:CoreWCF.Channels.Message
  parent: CoreWCF.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: CoreWCF.Channels.Message
