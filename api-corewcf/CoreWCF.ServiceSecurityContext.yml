### YamlMime:ManagedReference
items:
- uid: CoreWCF.ServiceSecurityContext
  commentId: T:CoreWCF.ServiceSecurityContext
  id: ServiceSecurityContext
  parent: CoreWCF
  children:
  - CoreWCF.ServiceSecurityContext.#ctor(CoreWCF.IdentityModel.Policy.AuthorizationContext)
  - CoreWCF.ServiceSecurityContext.#ctor(CoreWCF.IdentityModel.Policy.AuthorizationContext,System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy})
  - CoreWCF.ServiceSecurityContext.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy})
  - CoreWCF.ServiceSecurityContext.Anonymous
  - CoreWCF.ServiceSecurityContext.AuthorizationContext
  - CoreWCF.ServiceSecurityContext.Current
  - CoreWCF.ServiceSecurityContext.GetIdentities
  - CoreWCF.ServiceSecurityContext.IdentityClaim
  - CoreWCF.ServiceSecurityContext.IsAnonymous
  - CoreWCF.ServiceSecurityContext.PrimaryIdentity
  - CoreWCF.ServiceSecurityContext.WindowsIdentity
  langs:
  - csharp
  - vb
  name: ServiceSecurityContext
  nameWithType: ServiceSecurityContext
  fullName: CoreWCF.ServiceSecurityContext
  type: Class
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  summary: Represents the security context of a remote party. On the client, represents the service identity and, on the service, represents the client identity.
  remarks: "The data is part of the &lt;xref:CoreWCF.Security.SecurityMessageProperty> for a message.  \n\nUse this class to obtain information about a remote *security context* at runtime. A security context is created when a client is successfully authenticated and authorized to access a method. When a message is successfully authenticated and authorized, the security information from the client and for the current service instance can be obtained from an instance of this class.  \n\nYou can retrieve an instance of the &lt;xref:CoreWCF.ServiceSecurityContext> from the &lt;xref:CoreWCF.OperationContext.Current%2A> property of the &lt;xref:CoreWCF.OperationContext> class, or use it from within a service operation method, as shown in the following example.  \n\n## Parsing a ClaimSet  \nA common use of the class is to retrieve the current set of claims for the purpose of identifying or authorizing a client when accessing a method. The &lt;xref:System.IdentityModel.Claims.ClaimSet> class contains a collection of &lt;xref:System.IdentityModel.Claims.Claim> objects, and each can be parsed to determine whether a specific claim is present. If the specified claim is provided, authorization can be granted. This functionality is provided by overriding the &lt;xref:CoreWCF.ServiceAuthorizationManager.CheckAccessCore%2A> method of the &lt;xref:CoreWCF.ServiceAuthorizationManager> class.  For a complete example, see the [Authorization Policy](/dotnet/framework/wcf/samples/authorization-policy).  \n\n## Cookie Mode and IsAuthenticated  \nNote that under some circumstances, the &lt;xref:System.Security.Principal.IIdentity.IsAuthenticated%2A> property of the &lt;xref:System.Security.Principal.IIdentity> interface returns `true` even if the remote client is authenticated as an anonymous user. (The &lt;xref:CoreWCF.ServiceSecurityContext.PrimaryIdentity%2A> property returns an implementation of the &lt;xref:System.Security.Principal.IIdentity> interface.) The following circumstances must be true for this to occur:  \n\n-   The service uses Windows authentication.  \n\n-   The service allows anonymous logons.  \n\n-   The binding is a [&amp;lt;customBinding&amp;gt;](/dotnet/framework/configure-apps/file-schema/wcf/custombinding).  \n\n-   The custom binding includes a `&lt;security>` element.  \n\n-   The `&lt;security>` element includes a [&amp;lt;secureConversationBootstrap&amp;gt;](/dotnet/framework/configure-apps/file-schema/wcf/secureconversationbootstrap) with the `requireSecurityContextCancellation` attribute set to `false`.  \n\n\n\n"
  syntax:
    content: 'public class ServiceSecurityContext : Object'
    content.vb: >-
      Public Class ServiceSecurityContext
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CoreWCF.ServiceSecurityContext.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy})
  commentId: M:CoreWCF.ServiceSecurityContext.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy})
  id: '#ctor(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy})'
  parent: CoreWCF.ServiceSecurityContext
  langs:
  - csharp
  - vb
  name: ServiceSecurityContext(ReadOnlyCollection<IAuthorizationPolicy>)
  nameWithType: ServiceSecurityContext.ServiceSecurityContext(ReadOnlyCollection<IAuthorizationPolicy>)
  fullName: CoreWCF.ServiceSecurityContext.ServiceSecurityContext(System.Collections.ObjectModel.ReadOnlyCollection<CoreWCF.IdentityModel.Policy.IAuthorizationPolicy>)
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: public ServiceSecurityContext(ReadOnlyCollection<IAuthorizationPolicy> authorizationPolicies)
    parameters:
    - id: authorizationPolicies
      type: System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy}
    content.vb: Public Sub New(authorizationPolicies As ReadOnlyCollection(Of IAuthorizationPolicy))
  overload: CoreWCF.ServiceSecurityContext.#ctor*
  nameWithType.vb: ServiceSecurityContext.ServiceSecurityContext(ReadOnlyCollection(Of IAuthorizationPolicy))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.ServiceSecurityContext.ServiceSecurityContext(System.Collections.ObjectModel.ReadOnlyCollection(Of CoreWCF.IdentityModel.Policy.IAuthorizationPolicy))
  name.vb: ServiceSecurityContext(ReadOnlyCollection(Of IAuthorizationPolicy))
- uid: CoreWCF.ServiceSecurityContext.#ctor(CoreWCF.IdentityModel.Policy.AuthorizationContext)
  commentId: M:CoreWCF.ServiceSecurityContext.#ctor(CoreWCF.IdentityModel.Policy.AuthorizationContext)
  id: '#ctor(CoreWCF.IdentityModel.Policy.AuthorizationContext)'
  parent: CoreWCF.ServiceSecurityContext
  langs:
  - csharp
  - vb
  name: ServiceSecurityContext(AuthorizationContext)
  nameWithType: ServiceSecurityContext.ServiceSecurityContext(AuthorizationContext)
  fullName: CoreWCF.ServiceSecurityContext.ServiceSecurityContext(CoreWCF.IdentityModel.Policy.AuthorizationContext)
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: public ServiceSecurityContext(AuthorizationContext authorizationContext)
    parameters:
    - id: authorizationContext
      type: CoreWCF.IdentityModel.Policy.AuthorizationContext
    content.vb: Public Sub New(authorizationContext As AuthorizationContext)
  overload: CoreWCF.ServiceSecurityContext.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.ServiceSecurityContext.#ctor(CoreWCF.IdentityModel.Policy.AuthorizationContext,System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy})
  commentId: M:CoreWCF.ServiceSecurityContext.#ctor(CoreWCF.IdentityModel.Policy.AuthorizationContext,System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy})
  id: '#ctor(CoreWCF.IdentityModel.Policy.AuthorizationContext,System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy})'
  parent: CoreWCF.ServiceSecurityContext
  langs:
  - csharp
  - vb
  name: ServiceSecurityContext(AuthorizationContext, ReadOnlyCollection<IAuthorizationPolicy>)
  nameWithType: ServiceSecurityContext.ServiceSecurityContext(AuthorizationContext, ReadOnlyCollection<IAuthorizationPolicy>)
  fullName: CoreWCF.ServiceSecurityContext.ServiceSecurityContext(CoreWCF.IdentityModel.Policy.AuthorizationContext, System.Collections.ObjectModel.ReadOnlyCollection<CoreWCF.IdentityModel.Policy.IAuthorizationPolicy>)
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: public ServiceSecurityContext(AuthorizationContext authorizationContext, ReadOnlyCollection<IAuthorizationPolicy> authorizationPolicies)
    parameters:
    - id: authorizationContext
      type: CoreWCF.IdentityModel.Policy.AuthorizationContext
    - id: authorizationPolicies
      type: System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy}
    content.vb: Public Sub New(authorizationContext As AuthorizationContext, authorizationPolicies As ReadOnlyCollection(Of IAuthorizationPolicy))
  overload: CoreWCF.ServiceSecurityContext.#ctor*
  nameWithType.vb: ServiceSecurityContext.ServiceSecurityContext(AuthorizationContext, ReadOnlyCollection(Of IAuthorizationPolicy))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.ServiceSecurityContext.ServiceSecurityContext(CoreWCF.IdentityModel.Policy.AuthorizationContext, System.Collections.ObjectModel.ReadOnlyCollection(Of CoreWCF.IdentityModel.Policy.IAuthorizationPolicy))
  name.vb: ServiceSecurityContext(AuthorizationContext, ReadOnlyCollection(Of IAuthorizationPolicy))
- uid: CoreWCF.ServiceSecurityContext.GetIdentities
  commentId: M:CoreWCF.ServiceSecurityContext.GetIdentities
  id: GetIdentities
  parent: CoreWCF.ServiceSecurityContext
  langs:
  - csharp
  - vb
  name: GetIdentities()
  nameWithType: ServiceSecurityContext.GetIdentities()
  fullName: CoreWCF.ServiceSecurityContext.GetIdentities()
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: public IList<IIdentity> GetIdentities()
    return:
      type: System.Collections.Generic.IList{System.Security.Principal.IIdentity}
    content.vb: Public Function GetIdentities As IList(Of IIdentity)
  overload: CoreWCF.ServiceSecurityContext.GetIdentities*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.ServiceSecurityContext.Anonymous
  commentId: P:CoreWCF.ServiceSecurityContext.Anonymous
  id: Anonymous
  parent: CoreWCF.ServiceSecurityContext
  langs:
  - csharp
  - vb
  name: Anonymous
  nameWithType: ServiceSecurityContext.Anonymous
  fullName: CoreWCF.ServiceSecurityContext.Anonymous
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: public static ServiceSecurityContext Anonymous { get; }
    parameters: []
    return:
      type: CoreWCF.ServiceSecurityContext
    content.vb: Public Shared ReadOnly Property Anonymous As ServiceSecurityContext
  overload: CoreWCF.ServiceSecurityContext.Anonymous*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: CoreWCF.ServiceSecurityContext.Current
  commentId: P:CoreWCF.ServiceSecurityContext.Current
  id: Current
  parent: CoreWCF.ServiceSecurityContext
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: ServiceSecurityContext.Current
  fullName: CoreWCF.ServiceSecurityContext.Current
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: public static ServiceSecurityContext Current { get; }
    parameters: []
    return:
      type: CoreWCF.ServiceSecurityContext
    content.vb: Public Shared ReadOnly Property Current As ServiceSecurityContext
  overload: CoreWCF.ServiceSecurityContext.Current*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: CoreWCF.ServiceSecurityContext.IsAnonymous
  commentId: P:CoreWCF.ServiceSecurityContext.IsAnonymous
  id: IsAnonymous
  parent: CoreWCF.ServiceSecurityContext
  langs:
  - csharp
  - vb
  name: IsAnonymous
  nameWithType: ServiceSecurityContext.IsAnonymous
  fullName: CoreWCF.ServiceSecurityContext.IsAnonymous
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: public bool IsAnonymous { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsAnonymous As Boolean
  overload: CoreWCF.ServiceSecurityContext.IsAnonymous*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CoreWCF.ServiceSecurityContext.IdentityClaim
  commentId: P:CoreWCF.ServiceSecurityContext.IdentityClaim
  id: IdentityClaim
  parent: CoreWCF.ServiceSecurityContext
  langs:
  - csharp
  - vb
  name: IdentityClaim
  nameWithType: ServiceSecurityContext.IdentityClaim
  fullName: CoreWCF.ServiceSecurityContext.IdentityClaim
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: public Claim IdentityClaim { get; }
    parameters: []
    return:
      type: CoreWCF.IdentityModel.Claims.Claim
    content.vb: Public ReadOnly Property IdentityClaim As Claim
  overload: CoreWCF.ServiceSecurityContext.IdentityClaim*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CoreWCF.ServiceSecurityContext.PrimaryIdentity
  commentId: P:CoreWCF.ServiceSecurityContext.PrimaryIdentity
  id: PrimaryIdentity
  parent: CoreWCF.ServiceSecurityContext
  langs:
  - csharp
  - vb
  name: PrimaryIdentity
  nameWithType: ServiceSecurityContext.PrimaryIdentity
  fullName: CoreWCF.ServiceSecurityContext.PrimaryIdentity
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: public IIdentity PrimaryIdentity { get; }
    parameters: []
    return:
      type: System.Security.Principal.IIdentity
    content.vb: Public ReadOnly Property PrimaryIdentity As IIdentity
  overload: CoreWCF.ServiceSecurityContext.PrimaryIdentity*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CoreWCF.ServiceSecurityContext.WindowsIdentity
  commentId: P:CoreWCF.ServiceSecurityContext.WindowsIdentity
  id: WindowsIdentity
  parent: CoreWCF.ServiceSecurityContext
  langs:
  - csharp
  - vb
  name: WindowsIdentity
  nameWithType: ServiceSecurityContext.WindowsIdentity
  fullName: CoreWCF.ServiceSecurityContext.WindowsIdentity
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: public WindowsIdentity WindowsIdentity { get; }
    parameters: []
    return:
      type: System.Security.Principal.WindowsIdentity
    content.vb: Public ReadOnly Property WindowsIdentity As WindowsIdentity
  overload: CoreWCF.ServiceSecurityContext.WindowsIdentity*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CoreWCF.ServiceSecurityContext.AuthorizationContext
  commentId: P:CoreWCF.ServiceSecurityContext.AuthorizationContext
  id: AuthorizationContext
  parent: CoreWCF.ServiceSecurityContext
  langs:
  - csharp
  - vb
  name: AuthorizationContext
  nameWithType: ServiceSecurityContext.AuthorizationContext
  fullName: CoreWCF.ServiceSecurityContext.AuthorizationContext
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF
  syntax:
    content: public AuthorizationContext AuthorizationContext { get; }
    parameters: []
    return:
      type: CoreWCF.IdentityModel.Policy.AuthorizationContext
    content.vb: Public ReadOnly Property AuthorizationContext As AuthorizationContext
  overload: CoreWCF.ServiceSecurityContext.AuthorizationContext*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: CoreWCF
  commentId: N:CoreWCF
  isExternal: true
  name: CoreWCF
  nameWithType: CoreWCF
  fullName: CoreWCF
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CoreWCF.ServiceSecurityContext.#ctor*
  commentId: Overload:CoreWCF.ServiceSecurityContext.#ctor
  isExternal: true
  name: ServiceSecurityContext
  nameWithType: ServiceSecurityContext.ServiceSecurityContext
  fullName: CoreWCF.ServiceSecurityContext.ServiceSecurityContext
- uid: System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy}
  commentId: '!:System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Policy.IAuthorizationPolicy}'
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<IAuthorizationPolicy>
  nameWithType: ReadOnlyCollection<IAuthorizationPolicy>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<CoreWCF.IdentityModel.Policy.IAuthorizationPolicy>
  nameWithType.vb: ReadOnlyCollection(Of IAuthorizationPolicy)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of CoreWCF.IdentityModel.Policy.IAuthorizationPolicy)
  name.vb: ReadOnlyCollection(Of IAuthorizationPolicy)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreWCF.IdentityModel.Policy.IAuthorizationPolicy
    name: IAuthorizationPolicy
    nameWithType: IAuthorizationPolicy
    fullName: CoreWCF.IdentityModel.Policy.IAuthorizationPolicy
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreWCF.IdentityModel.Policy.IAuthorizationPolicy
    name: IAuthorizationPolicy
    nameWithType: IAuthorizationPolicy
    fullName: CoreWCF.IdentityModel.Policy.IAuthorizationPolicy
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<>
  nameWithType: ReadOnlyCollection<>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<>
  nameWithType.vb: ReadOnlyCollection(Of )
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of )
  name.vb: ReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Policy.AuthorizationContext
  commentId: T:CoreWCF.IdentityModel.Policy.AuthorizationContext
  parent: CoreWCF.IdentityModel.Policy
  isExternal: true
  name: AuthorizationContext
  nameWithType: AuthorizationContext
  fullName: CoreWCF.IdentityModel.Policy.AuthorizationContext
- uid: CoreWCF.IdentityModel.Policy
  commentId: N:CoreWCF.IdentityModel.Policy
  isExternal: true
  name: CoreWCF.IdentityModel.Policy
  nameWithType: CoreWCF.IdentityModel.Policy
  fullName: CoreWCF.IdentityModel.Policy
- uid: CoreWCF.ServiceSecurityContext.GetIdentities*
  commentId: Overload:CoreWCF.ServiceSecurityContext.GetIdentities
  isExternal: true
  name: GetIdentities
  nameWithType: ServiceSecurityContext.GetIdentities
  fullName: CoreWCF.ServiceSecurityContext.GetIdentities
- uid: System.Collections.Generic.IList{System.Security.Principal.IIdentity}
  commentId: '!:System.Collections.Generic.IList{System.Security.Principal.IIdentity}'
  definition: System.Collections.Generic.IList`1
  name: IList<IIdentity>
  nameWithType: IList<IIdentity>
  fullName: System.Collections.Generic.IList<System.Security.Principal.IIdentity>
  nameWithType.vb: IList(Of IIdentity)
  fullName.vb: System.Collections.Generic.IList(Of System.Security.Principal.IIdentity)
  name.vb: IList(Of IIdentity)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Principal.IIdentity
    name: IIdentity
    nameWithType: IIdentity
    fullName: System.Security.Principal.IIdentity
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Principal.IIdentity
    name: IIdentity
    nameWithType: IIdentity
    fullName: System.Security.Principal.IIdentity
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  isExternal: true
  name: IList<>
  nameWithType: IList<>
  fullName: System.Collections.Generic.IList<>
  nameWithType.vb: IList(Of )
  fullName.vb: System.Collections.Generic.IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.ServiceSecurityContext.Anonymous*
  commentId: Overload:CoreWCF.ServiceSecurityContext.Anonymous
  isExternal: true
  name: Anonymous
  nameWithType: ServiceSecurityContext.Anonymous
  fullName: CoreWCF.ServiceSecurityContext.Anonymous
- uid: CoreWCF.ServiceSecurityContext
  commentId: T:CoreWCF.ServiceSecurityContext
  parent: CoreWCF
  isExternal: true
  name: ServiceSecurityContext
  nameWithType: ServiceSecurityContext
  fullName: CoreWCF.ServiceSecurityContext
- uid: CoreWCF.ServiceSecurityContext.Current*
  commentId: Overload:CoreWCF.ServiceSecurityContext.Current
  isExternal: true
  name: Current
  nameWithType: ServiceSecurityContext.Current
  fullName: CoreWCF.ServiceSecurityContext.Current
- uid: CoreWCF.ServiceSecurityContext.IsAnonymous*
  commentId: Overload:CoreWCF.ServiceSecurityContext.IsAnonymous
  isExternal: true
  name: IsAnonymous
  nameWithType: ServiceSecurityContext.IsAnonymous
  fullName: CoreWCF.ServiceSecurityContext.IsAnonymous
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CoreWCF.ServiceSecurityContext.IdentityClaim*
  commentId: Overload:CoreWCF.ServiceSecurityContext.IdentityClaim
  isExternal: true
  name: IdentityClaim
  nameWithType: ServiceSecurityContext.IdentityClaim
  fullName: CoreWCF.ServiceSecurityContext.IdentityClaim
- uid: CoreWCF.IdentityModel.Claims.Claim
  commentId: T:CoreWCF.IdentityModel.Claims.Claim
  parent: CoreWCF.IdentityModel.Claims
  isExternal: true
  name: Claim
  nameWithType: Claim
  fullName: CoreWCF.IdentityModel.Claims.Claim
- uid: CoreWCF.IdentityModel.Claims
  commentId: N:CoreWCF.IdentityModel.Claims
  isExternal: true
  name: CoreWCF.IdentityModel.Claims
  nameWithType: CoreWCF.IdentityModel.Claims
  fullName: CoreWCF.IdentityModel.Claims
- uid: CoreWCF.ServiceSecurityContext.PrimaryIdentity*
  commentId: Overload:CoreWCF.ServiceSecurityContext.PrimaryIdentity
  isExternal: true
  name: PrimaryIdentity
  nameWithType: ServiceSecurityContext.PrimaryIdentity
  fullName: CoreWCF.ServiceSecurityContext.PrimaryIdentity
- uid: System.Security.Principal.IIdentity
  isExternal: true
  name: IIdentity
  nameWithType: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: CoreWCF.ServiceSecurityContext.WindowsIdentity*
  commentId: Overload:CoreWCF.ServiceSecurityContext.WindowsIdentity
  isExternal: true
  name: WindowsIdentity
  nameWithType: ServiceSecurityContext.WindowsIdentity
  fullName: CoreWCF.ServiceSecurityContext.WindowsIdentity
- uid: System.Security.Principal.WindowsIdentity
  isExternal: true
  name: WindowsIdentity
  nameWithType: WindowsIdentity
  fullName: System.Security.Principal.WindowsIdentity
- uid: CoreWCF.ServiceSecurityContext.AuthorizationContext*
  commentId: Overload:CoreWCF.ServiceSecurityContext.AuthorizationContext
  isExternal: true
  name: AuthorizationContext
  nameWithType: ServiceSecurityContext.AuthorizationContext
  fullName: CoreWCF.ServiceSecurityContext.AuthorizationContext
