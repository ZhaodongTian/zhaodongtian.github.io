### YamlMime:ManagedReference
items:
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  id: SecurityTokenHandlerCollection
  parent: CoreWCF.IdentityModel.Tokens
  children:
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor(CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor(System.Collections.Generic.IEnumerable{CoreWCF.IdentityModel.Tokens.SecurityTokenHandler})
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor(System.Collections.Generic.IEnumerable{CoreWCF.IdentityModel.Tokens.SecurityTokenHandler},CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.AddOrReplace(CoreWCF.IdentityModel.Tokens.SecurityTokenHandler)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadKeyIdentifierClause(System.Xml.XmlReader)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadKeyIdentifierClauseCore(System.Xml.XmlReader)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadToken(System.String)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadToken(System.Xml.XmlReader)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanWriteToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ClearItems
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Configuration
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.InsertItem(System.Int32,CoreWCF.IdentityModel.Tokens.SecurityTokenHandler)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item(CoreWCF.IdentityModel.Tokens.SecurityToken)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item(System.String)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item(System.Type)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadKeyIdentifierClause(System.Xml.XmlReader)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadKeyIdentifierClauseCore(System.Xml.XmlReader)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadToken(System.String)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadToken(System.Xml.XmlReader)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.RemoveItem(System.Int32)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.SetItem(System.Int32,CoreWCF.IdentityModel.Tokens.SecurityTokenHandler)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.TokenTypeIdentifiers
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.TokenTypes
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteKeyIdentifierClause(System.Xml.XmlWriter,CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteKeyIdentifierClauseCore(System.Xml.XmlWriter,CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  - CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteToken(System.Xml.XmlWriter,CoreWCF.IdentityModel.Tokens.SecurityToken)
  langs:
  - csharp
  - vb
  name: SecurityTokenHandlerCollection
  nameWithType: SecurityTokenHandlerCollection
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  type: Class
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nDefines a collection of SecurityTokenHandlers.\n"
  syntax:
    content: 'public class SecurityTokenHandlerCollection : Collection<SecurityTokenHandler>'
    content.vb: >-
      Public Class SecurityTokenHandlerCollection
          Inherits Collection(Of SecurityTokenHandler)
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor
  id: '#ctor'
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: SecurityTokenHandlerCollection()
  nameWithType: SecurityTokenHandlerCollection.SecurityTokenHandlerCollection()
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.SecurityTokenHandlerCollection()
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nCreates an instance of <xref href=\"CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection\" data-throw-if-not-resolved=\"false\"></xref>.\nCreates an empty set.\n"
  syntax:
    content: public SecurityTokenHandlerCollection()
    content.vb: Public Sub New
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor(CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor(CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration)
  id: '#ctor(CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration)'
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: SecurityTokenHandlerCollection(SecurityTokenHandlerConfiguration)
  nameWithType: SecurityTokenHandlerCollection.SecurityTokenHandlerCollection(SecurityTokenHandlerConfiguration)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.SecurityTokenHandlerCollection(CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration)
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nCreates an instance of <xref href=\"CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection\" data-throw-if-not-resolved=\"false\"></xref>.\nCreates an empty set.\n"
  syntax:
    content: public SecurityTokenHandlerCollection(SecurityTokenHandlerConfiguration configuration)
    parameters:
    - id: configuration
      type: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration
      description: The configuration to associate with the collection.
    content.vb: Public Sub New(configuration As SecurityTokenHandlerConfiguration)
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor(System.Collections.Generic.IEnumerable{CoreWCF.IdentityModel.Tokens.SecurityTokenHandler})
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor(System.Collections.Generic.IEnumerable{CoreWCF.IdentityModel.Tokens.SecurityTokenHandler})
  id: '#ctor(System.Collections.Generic.IEnumerable{CoreWCF.IdentityModel.Tokens.SecurityTokenHandler})'
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: SecurityTokenHandlerCollection(IEnumerable<SecurityTokenHandler>)
  nameWithType: SecurityTokenHandlerCollection.SecurityTokenHandlerCollection(IEnumerable<SecurityTokenHandler>)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.SecurityTokenHandlerCollection(System.Collections.Generic.IEnumerable<CoreWCF.IdentityModel.Tokens.SecurityTokenHandler>)
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nCreates an instance of <xref href=\"CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection\" data-throw-if-not-resolved=\"false\"></xref>"
  remarks: "\nDo not use this constructor to attempt to clone an instance of a SecurityTokenHandlerCollection,\nuse the Clone method instead.\n"
  syntax:
    content: public SecurityTokenHandlerCollection(IEnumerable<SecurityTokenHandler> handlers)
    parameters:
    - id: handlers
      type: System.Collections.Generic.IEnumerable{CoreWCF.IdentityModel.Tokens.SecurityTokenHandler}
      description: List of SecurityTokenHandlers to initialize from.
    content.vb: Public Sub New(handlers As IEnumerable(Of SecurityTokenHandler))
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor*
  nameWithType.vb: SecurityTokenHandlerCollection.SecurityTokenHandlerCollection(IEnumerable(Of SecurityTokenHandler))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.SecurityTokenHandlerCollection(System.Collections.Generic.IEnumerable(Of CoreWCF.IdentityModel.Tokens.SecurityTokenHandler))
  name.vb: SecurityTokenHandlerCollection(IEnumerable(Of SecurityTokenHandler))
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor(System.Collections.Generic.IEnumerable{CoreWCF.IdentityModel.Tokens.SecurityTokenHandler},CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor(System.Collections.Generic.IEnumerable{CoreWCF.IdentityModel.Tokens.SecurityTokenHandler},CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration)
  id: '#ctor(System.Collections.Generic.IEnumerable{CoreWCF.IdentityModel.Tokens.SecurityTokenHandler},CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration)'
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: SecurityTokenHandlerCollection(IEnumerable<SecurityTokenHandler>, SecurityTokenHandlerConfiguration)
  nameWithType: SecurityTokenHandlerCollection.SecurityTokenHandlerCollection(IEnumerable<SecurityTokenHandler>, SecurityTokenHandlerConfiguration)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.SecurityTokenHandlerCollection(System.Collections.Generic.IEnumerable<CoreWCF.IdentityModel.Tokens.SecurityTokenHandler>, CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration)
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nCreates an instance of <xref href=\"CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection\" data-throw-if-not-resolved=\"false\"></xref>"
  remarks: "\nDo not use this constructor to attempt to clone an instance of a SecurityTokenHandlerCollection,\nuse the Clone method instead.\n"
  syntax:
    content: public SecurityTokenHandlerCollection(IEnumerable<SecurityTokenHandler> handlers, SecurityTokenHandlerConfiguration configuration)
    parameters:
    - id: handlers
      type: System.Collections.Generic.IEnumerable{CoreWCF.IdentityModel.Tokens.SecurityTokenHandler}
      description: List of SecurityTokenHandlers to initialize from.
    - id: configuration
      type: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration
      description: The <xref href="CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration" data-throw-if-not-resolved="false"></xref> in effect.
    content.vb: Public Sub New(handlers As IEnumerable(Of SecurityTokenHandler), configuration As SecurityTokenHandlerConfiguration)
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor*
  nameWithType.vb: SecurityTokenHandlerCollection.SecurityTokenHandlerCollection(IEnumerable(Of SecurityTokenHandler), SecurityTokenHandlerConfiguration)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.SecurityTokenHandlerCollection(System.Collections.Generic.IEnumerable(Of CoreWCF.IdentityModel.Tokens.SecurityTokenHandler), CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration)
  name.vb: SecurityTokenHandlerCollection(IEnumerable(Of SecurityTokenHandler), SecurityTokenHandlerConfiguration)
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.AddOrReplace(CoreWCF.IdentityModel.Tokens.SecurityTokenHandler)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.AddOrReplace(CoreWCF.IdentityModel.Tokens.SecurityTokenHandler)
  id: AddOrReplace(CoreWCF.IdentityModel.Tokens.SecurityTokenHandler)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: AddOrReplace(SecurityTokenHandler)
  nameWithType: SecurityTokenHandlerCollection.AddOrReplace(SecurityTokenHandler)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.AddOrReplace(CoreWCF.IdentityModel.Tokens.SecurityTokenHandler)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nAdds a new handler or replace the existing handler with the same token type identifier \nwith with the new handler.\n"
  syntax:
    content: public void AddOrReplace(SecurityTokenHandler handler)
    parameters:
    - id: handler
      type: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
      description: The SecurityTokenHandler to add or replace
    content.vb: Public Sub AddOrReplace(handler As SecurityTokenHandler)
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.AddOrReplace*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: When the input parameter is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadToken(System.Xml.XmlReader)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadToken(System.Xml.XmlReader)
  id: CanReadToken(System.Xml.XmlReader)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: CanReadToken(XmlReader)
  nameWithType: SecurityTokenHandlerCollection.CanReadToken(XmlReader)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadToken(System.Xml.XmlReader)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public bool CanReadToken(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
    return:
      type: System.Boolean
    content.vb: Public Function CanReadToken(reader As XmlReader) As Boolean
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadToken*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadToken(System.String)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadToken(System.String)
  id: CanReadToken(System.String)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: CanReadToken(String)
  nameWithType: SecurityTokenHandlerCollection.CanReadToken(String)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadToken(System.String)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nChecks if a token can be read using the SecurityTokenHandlers.\n"
  syntax:
    content: public bool CanReadToken(string tokenString)
    parameters:
    - id: tokenString
      type: System.String
      description: The token string thats needs to be read.
    return:
      type: System.Boolean
      description: True if the token can be read, false otherwise
    content.vb: Public Function CanReadToken(tokenString As String) As Boolean
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadToken*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The input argument &apos;tokenString&apos; is null or empty.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanWriteToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanWriteToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  id: CanWriteToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: CanWriteToken(SecurityToken)
  nameWithType: SecurityTokenHandlerCollection.CanWriteToken(SecurityToken)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanWriteToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public bool CanWriteToken(SecurityToken token)
    parameters:
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    return:
      type: System.Boolean
    content.vb: Public Function CanWriteToken(token As SecurityToken) As Boolean
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanWriteToken*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  id: ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: ValidateToken(SecurityToken)
  nameWithType: SecurityTokenHandlerCollection.ValidateToken(SecurityToken)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ValidateToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public ReadOnlyCollection<ClaimsIdentity> ValidateToken(SecurityToken token)
    parameters:
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}
    content.vb: Public Function ValidateToken(token As SecurityToken) As ReadOnlyCollection(Of ClaimsIdentity)
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ValidateToken*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadToken(System.Xml.XmlReader)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadToken(System.Xml.XmlReader)
  id: ReadToken(System.Xml.XmlReader)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: ReadToken(XmlReader)
  nameWithType: SecurityTokenHandlerCollection.ReadToken(XmlReader)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadToken(System.Xml.XmlReader)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public SecurityToken ReadToken(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
    return:
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    content.vb: Public Function ReadToken(reader As XmlReader) As SecurityToken
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadToken*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadToken(System.String)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadToken(System.String)
  id: ReadToken(System.String)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: ReadToken(String)
  nameWithType: SecurityTokenHandlerCollection.ReadToken(String)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadToken(System.String)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nReads a token using the TokenHandlers.\n"
  syntax:
    content: public SecurityToken ReadToken(string tokenString)
    parameters:
    - id: tokenString
      type: System.String
      description: The token string to be deserialized.
    return:
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
      description: Instance of <xref href="CoreWCF.IdentityModel.Tokens.SecurityToken" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Function ReadToken(tokenString As String) As SecurityToken
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadToken*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The input argument &apos;tokenString&apos; is null or empty.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteToken(System.Xml.XmlWriter,CoreWCF.IdentityModel.Tokens.SecurityToken)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteToken(System.Xml.XmlWriter,CoreWCF.IdentityModel.Tokens.SecurityToken)
  id: WriteToken(System.Xml.XmlWriter,CoreWCF.IdentityModel.Tokens.SecurityToken)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: WriteToken(XmlWriter, SecurityToken)
  nameWithType: SecurityTokenHandlerCollection.WriteToken(XmlWriter, SecurityToken)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteToken(System.Xml.XmlWriter, CoreWCF.IdentityModel.Tokens.SecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public void WriteToken(XmlWriter writer, SecurityToken token)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    content.vb: Public Sub WriteToken(writer As XmlWriter, token As SecurityToken)
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteToken*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  id: WriteToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: WriteToken(SecurityToken)
  nameWithType: SecurityTokenHandlerCollection.WriteToken(SecurityToken)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteToken(CoreWCF.IdentityModel.Tokens.SecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public string WriteToken(SecurityToken token)
    parameters:
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    return:
      type: System.String
    content.vb: Public Function WriteToken(token As SecurityToken) As String
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteToken*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ClearItems
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ClearItems
  id: ClearItems
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: ClearItems()
  nameWithType: SecurityTokenHandlerCollection.ClearItems()
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ClearItems()
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nOverride. (Inherited from Collection&lt;T>&quot;/>\n"
  syntax:
    content: protected override void ClearItems()
    content.vb: Protected Overrides Sub ClearItems
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ClearItems*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.InsertItem(System.Int32,CoreWCF.IdentityModel.Tokens.SecurityTokenHandler)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.InsertItem(System.Int32,CoreWCF.IdentityModel.Tokens.SecurityTokenHandler)
  id: InsertItem(System.Int32,CoreWCF.IdentityModel.Tokens.SecurityTokenHandler)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: InsertItem(Int32, SecurityTokenHandler)
  nameWithType: SecurityTokenHandlerCollection.InsertItem(Int32, SecurityTokenHandler)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.InsertItem(System.Int32, CoreWCF.IdentityModel.Tokens.SecurityTokenHandler)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nOverride. (Inherited from Collection&lt;T>&quot;/>\n"
  syntax:
    content: protected override void InsertItem(int index, SecurityTokenHandler item)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which item should be inserted.
    - id: item
      type: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
      description: The object to insert. The value can be null for reference types.
    content.vb: Protected Overrides Sub InsertItem(index As Integer, item As SecurityTokenHandler)
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.InsertItem*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.RemoveItem(System.Int32)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.RemoveItem(System.Int32)
  id: RemoveItem(System.Int32)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: RemoveItem(Int32)
  nameWithType: SecurityTokenHandlerCollection.RemoveItem(Int32)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.RemoveItem(System.Int32)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nOverride. (Inherited from Collection&lt;T>&quot;/>\n"
  syntax:
    content: protected override void RemoveItem(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to remove.
    content.vb: Protected Overrides Sub RemoveItem(index As Integer)
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.RemoveItem*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.SetItem(System.Int32,CoreWCF.IdentityModel.Tokens.SecurityTokenHandler)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.SetItem(System.Int32,CoreWCF.IdentityModel.Tokens.SecurityTokenHandler)
  id: SetItem(System.Int32,CoreWCF.IdentityModel.Tokens.SecurityTokenHandler)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: SetItem(Int32, SecurityTokenHandler)
  nameWithType: SecurityTokenHandlerCollection.SetItem(Int32, SecurityTokenHandler)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.SetItem(System.Int32, CoreWCF.IdentityModel.Tokens.SecurityTokenHandler)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nOverride. (Inherited from Collection&lt;T>&quot;/>\n"
  syntax:
    content: protected override void SetItem(int index, SecurityTokenHandler item)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to replace.
    - id: item
      type: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
      description: The new value for the element at the specified index. The value can be null for reference types.
    content.vb: Protected Overrides Sub SetItem(index As Integer, item As SecurityTokenHandler)
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.SetItem*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadKeyIdentifierClause(System.Xml.XmlReader)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadKeyIdentifierClause(System.Xml.XmlReader)
  id: CanReadKeyIdentifierClause(System.Xml.XmlReader)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: CanReadKeyIdentifierClause(XmlReader)
  nameWithType: SecurityTokenHandlerCollection.CanReadKeyIdentifierClause(XmlReader)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadKeyIdentifierClause(System.Xml.XmlReader)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public bool CanReadKeyIdentifierClause(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
    return:
      type: System.Boolean
    content.vb: Public Function CanReadKeyIdentifierClause(reader As XmlReader) As Boolean
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadKeyIdentifierClause*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadKeyIdentifierClauseCore(System.Xml.XmlReader)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadKeyIdentifierClauseCore(System.Xml.XmlReader)
  id: CanReadKeyIdentifierClauseCore(System.Xml.XmlReader)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: CanReadKeyIdentifierClauseCore(XmlReader)
  nameWithType: SecurityTokenHandlerCollection.CanReadKeyIdentifierClauseCore(XmlReader)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadKeyIdentifierClauseCore(System.Xml.XmlReader)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: protected virtual bool CanReadKeyIdentifierClauseCore(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
    return:
      type: System.Boolean
    content.vb: Protected Overridable Function CanReadKeyIdentifierClauseCore(reader As XmlReader) As Boolean
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadKeyIdentifierClauseCore*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadKeyIdentifierClause(System.Xml.XmlReader)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadKeyIdentifierClause(System.Xml.XmlReader)
  id: ReadKeyIdentifierClause(System.Xml.XmlReader)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: ReadKeyIdentifierClause(XmlReader)
  nameWithType: SecurityTokenHandlerCollection.ReadKeyIdentifierClause(XmlReader)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadKeyIdentifierClause(System.Xml.XmlReader)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public SecurityKeyIdentifierClause ReadKeyIdentifierClause(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
    return:
      type: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    content.vb: Public Function ReadKeyIdentifierClause(reader As XmlReader) As SecurityKeyIdentifierClause
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadKeyIdentifierClause*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadKeyIdentifierClauseCore(System.Xml.XmlReader)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadKeyIdentifierClauseCore(System.Xml.XmlReader)
  id: ReadKeyIdentifierClauseCore(System.Xml.XmlReader)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: ReadKeyIdentifierClauseCore(XmlReader)
  nameWithType: SecurityTokenHandlerCollection.ReadKeyIdentifierClauseCore(XmlReader)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadKeyIdentifierClauseCore(System.Xml.XmlReader)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: protected virtual SecurityKeyIdentifierClause ReadKeyIdentifierClauseCore(XmlReader reader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
    return:
      type: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    content.vb: Protected Overridable Function ReadKeyIdentifierClauseCore(reader As XmlReader) As SecurityKeyIdentifierClause
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadKeyIdentifierClauseCore*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteKeyIdentifierClause(System.Xml.XmlWriter,CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteKeyIdentifierClause(System.Xml.XmlWriter,CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  id: WriteKeyIdentifierClause(System.Xml.XmlWriter,CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause)
  nameWithType: SecurityTokenHandlerCollection.WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteKeyIdentifierClause(System.Xml.XmlWriter, CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public void WriteKeyIdentifierClause(XmlWriter writer, SecurityKeyIdentifierClause keyIdentifierClause)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
    - id: keyIdentifierClause
      type: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    content.vb: Public Sub WriteKeyIdentifierClause(writer As XmlWriter, keyIdentifierClause As SecurityKeyIdentifierClause)
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteKeyIdentifierClause*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteKeyIdentifierClauseCore(System.Xml.XmlWriter,CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  commentId: M:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteKeyIdentifierClauseCore(System.Xml.XmlWriter,CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  id: WriteKeyIdentifierClauseCore(System.Xml.XmlWriter,CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: WriteKeyIdentifierClauseCore(XmlWriter, SecurityKeyIdentifierClause)
  nameWithType: SecurityTokenHandlerCollection.WriteKeyIdentifierClauseCore(XmlWriter, SecurityKeyIdentifierClause)
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteKeyIdentifierClauseCore(System.Xml.XmlWriter, CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nSerializes the given SecurityKeyIdentifierClause in a XmlWriter.\n"
  syntax:
    content: protected virtual void WriteKeyIdentifierClauseCore(XmlWriter writer, SecurityKeyIdentifierClause keyIdentifierClause)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: XmlWriter to write into.
    - id: keyIdentifierClause
      type: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
      description: SecurityKeyIdentifierClause to be written.
    content.vb: Protected Overridable Sub WriteKeyIdentifierClauseCore(writer As XmlWriter, keyIdentifierClause As SecurityKeyIdentifierClause)
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteKeyIdentifierClauseCore*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The input parameter &apos;writer&apos; or &apos;keyIdentifierClause&apos; is null.
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Configuration
  commentId: P:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Configuration
  id: Configuration
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: Configuration
  nameWithType: SecurityTokenHandlerCollection.Configuration
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Configuration
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nGets an instance of <xref href=\"CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration\" data-throw-if-not-resolved=\"false\"></xref>"
  syntax:
    content: public SecurityTokenHandlerConfiguration Configuration { get; }
    parameters: []
    return:
      type: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration
    content.vb: Public ReadOnly Property Configuration As SecurityTokenHandlerConfiguration
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Configuration*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.TokenTypes
  commentId: P:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.TokenTypes
  id: TokenTypes
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: TokenTypes
  nameWithType: SecurityTokenHandlerCollection.TokenTypes
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.TokenTypes
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nGets the List of System.Type of the Token Handlers in this collection.\n"
  syntax:
    content: public IEnumerable<Type> TokenTypes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
    content.vb: Public ReadOnly Property TokenTypes As IEnumerable(Of Type)
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.TokenTypes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.TokenTypeIdentifiers
  commentId: P:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.TokenTypeIdentifiers
  id: TokenTypeIdentifiers
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: TokenTypeIdentifiers
  nameWithType: SecurityTokenHandlerCollection.TokenTypeIdentifiers
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.TokenTypeIdentifiers
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nGets the list of Token type Identifier of the Token Handlers.\n"
  syntax:
    content: public IEnumerable<string> TokenTypeIdentifiers { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public ReadOnly Property TokenTypeIdentifiers As IEnumerable(Of String)
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.TokenTypeIdentifiers*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item(System.String)
  commentId: P:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item(System.String)
  id: Item(System.String)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: SecurityTokenHandlerCollection.Item[String]
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item[System.String]
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nGets a Token Handler by its Token Type Identifier.\n"
  syntax:
    content: public SecurityTokenHandler this[string tokenTypeIdentifier] { get; }
    parameters:
    - id: tokenTypeIdentifier
      type: System.String
      description: The Token Type Identfier string to search for.
    return:
      type: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
      description: Instance of a SecurityTokenHandler.
    content.vb: Public ReadOnly Property Item(tokenTypeIdentifier As String) As SecurityTokenHandler
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item*
  nameWithType.vb: SecurityTokenHandlerCollection.Item(String)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item(System.String)
  name.vb: Item(String)
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item(CoreWCF.IdentityModel.Tokens.SecurityToken)
  commentId: P:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item(CoreWCF.IdentityModel.Tokens.SecurityToken)
  id: Item(CoreWCF.IdentityModel.Tokens.SecurityToken)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: Item[SecurityToken]
  nameWithType: SecurityTokenHandlerCollection.Item[SecurityToken]
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item[CoreWCF.IdentityModel.Tokens.SecurityToken]
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  syntax:
    content: public SecurityTokenHandler this[SecurityToken token] { get; }
    parameters:
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    return:
      type: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
    content.vb: Public ReadOnly Property Item(token As SecurityToken) As SecurityTokenHandler
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item*
  nameWithType.vb: SecurityTokenHandlerCollection.Item(SecurityToken)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item(CoreWCF.IdentityModel.Tokens.SecurityToken)
  name.vb: Item(SecurityToken)
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item(System.Type)
  commentId: P:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item(System.Type)
  id: Item(System.Type)
  parent: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection
  langs:
  - csharp
  - vb
  name: Item[Type]
  nameWithType: SecurityTokenHandlerCollection.Item[Type]
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item[System.Type]
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.IdentityModel.Tokens
  summary: "\nGets a Token Handler based on the System.Type of the token.\n"
  syntax:
    content: public SecurityTokenHandler this[Type tokenType] { get; }
    parameters:
    - id: tokenType
      type: System.Type
      description: System.Type of the Token that needs to be handled.
    return:
      type: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
      description: Instance of SecurityTokenHandler.
    content.vb: Public ReadOnly Property Item(tokenType As Type) As SecurityTokenHandler
  overload: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item*
  nameWithType.vb: SecurityTokenHandlerCollection.Item(Type)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item(System.Type)
  name.vb: Item(Type)
references:
- uid: CoreWCF.IdentityModel.Tokens
  commentId: N:CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: CoreWCF.IdentityModel.Tokens
  nameWithType: CoreWCF.IdentityModel.Tokens
  fullName: CoreWCF.IdentityModel.Tokens
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.#ctor
  isExternal: true
  name: SecurityTokenHandlerCollection
  nameWithType: SecurityTokenHandlerCollection.SecurityTokenHandlerCollection
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.SecurityTokenHandlerCollection
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityTokenHandlerConfiguration
  nameWithType: SecurityTokenHandlerConfiguration
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration
- uid: System.Collections.Generic.IEnumerable{CoreWCF.IdentityModel.Tokens.SecurityTokenHandler}
  commentId: '!:System.Collections.Generic.IEnumerable{CoreWCF.IdentityModel.Tokens.SecurityTokenHandler}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<SecurityTokenHandler>
  nameWithType: IEnumerable<SecurityTokenHandler>
  fullName: System.Collections.Generic.IEnumerable<CoreWCF.IdentityModel.Tokens.SecurityTokenHandler>
  nameWithType.vb: IEnumerable(Of SecurityTokenHandler)
  fullName.vb: System.Collections.Generic.IEnumerable(Of CoreWCF.IdentityModel.Tokens.SecurityTokenHandler)
  name.vb: IEnumerable(Of SecurityTokenHandler)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
    name: SecurityTokenHandler
    nameWithType: SecurityTokenHandler
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
    name: SecurityTokenHandler
    nameWithType: SecurityTokenHandler
    fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.AddOrReplace*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.AddOrReplace
  isExternal: true
  name: AddOrReplace
  nameWithType: SecurityTokenHandlerCollection.AddOrReplace
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.AddOrReplace
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityTokenHandler
  nameWithType: SecurityTokenHandler
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandler
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadToken*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadToken
  isExternal: true
  name: CanReadToken
  nameWithType: SecurityTokenHandlerCollection.CanReadToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadToken
- uid: System.Xml.XmlReader
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanWriteToken*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanWriteToken
  isExternal: true
  name: CanWriteToken
  nameWithType: SecurityTokenHandlerCollection.CanWriteToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanWriteToken
- uid: CoreWCF.IdentityModel.Tokens.SecurityToken
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityToken
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityToken
  nameWithType: SecurityToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ValidateToken*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ValidateToken
  isExternal: true
  name: ValidateToken
  nameWithType: SecurityTokenHandlerCollection.ValidateToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ValidateToken
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}
  commentId: '!:System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}'
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<ClaimsIdentity>
  nameWithType: ReadOnlyCollection<ClaimsIdentity>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Security.Claims.ClaimsIdentity>
  nameWithType.vb: ReadOnlyCollection(Of ClaimsIdentity)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.Security.Claims.ClaimsIdentity)
  name.vb: ReadOnlyCollection(Of ClaimsIdentity)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: System.Security.Claims.ClaimsIdentity
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: System.Security.Claims.ClaimsIdentity
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<>
  nameWithType: ReadOnlyCollection<>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<>
  nameWithType.vb: ReadOnlyCollection(Of )
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of )
  name.vb: ReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadToken*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadToken
  isExternal: true
  name: ReadToken
  nameWithType: SecurityTokenHandlerCollection.ReadToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadToken
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteToken*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteToken
  isExternal: true
  name: WriteToken
  nameWithType: SecurityTokenHandlerCollection.WriteToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteToken
- uid: System.Xml.XmlWriter
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ClearItems*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ClearItems
  isExternal: true
  name: ClearItems
  nameWithType: SecurityTokenHandlerCollection.ClearItems
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ClearItems
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.InsertItem*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.InsertItem
  isExternal: true
  name: InsertItem
  nameWithType: SecurityTokenHandlerCollection.InsertItem
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.InsertItem
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.RemoveItem*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.RemoveItem
  isExternal: true
  name: RemoveItem
  nameWithType: SecurityTokenHandlerCollection.RemoveItem
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.RemoveItem
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.SetItem*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.SetItem
  isExternal: true
  name: SetItem
  nameWithType: SecurityTokenHandlerCollection.SetItem
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.SetItem
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadKeyIdentifierClause*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadKeyIdentifierClause
  isExternal: true
  name: CanReadKeyIdentifierClause
  nameWithType: SecurityTokenHandlerCollection.CanReadKeyIdentifierClause
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadKeyIdentifierClause
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadKeyIdentifierClauseCore*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadKeyIdentifierClauseCore
  isExternal: true
  name: CanReadKeyIdentifierClauseCore
  nameWithType: SecurityTokenHandlerCollection.CanReadKeyIdentifierClauseCore
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.CanReadKeyIdentifierClauseCore
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadKeyIdentifierClause*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadKeyIdentifierClause
  isExternal: true
  name: ReadKeyIdentifierClause
  nameWithType: SecurityTokenHandlerCollection.ReadKeyIdentifierClause
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadKeyIdentifierClause
- uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
  commentId: T:CoreWCF.IdentityModel.SecurityKeyIdentifierClause
  parent: CoreWCF.IdentityModel
  isExternal: true
  name: SecurityKeyIdentifierClause
  nameWithType: SecurityKeyIdentifierClause
  fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
- uid: CoreWCF.IdentityModel
  commentId: N:CoreWCF.IdentityModel
  isExternal: true
  name: CoreWCF.IdentityModel
  nameWithType: CoreWCF.IdentityModel
  fullName: CoreWCF.IdentityModel
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadKeyIdentifierClauseCore*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadKeyIdentifierClauseCore
  isExternal: true
  name: ReadKeyIdentifierClauseCore
  nameWithType: SecurityTokenHandlerCollection.ReadKeyIdentifierClauseCore
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.ReadKeyIdentifierClauseCore
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteKeyIdentifierClause*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteKeyIdentifierClause
  isExternal: true
  name: WriteKeyIdentifierClause
  nameWithType: SecurityTokenHandlerCollection.WriteKeyIdentifierClause
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteKeyIdentifierClause
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteKeyIdentifierClauseCore*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteKeyIdentifierClauseCore
  isExternal: true
  name: WriteKeyIdentifierClauseCore
  nameWithType: SecurityTokenHandlerCollection.WriteKeyIdentifierClauseCore
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.WriteKeyIdentifierClauseCore
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Configuration*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Configuration
  isExternal: true
  name: Configuration
  nameWithType: SecurityTokenHandlerCollection.Configuration
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Configuration
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.TokenTypes*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.TokenTypes
  isExternal: true
  name: TokenTypes
  nameWithType: SecurityTokenHandlerCollection.TokenTypes
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.TokenTypes
- uid: System.Collections.Generic.IEnumerable{System.Type}
  commentId: '!:System.Collections.Generic.IEnumerable{System.Type}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Type>
  nameWithType: IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
  nameWithType.vb: IEnumerable(Of Type)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Type)
  name.vb: IEnumerable(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.TokenTypeIdentifiers*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.TokenTypeIdentifiers
  isExternal: true
  name: TokenTypeIdentifiers
  nameWithType: SecurityTokenHandlerCollection.TokenTypeIdentifiers
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.TokenTypeIdentifiers
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: '!:System.Collections.Generic.IEnumerable{System.String}'
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item*
  commentId: Overload:CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item
  isExternal: true
  name: Item
  nameWithType: SecurityTokenHandlerCollection.Item
  fullName: CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.Item
- uid: System.Type
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
