### YamlMime:ManagedReference
items:
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver
  commentId: T:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver
  id: SecurityContextSecurityTokenResolver
  parent: CoreWCF.Security.Tokens
  children:
  - CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor(System.Int32,System.Boolean)
  - CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor(System.Int32,System.Boolean,System.TimeSpan)
  - CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.AddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  - CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.ClearContexts
  - CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.ClockSkew
  - CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.GetAllContexts(System.Xml.UniqueId)
  - CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.GetContext(System.Xml.UniqueId,System.Xml.UniqueId)
  - CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveAllContexts(System.Xml.UniqueId)
  - CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)
  - CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull
  - CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity
  - CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryAddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  - CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  - CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  - CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  - CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.UpdateContextCachingTime(CoreWCF.Security.Tokens.SecurityContextSecurityToken,System.DateTime)
  langs:
  - csharp
  - vb
  name: SecurityContextSecurityTokenResolver
  nameWithType: SecurityContextSecurityTokenResolver
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver
  type: Class
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  summary: Resolves security context tokens.
  remarks: To be added.
  syntax:
    content: 'public class SecurityContextSecurityTokenResolver : SecurityTokenResolver, ISecurityContextSecurityTokenCache'
    content.vb: >-
      Public Class SecurityContextSecurityTokenResolver
          Inherits SecurityTokenResolver
          Implements ISecurityContextSecurityTokenCache
  inheritance:
  - System.Object
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  implements:
  - CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache
  inheritedMembers:
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  - CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Tokens.SecurityToken},System.Boolean)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor(System.Int32,System.Boolean)
  commentId: M:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor(System.Int32,System.Boolean)
  id: '#ctor(System.Int32,System.Boolean)'
  parent: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  - vb
  name: SecurityContextSecurityTokenResolver(Int32, Boolean)
  nameWithType: SecurityContextSecurityTokenResolver.SecurityContextSecurityTokenResolver(Int32, Boolean)
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextSecurityTokenResolver(System.Int32, System.Boolean)
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  syntax:
    content: public SecurityContextSecurityTokenResolver(int securityContextCacheCapacity, bool removeOldestTokensOnCacheFull)
    parameters:
    - id: securityContextCacheCapacity
      type: System.Int32
    - id: removeOldestTokensOnCacheFull
      type: System.Boolean
    content.vb: Public Sub New(securityContextCacheCapacity As Integer, removeOldestTokensOnCacheFull As Boolean)
  overload: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor(System.Int32,System.Boolean,System.TimeSpan)
  commentId: M:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor(System.Int32,System.Boolean,System.TimeSpan)
  id: '#ctor(System.Int32,System.Boolean,System.TimeSpan)'
  parent: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  - vb
  name: SecurityContextSecurityTokenResolver(Int32, Boolean, TimeSpan)
  nameWithType: SecurityContextSecurityTokenResolver.SecurityContextSecurityTokenResolver(Int32, Boolean, TimeSpan)
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextSecurityTokenResolver(System.Int32, System.Boolean, System.TimeSpan)
  type: Constructor
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  syntax:
    content: public SecurityContextSecurityTokenResolver(int securityContextCacheCapacity, bool removeOldestTokensOnCacheFull, TimeSpan clockSkew)
    parameters:
    - id: securityContextCacheCapacity
      type: System.Int32
    - id: removeOldestTokensOnCacheFull
      type: System.Boolean
    - id: clockSkew
      type: System.TimeSpan
    content.vb: Public Sub New(securityContextCacheCapacity As Integer, removeOldestTokensOnCacheFull As Boolean, clockSkew As TimeSpan)
  overload: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.AddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  commentId: M:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.AddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  id: AddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  parent: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  - vb
  name: AddContext(SecurityContextSecurityToken)
  nameWithType: SecurityContextSecurityTokenResolver.AddContext(SecurityContextSecurityToken)
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.AddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  syntax:
    content: public void AddContext(SecurityContextSecurityToken token)
    parameters:
    - id: token
      type: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    content.vb: Public Sub AddContext(token As SecurityContextSecurityToken)
  overload: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.AddContext*
  implements:
  - CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.AddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryAddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  commentId: M:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryAddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  id: TryAddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  parent: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  - vb
  name: TryAddContext(SecurityContextSecurityToken)
  nameWithType: SecurityContextSecurityTokenResolver.TryAddContext(SecurityContextSecurityToken)
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryAddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  syntax:
    content: public bool TryAddContext(SecurityContextSecurityToken token)
    parameters:
    - id: token
      type: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    return:
      type: System.Boolean
    content.vb: Public Function TryAddContext(token As SecurityContextSecurityToken) As Boolean
  overload: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryAddContext*
  implements:
  - CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.TryAddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.ClearContexts
  commentId: M:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.ClearContexts
  id: ClearContexts
  parent: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  - vb
  name: ClearContexts()
  nameWithType: SecurityContextSecurityTokenResolver.ClearContexts()
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.ClearContexts()
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  syntax:
    content: public void ClearContexts()
    content.vb: Public Sub ClearContexts
  overload: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.ClearContexts*
  implements:
  - CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.ClearContexts
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)
  commentId: M:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)
  id: RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)
  parent: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  - vb
  name: RemoveContext(UniqueId, UniqueId)
  nameWithType: SecurityContextSecurityTokenResolver.RemoveContext(UniqueId, UniqueId)
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveContext(System.Xml.UniqueId, System.Xml.UniqueId)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  syntax:
    content: public void RemoveContext(UniqueId contextId, UniqueId generation)
    parameters:
    - id: contextId
      type: System.Xml.UniqueId
    - id: generation
      type: System.Xml.UniqueId
    content.vb: Public Sub RemoveContext(contextId As UniqueId, generation As UniqueId)
  overload: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveContext*
  implements:
  - CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveAllContexts(System.Xml.UniqueId)
  commentId: M:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveAllContexts(System.Xml.UniqueId)
  id: RemoveAllContexts(System.Xml.UniqueId)
  parent: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  - vb
  name: RemoveAllContexts(UniqueId)
  nameWithType: SecurityContextSecurityTokenResolver.RemoveAllContexts(UniqueId)
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveAllContexts(System.Xml.UniqueId)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  syntax:
    content: public void RemoveAllContexts(UniqueId contextId)
    parameters:
    - id: contextId
      type: System.Xml.UniqueId
    content.vb: Public Sub RemoveAllContexts(contextId As UniqueId)
  overload: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveAllContexts*
  implements:
  - CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveAllContexts(System.Xml.UniqueId)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.GetContext(System.Xml.UniqueId,System.Xml.UniqueId)
  commentId: M:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.GetContext(System.Xml.UniqueId,System.Xml.UniqueId)
  id: GetContext(System.Xml.UniqueId,System.Xml.UniqueId)
  parent: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  - vb
  name: GetContext(UniqueId, UniqueId)
  nameWithType: SecurityContextSecurityTokenResolver.GetContext(UniqueId, UniqueId)
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.GetContext(System.Xml.UniqueId, System.Xml.UniqueId)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  syntax:
    content: public SecurityContextSecurityToken GetContext(UniqueId contextId, UniqueId generation)
    parameters:
    - id: contextId
      type: System.Xml.UniqueId
    - id: generation
      type: System.Xml.UniqueId
    return:
      type: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    content.vb: Public Function GetContext(contextId As UniqueId, generation As UniqueId) As SecurityContextSecurityToken
  overload: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.GetContext*
  implements:
  - CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetContext(System.Xml.UniqueId,System.Xml.UniqueId)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.GetAllContexts(System.Xml.UniqueId)
  commentId: M:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.GetAllContexts(System.Xml.UniqueId)
  id: GetAllContexts(System.Xml.UniqueId)
  parent: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  - vb
  name: GetAllContexts(UniqueId)
  nameWithType: SecurityContextSecurityTokenResolver.GetAllContexts(UniqueId)
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.GetAllContexts(System.Xml.UniqueId)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  syntax:
    content: public Collection<SecurityContextSecurityToken> GetAllContexts(UniqueId contextId)
    parameters:
    - id: contextId
      type: System.Xml.UniqueId
    return:
      type: System.Collections.ObjectModel.Collection{CoreWCF.Security.Tokens.SecurityContextSecurityToken}
    content.vb: Public Function GetAllContexts(contextId As UniqueId) As Collection(Of SecurityContextSecurityToken)
  overload: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.GetAllContexts*
  implements:
  - CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetAllContexts(System.Xml.UniqueId)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.UpdateContextCachingTime(CoreWCF.Security.Tokens.SecurityContextSecurityToken,System.DateTime)
  commentId: M:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.UpdateContextCachingTime(CoreWCF.Security.Tokens.SecurityContextSecurityToken,System.DateTime)
  id: UpdateContextCachingTime(CoreWCF.Security.Tokens.SecurityContextSecurityToken,System.DateTime)
  parent: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  - vb
  name: UpdateContextCachingTime(SecurityContextSecurityToken, DateTime)
  nameWithType: SecurityContextSecurityTokenResolver.UpdateContextCachingTime(SecurityContextSecurityToken, DateTime)
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.UpdateContextCachingTime(CoreWCF.Security.Tokens.SecurityContextSecurityToken, System.DateTime)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  syntax:
    content: public void UpdateContextCachingTime(SecurityContextSecurityToken context, DateTime expirationTime)
    parameters:
    - id: context
      type: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    - id: expirationTime
      type: System.DateTime
    content.vb: Public Sub UpdateContextCachingTime(context As SecurityContextSecurityToken, expirationTime As DateTime)
  overload: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.UpdateContextCachingTime*
  implements:
  - CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.UpdateContextCachingTime(CoreWCF.Security.Tokens.SecurityContextSecurityToken,System.DateTime)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  commentId: M:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  id: TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  parent: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  - vb
  name: TryResolveTokenCore(SecurityKeyIdentifierClause, out SecurityToken)
  nameWithType: SecurityContextSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause, out SecurityToken)
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, out CoreWCF.IdentityModel.Tokens.SecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  syntax:
    content: protected override bool TryResolveTokenCore(SecurityKeyIdentifierClause keyIdentifierClause, out SecurityToken token)
    parameters:
    - id: keyIdentifierClause
      type: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    return:
      type: System.Boolean
    content.vb: Protected Overrides Function TryResolveTokenCore(keyIdentifierClause As SecurityKeyIdentifierClause, ByRef token As SecurityToken) As Boolean
  overridden: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  overload: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore*
  nameWithType.vb: SecurityContextSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause, ByRef SecurityToken)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, ByRef CoreWCF.IdentityModel.Tokens.SecurityToken)
  name.vb: TryResolveTokenCore(SecurityKeyIdentifierClause, ByRef SecurityToken)
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  commentId: M:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  id: TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  parent: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  - vb
  name: TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, out SecurityKey)
  nameWithType: SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, out SecurityKey)
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, out CoreWCF.IdentityModel.Tokens.SecurityKey)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  syntax:
    content: protected override bool TryResolveSecurityKeyCore(SecurityKeyIdentifierClause keyIdentifierClause, out SecurityKey key)
    parameters:
    - id: keyIdentifierClause
      type: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    - id: key
      type: CoreWCF.IdentityModel.Tokens.SecurityKey
    return:
      type: System.Boolean
    content.vb: Protected Overrides Function TryResolveSecurityKeyCore(keyIdentifierClause As SecurityKeyIdentifierClause, ByRef key As SecurityKey) As Boolean
  overridden: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  overload: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore*
  nameWithType.vb: SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, ByRef SecurityKey)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, ByRef CoreWCF.IdentityModel.Tokens.SecurityKey)
  name.vb: TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, ByRef SecurityKey)
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  commentId: M:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  id: TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  parent: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  - vb
  name: TryResolveTokenCore(SecurityKeyIdentifier, out SecurityToken)
  nameWithType: SecurityContextSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier, out SecurityToken)
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier, out CoreWCF.IdentityModel.Tokens.SecurityToken)
  type: Method
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  syntax:
    content: protected override bool TryResolveTokenCore(SecurityKeyIdentifier keyIdentifier, out SecurityToken token)
    parameters:
    - id: keyIdentifier
      type: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    - id: token
      type: CoreWCF.IdentityModel.Tokens.SecurityToken
    return:
      type: System.Boolean
    content.vb: Protected Overrides Function TryResolveTokenCore(keyIdentifier As SecurityKeyIdentifier, ByRef token As SecurityToken) As Boolean
  overridden: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  overload: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore*
  nameWithType.vb: SecurityContextSecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier, ByRef SecurityToken)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier, ByRef CoreWCF.IdentityModel.Tokens.SecurityToken)
  name.vb: TryResolveTokenCore(SecurityKeyIdentifier, ByRef SecurityToken)
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity
  commentId: P:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity
  id: SecurityContextTokenCacheCapacity
  parent: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  - vb
  name: SecurityContextTokenCacheCapacity
  nameWithType: SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  syntax:
    content: public int SecurityContextTokenCacheCapacity { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property SecurityContextTokenCacheCapacity As Integer
  overload: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.ClockSkew
  commentId: P:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.ClockSkew
  id: ClockSkew
  parent: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  - vb
  name: ClockSkew
  nameWithType: SecurityContextSecurityTokenResolver.ClockSkew
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.ClockSkew
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  syntax:
    content: public TimeSpan ClockSkew { get; }
    parameters: []
    return:
      type: System.TimeSpan
    content.vb: Public ReadOnly Property ClockSkew As TimeSpan
  overload: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.ClockSkew*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull
  commentId: P:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull
  id: RemoveOldestTokensOnCacheFull
  parent: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver
  langs:
  - csharp
  - vb
  name: RemoveOldestTokensOnCacheFull
  nameWithType: SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull
  type: Property
  source:
    path: CoreWCF.Primitives
    isExternal: true
  assemblies:
  - CoreWCF.Primitives
  namespace: CoreWCF.Security.Tokens
  syntax:
    content: public bool RemoveOldestTokensOnCacheFull { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property RemoveOldestTokensOnCacheFull As Boolean
  overload: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: CoreWCF.Security.Tokens
  commentId: N:CoreWCF.Security.Tokens
  isExternal: true
  name: CoreWCF.Security.Tokens
  nameWithType: CoreWCF.Security.Tokens
  fullName: CoreWCF.Security.Tokens
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  commentId: T:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  parent: CoreWCF.IdentityModel.Selectors
  isExternal: true
  name: SecurityTokenResolver
  nameWithType: SecurityTokenResolver
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache
  commentId: T:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache
  parent: CoreWCF.Security.Tokens
  isExternal: true
  name: ISecurityContextSecurityTokenCache
  nameWithType: ISecurityContextSecurityTokenCache
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: ResolveToken(SecurityKeyIdentifier)
  nameWithType: SecurityTokenResolver.ResolveToken(SecurityKeyIdentifier)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
    name: ResolveToken
    nameWithType: SecurityTokenResolver.ResolveToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    name: SecurityKeyIdentifier
    nameWithType: SecurityKeyIdentifier
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier)
    name: ResolveToken
    nameWithType: SecurityTokenResolver.ResolveToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    name: SecurityKeyIdentifier
    nameWithType: SecurityKeyIdentifier
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: TryResolveToken(SecurityKeyIdentifier, SecurityToken)
  nameWithType: SecurityTokenResolver.TryResolveToken(SecurityKeyIdentifier, SecurityToken)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier, CoreWCF.IdentityModel.Tokens.SecurityToken)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
    name: TryResolveToken
    nameWithType: SecurityTokenResolver.TryResolveToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    name: SecurityKeyIdentifier
    nameWithType: SecurityKeyIdentifier
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
    name: TryResolveToken
    nameWithType: SecurityTokenResolver.TryResolveToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    name: SecurityKeyIdentifier
    nameWithType: SecurityKeyIdentifier
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: ResolveToken(SecurityKeyIdentifierClause)
  nameWithType: SecurityTokenResolver.ResolveToken(SecurityKeyIdentifierClause)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
    name: ResolveToken
    nameWithType: SecurityTokenResolver.ResolveToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
    name: ResolveToken
    nameWithType: SecurityTokenResolver.ResolveToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: TryResolveToken(SecurityKeyIdentifierClause, SecurityToken)
  nameWithType: SecurityTokenResolver.TryResolveToken(SecurityKeyIdentifierClause, SecurityToken)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, CoreWCF.IdentityModel.Tokens.SecurityToken)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
    name: TryResolveToken
    nameWithType: SecurityTokenResolver.TryResolveToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
    name: TryResolveToken
    nameWithType: SecurityTokenResolver.TryResolveToken
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: ResolveSecurityKey(SecurityKeyIdentifierClause)
  nameWithType: SecurityTokenResolver.ResolveSecurityKey(SecurityKeyIdentifierClause)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
    name: ResolveSecurityKey
    nameWithType: SecurityTokenResolver.ResolveSecurityKey
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause)
    name: ResolveSecurityKey
    nameWithType: SecurityTokenResolver.ResolveSecurityKey
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: TryResolveSecurityKey(SecurityKeyIdentifierClause, SecurityKey)
  nameWithType: SecurityTokenResolver.TryResolveSecurityKey(SecurityKeyIdentifierClause, SecurityKey)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, CoreWCF.IdentityModel.Tokens.SecurityKey)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
    name: TryResolveSecurityKey
    nameWithType: SecurityTokenResolver.TryResolveSecurityKey
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKey
    name: SecurityKey
    nameWithType: SecurityKey
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKey
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
    name: TryResolveSecurityKey
    nameWithType: SecurityTokenResolver.TryResolveSecurityKey
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKey
    name: SecurityKey
    nameWithType: SecurityKey
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKey
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Tokens.SecurityToken},System.Boolean)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Tokens.SecurityToken},System.Boolean)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: CreateDefaultSecurityTokenResolver(ReadOnlyCollection<SecurityToken>, Boolean)
  nameWithType: SecurityTokenResolver.CreateDefaultSecurityTokenResolver(ReadOnlyCollection<SecurityToken>, Boolean)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection<CoreWCF.IdentityModel.Tokens.SecurityToken>, System.Boolean)
  nameWithType.vb: SecurityTokenResolver.CreateDefaultSecurityTokenResolver(ReadOnlyCollection(Of SecurityToken), Boolean)
  fullName.vb: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection(Of CoreWCF.IdentityModel.Tokens.SecurityToken), System.Boolean)
  name.vb: CreateDefaultSecurityTokenResolver(ReadOnlyCollection(Of SecurityToken), Boolean)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Tokens.SecurityToken},System.Boolean)
    name: CreateDefaultSecurityTokenResolver
    nameWithType: SecurityTokenResolver.CreateDefaultSecurityTokenResolver
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver(System.Collections.ObjectModel.ReadOnlyCollection{CoreWCF.IdentityModel.Tokens.SecurityToken},System.Boolean)
    name: CreateDefaultSecurityTokenResolver
    nameWithType: SecurityTokenResolver.CreateDefaultSecurityTokenResolver
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.CreateDefaultSecurityTokenResolver
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CoreWCF.IdentityModel.Selectors
  commentId: N:CoreWCF.IdentityModel.Selectors
  isExternal: true
  name: CoreWCF.IdentityModel.Selectors
  nameWithType: CoreWCF.IdentityModel.Selectors
  fullName: CoreWCF.IdentityModel.Selectors
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor*
  commentId: Overload:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.#ctor
  isExternal: true
  name: SecurityContextSecurityTokenResolver
  nameWithType: SecurityContextSecurityTokenResolver.SecurityContextSecurityTokenResolver
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextSecurityTokenResolver
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.AddContext*
  commentId: Overload:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.AddContext
  isExternal: true
  name: AddContext
  nameWithType: SecurityContextSecurityTokenResolver.AddContext
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.AddContext
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.AddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  commentId: M:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.AddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  parent: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache
  isExternal: true
  name: AddContext(SecurityContextSecurityToken)
  nameWithType: ISecurityContextSecurityTokenCache.AddContext(SecurityContextSecurityToken)
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.AddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  spec.csharp:
  - uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.AddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
    name: AddContext
    nameWithType: ISecurityContextSecurityTokenCache.AddContext
    fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.AddContext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    name: SecurityContextSecurityToken
    nameWithType: SecurityContextSecurityToken
    fullName: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.AddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
    name: AddContext
    nameWithType: ISecurityContextSecurityTokenCache.AddContext
    fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.AddContext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    name: SecurityContextSecurityToken
    nameWithType: SecurityContextSecurityToken
    fullName: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityToken
  commentId: T:CoreWCF.Security.Tokens.SecurityContextSecurityToken
  parent: CoreWCF.Security.Tokens
  isExternal: true
  name: SecurityContextSecurityToken
  nameWithType: SecurityContextSecurityToken
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityToken
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryAddContext*
  commentId: Overload:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryAddContext
  isExternal: true
  name: TryAddContext
  nameWithType: SecurityContextSecurityTokenResolver.TryAddContext
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryAddContext
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.TryAddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  commentId: M:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.TryAddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  parent: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache
  isExternal: true
  name: TryAddContext(SecurityContextSecurityToken)
  nameWithType: ISecurityContextSecurityTokenCache.TryAddContext(SecurityContextSecurityToken)
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.TryAddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  spec.csharp:
  - uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.TryAddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
    name: TryAddContext
    nameWithType: ISecurityContextSecurityTokenCache.TryAddContext
    fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.TryAddContext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    name: SecurityContextSecurityToken
    nameWithType: SecurityContextSecurityToken
    fullName: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.TryAddContext(CoreWCF.Security.Tokens.SecurityContextSecurityToken)
    name: TryAddContext
    nameWithType: ISecurityContextSecurityTokenCache.TryAddContext
    fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.TryAddContext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    name: SecurityContextSecurityToken
    nameWithType: SecurityContextSecurityToken
    fullName: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.ClearContexts*
  commentId: Overload:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.ClearContexts
  isExternal: true
  name: ClearContexts
  nameWithType: SecurityContextSecurityTokenResolver.ClearContexts
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.ClearContexts
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.ClearContexts
  commentId: M:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.ClearContexts
  parent: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache
  isExternal: true
  name: ClearContexts()
  nameWithType: ISecurityContextSecurityTokenCache.ClearContexts()
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.ClearContexts()
  spec.csharp:
  - uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.ClearContexts
    name: ClearContexts
    nameWithType: ISecurityContextSecurityTokenCache.ClearContexts
    fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.ClearContexts
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.ClearContexts
    name: ClearContexts
    nameWithType: ISecurityContextSecurityTokenCache.ClearContexts
    fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.ClearContexts
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveContext*
  commentId: Overload:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveContext
  isExternal: true
  name: RemoveContext
  nameWithType: SecurityContextSecurityTokenResolver.RemoveContext
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveContext
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)
  commentId: M:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)
  parent: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache
  isExternal: true
  name: RemoveContext(UniqueId, UniqueId)
  nameWithType: ISecurityContextSecurityTokenCache.RemoveContext(UniqueId, UniqueId)
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveContext(System.Xml.UniqueId, System.Xml.UniqueId)
  spec.csharp:
  - uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)
    name: RemoveContext
    nameWithType: ISecurityContextSecurityTokenCache.RemoveContext
    fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveContext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.UniqueId
    name: UniqueId
    nameWithType: UniqueId
    fullName: System.Xml.UniqueId
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.UniqueId
    name: UniqueId
    nameWithType: UniqueId
    fullName: System.Xml.UniqueId
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveContext(System.Xml.UniqueId,System.Xml.UniqueId)
    name: RemoveContext
    nameWithType: ISecurityContextSecurityTokenCache.RemoveContext
    fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveContext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.UniqueId
    name: UniqueId
    nameWithType: UniqueId
    fullName: System.Xml.UniqueId
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.UniqueId
    name: UniqueId
    nameWithType: UniqueId
    fullName: System.Xml.UniqueId
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.UniqueId
  isExternal: true
  name: UniqueId
  nameWithType: UniqueId
  fullName: System.Xml.UniqueId
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveAllContexts*
  commentId: Overload:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveAllContexts
  isExternal: true
  name: RemoveAllContexts
  nameWithType: SecurityContextSecurityTokenResolver.RemoveAllContexts
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveAllContexts
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveAllContexts(System.Xml.UniqueId)
  commentId: M:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveAllContexts(System.Xml.UniqueId)
  parent: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache
  isExternal: true
  name: RemoveAllContexts(UniqueId)
  nameWithType: ISecurityContextSecurityTokenCache.RemoveAllContexts(UniqueId)
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveAllContexts(System.Xml.UniqueId)
  spec.csharp:
  - uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveAllContexts(System.Xml.UniqueId)
    name: RemoveAllContexts
    nameWithType: ISecurityContextSecurityTokenCache.RemoveAllContexts
    fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveAllContexts
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.UniqueId
    name: UniqueId
    nameWithType: UniqueId
    fullName: System.Xml.UniqueId
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveAllContexts(System.Xml.UniqueId)
    name: RemoveAllContexts
    nameWithType: ISecurityContextSecurityTokenCache.RemoveAllContexts
    fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.RemoveAllContexts
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.UniqueId
    name: UniqueId
    nameWithType: UniqueId
    fullName: System.Xml.UniqueId
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.GetContext*
  commentId: Overload:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.GetContext
  isExternal: true
  name: GetContext
  nameWithType: SecurityContextSecurityTokenResolver.GetContext
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.GetContext
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetContext(System.Xml.UniqueId,System.Xml.UniqueId)
  commentId: M:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetContext(System.Xml.UniqueId,System.Xml.UniqueId)
  parent: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache
  isExternal: true
  name: GetContext(UniqueId, UniqueId)
  nameWithType: ISecurityContextSecurityTokenCache.GetContext(UniqueId, UniqueId)
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetContext(System.Xml.UniqueId, System.Xml.UniqueId)
  spec.csharp:
  - uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetContext(System.Xml.UniqueId,System.Xml.UniqueId)
    name: GetContext
    nameWithType: ISecurityContextSecurityTokenCache.GetContext
    fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetContext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.UniqueId
    name: UniqueId
    nameWithType: UniqueId
    fullName: System.Xml.UniqueId
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.UniqueId
    name: UniqueId
    nameWithType: UniqueId
    fullName: System.Xml.UniqueId
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetContext(System.Xml.UniqueId,System.Xml.UniqueId)
    name: GetContext
    nameWithType: ISecurityContextSecurityTokenCache.GetContext
    fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetContext
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.UniqueId
    name: UniqueId
    nameWithType: UniqueId
    fullName: System.Xml.UniqueId
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Xml.UniqueId
    name: UniqueId
    nameWithType: UniqueId
    fullName: System.Xml.UniqueId
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.GetAllContexts*
  commentId: Overload:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.GetAllContexts
  isExternal: true
  name: GetAllContexts
  nameWithType: SecurityContextSecurityTokenResolver.GetAllContexts
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.GetAllContexts
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetAllContexts(System.Xml.UniqueId)
  commentId: M:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetAllContexts(System.Xml.UniqueId)
  parent: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache
  isExternal: true
  name: GetAllContexts(UniqueId)
  nameWithType: ISecurityContextSecurityTokenCache.GetAllContexts(UniqueId)
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetAllContexts(System.Xml.UniqueId)
  spec.csharp:
  - uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetAllContexts(System.Xml.UniqueId)
    name: GetAllContexts
    nameWithType: ISecurityContextSecurityTokenCache.GetAllContexts
    fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetAllContexts
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.UniqueId
    name: UniqueId
    nameWithType: UniqueId
    fullName: System.Xml.UniqueId
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetAllContexts(System.Xml.UniqueId)
    name: GetAllContexts
    nameWithType: ISecurityContextSecurityTokenCache.GetAllContexts
    fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.GetAllContexts
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.UniqueId
    name: UniqueId
    nameWithType: UniqueId
    fullName: System.Xml.UniqueId
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.Collection{CoreWCF.Security.Tokens.SecurityContextSecurityToken}
  commentId: '!:System.Collections.ObjectModel.Collection{CoreWCF.Security.Tokens.SecurityContextSecurityToken}'
  definition: System.Collections.ObjectModel.Collection`1
  name: Collection<SecurityContextSecurityToken>
  nameWithType: Collection<SecurityContextSecurityToken>
  fullName: System.Collections.ObjectModel.Collection<CoreWCF.Security.Tokens.SecurityContextSecurityToken>
  nameWithType.vb: Collection(Of SecurityContextSecurityToken)
  fullName.vb: System.Collections.ObjectModel.Collection(Of CoreWCF.Security.Tokens.SecurityContextSecurityToken)
  name.vb: Collection(Of SecurityContextSecurityToken)
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    name: SecurityContextSecurityToken
    nameWithType: SecurityContextSecurityToken
    fullName: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    name: SecurityContextSecurityToken
    nameWithType: SecurityContextSecurityToken
    fullName: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.Collection`1
  isExternal: true
  name: Collection<>
  nameWithType: Collection<>
  fullName: System.Collections.ObjectModel.Collection<>
  nameWithType.vb: Collection(Of )
  fullName.vb: System.Collections.ObjectModel.Collection(Of )
  name.vb: Collection(Of )
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: System.Collections.ObjectModel.Collection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.UpdateContextCachingTime*
  commentId: Overload:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.UpdateContextCachingTime
  isExternal: true
  name: UpdateContextCachingTime
  nameWithType: SecurityContextSecurityTokenResolver.UpdateContextCachingTime
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.UpdateContextCachingTime
- uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.UpdateContextCachingTime(CoreWCF.Security.Tokens.SecurityContextSecurityToken,System.DateTime)
  commentId: M:CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.UpdateContextCachingTime(CoreWCF.Security.Tokens.SecurityContextSecurityToken,System.DateTime)
  parent: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache
  isExternal: true
  name: UpdateContextCachingTime(SecurityContextSecurityToken, DateTime)
  nameWithType: ISecurityContextSecurityTokenCache.UpdateContextCachingTime(SecurityContextSecurityToken, DateTime)
  fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.UpdateContextCachingTime(CoreWCF.Security.Tokens.SecurityContextSecurityToken, System.DateTime)
  spec.csharp:
  - uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.UpdateContextCachingTime(CoreWCF.Security.Tokens.SecurityContextSecurityToken,System.DateTime)
    name: UpdateContextCachingTime
    nameWithType: ISecurityContextSecurityTokenCache.UpdateContextCachingTime
    fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.UpdateContextCachingTime
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    name: SecurityContextSecurityToken
    nameWithType: SecurityContextSecurityToken
    fullName: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.UpdateContextCachingTime(CoreWCF.Security.Tokens.SecurityContextSecurityToken,System.DateTime)
    name: UpdateContextCachingTime
    nameWithType: ISecurityContextSecurityTokenCache.UpdateContextCachingTime
    fullName: CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.UpdateContextCachingTime
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    name: SecurityContextSecurityToken
    nameWithType: SecurityContextSecurityToken
    fullName: CoreWCF.Security.Tokens.SecurityContextSecurityToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.DateTime
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: TryResolveTokenCore(SecurityKeyIdentifierClause, SecurityToken)
  nameWithType: SecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause, SecurityToken)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, CoreWCF.IdentityModel.Tokens.SecurityToken)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
    name: TryResolveTokenCore
    nameWithType: SecurityTokenResolver.TryResolveTokenCore
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityToken@)
    name: TryResolveTokenCore
    nameWithType: SecurityTokenResolver.TryResolveTokenCore
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore*
  commentId: Overload:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore
  isExternal: true
  name: TryResolveTokenCore
  nameWithType: SecurityContextSecurityTokenResolver.TryResolveTokenCore
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveTokenCore
- uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
  commentId: T:CoreWCF.IdentityModel.SecurityKeyIdentifierClause
  parent: CoreWCF.IdentityModel
  isExternal: true
  name: SecurityKeyIdentifierClause
  nameWithType: SecurityKeyIdentifierClause
  fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
- uid: CoreWCF.IdentityModel.Tokens.SecurityToken
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityToken
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityToken
  nameWithType: SecurityToken
  fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
- uid: CoreWCF.IdentityModel
  commentId: N:CoreWCF.IdentityModel
  isExternal: true
  name: CoreWCF.IdentityModel
  nameWithType: CoreWCF.IdentityModel
  fullName: CoreWCF.IdentityModel
- uid: CoreWCF.IdentityModel.Tokens
  commentId: N:CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: CoreWCF.IdentityModel.Tokens
  nameWithType: CoreWCF.IdentityModel.Tokens
  fullName: CoreWCF.IdentityModel.Tokens
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, SecurityKey)
  nameWithType: SecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, SecurityKey)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause, CoreWCF.IdentityModel.Tokens.SecurityKey)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
    name: TryResolveSecurityKeyCore
    nameWithType: SecurityTokenResolver.TryResolveSecurityKeyCore
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKey
    name: SecurityKey
    nameWithType: SecurityKey
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKey
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore(CoreWCF.IdentityModel.SecurityKeyIdentifierClause,CoreWCF.IdentityModel.Tokens.SecurityKey@)
    name: TryResolveSecurityKeyCore
    nameWithType: SecurityTokenResolver.TryResolveSecurityKeyCore
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKeyCore
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    name: SecurityKeyIdentifierClause
    nameWithType: SecurityKeyIdentifierClause
    fullName: CoreWCF.IdentityModel.SecurityKeyIdentifierClause
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKey
    name: SecurityKey
    nameWithType: SecurityKey
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKey
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore*
  commentId: Overload:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore
  isExternal: true
  name: TryResolveSecurityKeyCore
  nameWithType: SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.TryResolveSecurityKeyCore
- uid: CoreWCF.IdentityModel.Tokens.SecurityKey
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityKey
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityKey
  nameWithType: SecurityKey
  fullName: CoreWCF.IdentityModel.Tokens.SecurityKey
- uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  commentId: M:CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
  parent: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver
  isExternal: true
  name: TryResolveTokenCore(SecurityKeyIdentifier, SecurityToken)
  nameWithType: SecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier, SecurityToken)
  fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier, CoreWCF.IdentityModel.Tokens.SecurityToken)
  spec.csharp:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
    name: TryResolveTokenCore
    nameWithType: SecurityTokenResolver.TryResolveTokenCore
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    name: SecurityKeyIdentifier
    nameWithType: SecurityKeyIdentifier
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore(CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier,CoreWCF.IdentityModel.Tokens.SecurityToken@)
    name: TryResolveTokenCore
    nameWithType: SecurityTokenResolver.TryResolveTokenCore
    fullName: CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.TryResolveTokenCore
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    name: SecurityKeyIdentifier
    nameWithType: SecurityKeyIdentifier
    fullName: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoreWCF.IdentityModel.Tokens.SecurityToken
    name: SecurityToken
    nameWithType: SecurityToken
    fullName: CoreWCF.IdentityModel.Tokens.SecurityToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
  commentId: T:CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
  parent: CoreWCF.IdentityModel.Tokens
  isExternal: true
  name: SecurityKeyIdentifier
  nameWithType: SecurityKeyIdentifier
  fullName: CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity*
  commentId: Overload:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity
  isExternal: true
  name: SecurityContextTokenCacheCapacity
  nameWithType: SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.SecurityContextTokenCacheCapacity
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.ClockSkew*
  commentId: Overload:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.ClockSkew
  isExternal: true
  name: ClockSkew
  nameWithType: SecurityContextSecurityTokenResolver.ClockSkew
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.ClockSkew
- uid: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull*
  commentId: Overload:CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull
  isExternal: true
  name: RemoveOldestTokensOnCacheFull
  nameWithType: SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull
  fullName: CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.RemoveOldestTokensOnCacheFull
