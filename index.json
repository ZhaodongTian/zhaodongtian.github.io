{
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "api-corewcf/CoreWCF.ActionNotSupportedException.html": {
    "href": "api-corewcf/CoreWCF.ActionNotSupportedException.html",
    "title": "Class ActionNotSupportedException",
    "keywords": "Class ActionNotSupportedException This exception is typically thrown on the client when the action related to the operation invoked does not match any action of operations in the server. Inheritance Object CommunicationException ActionNotSupportedException Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class ActionNotSupportedException : CommunicationException Remarks The (partial) match failure on the service creates a wsa:ActionNotSupported fault on the wire that is turned into a <xref:CoreWCF.ActionNotSupportedException> on the client. This exception derives from <xref:CoreWCF.CommunicationException> that represents a class of recoverable errors that may be thrown during communication between endpoints and that robust Windows Communication Foundation (WCF) client and service applications are expected to handle. To prevent a more generic handler for <xref:CoreWCF.CommunicationException> from catching the more specific <xref:CoreWCF.ActionNotSupportedException>, catch this exception prior to handling <xref:CoreWCF.CommunicationException>. Constructors ActionNotSupportedException() Declaration public ActionNotSupportedException() ActionNotSupportedException(String) Declaration public ActionNotSupportedException(string message) Parameters Type Name Description String message ActionNotSupportedException(String, Exception) Declaration public ActionNotSupportedException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException"
  },
  "api-corewcf/CoreWCF.AddressAlreadyInUseException.html": {
    "href": "api-corewcf/CoreWCF.AddressAlreadyInUseException.html",
    "title": "Class AddressAlreadyInUseException",
    "keywords": "Class AddressAlreadyInUseException The exception that is thrown when an address is unavailable because it is already in use. Inheritance Object CommunicationException AddressAlreadyInUseException Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class AddressAlreadyInUseException : CommunicationException Remarks This exception derives from <xref:CoreWCF.CommunicationException> that represents a class of recoverable errors that may be thrown during communication between endpoints and that robust Windows Communication Foundation (WCF) client and service applications are expected to handle. To prevent a handler for <xref:CoreWCF.CommunicationException> from catching the more specific <xref:CoreWCF.AddressAlreadyInUseException>, catch this exception prior to handling <xref:CoreWCF.CommunicationException>. Constructors AddressAlreadyInUseException() Declaration public AddressAlreadyInUseException() AddressAlreadyInUseException(SerializationInfo, StreamingContext) Declaration protected AddressAlreadyInUseException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context AddressAlreadyInUseException(String) Declaration public AddressAlreadyInUseException(string message) Parameters Type Name Description String message AddressAlreadyInUseException(String, Exception) Declaration public AddressAlreadyInUseException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException"
  },
  "api-corewcf/CoreWCF.AddressFilterMode.html": {
    "href": "api-corewcf/CoreWCF.AddressFilterMode.html",
    "title": "Class AddressFilterMode",
    "keywords": "Class AddressFilterMode Specifies the type of match semantics used by the dispatcher to route incoming messages to the correct endpoint. Inheritance Object AddressFilterMode Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class AddressFilterMode : Enum Remarks The value of the AddressFilterMode enumeration is set on the <xref:CoreWCF.ServiceBehaviorAttribute.AddressFilterMode%2A?displayProperty=nameWithType> property. The longest prefix match criterion specified by Prefix requires that the destination address be matched by the largest number of leading address bits in the filter. The default value is Exact. Fields Any Declaration public const AddressFilterMode Any Field Value Type Description AddressFilterMode Exact Declaration public const AddressFilterMode Exact Field Value Type Description AddressFilterMode Prefix Declaration public const AddressFilterMode Prefix Field Value Type Description AddressFilterMode value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.AuthorizeRoleAttribute.html": {
    "href": "api-corewcf/CoreWCF.AuthorizeRoleAttribute.html",
    "title": "Class AuthorizeRoleAttribute",
    "keywords": "Class AuthorizeRoleAttribute Inheritance Object AuthorizeRoleAttribute Implements IAuthorizeOperation Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class AuthorizeRoleAttribute : Attribute, IAuthorizeOperation Constructors AuthorizeRoleAttribute(String[]) Declaration public AuthorizeRoleAttribute(params string[] allowedRoles) Parameters Type Name Description String [] allowedRoles Methods BuildClaim(OperationDescription, DispatchOperation) Declaration public void BuildClaim(OperationDescription operationDescription, DispatchOperation dispatchOperation) Parameters Type Name Description OperationDescription operationDescription DispatchOperation dispatchOperation Implements IAuthorizeOperation"
  },
  "api-corewcf/CoreWCF.BasicHttpBinding.html": {
    "href": "api-corewcf/CoreWCF.BasicHttpBinding.html",
    "title": "Class BasicHttpBinding",
    "keywords": "Class BasicHttpBinding Represents a binding that a Windows Communication Foundation (WCF) service can use to configure and expose endpoints that are able to communicate with ASMX-based Web services and clients and other services that conform to the WS-I Basic Profile 1.1. Inheritance Object Binding HttpBindingBase BasicHttpBinding Implements IDefaultCommunicationTimeouts Inherited Members HttpBindingBase.MaxReceivedMessageSize HttpBindingBase.MaxBufferSize HttpBindingBase.ReaderQuotas HttpBindingBase.Scheme HttpBindingBase.TextEncoding HttpBindingBase.TransferMode Binding.CanBuildServiceDispatcher<TChannel>(BindingParameterCollection) Binding.BuildServiceDispatcher<TChannel>(BindingParameterCollection, IServiceDispatcher) Binding.BuildServiceDispatcher<TChannel>(Uri, BindingParameterCollection, IServiceDispatcher) Binding.BuildServiceDispatcher<TChannel>(Uri, String, BindingParameterCollection, IServiceDispatcher) Binding.GetProperty<T>(BindingParameterCollection) Binding.CloseTimeout Binding.Name Binding.Namespace Binding.OpenTimeout Binding.ReceiveTimeout Binding.MessageVersion Binding.SendTimeout Namespace : CoreWCF Assembly : CoreWCF.Http.dll Syntax public class BasicHttpBinding : HttpBindingBase, IDefaultCommunicationTimeouts Remarks The BasicHttpBinding uses HTTP as the transport for sending SOAP 1.1 messages. A service can use this binding to expose endpoints that conform to WS-I BP 1.1, such as those that ASMX clients access. Similarly, a client can use the BasicHttpBinding to communicate with services exposing endpoints that conform to WS-I BP 1.1, such as ASMX Web services or Windows Communication Foundation (WCF) services configured with the BasicHttpBinding . Security is turned off by default, but can be added setting the BasicHttpSecurityMode to a value other than None in the BasicHttpBinding(BasicHttpSecurityMode) constructor. It uses a \"Text\" message encoding and UTF-8 text encoding by default. Constructors BasicHttpBinding() Initializes a new instance of the BasicHttpBinding class. Declaration public BasicHttpBinding() Remarks The default value of BasicHttpSecurityMode used is None , which specifies that the SOAP message is not secured and the client is not authenticated. BasicHttpBinding(BasicHttpSecurityMode) Initializes a new instance of the BasicHttpBinding class with a specified type of security used by the binding. Declaration public BasicHttpBinding(BasicHttpSecurityMode securityMode) Parameters Type Name Description BasicHttpSecurityMode securityMode The value of BasicHttpSecurityMode that specifies the type of security that is used with the SOAP message and for the client. Remarks The default value of BasicHttpSecurityMode used is None , which specifies that the SOAP message is not secured and the client is not authenticated. Properties MessageEncoding Gets or sets whether MTOM or Text is used to encode SOAP messages. Declaration public WSMessageEncoding MessageEncoding { get; set; } Property Value Type Description WSMessageEncoding The value of WSMessageEncoding that indicates whether MTOM or Text/XML is used to encode SOAP messages. The default value is Text . Security Gets the type of security used with this binding. Declaration public BasicHttpSecurity Security { get; set; } Property Value Type Description BasicHttpSecurity The BasicHttpSecurity that is used with this binding. The default value is None . Remarks By default, the SOAP message is not secured and the client is not authenticated. To use a non-default type of security, use the BasicHttpBinding(BasicHttpSecurityMode) constructor. Methods CreateBindingElements() Creates and returns an ordered collection of binding elements contained in the current binding. Declaration public override BindingElementCollection CreateBindingElements() Returns Type Description BindingElementCollection The BindingElementCollection that contains the ordered stack of binding elements described by the BasicHttpBinding . Overrides Binding.CreateBindingElements() Remarks The order of the binding elements is important. It reflects the order in which the protocol and transport channels are constructed and stacked. This collection of binding elements is a new collection and can be modified and then used to create a CustomBinding . Implements IDefaultCommunicationTimeouts"
  },
  "api-corewcf/CoreWCF.BasicHttpMessageCredentialType.html": {
    "href": "api-corewcf/CoreWCF.BasicHttpMessageCredentialType.html",
    "title": "Class BasicHttpMessageCredentialType",
    "keywords": "Class BasicHttpMessageCredentialType Enumerates credential types the client can authenticate with when security is enabled in the BasicHttpBinding binding. Inheritance Object BasicHttpMessageCredentialType Namespace : CoreWCF Assembly : CoreWCF.Http.dll Syntax public sealed class BasicHttpMessageCredentialType : Enum Remarks If Mode is configured to perform client authentication at the message level, this enumeration controls the client credential type. Both username and X.509 certificate to use must be provisioned through an IEndpointBehavior instance which implements the SecurityCredentialsManager extensibility point; in a common default case this is ClientCredentials . The client credential in the certificate case must be specified using the ClientCertificate property of the ClientCredentials class. The client credential in the username case must be specified using the UserName property of the ClientCredentials class. In addition, when message security mode is used, the client must be provisioned with the service's certificate. The service credential in this case must be specified using the ServiceCertificate property on the class. Fields Certificate Indicates that a client be authenticated using a certificate. Declaration public const BasicHttpMessageCredentialType Certificate Field Value Type Description BasicHttpMessageCredentialType Enumerates credential types the client can authenticate with when security is enabled in the BasicHttpBinding binding. UserName Indicates that the client be authenticated using a username credential. Declaration public const BasicHttpMessageCredentialType UserName Field Value Type Description BasicHttpMessageCredentialType Enumerates credential types the client can authenticate with when security is enabled in the BasicHttpBinding binding."
  },
  "api-corewcf/CoreWCF.BasicHttpMessageSecurity.html": {
    "href": "api-corewcf/CoreWCF.BasicHttpMessageSecurity.html",
    "title": "Class BasicHttpMessageSecurity",
    "keywords": "Class BasicHttpMessageSecurity Configures message-level security settings for BasicHttpBinding . Inheritance Object BasicHttpMessageSecurity Namespace : CoreWCF Assembly : CoreWCF.Http.dll Syntax public sealed class BasicHttpMessageSecurity : Object Constructors BasicHttpMessageSecurity() Initializes a new instance of the BasicHttpMessageSecurity class. Declaration public BasicHttpMessageSecurity() Properties AlgorithmSuite Specifies the algorithm suite to use with BasicHttpMessageSecurity Declaration public SecurityAlgorithmSuite AlgorithmSuite { get; set; } Property Value Type Description SecurityAlgorithmSuite A SecurityAlgorithmSuite . The default value is Basic256 . Remarks The SecurityAlgorithmSuite object that is returned contains numerous properties that specify security algorithms to use in specific conditions. It also describes various security capabilities of the service ClientCredentialType Specifies the type of credential with which the client authenticates. Declaration public BasicHttpMessageCredentialType ClientCredentialType { get; set; } Property Value Type Description BasicHttpMessageCredentialType A member of the BasicHttpMessageCredentialType enumeration. The default value is UserName . Remarks The return value can be one of the following enumeration members: Certificate UserName Methods ShouldSerializeAlgorithmSuite() Declaration public bool ShouldSerializeAlgorithmSuite() Returns Type Description Boolean ShouldSerializeClientCredentialType() Declaration public bool ShouldSerializeClientCredentialType() Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.BasicHttpSecurity.html": {
    "href": "api-corewcf/CoreWCF.BasicHttpSecurity.html",
    "title": "Class BasicHttpSecurity",
    "keywords": "Class BasicHttpSecurity Configures the security settings of a basicHttpBinding binding. Inheritance Object BasicHttpSecurity Namespace : CoreWCF Assembly : CoreWCF.Http.dll Syntax public sealed class BasicHttpSecurity : Object Constructors BasicHttpSecurity() Initializes a new instance of the BasicHttpSecurity class. Declaration public BasicHttpSecurity() Properties Message Gets the message-level security settings for a basicHttpBinding binding. Declaration public BasicHttpMessageSecurity Message { get; set; } Property Value Type Description BasicHttpMessageSecurity A BasicHttpMessageSecurity , which represents the message-level security settings for this binding. Remarks The default security settings are: a ClientCredentialType of UserName ; and an AlgorithmSuite of Basic256 . Mode Gets or sets the security mode for a basicHttpBinding binding. Declaration public BasicHttpSecurityMode Mode { get; set; } Property Value Type Description BasicHttpSecurityMode A value in the BasicHttpSecurityMode enumeration. The default value for this property is None. Remarks The value of this property affects which settings in Transport or Message become effective. Transport Gets the transport-level security settings for a basicHttpBinding binding. Declaration public HttpTransportSecurity Transport { get; set; } Property Value Type Description HttpTransportSecurity The transport-level security settings for a basicHttpBinding binding. Remarks The HttpTransportSecurity object returned by this property contains properties that control authentication parameters for the HTTP transport."
  },
  "api-corewcf/CoreWCF.CallbackBehaviorAttribute.html": {
    "href": "api-corewcf/CoreWCF.CallbackBehaviorAttribute.html",
    "title": "Class CallbackBehaviorAttribute",
    "keywords": "Class CallbackBehaviorAttribute Configures a callback service implementation in a client application. Inheritance Object CallbackBehaviorAttribute Implements IEndpointBehavior Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class CallbackBehaviorAttribute : Attribute, IEndpointBehavior Remarks Use the CallbackBehaviorAttribute attribute to configure or extend the execution behavior of a callback contract implementation in a client application. This attribute performs the same function for the callback class as the ServiceBehaviorAttribute attribute with the exception of instancing behavior and transaction settings. The CallbackBehaviorAttribute must be applied to the class that implements the callback contract. If applied to a non-duplex contract implementation an InvalidOperationException exception is thrown at runtime. Constructors CallbackBehaviorAttribute() Initializes a new instance of the CallbackBehaviorAttribute class. Declaration public CallbackBehaviorAttribute() Remarks The default settings for the CallbackBehaviorAttribute are: The AutomaticSessionShutdown property is true. The ConcurrencyMode is set to Single . The IgnoreExtensionDataObject property is false. IncludeExceptionDetailInFaults is false. UseSynchronizationContext is false. The ValidateMustUnderstand property is true. Properties AutomaticSessionShutdown Specifies whether to automatically close a session when a service closes a duplex session. Declaration public bool AutomaticSessionShutdown { get; set; } Property Value Type Description Boolean true if duplex callback objects automatically close a session when the service closes a duplex session; otherwise, false. The default is true. Remarks By default, when a service closes a duplex session and the callback has finished processing any remaining messages, the callback closes the session. Setting AutomaticSessionShutdown to false prevents the client from automatically closing the session. UseSynchronizationContext Gets or sets a value that specifies whether to use the current synchronization context to choose the thread of execution. Declaration public bool UseSynchronizationContext { get; set; } Property Value Type Description Boolean true if all calls to the service must run on the thread specified by the SynchronizationContext ; otherwise, false. The default value is true. Remarks Use this property to provide the user interface thread affinity that some applications require. For example, a Windows Forms application may be registered as a singleton service object. In this case, all calls into the service must run on the Windows Forms thread. The default case, in which UseSynchronizationContext is set to true, synchronizes all calls to the service to run on the user interface thread. Note that the thread used is the current synchronization thread when DuplexChannelFactory .CreateChannel or DuplexClientBase .CreateChannel is called. In the case of an Windows Forms application, this means that these calls should occur after a call to the Application.Run method. Explicit Interface Implementations IEndpointBehavior.AddBindingParameters(ServiceEndpoint, BindingParameterCollection) Configures the binding elements to support the callback behavior. Declaration void IEndpointBehavior.AddBindingParameters(ServiceEndpoint serviceEndpoint, BindingParameterCollection parameters) Parameters Type Name Description ServiceEndpoint serviceEndpoint The endpoint for the callback object. BindingParameterCollection parameters The collection of binding parameters that are configured. IEndpointBehavior.ApplyClientBehavior(ServiceEndpoint, ClientRuntime) Configures the client runtime to support the callback object. Declaration void IEndpointBehavior.ApplyClientBehavior(ServiceEndpoint serviceEndpoint, ClientRuntime clientRuntime) Parameters Type Name Description ServiceEndpoint serviceEndpoint The endpoint configured by the attribute. ClientRuntime clientRuntime The client run-time object that the attribute configures. IEndpointBehavior.ApplyDispatchBehavior(ServiceEndpoint, EndpointDispatcher) Implementation of the ApplyDispatchBehavior(ServiceEndpoint, EndpointDispatcher) method. This implementation has no effect. Declaration void IEndpointBehavior.ApplyDispatchBehavior(ServiceEndpoint serviceEndpoint, EndpointDispatcher endpointDispatcher) Parameters Type Name Description ServiceEndpoint serviceEndpoint The endpoint to be modified. EndpointDispatcher endpointDispatcher The endpoint dispatcher that the method modifies. IEndpointBehavior.Validate(ServiceEndpoint) Validates the endpoint description prior to building the runtime. Declaration void IEndpointBehavior.Validate(ServiceEndpoint serviceEndpoint) Parameters Type Name Description ServiceEndpoint serviceEndpoint The endpoint to be validated. Implements IEndpointBehavior"
  },
  "api-corewcf/CoreWCF.Channels.AddressHeader.html": {
    "href": "api-corewcf/CoreWCF.Channels.AddressHeader.html",
    "title": "Class AddressHeader",
    "keywords": "Class AddressHeader Represents a header that encapsulates an address information item used to identify or interact with an endpoint. Inheritance Object AddressHeader Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class AddressHeader : Object Remarks An AddressHeader is characterized by a name and namespace and has a value that contains optional information used to identify or interact with an endpoint. The name can be accessed by the Name property and the namespace by the Namespace property. Constructors AddressHeader() Initializes a new instance of the AddressHeader class. Declaration protected AddressHeader() Remarks Use the CreateAddressHeader to create new AddressHeader objects. Properties Name When implemented, gets the name of the address header. Declaration public abstract string Name { get; } Property Value Type Description String The name of the address header. Namespace When implemented, gets the namespace of the address header. Declaration public abstract string Namespace { get; } Property Value Type Description String The namespace of the address header. Methods CreateAddressHeader(String, String, Object) Creates a new instance of the AddressHeader class with a specified value, name and namespace. Declaration public static AddressHeader CreateAddressHeader(string name, string ns, object value) Parameters Type Name Description String name The name of the address header. String ns The namespace of the address header. Object value The information item for the address header. Returns Type Description AddressHeader The AddressHeader with the specified name and ns that contains the information item specified by value. CreateAddressHeader(String, String, Object, XmlObjectSerializer) Creates a new instance of the AddressHeader class with a specified name and namespace that uses a specified formatter to serialize the information item from a specified object. Declaration public static AddressHeader CreateAddressHeader(string name, string ns, object value, XmlObjectSerializer serializer) Parameters Type Name Description String name The name of the address header. String ns The namespace of the address header. Object value The information item for the address header. XmlObjectSerializer serializer The XmlObjectSerializer used to serialize the specified object in the value parameter. Returns Type Description AddressHeader The AddressHeader with the specified name and ns that contains the information item specified by value. Equals(Object) Determines whether the information item in a specified object is equal to the object contained in the current address header. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The Object to compare with the object contained in the current address header. Returns Type Description Boolean true if the information item in a specified obj is equivalent to the information item contained in the current address header; otherwise, false. In particular, returns false if obj is null. Remarks Checks for equivalence of serialized canonical XML between the information items. GetAddressHeaderReader() Returns an XML reader that can serialize the current address header object. Declaration public virtual XmlDictionaryReader GetAddressHeaderReader() Returns Type Description XmlDictionaryReader An instance of XmlDictionaryReader that can serialize the current address header object. GetHashCode() Provides a unique hash code for an address header. Declaration public override int GetHashCode() Returns Type Description Int32 A unique hash code for the current address header. Remarks This is the string-based implementation. GetHashCode is suitable for use in hashing algorithms and data structures like a hash table. GetValue<T>() Deserializes the information item from the current address header to an object of a specified type. Declaration public T GetValue<T>() Returns Type Description T An instance of a class of type T with its fields and properties set to the values supplied by the current address header object. Type Parameters Name Description T A class of type T with its fields and properties set to the values supplied by the current address header object. Remarks When using this overload, you must supply a type for the generic parameter T. The type of the return value is determined by the generic type parameter. Use the GetValue (XmlObjectSerializer) overload if you want to use a customized XML formatter. GetValue<T>(XmlObjectSerializer) Deserializes the information item from the current address header to an object of a specified type that uses a specified formatter to serialize this information. Declaration public T GetValue<T>(XmlObjectSerializer serializer) Parameters Type Name Description XmlObjectSerializer serializer The XmlObjectSerializer used to deserialize the information item from the current address header object. Returns Type Description T An instance of a class of type T with its fields and properties set to the values supplied by the current address header object. Type Parameters Name Description T A class of type T with its fields and properties set to the values supplied by the current address header object. Remarks When using this overload, you must supply a type for the generic parameter T. The type of the return value is determined by the generic type parameter. Use this overload only if you want to use a customized XML formatter; otherwise use the GetValue () overload. OnWriteAddressHeaderContents(XmlDictionaryWriter) When overridden in a derived class, is invoked when the address header contents are written to a stream or file. Declaration protected abstract void OnWriteAddressHeaderContents(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer The XmlDictionaryWriter used to write the address header contents to a stream or file. OnWriteStartAddressHeader(XmlDictionaryWriter) When overridden in a derived class, is invoked when the address header contents are written to a stream or file. Declaration protected virtual void OnWriteStartAddressHeader(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer The XmlDictionaryWriter used to write the address header contents to a stream or file. ToMessageHeader() Wraps the address header as a message header. Declaration public MessageHeader ToMessageHeader() Returns Type Description MessageHeader The MessageHeader that wraps the current address header. WriteAddressHeader(XmlDictionaryWriter) Writes the address header to a stream or file using a specified XmlDictionaryWriter . Declaration public void WriteAddressHeader(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer The XmlDictionaryWriter used to write the address header to a stream or file. Remarks This overload calls the abstract OnWriteAddressHeaderContents(XmlDictionaryWriter method, so users must provide an implementation of that method to use this method. WriteAddressHeader(XmlWriter) Writes the address header to a stream or file using a specified XmlWriter . Declaration public void WriteAddressHeader(XmlWriter writer) Parameters Type Name Description XmlWriter writer The XmlWriter used to write the address header to a stream or file. Remarks This overload wraps XmlWriter as a XmlDictionaryWriter and then the calls the abstract OnWriteAddressHeaderContents(XmlDictionaryWriter) method. Users must provide an implementation for that abstract method to use this overload. WriteAddressHeaderContents(XmlDictionaryWriter) Writes the address header contents to a stream or file. Declaration public void WriteAddressHeaderContents(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer The XmlDictionaryWriter used to write the address header contents to a stream or file. WriteStartAddressHeader(XmlDictionaryWriter) Starts to write the address header contents to a stream or file. Declaration public void WriteStartAddressHeader(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer The XmlDictionaryWriter used to write the address header to a stream or file."
  },
  "api-corewcf/CoreWCF.Channels.AddressHeaderCollection.html": {
    "href": "api-corewcf/CoreWCF.Channels.AddressHeaderCollection.html",
    "title": "Class AddressHeaderCollection",
    "keywords": "Class AddressHeaderCollection Represents a thread-safe, read-only collection of address headers. Inheritance Object AddressHeaderCollection Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public sealed class AddressHeaderCollection : ReadOnlyCollection<AddressHeader> Remarks The AddressHeaderCollection can be initialized with an IEnumerable set of AddressHeader objects and then searched for a header with a specific qualified name using the FindHeader(String,String) method. To find all of the headers with a specific qualified name, use the FindAll(String, String) method. The AddHeadersTo(Message) method is used to add headers to the headers of a specified message. Constructors AddressHeaderCollection() Initializes a new instance of the AddressHeaderCollection class. Declaration public AddressHeaderCollection() AddressHeaderCollection(IEnumerable<AddressHeader>) Initializes a new instance of the AddressHeaderCollection class from an enumerable set of address headers. Declaration public AddressHeaderCollection(IEnumerable<AddressHeader> addressHeaders) Parameters Type Name Description IEnumerable < AddressHeader > addressHeaders The IEnumerable set of AddressHeader objects used to initialize the collection. Methods AddHeadersTo(Message) Adds the headers in the collection to the headers of a specified message. Declaration public void AddHeadersTo(Message message) Parameters Type Name Description Message message The Message to which the headers are added. Remarks This inserts the headers from the current collection into the MessageHeaders associated with the Message and accessible through the Headers property. FindAll(String, String) Finds all the address headers in the collection with the specified name and namespace. Declaration public AddressHeader[] FindAll(string name, string ns) Parameters Type Name Description String name The name of the address header to be found. String ns The namespace of the address header to be found. Returns Type Description AddressHeader [] The Array of type AddressHeader that contains all the headers in the collection with the specified name and namespace. FindHeader(String, String) Finds the first address header in the collection with a specified name and namespace. Declaration public AddressHeader FindHeader(string name, string ns) Parameters Type Name Description String name The name of the address header to be found. String ns The namespace of the address header to be found. Returns Type Description AddressHeader The AddressHeader in the collection with the specified name and namespace. Remarks If you need to find all the address headers in the collection with the specified name and namespace, use the FindAll(String, String) method instead. ArgumentException is not the ideal exception type when there is more than one header in the collection. Callers of this method should take care to handle this exception when the collection contains multiple entries with the same name and namespace."
  },
  "api-corewcf/CoreWCF.Channels.AddressingHeader.html": {
    "href": "api-corewcf/CoreWCF.Channels.AddressingHeader.html",
    "title": "Class AddressingHeader",
    "keywords": "Class AddressingHeader Inheritance Object MessageHeaderInfo MessageHeader DictionaryHeader AddressingHeader ToHeader Inherited Members DictionaryHeader.OnWriteStartHeader(XmlDictionaryWriter, MessageVersion) DictionaryHeader.Name DictionaryHeader.Namespace DictionaryHeader.DictionaryName MessageHeader.IsMessageVersionSupported(MessageVersion) MessageHeader.ToString() MessageHeader.WriteHeader(XmlWriter, MessageVersion) MessageHeader.WriteHeader(XmlDictionaryWriter, MessageVersion) MessageHeader.WriteStartHeader(XmlDictionaryWriter, MessageVersion) MessageHeader.WriteHeaderContents(XmlDictionaryWriter, MessageVersion) MessageHeader.OnWriteHeaderContents(XmlDictionaryWriter, MessageVersion) MessageHeader.WriteHeaderAttributes(XmlDictionaryWriter, MessageVersion) MessageHeader.CreateHeader(String, String, Object) MessageHeader.CreateHeader(String, String, Object, Boolean) MessageHeader.CreateHeader(String, String, Object, Boolean, String) MessageHeader.CreateHeader(String, String, Object, Boolean, String, Boolean) MessageHeader.CreateHeader(String, String, Object, XmlObjectSerializer) MessageHeader.CreateHeader(String, String, Object, XmlObjectSerializer, Boolean) MessageHeader.CreateHeader(String, String, Object, XmlObjectSerializer, Boolean, String) MessageHeader.CreateHeader(String, String, Object, XmlObjectSerializer, Boolean, String, Boolean) MessageHeader.Actor MessageHeader.IsReferenceParameter MessageHeader.MustUnderstand MessageHeader.Relay Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class AddressingHeader : DictionaryHeader Constructors AddressingHeader(AddressingVersion) Declaration protected AddressingHeader(AddressingVersion version) Parameters Type Name Description AddressingVersion version Properties DictionaryNamespace Declaration public override XmlDictionaryString DictionaryNamespace { get; } Property Value Type Description XmlDictionaryString Overrides DictionaryHeader.DictionaryNamespace"
  },
  "api-corewcf/CoreWCF.Channels.AddressingVersion.html": {
    "href": "api-corewcf/CoreWCF.Channels.AddressingVersion.html",
    "title": "Class AddressingVersion",
    "keywords": "Class AddressingVersion The WS-Addressing version associated with a SOAP message or understood by an endpoint. Inheritance Object AddressingVersion Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public sealed class AddressingVersion : Object Remarks There are currently two version of WS-Addressing: WS-Addressing August 2004 and WS-Addressing 1.0. These versions can be retrieved using the WSAddressingAugust2004 and WSAddressing10 properties, respectively. There is also an addressing version available that is not associated with WS-Addressing, which is retrieved using the None property. This value indicates that no version of WS-Addressing is used. This is primarily for transports that do not pass SOAP envelopes on the wire and therefore have no use for WS-Addressing. The addressing version is part of the message version: specifically AddressingVersion provides the return type for the Addressing property. The MessageVersion also contains the SOAP envelope version in addition to the addressing version information. The EnvelopeVersion provides the return type for the Envelope property. Properties AnonymousUri Declaration public Uri AnonymousUri { get; } Property Value Type Description Uri FaultAction Declaration public string FaultAction { get; } Property Value Type Description String Namespace Declaration public string Namespace { get; } Property Value Type Description String None Gets the addressing version that is not associated with WS-Addressing version. Declaration public static AddressingVersion None { get; } Property Value Type Description AddressingVersion The AddressingVersion that is not associated WS-Addressing version. Remarks The addressing version is part of the message version: specifically AddressingVersion provides the return type for the Addressing property. The MessageVersion also contains the SOAP envelope version in addition to the addressing version information. The EnvelopeVersion provides the return type for the Envelope property. NoneUri Declaration public Uri NoneUri { get; } Property Value Type Description Uri WSAddressing10 Gets an identifier for the address version associated with WS-Addressing 1.0. Declaration public static AddressingVersion WSAddressing10 { get; } Property Value Type Description AddressingVersion A singleton instance that identifies the AddressingVersion that is associated with WS-Addressing 1.0. Remarks The addressing version is part of the message version: specifically AddressingVersion provides the return type for the Addressing property. The MessageVersion also contains the SOAP envelope version in addition to the addressing version information. The EnvelopeVersion provides the return type for the Envelope property. WSAddressingAugust2004 Gets the version of WS-Addressing that is associated with WS-Addressing August 2004. Declaration public static AddressingVersion WSAddressingAugust2004 { get; } Property Value Type Description AddressingVersion A singleton instance that identifies the AddressingVersion that is associated with WS-Addressing August 2004. Remarks The addressing version is part of the message version: specifically AddressingVersion provides the return type for the Addressing property. The MessageVersion also contains the SOAP envelope version in addition to the addressing version information. The EnvelopeVersion provides the return type for the Envelope property. Methods ToString() Returns a string representation of the current addressing version. Declaration public override string ToString() Returns Type Description String A string that represents the current addressing version."
  },
  "api-corewcf/CoreWCF.Channels.BaseUriWithWildcard.html": {
    "href": "api-corewcf/CoreWCF.Channels.BaseUriWithWildcard.html",
    "title": "Class BaseUriWithWildcard",
    "keywords": "Class BaseUriWithWildcard Inheritance Object BaseUriWithWildcard Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public sealed class BaseUriWithWildcard : Object Constructors BaseUriWithWildcard(Uri, HostNameComparisonMode) Declaration public BaseUriWithWildcard(Uri baseAddress, HostNameComparisonMode hostNameComparisonMode) Parameters Type Name Description Uri baseAddress HostNameComparisonMode hostNameComparisonMode Properties BaseAddress Declaration public Uri BaseAddress { get; } Property Value Type Description Uri HostNameComparisonMode Declaration public HostNameComparisonMode HostNameComparisonMode { get; } Property Value Type Description HostNameComparisonMode Methods Equals(Object) Declaration public override bool Equals(object o) Parameters Type Name Description Object o Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api-corewcf/CoreWCF.Channels.BasicHttpBindingDefaults.html": {
    "href": "api-corewcf/CoreWCF.Channels.BasicHttpBindingDefaults.html",
    "title": "Class BasicHttpBindingDefaults",
    "keywords": "Class BasicHttpBindingDefaults Inheritance Object BasicHttpBindingDefaults Namespace : CoreWCF.Channels Assembly : CoreWCF.Http.dll Syntax public static class BasicHttpBindingDefaults : Object Fields MessageEncoding Declaration public const WSMessageEncoding MessageEncoding Field Value Type Description WSMessageEncoding"
  },
  "api-corewcf/CoreWCF.Channels.BasicHttpSecurityMode.html": {
    "href": "api-corewcf/CoreWCF.Channels.BasicHttpSecurityMode.html",
    "title": "Class BasicHttpSecurityMode",
    "keywords": "Class BasicHttpSecurityMode Enum BasicHttpSecurityMode Inheritance Object BasicHttpSecurityMode Namespace : CoreWCF.Channels Assembly : CoreWCF.Http.dll Syntax public sealed class BasicHttpSecurityMode : Enum Fields Message The message Declaration public const BasicHttpSecurityMode Message Field Value Type Description BasicHttpSecurityMode None No security is applied during transfer. (Default) Declaration public const BasicHttpSecurityMode None Field Value Type Description BasicHttpSecurityMode Transport Transfer security is provided using HTTPS. The server is authenticated via its SSL certificate. The client authentication is determined by ClientCredentialType. Declaration public const BasicHttpSecurityMode Transport Field Value Type Description BasicHttpSecurityMode TransportCredentialOnly TransportCredentialOnly will send the credentials in plain text and unencrypted and is only recommended for testing or when the transfer security is being provided by other means (such as IPSec). Declaration public const BasicHttpSecurityMode TransportCredentialOnly Field Value Type Description BasicHttpSecurityMode TransportWithMessageCredential Transfer security is provided using HTTPS. The server is authenticated via its SSL certificate. The client authentication is included directly in the message. Declaration public const BasicHttpSecurityMode TransportWithMessageCredential Field Value Type Description BasicHttpSecurityMode Remarks See https://docs.microsoft.com/en-us/dotnet/framework/wcf/samples/ws-transport-with-message-credential for more details. value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.Channels.BinaryMessageEncodingBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Channels.BinaryMessageEncodingBindingElement.html",
    "title": "Class BinaryMessageEncodingBindingElement",
    "keywords": "Class BinaryMessageEncodingBindingElement The binding element that specifies the .NET Binary Format for XML used to encode messages. Inheritance Object BindingElement MessageEncodingBindingElement BinaryMessageEncodingBindingElement Implements IWsdlExportExtension IPolicyExportExtension Inherited Members MessageEncodingBindingElement.CheckEncodingVersion(EnvelopeVersion) BindingElement.CanBuildServiceDispatcher<TChannel>(BindingContext) Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public sealed class BinaryMessageEncodingBindingElement : MessageEncodingBindingElement, IWsdlExportExtension, IPolicyExportExtension Remarks Encoding is the process of transforming a message into a sequence of bytes. Decoding is the reverse process. Windows Communication Foundation (WCF) includes three types of encoding for SOAP messages: Text, Binary and Message Transmission Optimization Mechanism (MTOM). BinaryMessageEncodingBindingElement is the binding element that specifies that the .NET Binary Format for XML should be used for encoding messages. It has options to specify the character encoding and the SOAP and WS-Addressing version to be used. Binary encoding is the most efficient but least interoperable of the encoding options. For more information about the binding element that specifies messages are encoded using a textual representation of XML, see TextMessageEncodingBindingElement . For more information about the binding element that specifies messages are encoded using the MTOM message encoding, see MtomMessageEncodingBindingElement . To implement a custom message encoder, use the MessageEncodingBindingElement class. Constructors BinaryMessageEncodingBindingElement() Initializes a new instance of the BinaryMessageEncodingBindingElement class. Declaration public BinaryMessageEncodingBindingElement() Properties CompressionFormat Gets or sets the compression format for the binding element. Declaration public CompressionFormat CompressionFormat { get; set; } Property Value Type Description CompressionFormat The compression format for the binding element. MaxReadPoolSize Gets or sets the maximum number of XML readers that are allocated to a pool and are ready for use to process incoming messages. Declaration public int MaxReadPoolSize { get; set; } Property Value Type Description Int32 The maximum number of readers to be kept in the pool. The default value is 64 readers. Remarks Increasing this number increases memory consumption, but prepares the encoder to deal with sudden bursts of incoming messages because it is able to use readers from the pool are already created instead of having to create new ones. MaxSessionSize Gets or sets the maximum amount of memory available within a session for optimizing transmission procedures. Declaration public int MaxSessionSize { get; set; } Property Value Type Description Int32 The maximum size, in bytes, of a session. The default value is 2048 bytes. Remarks The .NET Binary Format for XML can optimize the transmission of strings when they are used in multiple messages within a session. Once a string is sent in a message, additional messages that contain that string can refer to it using only the string's ID. This requires that the strings and their IDs be stored in memory. This allows the ID to be retransmitted in subsequent messages instead of the entire string. This lookup increases the efficiency of message transmission when using the binary format. The MaxSessionSize gets and sets the maximum amount of memory that is allocated to store these strings. MaxWritePoolSize Gets or sets the maximum number of XML writers that are allocated to a pool and are ready for use to process outgoing messages. Declaration public int MaxWritePoolSize { get; set; } Property Value Type Description Int32 The maximum number of writers to be kept in the pool. The default value is 16 writers. Remarks Increasing this number increases memory consumption, but prepares the encoder to deal with sudden bursts of outgoing messages because it is able to use writers from the pool that are already created instead of having to create new ones. MessageVersion Gets or sets the SOAP message and WS-Addressing versions that are used or expected. Declaration public override MessageVersion MessageVersion { get; set; } Property Value Type Description MessageVersion The MessageVersion that is used or expected. Overrides MessageEncodingBindingElement.MessageVersion Remarks Specifies the versions of SOAP and WS-Addressing associated with a message and its exchange. ReaderQuotas Gets or sets constraints on the complexity of XML messages that can be processed by endpoints configured with this binding element. Declaration public XmlDictionaryReaderQuotas ReaderQuotas { get; set; } Property Value Type Description XmlDictionaryReaderQuotas The XmlDictionaryReaderQuotas that specifies the complexity constraints on SOAP messages exchanged. The default values for these constraints are provided in the following remarks section. Remarks The complexity constraints protect against a class of denial of service (DOS) attacks that attempt to use message complexity to tie up endpoint processing resources. The properties that express these constraints and their default values are as follows: MaxDepth = 32 MaxStringContentLength = 8192 MaxArrayLength = 16384 MaxBytesPerRead = 4096 MaxNameTableCharCount = 16384 This property has a public setter since .NET Framework 4.0. Methods BuildServiceDispatcher<TChannel>(BindingContext, IServiceDispatcher) Declaration public override IServiceDispatcher BuildServiceDispatcher<TChannel>(BindingContext context, IServiceDispatcher innerDispatcher) where TChannel : class, IChannel Parameters Type Name Description BindingContext context IServiceDispatcher innerDispatcher Returns Type Description IServiceDispatcher Type Parameters Name Description TChannel Overrides BindingElement.BuildServiceDispatcher<TChannel>(BindingContext, IServiceDispatcher) Clone() Creates a new BinaryMessageEncodingBindingElement object initialized from the current one. Declaration public override BindingElement Clone() Returns Type Description BindingElement A BinaryMessageEncodingBindingElement object with property values equal to those of the current element. Overrides BindingElement.Clone() Remarks This creates a complete copy of the current binding element object tree, also called a deep clone. A deep clone of an object creates a copy of the object and a copy of everything directly or indirectly referenced by that object. (This can also be described as copying the entire object graph.) Returning a deep clone enables the runtime to support the case in which multiple custom bindings share a custom binding element. If a deep clone is not returned, the runtime behavior is undefined. A shallow clone of an object, by contrast, is a copy of the object only. If the object contains references to other objects, the shallow copy does not create copies of the referred objects; instead, it copies only the references to the original objects. CreateMessageEncoderFactory() Creates a factory for binary message encoders that employ the SOAP and WS-Addressing versions and the character encoding specified by the current encoding binding element. Declaration public override MessageEncoderFactory CreateMessageEncoderFactory() Returns Type Description MessageEncoderFactory The MessageEncoderFactory that this binding element creates. Overrides MessageEncodingBindingElement.CreateMessageEncoderFactory() Remarks The MessageEncoder objects that the factory produces can read and write messages using the binary message encoding. GetProperty<T>(BindingContext) Returns a typed object requested, if present, from the appropriate layer in the binding element stack. Declaration public override T GetProperty<T>(BindingContext context) where T : class Parameters Type Name Description BindingContext context The BindingContext for the binding element. Returns Type Description T The typed object T requested if it is present or null if it is not. Type Parameters Name Description T The typed object for which the method is querying. Overrides MessageEncodingBindingElement.GetProperty<T>(BindingContext) Remarks Use this to request a typed object for setting properties or getting status from the appropriate layer in the binding element stack. If a layer supports returning the requested object, it returns it. If not, it delegates the call down to the next layer in the stack. If it gets to the bottom of the stack and no binding element layer supported the requested object, then the method returns null. IsMatch(BindingElement) Declaration protected override bool IsMatch(BindingElement b) Parameters Type Name Description BindingElement b Returns Type Description Boolean Overrides MessageEncodingBindingElement.IsMatch(BindingElement) ShouldSerializeMessageVersion() Declaration public bool ShouldSerializeMessageVersion() Returns Type Description Boolean ShouldSerializeReaderQuotas() Declaration public bool ShouldSerializeReaderQuotas() Returns Type Description Boolean Explicit Interface Implementations IPolicyExportExtension.ExportPolicy(MetadataExporter, PolicyConversionContext) Declaration void IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext policyContext) Parameters Type Name Description MetadataExporter exporter PolicyConversionContext policyContext IWsdlExportExtension.ExportContract(WsdlExporter, WsdlContractConversionContext) Declaration void IWsdlExportExtension.ExportContract(WsdlExporter exporter, WsdlContractConversionContext context) Parameters Type Name Description WsdlExporter exporter WsdlContractConversionContext context IWsdlExportExtension.ExportEndpoint(WsdlExporter, WsdlEndpointConversionContext) Declaration void IWsdlExportExtension.ExportEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext context) Parameters Type Name Description WsdlExporter exporter WsdlEndpointConversionContext context Implements IWsdlExportExtension IPolicyExportExtension"
  },
  "api-corewcf/CoreWCF.Channels.Binding.html": {
    "href": "api-corewcf/CoreWCF.Channels.Binding.html",
    "title": "Class Binding",
    "keywords": "Class Binding Contains the binding elements that specify the protocols, transports, and message encoders used for communication between clients and services Inheritance Object Binding CustomBinding HttpBindingBase NetTcpBinding WebHttpBinding WSHttpBindingBase Implements IDefaultCommunicationTimeouts Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class Binding : Object, IDefaultCommunicationTimeouts Remarks Represents a collection of binding elements, each of which describes an aspect of how an endpoint communicates with other endpoints and that are built, consistently, into a channel factory on the client and into a channel listener on the service. A binding contains a collection of binding elements that correspond to protocol channels, transport channels, and message encoders. There can be any number of binding elements for protocol channels but one and only one binding element for each the transport and message encoder. There are commonly six layers of binding elements in a binding. Only the transport and encoding binding elements at the bottom of the stack are required. Because an encoding is required for each binding, if an encoding is not specified, Windows Communication Foundation (WCF) adds a default encoding for you. The default is Text/XML for the HTTP and HTTPS transports, and Binary for other transports. The following table summarizes the options for each layer. Layer Options Required Transaction Flow **TransactionFlowBindingElement** No Reliability **ReliableSessionBindingElement** No Security Symmetric, Asymmetric, Transport-Level No Shape Change **CompositeDuplexBindingElement** No Transport Upgrades SSL stream, Windows stream, Peer Resolver No Encoding Text, Binary, MTOM, Custom Yes Transport TCP, Named Pipes, HTTP, HTTPS, MSMQ, Custom Yes Each binding element provides the specification for building a channel factory on the client and a channel listener on the service. When the channel factory stack is constructed, for example, there is one channel factory in the stack for each binding element in the binding. The same sort of mapping applies to the channel listeners in the stack on the service. Consistency on the client and service is critical for establishing the channel-based connection between these endpoints. Each factory and listener, in turn, processes the sending and accepting of the corresponding channels in the channel stack that connects them, and these channels can then send and receive the messages used to communicate. Each instance of a Binding has a Name and Namespace that together uniquely identify it in the metadata of the service. If no name or namespace is specified, WCF adds a default values for you. The default name is null and the default namespace is http://tempuri.org/ . This user name for the binding is distinct from the specification of the protocol name, which is specified by the Scheme property. If you want to add more HTTP bindings, for example, you can name them whatever you want and set all of their schemes to 'http'. There is no inherent application or machine dispatch based on the Scheme. So you avoid the common problem of being unable to register additional handlers for well-known protocols. You can also easily work with multiple versions of a binding side-by-side by giving each version a different name. The Binding class implements the IDefaultCommunicationTimeouts interface to mitigate Denial of Service (DOS) attacks that rely on tying up resources for extended intervals of time. The implementation specifies the communication timeouts values for opening and closing connections and for the reading and writing operations associated with receiving and sending messages. The properties used to get and set these timeouts and their default values operations are summarized in the following table. **Timeout Property** **Default Value** [OpenTimeout](xref:CoreWCF.Channels.Binding) 1 minute [CloseTimeout](xref:CoreWCF.Channels.Binding) 1 minute [SendTimeout](xref:CoreWCF.Channels.Binding) 1 minute [ReceiveTimeout](xref:CoreWCF.Channels.Binding) 10 minutes When you create a binding by inheriting from , you must override [CreateBindingElements](xref:CoreWCF.Channels.Binding). In addition, you can define your own binding elements and insert them between any of the defined layers in the preceding table. For more information, see the CustomBinding class. Constructors Binding() Initializes a new instance of the Binding class. Declaration protected Binding() Remarks The default name is null and the default namespace is http:\\tempuri.org Binding(String, String) Initializes a new instance of the Binding class from a specified binding of the service. Declaration protected Binding(string name, string ns) Parameters Type Name Description String name The Name of the binding. String ns The Namespace of the binding. Remarks The Name and Namespace together uniquely identify an instance of a Binding in the metadata of the service. Exceptions Type Condition System.Argumentexception name is null or an empty string System.Argumentnullexception ns is null Properties CloseTimeout Gets or sets the interval of time provided for a connection to close before the transport raises an exception. Declaration public TimeSpan CloseTimeout { get; set; } Property Value Type Description TimeSpan The TimeSpan that specifies how long the close operation has to complete before timing out. The default value is 1 minute. Remarks The value of this property is used by the channels and listeners produced by the factories of the binding. MessageVersion Gets the message version used by clients and services configured with the binding Declaration public MessageVersion MessageVersion { get; } Property Value Type Description MessageVersion The MessageVersion used by clients and services configured with the binding Name Gets or sets the name of the binding Declaration public string Name { get; set; } Property Value Type Description String The name of the binding. The default name is null. Remarks Each instance of a Binding has a Name and Namespace that together uniquely identify the user name for the binding in the metadata of the service. This user name for the binding is distinct from the specification of the protocol name, which is specified by the Scheme property. If you want to add more HTTP bindings, for example, you can name them whatever you want and set all of their schemes to 'http'. There is no inherent application or machine dispatch based on the Scheme . So you avoid the common problem of being unable to register additional handlers for well-known protocols. You can also easily work with multiple versions of a binding side-by-side by giving each version a different name. Namespace Gets or sets the XML namespace of the binding Declaration public string Namespace { get; set; } Property Value Type Description String The XML namespace of the binding. The default value is \"http:\\tempuri.org\" Remarks Each instance of a Binding has a Name and Namespace that together uniquely identify the user name for the binding in the metadata of the service. This user name for the binding is distinct from the specification of the protocol name, which is specified by the Scheme property. If you want to add more HTTP bindings, for example, you can name them whatever you want and set all of their schemes to 'http'. There is no inherent application or machine dispatch based on the Scheme . So you avoid the common problem of being unable to register additional handlers for well-known protocols. You can also easily work with multiple versions of a binding side-by-side by giving each version a different name OpenTimeout Gets or sets the interval of time provided for a connection to open before the transport raises an exception Declaration public TimeSpan OpenTimeout { get; set; } Property Value Type Description TimeSpan Remarks The value of this property is used by the channels and listeners produced by the factories of the binding ReceiveTimeout Gets or sets the interval of time that a connection can remain inactive, during which no application messages are received, before it is dropped. Declaration public TimeSpan ReceiveTimeout { get; set; } Property Value Type Description TimeSpan The TimeSpan that specifies how long the application has to receive a message before timing out. The default value is 10 minutes. Remarks When using a reliable session, there are two different inactivity timers that must be satisfied to keep the connection alive. If either of these inactivity timers goes off, then the connection is dropped. The first inactivity timer is on the reliable session and is called the **InactivityTimeout**. This inactivity timer fires if no messages, either application or infrastructure, are received within the timeout period. An infrastructure message is a message that is generated for the purpose of one of the protocols in the channel stack, such as a keep alive or an acknowledgment, rather than containing application data. The second inactivity timer is on the service and uses the [ReceiveTimeout](xref:CoreWCF.Channels.Binding) setting of the binding. This inactivity timer fires if no application messages are received within the timeout period. This specifies, for example, the maximum time a client may take to send at least one message to the server before the server will close the channel used by a session. This behavior ensures that clients cannot hold on to server resources for arbitrary long periods. Since the connection is dropped if either inactivity timer fires, increasing InactivityTimeout once it is greater than ReceiveTimeout has no effect. The default for both of these timeouts is 10 minutes, so you always have to increase both of them to make a difference when using a reliable session. If transaction flow is enabled on the binding or the channel, the operation may take longer to execute than the specified timeout. In these circumstances the operation fails due to the expired timeout and the transaction aborts appropriately. When security is used with sessions, the ReceiveTimeout value set on the binding is also used as the session timeout. Scheme When implemented in a derived class, sets the URI scheme that specifies the transport used by the channel and listener factories that are built by the bindings. Declaration public abstract string Scheme { get; } Property Value Type Description String The URI scheme that is used by the channels or listeners that are created by the factories built by the current binding. Remarks This user name for the binding is distinct from the specification of the protocol name, which is specified by the Scheme property. Each instance of a Binding has a Name and Namespace that together uniquely identify the user name for the binding in the metadata of the service. If you want to add more HTTP bindings, for example, you can name them whatever you want and set all of their schemes to 'http'. There is no inherent application or machine dispatch based on the Scheme . So you avoid the common problem of being unable to register additional handlers for well-known protocols. You can also easily work with multiple versions of a binding side-by-side by giving each version a different name. SendTimeout Gets or sets the interval of time provided for a write operation to complete before the transport raises an exception. Declaration public TimeSpan SendTimeout { get; set; } Property Value Type Description TimeSpan The TimeSpan that specifies how long the write operation has to complete before timing out. The default value is 1 minute. Remarks If transaction flow is enabled on the binding or the channel, the operation may take longer to execute than the specified timeout. In these circumstances the operation fails due to the expired timeout and the transaction aborts appropriately. Methods BuildServiceDispatcher<TChannel>(BindingParameterCollection, IServiceDispatcher) Declaration public virtual IServiceDispatcher BuildServiceDispatcher<TChannel>(BindingParameterCollection parameters, IServiceDispatcher dispatcher) where TChannel : class, IChannel Parameters Type Name Description BindingParameterCollection parameters IServiceDispatcher dispatcher Returns Type Description IServiceDispatcher Type Parameters Name Description TChannel BuildServiceDispatcher<TChannel>(Uri, BindingParameterCollection, IServiceDispatcher) Declaration public virtual IServiceDispatcher BuildServiceDispatcher<TChannel>(Uri listenUriBaseAddress, BindingParameterCollection parameters, IServiceDispatcher dispatcher) where TChannel : class, IChannel Parameters Type Name Description Uri listenUriBaseAddress BindingParameterCollection parameters IServiceDispatcher dispatcher Returns Type Description IServiceDispatcher Type Parameters Name Description TChannel BuildServiceDispatcher<TChannel>(Uri, String, BindingParameterCollection, IServiceDispatcher) Declaration public virtual IServiceDispatcher BuildServiceDispatcher<TChannel>(Uri listenUriBaseAddress, string listenUriRelativeAddress, BindingParameterCollection parameters, IServiceDispatcher dispatcher) where TChannel : class, IChannel Parameters Type Name Description Uri listenUriBaseAddress String listenUriRelativeAddress BindingParameterCollection parameters IServiceDispatcher dispatcher Returns Type Description IServiceDispatcher Type Parameters Name Description TChannel CanBuildServiceDispatcher<TChannel>(BindingParameterCollection) Declaration public virtual bool CanBuildServiceDispatcher<TChannel>(BindingParameterCollection parameters) where TChannel : class, IChannel Parameters Type Name Description BindingParameterCollection parameters Returns Type Description Boolean Type Parameters Name Description TChannel CreateBindingElements() When overridden in a derived class, creates a collection that contains the binding elements that are part of the current binding. Declaration public abstract BindingElementCollection CreateBindingElements() Returns Type Description BindingElementCollection A ICollection object of type BindingElement that contains the binding elements from the current binding object in the correct order. Remarks The elements should not reference any internal elements that the Binding object uses. GetProperty<T>(BindingParameterCollection) Returns a typed object requested, if present, from the appropriate layer in the binding stack. Declaration public T GetProperty<T>(BindingParameterCollection parameters) where T : class Parameters Type Name Description BindingParameterCollection parameters The BindingParameterCollection that specifies requirements for the channel listener that is built. Returns Type Description T The typed object T requested if it is present or null if it is not. Type Parameters Name Description T The typed object for which the method is querying Remarks If a layer supports returning the requested object, it returns it. If not, it delegates the call down to the next layer in the stack. If it gets to the bottom of the stack and no layer supported the requested object, then the method returns null. Implements IDefaultCommunicationTimeouts"
  },
  "api-corewcf/CoreWCF.Channels.BindingContext.html": {
    "href": "api-corewcf/CoreWCF.Channels.BindingContext.html",
    "title": "Class BindingContext",
    "keywords": "Class BindingContext Creates object instances based on command line parser results, injected services, and other value sources. Inheritance Object BindingContext Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public class BindingContext : Object Remarks The channel listeners and channel factories, in turn, construct the channel stacks used to process incoming and outgoing messages. The binding context also provides the linkage to the inner channel factories and channel listeners that are used to construct the channel and listener stacks. The binding context basically stores all of the dynamic information needed during the construction of the channel stack. Constructors BindingContext(CustomBinding, BindingParameterCollection) Initializes a new instance of the BindingContext class for a specified binding and collection of binding parameters. Declaration public BindingContext(CustomBinding binding, BindingParameterCollection parameters) Parameters Type Name Description CustomBinding binding The CustomBinding for the channel. BindingParameterCollection parameters The BindingParameterCollection for the channel. Remarks The value of ListenUriMode is set to Explicit by this constructor, the relative address is set to Empty , and the base address is set to null. BindingContext(CustomBinding, BindingParameterCollection, Uri, String) Declaration public BindingContext(CustomBinding binding, BindingParameterCollection parameters, Uri listenUriBaseAddress, string listenUriRelativeAddress) Parameters Type Name Description CustomBinding binding BindingParameterCollection parameters Uri listenUriBaseAddress String listenUriRelativeAddress Properties Binding Gets the binding for the channel built in the current context. Declaration public CustomBinding Binding { get; } Property Value Type Description CustomBinding The CustomBinding for the channel built in the current context. BindingParameters Gets the collection of binding parameters for the channel built in the current context. Declaration public BindingParameterCollection BindingParameters { get; } Property Value Type Description BindingParameterCollection The BindingParameterCollection for the channel built in the current context. Remarks This collection holds the settings encountered when building the channel stack from the bindings. Settings that need to be pushed down the channel stack during creation are put into the collection until a channel lower in the stack needs them. ListenUriBaseAddress Declaration public Uri ListenUriBaseAddress { get; set; } Property Value Type Description Uri ListenUriRelativeAddress Declaration public string ListenUriRelativeAddress { get; set; } Property Value Type Description String RemainingBindingElements Gets the binding elements that are used by other binding elements to construct the channel stack. Declaration public BindingElementCollection RemainingBindingElements { get; } Property Value Type Description BindingElementCollection The BindingElementCollection that contains the binding elements that are used by other binding elements to construct the channel stack. Remarks The binding elements that are put into this collection are those elements that do not correspond directly to a listener or factory in one of the channel stacks. The encoder binding element, for example, ends up in this collection and is then used by the transport channel to construct a message encoder. Methods BuildNextServiceDispatcher<TChannel>(IServiceDispatcher) Declaration public IServiceDispatcher BuildNextServiceDispatcher<TChannel>(IServiceDispatcher innerDispatcher) where TChannel : class, IChannel Parameters Type Name Description IServiceDispatcher innerDispatcher Returns Type Description IServiceDispatcher Type Parameters Name Description TChannel CanBuildNextServiceDispatcher<TChannel>() Declaration public bool CanBuildNextServiceDispatcher<TChannel>() where TChannel : class, IChannel Returns Type Description Boolean Type Parameters Name Description TChannel Clone() Returns a copy of the current channel build context. Declaration public BindingContext Clone() Returns Type Description BindingContext A BindingContext object that is a copy of the current channel build context. Remarks This method returns a copy that is a deep clone of your binding context. A deep clone of an object creates a copy of the object and a copy of everything directly or indirectly referenced by that object. (This is also called copying the entire object graph.) A shallow clone of an object, by contrast, is a copy of the object only. If the object contains references to other objects, the shallow copy does not create copies of the referred objects; instead, it copies only the references to the original objects. GetInnerProperty<T>() Returns a typed object requested, if present, from the appropriate layer in the binding stack. Declaration public T GetInnerProperty<T>() where T : class Returns Type Description T The typed object T requested if it is present or null if it is not. Type Parameters Name Description T The typed object for which the method is querying. Remarks Clones the binding context and calls GetProperty (BindingContext) on the next binding element stored in the binding context."
  },
  "api-corewcf/CoreWCF.Channels.BindingElement.html": {
    "href": "api-corewcf/CoreWCF.Channels.BindingElement.html",
    "title": "Class BindingElement",
    "keywords": "Class BindingElement The elements of the bindings that build the channel factories and channel listeners for various types of channels that are used to process outgoing and incoming messages. Inheritance Object BindingElement MessageEncodingBindingElement PrivacyNoticeBindingElement SecurityBindingElement StreamUpgradeBindingElement TransportBindingElement Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class BindingElement : Object Remarks A binding consists of an ordered set of binding elements that inherit from this abstract base class. The TransportBindingElement class inherits from the BindingElement class. Creating a binding and binding element for your transport is optional if you are just using the channel model. It is possible to do everything you need through the channel factory and listener as long as they are made public. The Windows Communication Foundation (WCF) service model uses a factory pattern where the binding is used to create the channel stack. If you want to use the WCF service model, then using a transport binding element is required. Placing this binding element into a binding is a good practice because it removes the requirement for users to create their own custom binding for your transport. It is best to create both a binding and binding element, and hide the channel factory and listener inside the assembly. On the sending side, a binding is used to build a IChannelFactory , which in turn builds a channel stack and returns a reference to the top channel in the stack. The application can then use this channel to send messages. Similarly, on the receiving side a binding is used to build a IChannelListener , which listens for incoming messages. The IChannelListener provides messages to the listening application by creating channel stacks and handing the application a reference to the top channel. The application then uses this channel to receive incoming messages. Constructors BindingElement() Initializes a new instance of the BindingElement class. Declaration protected BindingElement() BindingElement(BindingElement) Initializes a new instance of the BindingElement class from a specified binding element. Declaration protected BindingElement(BindingElement elementToBeCloned) Parameters Type Name Description BindingElement elementToBeCloned The BindingElement to be cloned. Methods BuildServiceDispatcher<TChannel>(BindingContext, IServiceDispatcher) Declaration public virtual IServiceDispatcher BuildServiceDispatcher<TChannel>(BindingContext context, IServiceDispatcher innerDispatcher) where TChannel : class, IChannel Parameters Type Name Description BindingContext context IServiceDispatcher innerDispatcher Returns Type Description IServiceDispatcher Type Parameters Name Description TChannel CanBuildServiceDispatcher<TChannel>(BindingContext) Declaration public virtual bool CanBuildServiceDispatcher<TChannel>(BindingContext context) where TChannel : class, IChannel Parameters Type Name Description BindingContext context Returns Type Description Boolean Type Parameters Name Description TChannel Clone() When overridden in a derived class, returns a copy of the binding element object. Declaration public abstract BindingElement Clone() Returns Type Description BindingElement A BindingElement object that is a deep clone of the original. Remarks Implement the Clone() method to return a deep clone of your binding element. Returning a clone enables the runtime to support the case in which multiple custom bindings share a custom binding element. If a clone is not returned, the run-time behavior is undefined. A deep clone of an object creates a copy of the object and a copy of everything directly or indirectly referenced by that object. (This is also called copying the entire object graph.) A shallow clone of an object, by contrast, is a copy of the object only. If the object contains references to other objects, the shallow copy does not create copies of the referred objects; instead, it copies only the references to the original objects. GetProperty<T>(BindingContext) When overridden in a derived class, returns a typed object requested, if present, from the appropriate layer in the binding stack. Declaration public abstract T GetProperty<T>(BindingContext context) where T : class Parameters Type Name Description BindingContext context The BindingContext for the binding element. Returns Type Description T The typed object T requested if it is present or null if it is not present. Type Parameters Name Description T The typed object for which the method is querying. Remarks Use this to retrieve capabilities, requirements and parameters from the binding element stack. If a binding element supports returning the requested object, it returns it. If not, it delegates the call down to the next binding element in the stack. If it gets to the bottom of the stack and no binding element supported the requested object, then the method returns null. IsMatch(BindingElement) Declaration protected virtual bool IsMatch(BindingElement b) Parameters Type Name Description BindingElement b Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.Channels.BindingElementCollection.html": {
    "href": "api-corewcf/CoreWCF.Channels.BindingElementCollection.html",
    "title": "Class BindingElementCollection",
    "keywords": "Class BindingElementCollection Represents the collection of binding elements used in a binding. Inheritance Object BindingElementCollection Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public class BindingElementCollection : Collection<BindingElement> Remarks To be added. Constructors BindingElementCollection() Initializes a new instance of the BindingElementCollection class. Declaration public BindingElementCollection() BindingElementCollection(BindingElement[]) Initializes a new instance of the BindingElementCollection class from an array of binding elements. Declaration public BindingElementCollection(BindingElement[] elements) Parameters Type Name Description BindingElement [] elements The Array of type BindingElement used to initialize the collection. BindingElementCollection(IEnumerable<BindingElement>) Initializes a new instance of the BindingElementCollection class from an enumerable set of binding elements. Declaration public BindingElementCollection(IEnumerable<BindingElement> elements) Parameters Type Name Description IEnumerable < BindingElement > elements The IEnumerable<T > of generic type BindingElement used to initialize the collection. Methods AddRange(BindingElement[]) Adds binding elements from an array to the collection of binding elements. Declaration public void AddRange(params BindingElement[] elements) Parameters Type Name Description BindingElement [] elements The Array of type BindingElement to be added to the collection. Clone() Creates a copy of the binding element collection. Declaration public BindingElementCollection Clone() Returns Type Description BindingElementCollection A copy of the BindingElementCollection . Contains(Type) Returns a value that indicates whether a specified type of binding element belongs to the collection of binding elements. Declaration public bool Contains(Type bindingElementType) Parameters Type Name Description Type bindingElementType The type of binding element being tested for inclusion in the collection. Returns Type Description Boolean true if the type of binding element specified is contained in the collection; otherwise, false. Find<T>() Returns the first item of a specified type from the collection of binding elements. Declaration public T Find<T>() Returns Type Description T The item of type Type if found; if not found, 0 if T is a value type and null if T is a reference type. Type Parameters Name Description T The Type of item to find. FindAll<T>() Returns all of the items of a specified type from the collection of binding elements. Declaration public Collection<T> FindAll<T>() Returns Type Description Collection <T> A Collection<T > of all of the items of type Type if found; if none are found, 0 if T is a value type and null if T is a reference type. Type Parameters Name Description T The Type of item to find. InsertItem(Int32, BindingElement) Inserts a binding element at a specified location within a collection of binding elements. Declaration protected override void InsertItem(int index, BindingElement item) Parameters Type Name Description Int32 index The location at which to insert the binding element in the collection. BindingElement item The BindingElement to be inserted. Remove<T>() Removes a binding element of a specified type from the collection of binding elements. Declaration public T Remove<T>() Returns Type Description T The item of type Type removed. Type Parameters Name Description T The Type of item to find. RemoveAll<T>() Removes all of the binding elements of a specified type from the collection of binding elements. Declaration public Collection<T> RemoveAll<T>() Returns Type Description Collection <T> A Collection<T > of all of the items of type Type found. Type Parameters Name Description T The Type of item to find. SetItem(Int32, BindingElement) Replaces a binding element at the specified index in the collection of binding elements. Declaration protected override void SetItem(int index, BindingElement item) Parameters Type Name Description Int32 index The zero-based index of the element to replace. BindingElement item The new value for BindingElement item at the specified index."
  },
  "api-corewcf/CoreWCF.Channels.BindingParameterCollection.html": {
    "href": "api-corewcf/CoreWCF.Channels.BindingParameterCollection.html",
    "title": "Class BindingParameterCollection",
    "keywords": "Class BindingParameterCollection Represents a collection of binding parameters that store information used by binding elements to build factories. Inheritance Object KeyedByTypeCollection < Object > BindingParameterCollection Inherited Members KeyedByTypeCollection<Object>.Find<T>() KeyedByTypeCollection<Object>.Remove<T>() KeyedByTypeCollection<Object>.FindAll<T>() KeyedByTypeCollection<Object>.RemoveAll<T>() KeyedByTypeCollection<Object>.GetKeyForItem(Object) KeyedByTypeCollection<Object>.InsertItem(Int32, Object) KeyedByTypeCollection<Object>.SetItem(Int32, Object) Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public class BindingParameterCollection : KeyedByTypeCollection<object> Remarks The BindingParameterCollection is a collection of objects that is used when a custom binding needs to provide additional parameters to another binding. For example, the SecurityBindingElement looks for ServiceSecurityAuditBehavior in the BindingParameterCollection to determine Security auditing settings. Constructors BindingParameterCollection() Initializes a new instance of the BindingParameterCollection class. Declaration public BindingParameterCollection()"
  },
  "api-corewcf/CoreWCF.Channels.BodyWriter.html": {
    "href": "api-corewcf/CoreWCF.Channels.BodyWriter.html",
    "title": "Class BodyWriter",
    "keywords": "Class BodyWriter Represents the writer of the message body. Inheritance Object BodyWriter StreamBodyWriter Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class BodyWriter : Object Remarks A message consists of headers and a body. The headers are buffered and the body is streamed. Because the body is streamed, the user cannot pass the actual content of the body to a message. Instead the user must pass a class that knows how to write the body when asked to do so. This is done by passing a class derived from BodyWriter to the Message . A message calls the class derived from BodyWriter whenever it requires the body to be written using an XmlWriter . Constructors BodyWriter(Boolean) Initializes a new instance of the BodyWriter class that explicitly indicates whether to buffer. Declaration protected BodyWriter(bool isBuffered) Parameters Type Name Description Boolean isBuffered true if the body writer can be called multiple times; otherwise false. Remarks If isBuffered is false then the message calls the write method once and buffers the contents. Properties IsBuffered Gets a value that indicates whether the write method can be called multiple times. Declaration public bool IsBuffered { get; } Property Value Type Description Boolean true if the body writer can be called multiple times; otherwise false. Remarks If isBuffered is false then the message calls the write method once and buffers the contents. Methods CreateBufferedCopy(Int32) Creates a buffered copy of the body. Declaration public BodyWriter CreateBufferedCopy(int maxBufferSize) Parameters Type Name Description Int32 maxBufferSize The maximum size of the buffer for the body. Returns Type Description BodyWriter A BodyWriter that contains a copy of this object. Remarks If IsBuffered is true then the BodyWriter object is returned. If IsBuffered is false then the contents of the BodyWriter up to maxBufferSize is returned. This also calls OnCreateBufferedCopy(Int32) as an extensibility point. OnCreateBufferedCopy(Int32) Provides an extensibility point when the body contents are written. Declaration protected virtual BodyWriter OnCreateBufferedCopy(int maxBufferSize) Parameters Type Name Description Int32 maxBufferSize The maximum size of the buffer for the body. Returns Type Description BodyWriter The BodyWriter with the specified maximum buffer size. Remarks A class derived from BodyWriter can override this method to create a buffered copy of the BodyWriter . But the default implementation of WriteBodyContents(XmlDictionaryWriter) calls OnWriteBodyContents(XmlDictionaryWriter) , so overriding just OnWriteBodyContents(XmlDictionaryWriter) should be easier and work for most scenarios. Note that the BodyWriter returned must be buffered, that is IsBuffered must be true. OnWriteBodyContents(XmlDictionaryWriter) When implemented, provides an extensibility point when the body contents are written. Declaration protected abstract void OnWriteBodyContents(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer The XmlDictionaryWriter used to write out the message body. Remarks This method must be implemented by classes derived from BodyWriter . This is the key method that writes the body. If the BodyWriter is buffered then this method is called only once. OnWriteBodyContentsAsync(XmlDictionaryWriter) Declaration protected virtual Task OnWriteBodyContentsAsync(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer Returns Type Description Task WriteBodyContents(XmlDictionaryWriter) Writes out the contents of the message body. Declaration public void WriteBodyContents(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer The XmlDictionaryWriter used to write out the message body. Remarks The default implementation of WriteBodyContents(XmlDictionaryWriter) calls OnWriteBodyContents(XmlDictionaryWriter) , so overriding OnWriteBodyContents(XmlDictionaryWriter provides the best point of extension. WriteBodyContentsAsync(XmlDictionaryWriter) Declaration public Task WriteBodyContentsAsync(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer Returns Type Description Task"
  },
  "api-corewcf/CoreWCF.Channels.BufferManager.html": {
    "href": "api-corewcf/CoreWCF.Channels.BufferManager.html",
    "title": "Class BufferManager",
    "keywords": "Class BufferManager Many Windows Communication Foundation (WCF) features require the use of buffers, which are expensive to create and destroy. You can use the BufferManager class to manage a buffer pool. The pool and its buffers are created when you instantiate this class and destroyed when the buffer pool is reclaimed by garbage collection. Every time you need to use a buffer, you take one from the pool, use it, and return it to the pool when done. This process is much faster than creating and destroying a buffer every time you need to use one. Inheritance Object BufferManager Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class BufferManager : Object Remarks This class is commonly used while implementing custom encoders or custom transport channels. Constructors BufferManager() Initializes a new instance of the BufferManager class. Declaration protected BufferManager() Remarks Because this constructor is protected, you can only call it from a derived class. Methods Clear() Releases the buffers currently cached in the manager. Declaration public abstract void Clear() CreateBufferManager(Int64, Int32) Creates a new BufferManager with a specified maximum buffer pool size and a maximum size for each individual buffer in the pool. Declaration public static BufferManager CreateBufferManager(long maxBufferPoolSize, int maxBufferSize) Parameters Type Name Description Int64 maxBufferPoolSize The maximum size of the pool. Int32 maxBufferSize The maximum size of an individual buffer. Returns Type Description BufferManager Returns a BufferManager object with the specified parameters. Remarks This method creates a new buffer pool with as many buffers as can be created. ReturnBuffer(Byte[]) Returns a buffer to the pool. Declaration public abstract void ReturnBuffer(byte[] buffer) Parameters Type Name Description Byte [] buffer A reference to the buffer being returned. TakeBuffer(Int32) Gets a buffer of at least the specified size from the pool. Declaration public abstract byte[] TakeBuffer(int bufferSize) Parameters Type Name Description Int32 bufferSize The size, in bytes, of the requested buffer. Returns Type Description Byte [] A byte array that is the requested size of the buffer. Remarks If successful, the system returns a byte array buffer of at least the requested size."
  },
  "api-corewcf/CoreWCF.Channels.ByteStreamMessage.html": {
    "href": "api-corewcf/CoreWCF.Channels.ByteStreamMessage.html",
    "title": "Class ByteStreamMessage",
    "keywords": "Class ByteStreamMessage Represents a byte stream message. Inheritance Object ByteStreamMessage Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public static class ByteStreamMessage : Object Remarks To be added. Methods CreateMessage(ArraySegment<Byte>) Creates a byte stream message using the specified buffer data. Declaration public static Message CreateMessage(ArraySegment<byte> buffer) Parameters Type Name Description ArraySegment < Byte > buffer The buffer that provides data for the message to be created. Returns Type Description Message A Message object for the message created. CreateMessage(ArraySegment<Byte>, BufferManager) Creates a byte stream message using the specified buffer data and buffer manager. Declaration public static Message CreateMessage(ArraySegment<byte> buffer, BufferManager bufferManager) Parameters Type Name Description ArraySegment < Byte > buffer The buffer that provides data for the message to be created. BufferManager bufferManager The BufferManager that manages the buffer to which the message is created. Returns Type Description Message A Message object for the message created. CreateMessage(Stream) Creates a byte stream message using the specified stream. Declaration public static Message CreateMessage(Stream stream) Parameters Type Name Description Stream stream The stream used to create the message. Returns Type Description Message A Message object for the message created."
  },
  "api-corewcf/CoreWCF.Channels.ByteStreamMessageEncodingBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Channels.ByteStreamMessageEncodingBindingElement.html",
    "title": "Class ByteStreamMessageEncodingBindingElement",
    "keywords": "Class ByteStreamMessageEncodingBindingElement The binding element that specifies the message encoding as a stream of bytes and has the option to specify the character encoding. Inheritance Object BindingElement MessageEncodingBindingElement ByteStreamMessageEncodingBindingElement Inherited Members MessageEncodingBindingElement.GetProperty<T>(BindingContext) MessageEncodingBindingElement.CheckEncodingVersion(EnvelopeVersion) MessageEncodingBindingElement.IsMatch(BindingElement) BindingElement.BuildServiceDispatcher<TChannel>(BindingContext, IServiceDispatcher) BindingElement.CanBuildServiceDispatcher<TChannel>(BindingContext) Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public sealed class ByteStreamMessageEncodingBindingElement : MessageEncodingBindingElement Remarks To be added. Constructors ByteStreamMessageEncodingBindingElement() Initializes a new instance of the ByteStreamMessageEncodingBindingElement class. Declaration public ByteStreamMessageEncodingBindingElement() ByteStreamMessageEncodingBindingElement(XmlDictionaryReaderQuotas) Initializes a new instance of the ByteStreamMessageEncodingBindingElement class with the specified quota. Declaration public ByteStreamMessageEncodingBindingElement(XmlDictionaryReaderQuotas quota) Parameters Type Name Description XmlDictionaryReaderQuotas quota The constraints on the complexity of XML messages that can be processed by endpoints configured with this binding element. Properties MessageVersion Gets or sets the SOAP message and WS-Addressing versions that are used or expected. Declaration public override MessageVersion MessageVersion { get; set; } Property Value Type Description MessageVersion The message version that is used or expected. Overrides MessageEncodingBindingElement.MessageVersion Remarks This property can only be set to the message version value of None and therefore always returns None . The byte stream message encoder does not support any other message versions. ReaderQuotas Gets or sets constraints on the complexity of XML messages that can be processed by endpoints configured with this binding element. Declaration public XmlDictionaryReaderQuotas ReaderQuotas { get; set; } Property Value Type Description XmlDictionaryReaderQuotas The complexity constraints on SOAP messages exchanged. The default values for these constraints are provided in the following remarks section. Remarks The complexity constraints protect against a class of denial of service (DOS) attacks that attempt to use message complexity to tie up endpoint processing resources. The properties that express these constraints and their default values are as follows: MaxDepth = 32 MaxStringContentLength = 8192 MaxArrayLength = 16384 MaxBytesPerRead = 4096 MaxNameTableCharCount = 16384 Methods Clone() Creates a new ByteStreamMessageEncodingBindingElement object initialized from the current one. Declaration public override BindingElement Clone() Returns Type Description BindingElement A binding element with property values equal to those of the current element. Overrides BindingElement.Clone() Remarks This creates a complete copy of the current binding element object tree, also called a deep clone. A deep clone of an object creates a copy of the object and a copy of everything directly or indirectly referenced by that object. This can also be described as copying the entire object graph. Returning a deep clone enables the runtime to support the case in which multiple custom bindings share a custom binding element. If a deep clone is not returned, the runtime behavior is undefined. A shallow clone of an object, by contrast, is a copy of the object only. If the object contains references to other objects, the shallow copy does not create copies of the referred objects; instead, it copies only the references to the original objects. CreateMessageEncoderFactory() Creates a factory for byte stream message encoders that employ the SOAP and WS-Addressing versions and the character encoding specified by the current encoding binding element. Declaration public override MessageEncoderFactory CreateMessageEncoderFactory() Returns Type Description MessageEncoderFactory The message encoder factory that this binding element creates. Overrides MessageEncodingBindingElement.CreateMessageEncoderFactory()"
  },
  "api-corewcf/CoreWCF.Channels.ChannelBindingMessageProperty.html": {
    "href": "api-corewcf/CoreWCF.Channels.ChannelBindingMessageProperty.html",
    "title": "Class ChannelBindingMessageProperty",
    "keywords": "Class ChannelBindingMessageProperty Inheritance Object ChannelBindingMessageProperty Implements IDisposable IMessageProperty Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public sealed class ChannelBindingMessageProperty : Object, IMessageProperty Constructors ChannelBindingMessageProperty(ChannelBinding, Boolean) Declaration public ChannelBindingMessageProperty(ChannelBinding channelBinding, bool ownsCleanup) Parameters Type Name Description ChannelBinding channelBinding Boolean ownsCleanup Properties ChannelBinding Declaration public ChannelBinding ChannelBinding { get; } Property Value Type Description ChannelBinding Name Declaration public static string Name { get; } Property Value Type Description String Methods TryGet(Message, out ChannelBindingMessageProperty) Declaration public static bool TryGet(Message message, out ChannelBindingMessageProperty property) Parameters Type Name Description Message message ChannelBindingMessageProperty property Returns Type Description Boolean TryGet(MessageProperties, out ChannelBindingMessageProperty) Declaration public static bool TryGet(MessageProperties properties, out ChannelBindingMessageProperty property) Parameters Type Name Description MessageProperties properties ChannelBindingMessageProperty property Returns Type Description Boolean Explicit Interface Implementations IMessageProperty.CreateCopy() Declaration IMessageProperty IMessageProperty.CreateCopy() Returns Type Description IMessageProperty Implements System.IDisposable IMessageProperty"
  },
  "api-corewcf/CoreWCF.Channels.ChannelManagerBase.html": {
    "href": "api-corewcf/CoreWCF.Channels.ChannelManagerBase.html",
    "title": "Class ChannelManagerBase",
    "keywords": "Class ChannelManagerBase Provides a base implementation for managing the default timeouts that are associated with channel and listener factories. Inheritance Object CommunicationObject ChannelManagerBase Implements ICommunicationObject IDefaultCommunicationTimeouts Inherited Members CommunicationObject.Abort() CommunicationObject.CloseAsync() CommunicationObject.CloseAsync(CancellationToken) CommunicationObject.OpenAsync() CommunicationObject.OpenAsync(CancellationToken) CommunicationObject.Fault(Exception) CommunicationObject.Fault() CommunicationObject.GetCommunicationObjectType() CommunicationObject.OnAbort() CommunicationObject.OnCloseAsync(CancellationToken) CommunicationObject.OnOpenAsync(CancellationToken) CommunicationObject.OnClosed() CommunicationObject.OnClosing() CommunicationObject.OnFaulted() CommunicationObject.OnOpened() CommunicationObject.OnOpening() CommunicationObject.ThrowIfDisposed() CommunicationObject.ThrowIfDisposedOrImmutable() CommunicationObject.ThrowIfDisposedOrNotOpen() CommunicationObject.ThrowIfNotOpened() CommunicationObject.ThrowPending() CommunicationObject.IsDisposed CommunicationObject.State CommunicationObject.ThisLock CommunicationObject.DefaultCloseTimeout CommunicationObject.DefaultOpenTimeout CommunicationObject.Closed CommunicationObject.Closing CommunicationObject.Faulted CommunicationObject.Opened CommunicationObject.Opening Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class ChannelManagerBase : CommunicationObject, ICommunicationObject, IDefaultCommunicationTimeouts Remarks Specifically, this class provides a common base implementation for the ChannelFactoryBase and ChannelListenerBase channel manager classes for managing the default timeouts that are associated with the channel factories and listeners. Channels are added to the list maintained by the manager by using one of the CreateChannel methods. Abstract properties for send and receive timeouts used by the channels and listeners that are produced are specified to coordinate the values set for the derived channel and listener factories. The ChannelBase , which provides the base implementation for custom channels, gets its default communication timeouts for the open, close, send and receive operations from the ChannelManagerBase associated with it. The ChannelBase also takes care of managing the manager for you. In addition to exposing a reference to the manager, the base class also notifies the manager when channels are created and destroyed. But the reference to the manager is only good until the channel is destroyed. Constructors ChannelManagerBase() Initializes a new instance of the ChannelManagerBase class. Declaration protected ChannelManagerBase() Properties DefaultReceiveTimeout When overridden in a derived class, gets the default interval of time a channel has to complete the reception of a message. Declaration protected abstract TimeSpan DefaultReceiveTimeout { get; } Property Value Type Description TimeSpan The default TimeSpan that specifies how long the channel has to complete the reception of a message before timing out once the receive method has been invoked. Remarks All operations that are potentially lengthy must have a timeout. Methods that do not take explicit timeouts, must delegate to methods that do with default timeouts or must not do any work that blocks. Timeouts are the total limit for high-level operations for which they are to complete, so any retries must be limited to the time not already accessed by earlier tries. DefaultSendTimeout When overridden in a derived class, gets the default interval of time a channel has to complete the sending of a message. Declaration protected abstract TimeSpan DefaultSendTimeout { get; } Property Value Type Description TimeSpan The default TimeSpan that specifies how long the channel has to complete the sending of a message before timing out once the send method has been invoked. Remarks All operations that are potentially lengthy must have a timeout. Methods that do not take explicit timeouts, must delegate to methods that do with default timeouts or must not do any work that blocks. Timeouts are the total limit for high-level operations for which they are to complete, so any retries must be limited to the time not already accessed by earlier tries. Explicit Interface Implementations IDefaultCommunicationTimeouts.CloseTimeout Gets the interval of time after which the close method, invoked by a communication object, times out. Declaration TimeSpan IDefaultCommunicationTimeouts.CloseTimeout { get; } Returns Type Description TimeSpan The TimeSpan that specifies the interval of time to wait for the close method to time out. Remarks All operations that are potentially lengthy must have a timeout. Methods that do not take explicit timeouts, must delegate to methods that do with default timeouts or must not do any work that blocks. Timeouts are the total limit for high-level operations for which they are to complete, so any retries must be limited to the time not already accessed by earlier tries. IDefaultCommunicationTimeouts.OpenTimeout Gets the interval of time after which the open method, invoked by a communication object, times out. Declaration TimeSpan IDefaultCommunicationTimeouts.OpenTimeout { get; } Returns Type Description TimeSpan The TimeSpan that specifies the interval of time to wait for the open method to time out. Remarks All operations that are potentially lengthy must have a timeout. Methods that do not take explicit timeouts, must delegate to methods that do with default timeouts or must not do any work that blocks. Timeouts are the total limit for high-level operations for which they are to complete, so any retries must be limited to the time not already accessed by earlier tries. IDefaultCommunicationTimeouts.ReceiveTimeout Gets the interval of time after which the receive method, invoked by a communication object, times out. Declaration TimeSpan IDefaultCommunicationTimeouts.ReceiveTimeout { get; } Returns Type Description TimeSpan The TimeSpan that specifies the interval of time to wait for the receive method to time out. Remarks IDefaultCommunicationTimeouts.ReceiveTimeout calls DefaultReceiveTimeout . IDefaultCommunicationTimeouts.SendTimeout Gets the interval of time after which the send method, invoked by a communication object, times out. Declaration TimeSpan IDefaultCommunicationTimeouts.SendTimeout { get; } Returns Type Description TimeSpan The TimeSpan that specifies the interval of time to wait for the send method to time out. Remarks IDefaultCommunicationTimeouts.SendTimeout calls DefaultSendTimeout . Implements ICommunicationObject IDefaultCommunicationTimeouts"
  },
  "api-corewcf/CoreWCF.Channels.CommunicationObject.html": {
    "href": "api-corewcf/CoreWCF.Channels.CommunicationObject.html",
    "title": "Class CommunicationObject",
    "keywords": "Class CommunicationObject Provides a common base implementation for the basic state machine common to all communication-oriented objects in the system, including channels, listeners, and the channel and listener factories. Inheritance Object CommunicationObject ChannelManagerBase StreamUpgradeProvider ChannelDispatcherBase InstanceContext ServiceHostBase Implements ICommunicationObject Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class CommunicationObject : Object, ICommunicationObject Remarks The CommunicationObject class implements the ICommunicationObject interface for all communication objects in Windows Communication Foundation (WCF). The method implementations handle parameter validation, raise events that notify the occurrence of state transitions, provide the means to associated additional processing with these state transitions, and ensure that such state changes are coordinated. Constructors CommunicationObject() Initializes a new instance of the CommunicationObject class. Declaration protected CommunicationObject() CommunicationObject(Object) Initializes a new instance of the CommunicationObject class with the mutually exclusive lock to protect the state transitions specified. Declaration protected CommunicationObject(object mutex) Parameters Type Name Description Object mutex The mutually exclusive lock that protects the class instance during a state transition. Properties DefaultCloseTimeout When overridden in a derived class, gets the default interval of time provided for a close operation to complete. Declaration protected abstract TimeSpan DefaultCloseTimeout { get; } Property Value Type Description TimeSpan The default TimeSpan that specifies how long the close operation has to complete before timing out. DefaultOpenTimeout When overridden in a derived class, gets the default interval of time provided for an open operation to complete. Declaration protected abstract TimeSpan DefaultOpenTimeout { get; } Property Value Type Description TimeSpan The default TimeSpan that specifies how long the open operation has to complete before timing out. IsDisposed Gets a value that indicates whether the communication object has been disposed. Declaration protected bool IsDisposed { get; } Property Value Type Description Boolean true if the communication object is in a closed state; otherwise, false. Remarks An object is considered disposed when the Closed event occurs. State Gets a value that indicates the current state of the communication object. Declaration public CommunicationState State { get; } Property Value Type Description CommunicationState A value from the CommunicationState enumeration that indicates the current state of the object. ThisLock Gets the mutually exclusive lock that protects the class instance during a state transition. Declaration protected object ThisLock { get; } Property Value Type Description Object The mutually exclusive lock that protects the class instance during a state transition. Methods Abort() Causes a communication object to transition immediately from its current state into the closing state. Declaration public void Abort() Remarks This method indicates that any unfinished work should be ignored or ungracefully terminated before returning. The Abort() method can be used to cancel any outstanding operations, including outstanding calls to Close . To gracefully transition a CommunicationObject from any state other than Closed into the Closed state, call Close or one of its asynchronous versions, BeginClose . CloseAsync() Declaration public Task CloseAsync() Returns Type Description Task CloseAsync(CancellationToken) Declaration public Task CloseAsync(CancellationToken token) Parameters Type Name Description CancellationToken token Returns Type Description Task Fault() Causes a communication object to transition from its current state into the faulted state. Declaration protected void Fault() Remarks The Faulted event is raised by the OnFaulted() method which is called by the Fault() method. Fault(Exception) Declaration public void Fault(Exception exception) Parameters Type Name Description Exception exception GetCommunicationObjectType() Gets the type of communication object. Declaration protected virtual Type GetCommunicationObjectType() Returns Type Description Type The type of communication object. OnAbort() Inserts processing on a communication object after it transitions to the closing state due to the invocation of a synchronous abort operation. Declaration protected abstract void OnAbort() Remarks The Abort() method calls OnAbort() if the communication object is not already in a Closed state. OnCloseAsync(CancellationToken) Declaration protected abstract Task OnCloseAsync(CancellationToken token) Parameters Type Name Description CancellationToken token Returns Type Description Task OnClosed() Invoked during the transition of a communication object into the closing state. Declaration protected virtual void OnClosed() Remarks The Close method calls OnClosed() if the communication object is initially in the Opened state. The EndClose method calls OnClosed() and OnEndClose(IAsyncResult) if the communication object is not already in a Closed state. OnClosing() Invoked during the transition of a communication object into the closing state Declaration protected virtual void OnClosing() Remarks The Close method calls OnClosing() if the communication object is initially in the Opened state. OnFaulted() Inserts processing on a communication object after it transitions to the faulted state due to the invocation of a synchronous fault operation. Declaration protected virtual void OnFaulted() Remarks The Faulted event is raised by the OnFaulted() method which is called by the Fault() method. OnOpenAsync(CancellationToken) Declaration protected abstract Task OnOpenAsync(CancellationToken token) Parameters Type Name Description CancellationToken token Returns Type Description Task OnOpened() Invoked during the transition of a communication object into the opened state. Declaration protected virtual void OnOpened() Remarks This provides a way to add processing when it is called by the Open and EndOpen methods. OnOpening() Invoked during the transition of a communication object into the opening state. Declaration protected virtual void OnOpening() Remarks This provides a way to add processing when it is called by the Open and BeginOpen methods. OpenAsync() Declaration public Task OpenAsync() Returns Type Description Task OpenAsync(CancellationToken) Declaration public Task OpenAsync(CancellationToken token) Parameters Type Name Description CancellationToken token Returns Type Description Task ThrowIfDisposed() Throws an exception if the communication object is disposed. Declaration protected void ThrowIfDisposed() Remarks No exception is thrown if the communication object is in a Created , Opening or Opened state. A communication object is disposed once Close is called on it. ThrowIfDisposedOrImmutable() Throws an exception if the communication object the State property is not set to the Created state. Declaration protected void ThrowIfDisposedOrImmutable() Remarks Since an object is immutable after Open is called on it, the only state that is both mutable and not disposed is the Created state. ThrowIfDisposedOrNotOpen() Throws an exception if the communication object is not in the Opened state. Declaration protected void ThrowIfDisposedOrNotOpen() ThrowIfNotOpened() Declaration public void ThrowIfNotOpened() ThrowPending() Declaration public void ThrowPending() Events Closed Occurs when a communication object transitions into the closed state. Declaration public event EventHandler Closed Event Type Type Description EventHandler Remarks The Closed event is raised by the OnClosing() method which is called by the Close and EndClose methods. Closing Occurs when a communication object transitions into the closing state. Declaration public event EventHandler Closing Event Type Type Description EventHandler Remarks The Closing event is raised by the OnClosing() method which is called by the Close and BeginClose methods. Faulted Occurs when a communication object transitions into the faulted state. Declaration public event EventHandler Faulted Event Type Type Description EventHandler Remarks The Faulted event is raised by the OnFaulted() method which is called by the Fault() method. Opened Occurs when a communication object transitions into the opened state. Declaration public event EventHandler Opened Event Type Type Description EventHandler Remarks The Opened event is raised by the OnOpening() method which is called by the Open and EndOpen methods. Opening Occurs when a communication object transitions into the opening state. Declaration public event EventHandler Opening Event Type Type Description EventHandler Remarks The Opening event is raised by the OnOpening() method which is called by the Open and OnBeginOpen(TimeSpan, AsyncCallback, Object) methods. Implements ICommunicationObject"
  },
  "api-corewcf/CoreWCF.Channels.CompressionFormat.html": {
    "href": "api-corewcf/CoreWCF.Channels.CompressionFormat.html",
    "title": "Class CompressionFormat",
    "keywords": "Class CompressionFormat Specifies the channels compression format. Inheritance Object CompressionFormat Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public sealed class CompressionFormat : Enum Remarks To be added. Fields Deflate Deflate compression Declaration public const CompressionFormat Deflate Field Value Type Description CompressionFormat The Deflate compression format. GZip GZip compression Declaration public const CompressionFormat GZip Field Value Type Description CompressionFormat The GZip compression format. None Default to compression off Declaration public const CompressionFormat None Field Value Type Description CompressionFormat The none compression format. value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.Channels.ConnectionOrientedTransportBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Channels.ConnectionOrientedTransportBindingElement.html",
    "title": "Class ConnectionOrientedTransportBindingElement",
    "keywords": "Class ConnectionOrientedTransportBindingElement An abstract class that supplements the base with additional properties that are common to connection-oriented transports such as TCP and named pipes. Inheritance Object BindingElement TransportBindingElement ConnectionOrientedTransportBindingElement TcpTransportBindingElement Implements IWsdlExportExtension IPolicyExportExtension Inherited Members TransportBindingElement.ExportWsdlEndpoint(WsdlExporter, WsdlEndpointConversionContext, String, EndpointAddress, AddressingVersion) TransportBindingElement.ManualAddressing TransportBindingElement.MaxBufferPoolSize TransportBindingElement.MaxReceivedMessageSize TransportBindingElement.Scheme BindingElement.Clone() BindingElement.BuildServiceDispatcher<TChannel>(BindingContext, IServiceDispatcher) Namespace : CoreWCF.Channels Assembly : CoreWCF.NetTcp.dll Syntax public abstract class ConnectionOrientedTransportBindingElement : TransportBindingElement, IWsdlExportExtension, IPolicyExportExtension Remarks This class is documented to give a more complete understanding of the transports hierarchy and is not expected to be directly called. The constructor is internal to avoid direct construction and invocation. The public properties of this binding element can be called from the derived classes TcpTransportBindingElement and NamedPipeTransportBindingElement . Properties ChannelInitializationTimeout Declaration public TimeSpan ChannelInitializationTimeout { get; set; } Property Value Type Description TimeSpan ConnectionBufferSize Gets or sets the size of the buffer used to transmit a chunk of the serialized message on the wire from the client or service. Declaration public int ConnectionBufferSize { get; set; } Property Value Type Description Int32 The size of the connection buffer. The default value is 8192 bytes. Remarks This value can be changed to provide better throughput based on average message sizes and exchange patterns. HostNameComparisonMode Declaration public HostNameComparisonMode HostNameComparisonMode { get; set; } Property Value Type Description HostNameComparisonMode MaxBufferSize Gets or sets the maximum size of the buffer to use. For streamed messages, this value should be at least the maximum possible size of the message headers, which are read in buffered mode. Declaration public int MaxBufferSize { get; set; } Property Value Type Description Int32 The maximum number of bytes that are used to buffer incoming messages in memory. The default value is 65,536 bytes. Remarks For streamed messages this property only applies to the message headers; for buffered messages it applies to the entire message. The value of this property must be less than or equal to MaxReceivedMessageSize and must be larger than the size of the headers of the message or the channel throws an exception. If you receive more data than you can buffer the channel throws a CommunicationException , which contains a QuotaExceededException as an inner exception. MaxOutputDelay Declaration public TimeSpan MaxOutputDelay { get; set; } Property Value Type Description TimeSpan MaxPendingAccepts Declaration public int MaxPendingAccepts { get; set; } Property Value Type Description Int32 MaxPendingConnections Declaration public int MaxPendingConnections { get; set; } Property Value Type Description Int32 TransferMode Gets or sets a value that indicates whether the messages are buffered or streamed with the connection-oriented transport. Declaration public TransferMode TransferMode { get; set; } Property Value Type Description TransferMode A TransferMode value which indicates whether a channel uses streamed or buffered modes of message transfer. The default is Buffered . Remarks This property determines the transfer mode for requests and responses. Possible values include: Buffered Streamed StreamedRequest StreamedResponse Methods CanBuildServiceDispatcher<TChannel>(BindingContext) Declaration public override bool CanBuildServiceDispatcher<TChannel>(BindingContext context) where TChannel : class, IChannel Parameters Type Name Description BindingContext context Returns Type Description Boolean Type Parameters Name Description TChannel Overrides BindingElement.CanBuildServiceDispatcher<TChannel>(BindingContext) GetProperty<T>(BindingContext) Gets properties from the binding stack, if present. Declaration public override T GetProperty<T>(BindingContext context) where T : class Parameters Type Name Description BindingContext context The binding context. Returns Type Description T A T object from the binding stack, if present. Type Parameters Name Description T Type of the property. Overrides TransportBindingElement.GetProperty<T>(BindingContext) Remarks This method receives a binding context as an input parameter, which represents the stack of binding elements. Each binding element in the stack can handle the inquiry itself, delegate the inquiry, or a combination of the two. Each binding element can modify the context if it delegates the inquiry. However, a transport binding element handles the inquiry itself. This method is implemented by binding elements as well as by the run-time objects such as IChannelFactory , IChannelListener , and IChannel . IsMatch(BindingElement) Declaration protected override bool IsMatch(BindingElement b) Parameters Type Name Description BindingElement b Returns Type Description Boolean Overrides TransportBindingElement.IsMatch(BindingElement) Explicit Interface Implementations IPolicyExportExtension.ExportPolicy(MetadataExporter, PolicyConversionContext) Declaration void IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext context) Parameters Type Name Description MetadataExporter exporter PolicyConversionContext context IWsdlExportExtension.ExportContract(WsdlExporter, WsdlContractConversionContext) Declaration void IWsdlExportExtension.ExportContract(WsdlExporter exporter, WsdlContractConversionContext context) Parameters Type Name Description WsdlExporter exporter WsdlContractConversionContext context IWsdlExportExtension.ExportEndpoint(WsdlExporter, WsdlEndpointConversionContext) Declaration void IWsdlExportExtension.ExportEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext endpointContext) Parameters Type Name Description WsdlExporter exporter WsdlEndpointConversionContext endpointContext Implements IWsdlExportExtension IPolicyExportExtension"
  },
  "api-corewcf/CoreWCF.Channels.CustomBinding.html": {
    "href": "api-corewcf/CoreWCF.Channels.CustomBinding.html",
    "title": "Class CustomBinding",
    "keywords": "Class CustomBinding Defines a binding from a list of binding elements. Inheritance Object Binding CustomBinding Implements IDefaultCommunicationTimeouts Inherited Members Binding.CanBuildServiceDispatcher<TChannel>(BindingParameterCollection) Binding.BuildServiceDispatcher<TChannel>(BindingParameterCollection, IServiceDispatcher) Binding.BuildServiceDispatcher<TChannel>(Uri, BindingParameterCollection, IServiceDispatcher) Binding.BuildServiceDispatcher<TChannel>(Uri, String, BindingParameterCollection, IServiceDispatcher) Binding.GetProperty<T>(BindingParameterCollection) Binding.CloseTimeout Binding.Name Binding.Namespace Binding.OpenTimeout Binding.ReceiveTimeout Binding.MessageVersion Binding.SendTimeout Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public class CustomBinding : Binding, IDefaultCommunicationTimeouts Remarks Use a custom binding when one of the system-provided bindings does not meet the requirements of your service. A custom binding could be used, for example, to enable the use of a new transport or a new encoder at a service endpoint. A custom binding is constructed using one of the CustomBinding from a collection of binding elements that are 'stacked'; in a specific order: At the top is an optional CoreWCF.Channels.TransactionFlowBindingElement that allows flowing transactions. Next is an optional xref:CoreWCF.Channels.ReliableSessionBindingElement that provides a session and ordering mechanism as defined in the WS-ReliableMessaging specification. This notion of a session can cross SOAP and transport intermediaries. Next is an optional security binding element that provides security features like authorization, authentication, protection, and confidentiality. The following security binding elements are provided by Windows Communication Foundation (WCF): SecurityBindingElement CoreWCF.Channels.AsymmetricSecurityBindingElement SymmetricSecurityBindingElement TransportSecurityBindingElement Next are the optional message-patterns specified by binding elements: CoreWCF.Channels.CompositeDuplexBindingElement Next are the optional transport upgrades/helpers binding elements: CoreWCF.Channels.PnrpPeerResolverBindingElement SslStreamSecurityBindingElement WindowsStreamSecurityBindingElement Next is a required message encoding binding element. You can use your own transport or use one of the following message encoding bindings: TextMessageEncodingBindingElement BinaryMessageEncodingBindingElement MtomMessageEncodingBindingElement At the bottom is a required transport element. You can use your own transport or use one of transport binding elements provided by Windows Communication Foundation (WCF): TcpTransportBindingElement CoreWCF.Channels.NamedPipeTransportBindingElement HttpTransportBindingElement HttpsTransportBindingElement CoreWCF.Channels.MsmqTransportBindingElement CoreWCF.MsmqIntegration.MsmqIntegrationBindingElement CoreWCF.Channels.PeerTransportBindingElement The following table summarizes the options for each layer. Layer Options Required Transaction Flow CoreWCF.Channels.TransactionFlowBindingElement No Reliability CoreWCF.Channels.ReliableSessionBindingElement No Security Symmetric, Asymmetric, Transport-Level No Shape Change CoreWCF.Channels.CompositeDuplexBindingElement No Transport Upgrades SSL stream, Windows stream, Peer Resolver No Encoding Text, Binary, MTOM, Custom Yes Transport TCP, Named Pipes, HTTP, HTTPS, flavors of MSMQ, Custom Yes In addition, you can define your own binding elements and insert them between any of the preceding defined layers. For a discussion on how to use a custom binding to modify a system-provided binding, see How to: Customize a System-Provided Binding . Note When calling a WCF service built with .NET Framework 4.0 or later from a WCF client application built with .NET Framework 3.5 or earlier, the configuration file generated by svcutil.exe or adding a service reference from Visual Studio will contain the validity attribute in the binding configuration. This attribute is not recognized by the .NET Framework 3.5 runtime and the application will thrown an ConfigurationErrorsException with the message 'Unrecognized attribute validity';. To workaround this problem, remove the validity attribute from the binding configuration. Constructors CustomBinding() Initializes a new instance of the CustomBinding class. Declaration public CustomBinding() CustomBinding(Binding) Initializes a new instance of the CustomBinding class from the values of a specified binding Declaration public CustomBinding(Binding binding) Parameters Type Name Description Binding binding The Binding that is used to initialize the custom binding. CustomBinding(BindingElement[]) Initializes a new instance of the CustomBinding class from an array of binding elements. Declaration public CustomBinding(params BindingElement[] bindingElementsInTopDownChannelStackOrder) Parameters Type Name Description BindingElement [] bindingElementsInTopDownChannelStackOrder The <xref:system.array> of type BindingElement used to initialize the custom binding. CustomBinding(IEnumerable<BindingElement>) Initializes a new instance of the CustomBinding class with the binding elements from a complete channel stack. Declaration public CustomBinding(IEnumerable<BindingElement> bindingElementsInTopDownChannelStackOrder) Parameters Type Name Description IEnumerable < BindingElement > bindingElementsInTopDownChannelStackOrder An IEnumerable of type BindingElement that contains the binding elements of the channel stack in top-down order. CustomBinding(String, String, BindingElement[]) Initializes a new instance of the CustomBinding class from an array of binding elements with a specified name and namespace. Declaration public CustomBinding(string name, string ns, params BindingElement[] bindingElementsInTopDownChannelStackOrder) Parameters Type Name Description String name The name of the binding. String ns The name of the binding. BindingElement [] bindingElementsInTopDownChannelStackOrder The <xref:system.array> of type BindingElement used to initialize the custom binding. Properties Elements Gets the binding elements from the custom binding. Declaration public BindingElementCollection Elements { get; } Property Value Type Description BindingElementCollection The BindingElementCollection that contains the binding elements from the custom binding Scheme Gets the URI scheme for transport used by the custom binding. Declaration public override string Scheme { get; } Property Value Type Description String The URI scheme for transport used by the custom binding; or an empty string if there is no transport ( TransportBindingElement is null). Overrides Binding.Scheme Remarks This method is provided to enable binding validation against base addresses. Methods CreateBindingElements() Returns a generic collection of the binding elements from the custom binding Declaration public override BindingElementCollection CreateBindingElements() Returns Type Description BindingElementCollection An ICollection object of type BindingElement that contains the binding elements from the custom binding. Overrides Binding.CreateBindingElements() Implements IDefaultCommunicationTimeouts"
  },
  "api-corewcf/CoreWCF.Channels.DictionaryHeader.html": {
    "href": "api-corewcf/CoreWCF.Channels.DictionaryHeader.html",
    "title": "Class DictionaryHeader",
    "keywords": "Class DictionaryHeader Inheritance Object MessageHeaderInfo MessageHeader DictionaryHeader AddressingHeader Inherited Members MessageHeader.IsMessageVersionSupported(MessageVersion) MessageHeader.ToString() MessageHeader.WriteHeader(XmlWriter, MessageVersion) MessageHeader.WriteHeader(XmlDictionaryWriter, MessageVersion) MessageHeader.WriteStartHeader(XmlDictionaryWriter, MessageVersion) MessageHeader.WriteHeaderContents(XmlDictionaryWriter, MessageVersion) MessageHeader.OnWriteHeaderContents(XmlDictionaryWriter, MessageVersion) MessageHeader.WriteHeaderAttributes(XmlDictionaryWriter, MessageVersion) MessageHeader.CreateHeader(String, String, Object) MessageHeader.CreateHeader(String, String, Object, Boolean) MessageHeader.CreateHeader(String, String, Object, Boolean, String) MessageHeader.CreateHeader(String, String, Object, Boolean, String, Boolean) MessageHeader.CreateHeader(String, String, Object, XmlObjectSerializer) MessageHeader.CreateHeader(String, String, Object, XmlObjectSerializer, Boolean) MessageHeader.CreateHeader(String, String, Object, XmlObjectSerializer, Boolean, String) MessageHeader.CreateHeader(String, String, Object, XmlObjectSerializer, Boolean, String, Boolean) MessageHeader.Actor MessageHeader.IsReferenceParameter MessageHeader.MustUnderstand MessageHeader.Relay Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class DictionaryHeader : MessageHeader Constructors DictionaryHeader() Declaration protected DictionaryHeader() Properties DictionaryName Declaration public abstract XmlDictionaryString DictionaryName { get; } Property Value Type Description XmlDictionaryString DictionaryNamespace Declaration public abstract XmlDictionaryString DictionaryNamespace { get; } Property Value Type Description XmlDictionaryString Name Declaration public override string Name { get; } Property Value Type Description String Overrides MessageHeaderInfo.Name Namespace Declaration public override string Namespace { get; } Property Value Type Description String Overrides MessageHeaderInfo.Namespace Methods OnWriteStartHeader(XmlDictionaryWriter, MessageVersion) Declaration protected override void OnWriteStartHeader(XmlDictionaryWriter writer, MessageVersion messageVersion) Parameters Type Name Description XmlDictionaryWriter writer MessageVersion messageVersion Overrides MessageHeader.OnWriteStartHeader(XmlDictionaryWriter, MessageVersion)"
  },
  "api-corewcf/CoreWCF.Channels.FaultConverter.html": {
    "href": "api-corewcf/CoreWCF.Channels.FaultConverter.html",
    "title": "Class FaultConverter",
    "keywords": "Class FaultConverter Converts exceptions thrown by a channel into SOAP fault messages that conform to the channel's protocol. Inheritance Object FaultConverter Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class FaultConverter : Object Remarks To be added. Constructors FaultConverter() Initializes a new instance of the FaultConverter class. Declaration protected FaultConverter() Methods GetDefaultFaultConverter(MessageVersion) Gets the default fault converter. Declaration public static FaultConverter GetDefaultFaultConverter(MessageVersion version) Parameters Type Name Description MessageVersion version The message version. Returns Type Description FaultConverter An instance of FaultConverter . Remarks Transport channels should delegate to this method to get the default SOAP WS-Addressing fault converter. OnTryCreateException(Message, MessageFault, out Exception) Tries to create the exception. Declaration protected abstract bool OnTryCreateException(Message message, MessageFault fault, out Exception exception) Parameters Type Name Description Message message The fault message. MessageFault fault The fault. Exception exception If conversion is successful, the SOAP exception, returned as an out parameter. Returns Type Description Boolean true if fault was successfully converted; otherwise, false. The default is false. Remarks For a channel layer to implement GetProperty to support converting fault messages to SOAP exceptions, override this method to create an exception by doing the following steps: Inspect the fault message. If recognized, do the appropriate conversion. If not recognized, convert it by a call to GetProperty on the inner channel. Transport channels should delegate to GetDefaultFaultConverter(MessageVersion) to get the default SOAP/WS-Addressing fault converter. OnTryCreateFaultMessage(Exception, out Message) Tries to create the fault message once the fault has been converted to a SOAP exception. Declaration protected abstract bool OnTryCreateFaultMessage(Exception exception, out Message message) Parameters Type Name Description Exception exception The SOAP exception. Message message The fault message returned as an out parameter. Returns Type Description Boolean true if fault message was successfully created; otherwise, false. The default is false. Remarks Channels that support fault conversion implement GetProperty and override this method to do the following. If a layer can convert the exception it does; otherwise it calls GetProperty on its inner channel. Transport channels should delegate to GetDefaultFaultConverter(MessageVersion) to get the default SOAP/WS-Addressing fault converter. TryCreateException(Message, MessageFault, out Exception) Wraps OnTryCreateFaultMessage(Exception, out Message) with error checking. Declaration public bool TryCreateException(Message message, MessageFault fault, out Exception exception) Parameters Type Name Description Message message The fault message. MessageFault fault The fault Exception exception If conversion is successful, the SOAP exception, returned as an out parameter. Returns Type Description Boolean true if fault was successfully converted; otherwise, false. The default is false. Remarks OnTryCreateFaultMessage(Exception, out Message) is an abstract class that you must implement. The current method wraps several parameter error tests around a call to that method. TryCreateFaultMessage(Exception, out Message) Declaration public bool TryCreateFaultMessage(Exception exception, out Message message) Parameters Type Name Description Exception exception Message message Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.Channels.Framing.FramingConnection.html": {
    "href": "api-corewcf/CoreWCF.Channels.Framing.FramingConnection.html",
    "title": "Class FramingConnection",
    "keywords": "Class FramingConnection Inheritance Object FramingConnection Namespace : CoreWCF.Channels.Framing Assembly : CoreWCF.NetTcp.dll Syntax public class FramingConnection : Object Constructors FramingConnection(ConnectionContext) Declaration public FramingConnection(ConnectionContext context) Parameters Type Name Description ConnectionContext context Properties BufferManager Declaration public BufferManager BufferManager { get; } Property Value Type Description BufferManager ConnectionBufferSize Declaration public int ConnectionBufferSize { get; } Property Value Type Description Int32 EnvelopeBuffer Declaration public Memory<byte> EnvelopeBuffer { get; } Property Value Type Description Memory < Byte > EnvelopeOffset Declaration public int EnvelopeOffset { get; } Property Value Type Description Int32 EnvelopeSize Declaration public int EnvelopeSize { get; } Property Value Type Description Int32 EOF Declaration public bool EOF { get; } Property Value Type Description Boolean Input Declaration public PipeReader Input { get; } Property Value Type Description PipeReader Logger Declaration public ILogger Logger { get; } Property Value Type Description ILogger MaxBufferSize Declaration public int MaxBufferSize { get; } Property Value Type Description Int32 MaxReceivedMessageSize Declaration public long MaxReceivedMessageSize { get; } Property Value Type Description Int64 MessageEncoder Declaration public MessageEncoder MessageEncoder { get; } Property Value Type Description MessageEncoder MessageEncoderFactory Declaration public MessageEncoderFactory MessageEncoderFactory { get; } Property Value Type Description MessageEncoderFactory Output Declaration public PipeWriter Output { get; } Property Value Type Description PipeWriter RawTransport Declaration public IDuplexPipe RawTransport { get; } Property Value Type Description IDuplexPipe RemoteEndpoint Declaration public IPEndPoint RemoteEndpoint { get; } Property Value Type Description IPEndPoint SecurityCapabilities Declaration public ISecurityCapabilities SecurityCapabilities { get; } Property Value Type Description ISecurityCapabilities SecurityMessageProperty Declaration public SecurityMessageProperty SecurityMessageProperty { get; } Property Value Type Description SecurityMessageProperty ServiceDispatcher Declaration public IServiceDispatcher ServiceDispatcher { get; } Property Value Type Description IServiceDispatcher StreamUpgradeAcceptor Declaration public StreamUpgradeAcceptor StreamUpgradeAcceptor { get; } Property Value Type Description StreamUpgradeAcceptor TransferMode Declaration public TransferMode TransferMode { get; } Property Value Type Description TransferMode Transport Declaration public IDuplexPipe Transport { get; set; } Property Value Type Description IDuplexPipe Via Declaration public Uri Via { get; } Property Value Type Description Uri Methods Abort() Declaration public void Abort() Abort(Exception) Declaration public void Abort(Exception e) Parameters Type Name Description Exception e Abort(String) Declaration public void Abort(string reason) Parameters Type Name Description String reason CloseAsync(TimeSpan) Declaration public Task CloseAsync(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout Returns Type Description Task SendFaultAsync(String, TimeSpan, Int32) Declaration public Task SendFaultAsync(string faultString, TimeSpan sendTimeout, int maxRead) Parameters Type Name Description String faultString TimeSpan sendTimeout Int32 maxRead Returns Type Description Task"
  },
  "api-corewcf/CoreWCF.Channels.Framing.html": {
    "href": "api-corewcf/CoreWCF.Channels.Framing.html",
    "title": "Namespace CoreWCF.Channels.Framing",
    "keywords": "Namespace CoreWCF.Channels.Framing Classes FramingConnection RawStream"
  },
  "api-corewcf/CoreWCF.Channels.Framing.RawStream.html": {
    "href": "api-corewcf/CoreWCF.Channels.Framing.RawStream.html",
    "title": "Class RawStream",
    "keywords": "Class RawStream Inheritance Object RawStream Namespace : CoreWCF.Channels.Framing Assembly : CoreWCF.NetTcp.dll Syntax public class RawStream : Stream Constructors RawStream(FramingConnection) Declaration public RawStream(FramingConnection connection) Parameters Type Name Description FramingConnection connection Properties CanRead Declaration public override bool CanRead { get; } Property Value Type Description Boolean CanSeek Declaration public override bool CanSeek { get; } Property Value Type Description Boolean CanWrite Declaration public override bool CanWrite { get; } Property Value Type Description Boolean Length Declaration public override long Length { get; } Property Value Type Description Int64 Position Declaration public override long Position { get; set; } Property Value Type Description Int64 Methods BeginRead(Byte[], Int32, Int32, AsyncCallback, Object) Declaration public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count AsyncCallback callback Object state Returns Type Description IAsyncResult BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object) Declaration public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count AsyncCallback callback Object state Returns Type Description IAsyncResult EndRead(IAsyncResult) Declaration public override int EndRead(IAsyncResult asyncResult) Parameters Type Name Description IAsyncResult asyncResult Returns Type Description Int32 EndWrite(IAsyncResult) Declaration public override void EndWrite(IAsyncResult asyncResult) Parameters Type Name Description IAsyncResult asyncResult FinishUnwrapReadAsync() Declaration public Task FinishUnwrapReadAsync() Returns Type Description Task Flush() Declaration public override void Flush() FlushAsync(CancellationToken) Declaration public override Task FlushAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task Read(Byte[], Int32, Int32) Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count Returns Type Description Int32 ReadAsync(Byte[], Int32, Int32, CancellationToken) Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count CancellationToken cancellationToken Returns Type Description Task < Int32 > Seek(Int64, SeekOrigin) Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description Int64 offset SeekOrigin origin Returns Type Description Int64 SetLength(Int64) Declaration public override void SetLength(long value) Parameters Type Name Description Int64 value StartUnwrapRead() Declaration public void StartUnwrapRead() Write(Byte[], Int32, Int32) Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count WriteAsync(Byte[], Int32, Int32, CancellationToken) Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count CancellationToken cancellationToken Returns Type Description Task"
  },
  "api-corewcf/CoreWCF.Channels.HeaderInfoCache.HeaderInfo.html": {
    "href": "api-corewcf/CoreWCF.Channels.HeaderInfoCache.HeaderInfo.html",
    "title": "Class HeaderInfoCache.HeaderInfo",
    "keywords": "Class HeaderInfoCache.HeaderInfo Inheritance Object MessageHeaderInfo HeaderInfoCache.HeaderInfo Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public class HeaderInfo : MessageHeaderInfo Constructors HeaderInfo(XmlDictionaryReader, String, Boolean, Boolean, Boolean) Declaration public HeaderInfo(XmlDictionaryReader reader, string actor, bool mustUnderstand, bool relay, bool isReferenceParameter) Parameters Type Name Description XmlDictionaryReader reader String actor Boolean mustUnderstand Boolean relay Boolean isReferenceParameter Properties Actor Declaration public override string Actor { get; } Property Value Type Description String Overrides MessageHeaderInfo.Actor IsReferenceParameter Declaration public override bool IsReferenceParameter { get; } Property Value Type Description Boolean Overrides MessageHeaderInfo.IsReferenceParameter MustUnderstand Declaration public override bool MustUnderstand { get; } Property Value Type Description Boolean Overrides MessageHeaderInfo.MustUnderstand Name Declaration public override string Name { get; } Property Value Type Description String Overrides MessageHeaderInfo.Name Namespace Declaration public override string Namespace { get; } Property Value Type Description String Overrides MessageHeaderInfo.Namespace Relay Declaration public override bool Relay { get; } Property Value Type Description Boolean Overrides MessageHeaderInfo.Relay Methods Matches(XmlDictionaryReader, String, Boolean, Boolean, Boolean) Declaration public bool Matches(XmlDictionaryReader reader, string actor, bool mustUnderstand, bool relay, bool isRefParam) Parameters Type Name Description XmlDictionaryReader reader String actor Boolean mustUnderstand Boolean relay Boolean isRefParam Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.Channels.HeaderInfoCache.html": {
    "href": "api-corewcf/CoreWCF.Channels.HeaderInfoCache.html",
    "title": "Class HeaderInfoCache",
    "keywords": "Class HeaderInfoCache Inheritance Object HeaderInfoCache Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public class HeaderInfoCache : Object Constructors HeaderInfoCache() Declaration public HeaderInfoCache() Methods ReturnHeaderInfo(MessageHeaderInfo) Declaration public void ReturnHeaderInfo(MessageHeaderInfo headerInfo) Parameters Type Name Description MessageHeaderInfo headerInfo TakeHeaderInfo(XmlDictionaryReader, String, Boolean, Boolean, Boolean) Declaration public MessageHeaderInfo TakeHeaderInfo(XmlDictionaryReader reader, string actor, bool mustUnderstand, bool relay, bool isRefParam) Parameters Type Name Description XmlDictionaryReader reader String actor Boolean mustUnderstand Boolean relay Boolean isRefParam Returns Type Description MessageHeaderInfo"
  },
  "api-corewcf/CoreWCF.Channels.html": {
    "href": "api-corewcf/CoreWCF.Channels.html",
    "title": "Namespace CoreWCF.Channels",
    "keywords": "Namespace CoreWCF.Channels Classes AddressHeader Represents a header that encapsulates an address information item used to identify or interact with an endpoint. AddressHeaderCollection Represents a thread-safe, read-only collection of address headers. AddressingHeader AddressingVersion The WS-Addressing version associated with a SOAP message or understood by an endpoint. BaseUriWithWildcard BasicHttpBindingDefaults BasicHttpSecurityMode Enum BasicHttpSecurityMode BinaryMessageEncodingBindingElement The binding element that specifies the .NET Binary Format for XML used to encode messages. Binding Contains the binding elements that specify the protocols, transports, and message encoders used for communication between clients and services BindingContext Creates object instances based on command line parser results, injected services, and other value sources. BindingElement The elements of the bindings that build the channel factories and channel listeners for various types of channels that are used to process outgoing and incoming messages. BindingElementCollection Represents the collection of binding elements used in a binding. BindingParameterCollection Represents a collection of binding parameters that store information used by binding elements to build factories. BodyWriter Represents the writer of the message body. BufferManager Many Windows Communication Foundation (WCF) features require the use of buffers, which are expensive to create and destroy. You can use the BufferManager class to manage a buffer pool. The pool and its buffers are created when you instantiate this class and destroyed when the buffer pool is reclaimed by garbage collection. Every time you need to use a buffer, you take one from the pool, use it, and return it to the pool when done. This process is much faster than creating and destroying a buffer every time you need to use one. ByteStreamMessage Represents a byte stream message. ByteStreamMessageEncodingBindingElement The binding element that specifies the message encoding as a stream of bytes and has the option to specify the character encoding. ChannelBindingMessageProperty ChannelManagerBase Provides a base implementation for managing the default timeouts that are associated with channel and listener factories. CommunicationObject Provides a common base implementation for the basic state machine common to all communication-oriented objects in the system, including channels, listeners, and the channel and listener factories. CompressionFormat Specifies the channels compression format. ConnectionOrientedTransportBindingElement An abstract class that supplements the base with additional properties that are common to connection-oriented transports such as TCP and named pipes. CustomBinding Defines a binding from a list of binding elements. DictionaryHeader FaultConverter Converts exceptions thrown by a channel into SOAP fault messages that conform to the channel's protocol. HeaderInfoCache HeaderInfoCache.HeaderInfo HttpRequestMessageProperty Provides access to the HTTP request to access and respond to the additional information made available for requests over the HTTP protocol. HttpResponseMessageProperty Provides access to the HTTP response in order to access and respond to the additional information made available for requests over the HTTP protocol. HttpsTransportBindingElement Represents the binding element used to specify an HTTPS transport for transmitting messages. HttpTransportBindingElement Represents the binding element used to specify an HTTP transport for transmitting messages. LocalServiceSecuritySettings Provides local service security properties that can be set. Message Represents the unit of communication between endpoints in a distributed environment. MessageBuffer Represents a memory buffer that stores an entire message for future consumption. MessageEncoder The encoder is the component that is used to write messages to a stream and to read messages from a stream. MessageEncoderFactory An abstract base class that represents the factory for producing message encoders that can read messages from a stream and write them to a stream for various types of message encoding. MessageEncodingBindingElement The binding element that specifies the message version used to encode messages. MessageFault Represents an in-memory representation of a SOAP fault that can be passed to CreateMessage to create a message that contains a fault. MessageHeader Represents the content of a SOAP header. MessageHeaderInfo Represents system information regarding a SOAP message header. MessageHeaders Represents a collection of message headers for a message. This class cannot be inherited. MessageProperties Represents a set of properties for a message. This class cannot be inherited. MessageState Specifies the status of a message. MessageVersion Specifies the versions of SOAP and WS-Addressing associated with a message and its exchange MtomMessageEncodingBindingElement The binding element that specifies the encoding and versioning used for Message Transmission Optimization Mechanism (MTOM) messages. PrivacyNoticeBindingElement Represents the binding element that contains the privacy policy for the WS-Federation binding. ReceiveContextState Represents the possible states for the receive context state machine. RecycledMessageState RemoteEndpointMessageProperty Makes available the client IP address and port number associated with the remote endpoint from which a message was sent. RequestContext Provides a reply that is correlated to an incoming request. SecurityBindingElement An abstract class that, when implemented, represents a binding element that supports channel SOAP message security. SecurityHeaderLayout Describes the layout of the security header. ServiceChannelFactory ServiceChannelProxy ServiceModelHttpMiddleware SessionOpenNotification Represents an open session notification used to update message properties. SslStreamSecurityBindingElement Represents a custom binding element that supports channel security using an SSL stream. StreamBodyWriter An abstract base class used to create custom BodyWriter classes that can be used to a message body as a stream. StreamSecurityUpgradeAcceptor To implement a custom security upgrade acceptor, inherit from this abstract base class. StreamSecurityUpgradeProvider Implements a custom security upgrade provider, inherited from this abstract base class. StreamUpgradeAcceptor To implement a custom upgrade acceptor, inherited from this abstract base class. StreamUpgradeBindingElement Adds a custom stream upgrade provider to a custom binding. StreamUpgradeProvider Implements a custom upgrade provider, inherited from this base class. SymmetricSecurityBindingElement Represents a custom binding element that supports channel security using symmetric encryption. TcpConnectionPoolSettings Represents properties that control the behavior of the TCP connection pool. TcpTransportBindingElement Represents the binding element for the TCP transport. TextMessageEncodingBindingElement The binding element that specifies the character encoding and message versioning used for text-based SOAP messages. ToHeader TransportBindingElement An abstract base class that represents a transport binding element. TransportCompressionSupportHelper TransportSecurityBindingElement Represents a custom binding element that supports mixed-mode security (such as, optimized message security over a secure transport). UnderstoodHeaders Represents a collection of message headers that are understood. This class cannot be inherited. UriCache WebBodyFormatMessageProperty Stores and retrieves the message encoding format of incoming and outgoing messages for the composite Web message encoder. WebContentFormat Specifies the message formats to which content types of incoming messages can be mapped. WebContentTypeMapper Specifies the format to which the content type of an incoming message is mapped. WebMessageEncoderFactory WebMessageEncodingBindingElement Enables plain-text XML, JavaScript Object Notation (JSON) message encodings and \"raw\" binary content to be read and written when used in a Windows Communication Foundation (WCF) binding. WebSocketMessageProperty Represents a web socket message property. WebSocketTransportSettings Represents settings for web socket transport. WebSocketTransportUsage Specifies an enumeration of WebSocket transport usage. WindowsStreamSecurityBindingElement Represents the binding element used to specify Windows stream security settings. XmlAttributeHolder Interfaces IAnonymousUriPrefixMatcher Implement this interface to register custom, anonymous URI prefixes. IBufferedMessageData IChannel Defines the basic interface that all channel objects must implement. It requires that they implement the state machine interface shared by all communication objects and that they implement a method to retrieve objects from the channel stack. IChannelBindingProvider ICompressedMessageEncoder IDuplexChannel Defines the interface that a channel must implement to both send and receive messages. IDuplexSession Defines the interface for the session implemented on each side of a bi-directional communication between messaging endpoints. IDuplexSessionChannel Defines the interface that associates a duplex channel with a session. IInputChannel Defines the interface that a channel must implement to receive a message. IInputSession Defines the interface for the session implemented on the receiving side of a one-way communication between messaging endpoints. IInputSessionChannel Defines the interface that associates an input channel with a session. IMessageProperty Defines an interface that you can implement to describe a set of properties for a message. IOutputChannel Defines the interface that a channel must implement to send a message. IOutputSession Defines the interface for the session implemented on the sending side of a one-way communication between messaging endpoints. IOutputSessionChannel Defines the interface that associates an output channel with a session. IReplyChannel Defines the interface that a channel must implement to be on the receiving side of a request-reply communication between messaging endpoints. IReplySessionChannel Defines the interface to associate a reply channel with a session. IRequestChannel Defines the contract that a channel must implement to be on the requesting side of a request-reply communication between messaging endpoints. IRequestReplyCorrelator IRequestSessionChannel Defines the interface to associate a request channel with a session. ISecurityCapabilities Defines the contract for specifying the security capabilities for bindings. ISecuritySession Represents a kind of that enforces the requirement that all messages exchanged on the session are between the same communicating parties that established the session. ISession Defines the interface to establish a shared context among parties that exchange messages by providing an ID for the communication session. ISessionChannel<TSession> Defines the interface that associates a channel with a specific type of session. ITransportCompressionSupport ITransportFactorySettings ITransportTokenAssertionProvider Provides a transport token assertion (for example, an HTTPS token assertion) for use in policy exports. IWebSocketCloseDetails Represents the details of the close status of the web socket connection."
  },
  "api-corewcf/CoreWCF.Channels.HttpRequestMessageProperty.html": {
    "href": "api-corewcf/CoreWCF.Channels.HttpRequestMessageProperty.html",
    "title": "Class HttpRequestMessageProperty",
    "keywords": "Class HttpRequestMessageProperty Provides access to the HTTP request to access and respond to the additional information made available for requests over the HTTP protocol. Inheritance Object HttpRequestMessageProperty Implements IMessageProperty Namespace : CoreWCF.Channels Assembly : CoreWCF.Http.dll Syntax public sealed class HttpRequestMessageProperty : Object, IMessageProperty Remarks This is a general-purpose class that gives the developer direct access to the HTTP request information, which can be used for encapsulating HTTP-specific information. One example of the use of this class is to support services implemented in accordance with the Representational State Transfer (REST) architecture. This class enables support for the following scenarios: Varies the HTTP verb used for each request. Allows HTTP header (key, value) pairs to be set and queried by request. Allows the query string to be specified for an HTTP request. This class can be used by HttpTransportBindingElement and related classes. For incoming messages, this property is added to messages. For outgoing messages, this property causes the following to happen: Method is set to Method . QueryString is appended to the RequestUri . Headers is added to the HTTP headers set to be transmitted. Properties Headers Gets the headers from the underlying HTTP Request. Declaration public WebHeaderCollection Headers { get; } Property Value Type Description WebHeaderCollection Returns a WebHeaderCollection that contains the HTTP headers in the HTTP request. Remarks There are situations in which this property is not available and attempts to access it may cause an exception. This can happen when WCF is hosted in IIS, after the HTTP request is complete, especially in one-way scenarios where the reply is sent back before the message has become available. Method Gets or sets the HTTP verb for the HTTP request. Declaration public string Method { get; } Property Value Type Description String The HTTP verb for the HTTP request. Remarks By default, WCF uses the POST verb for HTTP messages. The GET verb is used by WCF to display help information when accessing a ServiceHost's base address. This is useful for checking whether a WCF service is active when using a Web browser. Other methods defined by the HTTP RFC are PUT, DELETE, HEAD, OPTIONS, TRACE, and CONNECT. These methods have special behaviors when interoperating with other services. Name Gets the name of the message property associated with the HttpRequestMessageProperty class. Declaration public static string Name { get; } Property Value Type Description String The value \"httpRequest\". QueryString Gets or sets the query string for the HTTP request. Declaration public string QueryString { get; } Property Value Type Description String The query string from the HTTP request. Remarks There are many well-known security attacks based on an HTTP request's query string (for example, the SQL injection attack). Always rigorously validate the parameters contained in the query string. If you use the values without validation, a well-known security hole is open. SuppressEntityBody Gets or sets a value that indicates whether the body of the message is ignored and only the headers are sent. Declaration public bool SuppressEntityBody { get; } Property Value Type Description Boolean true if the message body is suppressed; otherwise, false. The default is false. Remarks This property is used for empty message requests: for example, a service that accepts a GET request without a message body. In this case, when building the HttpRequestMessageProperty object for the response message, set the SuppressEntityBody property to true. When interoperating with non-WCF services, it is important to note that certain verbs are expected to contain a message body according to the HTTP standard; these include PUT and POST. Other verbs are expected to suppress the message body; these include GET and HEAD. Explicit Interface Implementations IMessageProperty.CreateCopy() Creates and returns a copy of the current object. Declaration IMessageProperty IMessageProperty.CreateCopy() Returns Type Description IMessageProperty A IMessageProperty object that represents a copy of the current object. Remarks This member is an explicit interface member implementation. It can be used only when the HttpRequestMessageProperty instance is cast to an IMessageProperty interface. Implements IMessageProperty"
  },
  "api-corewcf/CoreWCF.Channels.HttpResponseMessageProperty.html": {
    "href": "api-corewcf/CoreWCF.Channels.HttpResponseMessageProperty.html",
    "title": "Class HttpResponseMessageProperty",
    "keywords": "Class HttpResponseMessageProperty Provides access to the HTTP response in order to access and respond to the additional information made available for requests over the HTTP protocol. Inheritance Object HttpResponseMessageProperty Implements IMessageProperty Namespace : CoreWCF.Channels Assembly : CoreWCF.Http.dll Syntax public sealed class HttpResponseMessageProperty : Object, IMessageProperty Remarks This is a general-purpose class that gives you direct access to the HTTP response information, which could be used for encapsulation of HTTP-specific information. One use of this class is to support services implemented in accordance with the Representational State Transfer (REST) architecture. This class enables you to support the following scenarios: Controls whether an entity body is transmitted. Allows HTTP header (key, value) pairs to be set for each response. Varies the status code and status description used for each response. This class can be used by HttpTransportBindingElement and related classes. Constructors HttpResponseMessageProperty() Initializes a new instance of the HttpResponseMessageProperty class. Declaration public HttpResponseMessageProperty() Remarks This constructor initializes the object as follows: StatusCode = OK StatusDescription is set to null. SuppressEntityBody = false. Fields DefaultStatusCode Declaration public const HttpStatusCode DefaultStatusCode Field Value Type Description HttpStatusCode DefaultStatusDescription Declaration public const string DefaultStatusDescription = null Field Value Type Description String Properties Headers Gets the HTTP headers from the HTTP response. Declaration public WebHeaderCollection Headers { get; } Property Value Type Description WebHeaderCollection Returns a WebHeaderCollection that contains the HTTP headers in the HTTP response. Name Gets the name of the message property associated with the HttpResponseMessageProperty class. Declaration public static string Name { get; } Property Value Type Description String Returns \"httpResponse\". StatusCode Gets or sets the status code of the current HTTP response to which this property is attached. Declaration public HttpStatusCode StatusCode { get; set; } Property Value Type Description HttpStatusCode Returns the StatusCode to send on the HTTP response. Remarks This property has one of the values in the HttpStatusCode enumeration. Exceptions Type Condition ArgumentOutOfRangeException The value is set to less than 100 or greater than 599. StatusDescription Gets or sets the description of the status code of the current HTTP response to which this property is attached. Declaration public string StatusDescription { get; set; } Property Value Type Description String Returns the StatusDescription to send for the HTTP response. Remarks This property provides a user-friendly description of the returned status code. SuppressEntityBody Gets or sets a value indicating whether to suppress entity body. Declaration public bool SuppressEntityBody { get; set; } Property Value Type Description Boolean Remarks If this is true, then the content-type will not be set. SuppressPreamble Declaration public bool SuppressPreamble { get; set; } Property Value Type Description Boolean Explicit Interface Implementations IMessageProperty.CreateCopy() Creates a new copy of the current instance. Declaration IMessageProperty IMessageProperty.CreateCopy() Returns Type Description IMessageProperty A newly created copy of type IMessageProperty of the current instance. Remarks This member is an explicit interface member implementation. It can be used only when the HttpResponseMessageProperty instance is cast to an IMessageProperty interface. Implements IMessageProperty"
  },
  "api-corewcf/CoreWCF.Channels.HttpsTransportBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Channels.HttpsTransportBindingElement.html",
    "title": "Class HttpsTransportBindingElement",
    "keywords": "Class HttpsTransportBindingElement Represents the binding element used to specify an HTTPS transport for transmitting messages. Inheritance Object BindingElement TransportBindingElement HttpTransportBindingElement HttpsTransportBindingElement Implements IWsdlExportExtension IPolicyExportExtension ITransportTokenAssertionProvider Inherited Members HttpTransportBindingElement.BuildServiceDispatcher<TChannel>(BindingContext, IServiceDispatcher) HttpTransportBindingElement.CanBuildServiceDispatcher<TChannel>(BindingContext) HttpTransportBindingElement.IPolicyExportExtension.ExportPolicy(MetadataExporter, PolicyConversionContext) HttpTransportBindingElement.IWsdlExportExtension.ExportContract(WsdlExporter, WsdlContractConversionContext) HttpTransportBindingElement.IWsdlExportExtension.ExportEndpoint(WsdlExporter, WsdlEndpointConversionContext) HttpTransportBindingElement.AuthenticationScheme HttpTransportBindingElement.MaxBufferSize HttpTransportBindingElement.KeepAliveEnabled HttpTransportBindingElement.Realm HttpTransportBindingElement.TransferMode HttpTransportBindingElement.WebSocketSettings HttpTransportBindingElement.ExtendedProtectionPolicy TransportBindingElement.ExportWsdlEndpoint(WsdlExporter, WsdlEndpointConversionContext, String, EndpointAddress, AddressingVersion) TransportBindingElement.IsMatch(BindingElement) TransportBindingElement.ManualAddressing TransportBindingElement.MaxBufferPoolSize TransportBindingElement.MaxReceivedMessageSize Namespace : CoreWCF.Channels Assembly : CoreWCF.Http.dll Syntax public class HttpsTransportBindingElement : HttpTransportBindingElement, IWsdlExportExtension, IPolicyExportExtension, ITransportTokenAssertionProvider Remarks The HttpsTransportBindingElement class is the starting point for creating a custom binding that implements the HTTPS transport protocol. HTTPS is the primary transport used for secure interoperability purposes. HTTPS is supported by the Windows Communication Foundation (WCF) to ensure interoperability with other Web services stacks. The WCF service model uses this class to create factory objects that implement the IChannelFactory and IChannelListener interfaces. These factory objects, in turn, create the channels and listeners that transmit SOAP messages using the HTTPS protocol. You control the configuration of the factories that this class creates by setting its properties, such as: RequireClientCertificate . You can also set properties on the base class, HttpTransportBindingElement , such as: AuthenticationScheme , HostNameComparisonMode , and MaxBufferSize . You can also set properties on the base class TransportBindingElement , such as: ManualAddressing , and MaxBufferPoolSize . For a complete list of properties, see TransportBindingElement . Constructors HttpsTransportBindingElement() Initializes a new instance of the HttpsTransportBindingElement class. Declaration public HttpsTransportBindingElement() Remarks This method is a copy constructor used to clone (make another copy of) the binding element. HttpsTransportBindingElement(HttpsTransportBindingElement) Initializes a new instance of the HttpsTransportBindingElement class. Declaration protected HttpsTransportBindingElement(HttpsTransportBindingElement elementToBeCloned) Parameters Type Name Description HttpsTransportBindingElement elementToBeCloned An instance of the HttpsTransportBindingElement class. Remarks This method is a copy constructor used to clone (make another copy of) the binding element. Properties RequireClientCertificate Gets or sets a value that indicates whether SSL client authentication is required. Declaration public bool RequireClientCertificate { get; set; } Property Value Type Description Boolean true if SSL client authentication is required; otherwise, false. The default is false. Scheme Returns the URI scheme for the transport. Declaration public override string Scheme { get; } Property Value Type Description String Returns the URI scheme for the transport, which is \"HTTPS\". Overrides HttpTransportBindingElement.Scheme Remarks This method is provided to enable binding validation against base addresses. Methods Clone() Creates a copy of the current binding element. Declaration public override BindingElement Clone() Returns Type Description BindingElement A copy of the current binding element. Overrides HttpTransportBindingElement.Clone() GetProperty<T>(BindingContext) Gets a specified object from the BindingContext . Declaration public override T GetProperty<T>(BindingContext context) where T : class Parameters Type Name Description BindingContext context A BindingContext . Returns Type Description T The specified object from the BindingContext , or null if the object isn't found. Type Parameters Name Description T The object to get. Overrides HttpTransportBindingElement.GetProperty<T>(BindingContext) Remarks This method gets the specified object from the base class, or from one of that class's ancestors. The object returned is usually a collection of properties, for example an object that implements ISecurityCapabilities . GetTransportTokenAssertion() Declaration public XmlElement GetTransportTokenAssertion() Returns Type Description XmlElement Implements IWsdlExportExtension IPolicyExportExtension ITransportTokenAssertionProvider"
  },
  "api-corewcf/CoreWCF.Channels.HttpTransportBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Channels.HttpTransportBindingElement.html",
    "title": "Class HttpTransportBindingElement",
    "keywords": "Class HttpTransportBindingElement Represents the binding element used to specify an HTTP transport for transmitting messages. Inheritance Object BindingElement TransportBindingElement HttpTransportBindingElement HttpsTransportBindingElement Implements IWsdlExportExtension IPolicyExportExtension Inherited Members TransportBindingElement.ExportWsdlEndpoint(WsdlExporter, WsdlEndpointConversionContext, String, EndpointAddress, AddressingVersion) TransportBindingElement.IsMatch(BindingElement) TransportBindingElement.ManualAddressing TransportBindingElement.MaxBufferPoolSize TransportBindingElement.MaxReceivedMessageSize Namespace : CoreWCF.Channels Assembly : CoreWCF.Http.dll Syntax public class HttpTransportBindingElement : TransportBindingElement, IWsdlExportExtension, IPolicyExportExtension Remarks The HttpTransportBindingElement class is the starting point for creating a custom binding that implements the HTTP transport protocol. HTTP is the primary transport used for interoperability purposes. This transport is supported by Windows Communication Foundation (WCF) to ensure interoperability with other non-WCF Web services stacks. The WCF service model uses this class to create factory objects that implement the IChannelFactory and IChannelListener interfaces. These factory objects, in turn, create the channels and listeners that transmit SOAP messages using the HTTP protocol. You configure the factories that this class creates by setting its properties, such as AuthenticationScheme , HostNameComparisonMode , and MaxBufferSize . You can also set properties on the base class, TransportBindingElement , such as ManualAddressing , MaxReceivedMessageSize , and MaxBufferPoolSize . For a complete list of properties, see TransportBindingElement . Constructors HttpTransportBindingElement() Initializes a new instance of the HttpTransportBindingElement class. Declaration public HttpTransportBindingElement() Remarks This method is a copy constructor used to clone the binding. HttpTransportBindingElement(HttpTransportBindingElement) Initializes a new instance of the HttpTransportBindingElement class using another binding element. Declaration protected HttpTransportBindingElement(HttpTransportBindingElement elementToBeCloned) Parameters Type Name Description HttpTransportBindingElement elementToBeCloned An HttpTransportBindingElement object used to initialize this instance. Remarks This method is a copy constructor used to clone the binding. Properties AuthenticationScheme Gets or sets the authentication scheme used to authenticate client requests being processed by an HTTP listener. Declaration public AuthenticationSchemes AuthenticationScheme { get; set; } Property Value Type Description AuthenticationSchemes One of the enumeration values of the AuthenticationSchemes enumeration that specifies the protocols used for client authentication. The default is Anonymous . Remarks The authentication scheme can only be set once. ExtendedProtectionPolicy Gets or sets the value of the extended security policy used by the server to validate incoming client connections. Declaration public ExtendedProtectionPolicy ExtendedProtectionPolicy { get; set; } Property Value Type Description ExtendedProtectionPolicy The value of the extended security policy used by the server to validate incoming client connections. KeepAliveEnabled Gets or sets a value that indicates whether to make a persistent connection to a service endpoint. Declaration public bool KeepAliveEnabled { get; set; } Property Value Type Description Boolean true if the request to the service endpoint should contain a Connection HTTP header with the value Keep-alive; otherwise, false. The default is true Remarks Set this property to true to send a Connection HTTP header with the value Keep-alive. A client uses this property to indicate a preference for persistent connections. When this property is true, the connection that the client makes to a service endpoint is persistent if the service endpoint supports that. MaxBufferSize Gets or sets the maximum size of the buffer to use. For buffered messages this value is the same as MaxReceivedMessageSize . For streamed messages, this value is the maximum size of the SOAP headers, which must be read in buffered mode. Declaration public int MaxBufferSize { get; set; } Property Value Type Description Int32 The maximum size, in bytes, of the buffer. Remarks For streamed messages, if the size of the message headers is greater than this property, then a QuotaExceededException is thrown. For a non-streamed message, if the message size is greater than this property, then the message is dropped. If not specified, this defaults to 65536. Exceptions Type Condition ArgumentOutOfRangeException The value is less than or equal to 0. Realm Declaration public string Realm { get; set; } Property Value Type Description String Scheme Gets the URI scheme for the transport. Declaration public override string Scheme { get; } Property Value Type Description String A UriSchemeHttp object that represents the URI scheme for the transport. Overrides TransportBindingElement.Scheme Remarks This property is used to validate bindings against base addresses. TransferMode Gets or sets the transfer mode. Declaration public TransferMode TransferMode { get; set; } Property Value Type Description TransferMode One of the following member values of TransferMode : Buffered Streamed StreamedRequest StreamedResponse. Remarks Specifying TransferMode = Streamed implies both StreamedRequest and StreamedResponse. WebSocketSettings Gets or sets the web socket configuration of the binding element. Declaration public WebSocketTransportSettings WebSocketSettings { get; set; } Property Value Type Description WebSocketTransportSettings The web socket settings. Methods BuildServiceDispatcher<TChannel>(BindingContext, IServiceDispatcher) Declaration public override IServiceDispatcher BuildServiceDispatcher<TChannel>(BindingContext context, IServiceDispatcher innerDispatcher) where TChannel : class, IChannel Parameters Type Name Description BindingContext context IServiceDispatcher innerDispatcher Returns Type Description IServiceDispatcher Type Parameters Name Description TChannel Overrides BindingElement.BuildServiceDispatcher<TChannel>(BindingContext, IServiceDispatcher) CanBuildServiceDispatcher<TChannel>(BindingContext) Declaration public override bool CanBuildServiceDispatcher<TChannel>(BindingContext context) where TChannel : class, IChannel Parameters Type Name Description BindingContext context Returns Type Description Boolean Type Parameters Name Description TChannel Overrides BindingElement.CanBuildServiceDispatcher<TChannel>(BindingContext) Clone() Creates a new instance that is a copy of the current binding element. Declaration public override BindingElement Clone() Returns Type Description BindingElement A new instance that is a copy of the current binding element. Overrides BindingElement.Clone() GetProperty<T>(BindingContext) Gets a property from the specified BindingContext . Declaration public override T GetProperty<T>(BindingContext context) where T : class Parameters Type Name Description BindingContext context A BindingContext . Returns Type Description T The property from the specified BindingContext . Type Parameters Name Description T The type of the property to get. Overrides TransportBindingElement.GetProperty<T>(BindingContext) Explicit Interface Implementations IPolicyExportExtension.ExportPolicy(MetadataExporter, PolicyConversionContext) Declaration void IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext context) Parameters Type Name Description MetadataExporter exporter PolicyConversionContext context IWsdlExportExtension.ExportContract(WsdlExporter, WsdlContractConversionContext) Declaration void IWsdlExportExtension.ExportContract(WsdlExporter exporter, WsdlContractConversionContext context) Parameters Type Name Description WsdlExporter exporter WsdlContractConversionContext context IWsdlExportExtension.ExportEndpoint(WsdlExporter, WsdlEndpointConversionContext) Declaration void IWsdlExportExtension.ExportEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext endpointContext) Parameters Type Name Description WsdlExporter exporter WsdlEndpointConversionContext endpointContext Implements IWsdlExportExtension IPolicyExportExtension"
  },
  "api-corewcf/CoreWCF.Channels.IAnonymousUriPrefixMatcher.html": {
    "href": "api-corewcf/CoreWCF.Channels.IAnonymousUriPrefixMatcher.html",
    "title": "Interface IAnonymousUriPrefixMatcher",
    "keywords": "Interface IAnonymousUriPrefixMatcher Implement this interface to register custom, anonymous URI prefixes. Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface IAnonymousUriPrefixMatcher Methods Register(Uri) Registers a custom, anonymous URI prefix. Declaration void Register(Uri anonymousUriPrefix) Parameters Type Name Description Uri anonymousUriPrefix The URI prefix to register."
  },
  "api-corewcf/CoreWCF.Channels.IBufferedMessageData.html": {
    "href": "api-corewcf/CoreWCF.Channels.IBufferedMessageData.html",
    "title": "Interface IBufferedMessageData",
    "keywords": "Interface IBufferedMessageData Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface IBufferedMessageData Properties Buffer Declaration ArraySegment<byte> Buffer { get; } Property Value Type Description ArraySegment < Byte > MessageEncoder Declaration MessageEncoder MessageEncoder { get; } Property Value Type Description MessageEncoder Quotas Declaration XmlDictionaryReaderQuotas Quotas { get; } Property Value Type Description XmlDictionaryReaderQuotas Methods Close() Declaration void Close() EnableMultipleUsers() Declaration void EnableMultipleUsers() GetMessageReader() Declaration XmlDictionaryReader GetMessageReader() Returns Type Description XmlDictionaryReader Open() Declaration void Open() ReturnMessageState(RecycledMessageState) Declaration void ReturnMessageState(RecycledMessageState messageState) Parameters Type Name Description RecycledMessageState messageState TakeMessageState() Declaration RecycledMessageState TakeMessageState() Returns Type Description RecycledMessageState"
  },
  "api-corewcf/CoreWCF.Channels.IChannel.html": {
    "href": "api-corewcf/CoreWCF.Channels.IChannel.html",
    "title": "Interface IChannel",
    "keywords": "Interface IChannel Defines the basic interface that all channel objects must implement. It requires that they implement the state machine interface shared by all communication objects and that they implement a method to retrieve objects from the channel stack. Inherited Members ICommunicationObject.Abort() ICommunicationObject.CloseAsync() ICommunicationObject.CloseAsync(CancellationToken) ICommunicationObject.OpenAsync() ICommunicationObject.OpenAsync(CancellationToken) ICommunicationObject.State ICommunicationObject.Closed ICommunicationObject.Closing ICommunicationObject.Faulted ICommunicationObject.Opened ICommunicationObject.Opening Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface IChannel : ICommunicationObject Remarks Channels must satisfy the contract of a state machine as defined by the ICommunicationObject interface. The IChannel interface adds the GetProperty method to the ICommunicationObject interface. This method provides a mechanism for retrieving properties from the channel stack regardless of where in the stack those properties live. The term \"property\" in the method name refers to a piece of information that belongs to one of the channels in the stack. The CLR type for that property is determined by T. This method of retrieval is also used on channel factories and channel listeners. IChannel is inherited by each of the channel interfaces associated with the basic message-exchange patterns: IInputChannel for receiving messages. IOutputChannel for sending messages. IRequestChannel for sending a request. IReplyChannel for sending a reply. IDuplexChannel for bi-directional messaging. Properties ChannelDispatcher Declaration IServiceChannelDispatcher ChannelDispatcher { get; set; } Property Value Type Description IServiceChannelDispatcher Methods GetProperty<T>() Returns a typed object requested, if present, from the appropriate layer in the channel stack. Declaration T GetProperty<T>() where T : class Returns Type Description T The typed object T requested if it is present or null if it is not. Type Parameters Name Description T The typed object for which the method is querying. Remarks Use this to request a typed object such as an interface for setting properties or getting status from the appropriate layer in the channel stack. If a layer supports returning the requested object, it returns it. If not, it delegates the call down to the next layer in the stack. If it gets to the bottom of the stack and no channel layer supported the requested object, then the method returns null."
  },
  "api-corewcf/CoreWCF.Channels.IChannelBindingProvider.html": {
    "href": "api-corewcf/CoreWCF.Channels.IChannelBindingProvider.html",
    "title": "Interface IChannelBindingProvider",
    "keywords": "Interface IChannelBindingProvider Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface IChannelBindingProvider Properties IsChannelBindingSupportEnabled Declaration bool IsChannelBindingSupportEnabled { get; } Property Value Type Description Boolean Methods EnableChannelBindingSupport() Declaration void EnableChannelBindingSupport()"
  },
  "api-corewcf/CoreWCF.Channels.ICompressedMessageEncoder.html": {
    "href": "api-corewcf/CoreWCF.Channels.ICompressedMessageEncoder.html",
    "title": "Interface ICompressedMessageEncoder",
    "keywords": "Interface ICompressedMessageEncoder Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface ICompressedMessageEncoder Properties CompressionEnabled Declaration bool CompressionEnabled { get; } Property Value Type Description Boolean Methods AddCompressedMessageProperties(Message, String) Declaration void AddCompressedMessageProperties(Message message, string supportedCompressionTypes) Parameters Type Name Description Message message String supportedCompressionTypes SetSessionContentType(String) Declaration void SetSessionContentType(string contentType) Parameters Type Name Description String contentType"
  },
  "api-corewcf/CoreWCF.Channels.IDuplexChannel.html": {
    "href": "api-corewcf/CoreWCF.Channels.IDuplexChannel.html",
    "title": "Interface IDuplexChannel",
    "keywords": "Interface IDuplexChannel Defines the interface that a channel must implement to both send and receive messages. Inherited Members IInputChannel.ReceiveAsync(CancellationToken) IInputChannel.TryReceiveAsync(CancellationToken) IInputChannel.LocalAddress IOutputChannel.SendAsync(Message) IOutputChannel.SendAsync(Message, CancellationToken) IOutputChannel.RemoteAddress IOutputChannel.Via IChannel.GetProperty<T>() IChannel.ChannelDispatcher ICommunicationObject.Abort() ICommunicationObject.CloseAsync() ICommunicationObject.CloseAsync(CancellationToken) ICommunicationObject.OpenAsync() ICommunicationObject.OpenAsync(CancellationToken) ICommunicationObject.State ICommunicationObject.Closed ICommunicationObject.Closing ICommunicationObject.Faulted ICommunicationObject.Opened ICommunicationObject.Opening Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface IDuplexChannel : IInputChannel, IOutputChannel, IChannel, ICommunicationObject Remarks The IDuplexChannel interface is the union of the IInputChannel and IOutputChannel interfaces. The IDuplexChannel interface does not mandate any correlation between the IInputChannel and IOutputChannel when implemented. This means, in particular, that the contract does not mandate that the sender of messages that are received through the IInputChannel is equal to the recipient of messages sent through the IOutputChannel ."
  },
  "api-corewcf/CoreWCF.Channels.IDuplexSession.html": {
    "href": "api-corewcf/CoreWCF.Channels.IDuplexSession.html",
    "title": "Interface IDuplexSession",
    "keywords": "Interface IDuplexSession Defines the interface for the session implemented on each side of a bi-directional communication between messaging endpoints. Inherited Members ISession.Id Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface IDuplexSession : IInputSession, IOutputSession, ISession Remarks The IDuplexSession interface is the union of the inbound session, defined by the IInputSession interface, and the outbound session, defined by the IOutputSession interface. Either the inbound session or outbound session can be terminated independently of the other. The outbound session can be terminated synchronously by calling CloseOutputSession() or asynchronously by calling BeginCloseOutputSession . The inbound session can be remotely terminated. The Receive() associated with the inbound session starts returning null when that session is shutdown. Methods CloseOutputSessionAsync() Declaration Task CloseOutputSessionAsync() Returns Type Description Task CloseOutputSessionAsync(CancellationToken) Declaration Task CloseOutputSessionAsync(CancellationToken token) Parameters Type Name Description CancellationToken token Returns Type Description Task"
  },
  "api-corewcf/CoreWCF.Channels.IDuplexSessionChannel.html": {
    "href": "api-corewcf/CoreWCF.Channels.IDuplexSessionChannel.html",
    "title": "Interface IDuplexSessionChannel",
    "keywords": "Interface IDuplexSessionChannel Defines the interface that associates a duplex channel with a session. Inherited Members IInputChannel.ReceiveAsync(CancellationToken) IInputChannel.TryReceiveAsync(CancellationToken) IInputChannel.LocalAddress IOutputChannel.SendAsync(Message) IOutputChannel.SendAsync(Message, CancellationToken) IOutputChannel.RemoteAddress IOutputChannel.Via IChannel.GetProperty<T>() IChannel.ChannelDispatcher ICommunicationObject.Abort() ICommunicationObject.CloseAsync() ICommunicationObject.CloseAsync(CancellationToken) ICommunicationObject.OpenAsync() ICommunicationObject.OpenAsync(CancellationToken) ICommunicationObject.State ICommunicationObject.Closed ICommunicationObject.Closing ICommunicationObject.Faulted ICommunicationObject.Opened ICommunicationObject.Opening ISessionChannel<IDuplexSession>.Session Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface IDuplexSessionChannel : IDuplexChannel, IInputChannel, IOutputChannel, IChannel, ICommunicationObject, ISessionChannel<IDuplexSession> Remarks The IDuplexSessionChannel interface indicates that an IDuplexChannel implements IDuplexSession semantics. Given an IDuplexSessionChannel , its associated IDuplexSession can be retrieved through the Session property."
  },
  "api-corewcf/CoreWCF.Channels.IInputChannel.html": {
    "href": "api-corewcf/CoreWCF.Channels.IInputChannel.html",
    "title": "Interface IInputChannel",
    "keywords": "Interface IInputChannel Defines the interface that a channel must implement to receive a message. Inherited Members IChannel.GetProperty<T>() IChannel.ChannelDispatcher ICommunicationObject.Abort() ICommunicationObject.CloseAsync() ICommunicationObject.CloseAsync(CancellationToken) ICommunicationObject.OpenAsync() ICommunicationObject.OpenAsync(CancellationToken) ICommunicationObject.State ICommunicationObject.Closed ICommunicationObject.Closing ICommunicationObject.Faulted ICommunicationObject.Opened ICommunicationObject.Opening Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface IInputChannel : IChannel, ICommunicationObject Remarks The IInputChannel contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality. The pull model is used typically with an IInputChannel to receive messages: you call Receive (to \"pull\" a message out of the channel) and then wait for a message to arrive. An alternative usage pattern is to call BeginWaitForMessage(TimeSpan, AsyncCallback, Object) or BeginWaitForMessage(TimeSpan, AsyncCallback, Object) , and then call Receive(TimeSpan) . This approach is common for transactional usages where you start the transaction between the calls to WaitForMessage(TimeSpan) and Receive . An IInputChannel is not necessarily bound to a single sender. Other channels and channel interfaces can provide a correlation between particular senders and an IInputChannel , but the base contract makes no such restriction. An implementation can create a new IInputChannel for each message or reuse the same IInputChannel for multiple messages and senders. Properties LocalAddress Gets the address on which the input channel receives messages. Declaration EndpointAddress LocalAddress { get; } Property Value Type Description EndpointAddress The EndpointAddress on which the input channel receives messages. Remarks If this input channel does not have a standalone address (for example, it is the input-side of a client-initiated TCP channel), then this property is null. This property can be used by higher-level channels for correlation purposes. For example, if a higher-level channel implements request-reply on top of a IDuplexChannel , it can use the LocalAddress property in the WS-Addressing ReplyTo header. Methods ReceiveAsync(CancellationToken) Declaration Task<Message> ReceiveAsync(CancellationToken token) Parameters Type Name Description CancellationToken token Returns Type Description Task < Message > TryReceiveAsync(CancellationToken) Declaration Task<(Message, bool)> TryReceiveAsync(CancellationToken token) Parameters Type Name Description CancellationToken token Returns Type Description Task < (, ) < Message , Boolean >>"
  },
  "api-corewcf/CoreWCF.Channels.IInputSession.html": {
    "href": "api-corewcf/CoreWCF.Channels.IInputSession.html",
    "title": "Interface IInputSession",
    "keywords": "Interface IInputSession Defines the interface for the session implemented on the receiving side of a one-way communication between messaging endpoints. Inherited Members ISession.Id Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface IInputSession : ISession Remarks On the other side of the message interchange, the IOutputSession interface represents an outgoing ISession implemented on the sending side of a one-way communication between messaging endpoints. Note these two sessions are distinct."
  },
  "api-corewcf/CoreWCF.Channels.IInputSessionChannel.html": {
    "href": "api-corewcf/CoreWCF.Channels.IInputSessionChannel.html",
    "title": "Interface IInputSessionChannel",
    "keywords": "Interface IInputSessionChannel Defines the interface that associates an input channel with a session. Inherited Members IInputChannel.ReceiveAsync(CancellationToken) IInputChannel.TryReceiveAsync(CancellationToken) IInputChannel.LocalAddress IChannel.GetProperty<T>() IChannel.ChannelDispatcher ICommunicationObject.Abort() ICommunicationObject.CloseAsync() ICommunicationObject.CloseAsync(CancellationToken) ICommunicationObject.OpenAsync() ICommunicationObject.OpenAsync(CancellationToken) ICommunicationObject.State ICommunicationObject.Closed ICommunicationObject.Closing ICommunicationObject.Faulted ICommunicationObject.Opened ICommunicationObject.Opening ISessionChannel<IInputSession>.Session Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface IInputSessionChannel : IInputChannel, IChannel, ICommunicationObject, ISessionChannel<IInputSession> Remarks The IInputSessionChannel interface indicates that an IInputChannel implements IInputSession semantics. The IInputSession associated with an IInputSessionChannel can be retrieved through the Session property."
  },
  "api-corewcf/CoreWCF.Channels.IMessageProperty.html": {
    "href": "api-corewcf/CoreWCF.Channels.IMessageProperty.html",
    "title": "Interface IMessageProperty",
    "keywords": "Interface IMessageProperty Defines an interface that you can implement to describe a set of properties for a message. Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface IMessageProperty Remarks You can implement this interface to create a message property, and attach it to the message during runtime. If an object that implements this interface is added to Properties , it is added by value instead of by reference. After this, users of this message instance's message properties can copy this object to other messages by cloning, instead of sharing a single object across all messages. Methods CreateCopy() Creates a copy of the current instance. Declaration IMessageProperty CreateCopy() Returns Type Description IMessageProperty A IMessageProperty object that is a copy of the current instance. Remarks This method is called whenever an implementor of this interface is created. This happens when an object that implements this interface is added to Properties as a custom property."
  },
  "api-corewcf/CoreWCF.Channels.IOutputChannel.html": {
    "href": "api-corewcf/CoreWCF.Channels.IOutputChannel.html",
    "title": "Interface IOutputChannel",
    "keywords": "Interface IOutputChannel Defines the interface that a channel must implement to send a message. Inherited Members IChannel.GetProperty<T>() IChannel.ChannelDispatcher ICommunicationObject.Abort() ICommunicationObject.CloseAsync() ICommunicationObject.CloseAsync(CancellationToken) ICommunicationObject.OpenAsync() ICommunicationObject.OpenAsync(CancellationToken) ICommunicationObject.State ICommunicationObject.Closed ICommunicationObject.Closing ICommunicationObject.Faulted ICommunicationObject.Opened ICommunicationObject.Opening Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface IOutputChannel : IChannel, ICommunicationObject Remarks The IOutputChannel interface defines synchronous and asynchronous variants of the IOutputChannel.Send operation. It provides a RemoteAddress for the destination of the messages sent out on the channel. Properties RemoteAddress Gets the destination of the service to which messages are sent out on the output channel. Declaration EndpointAddress RemoteAddress { get; } Property Value Type Description EndpointAddress The EndpointAddress of the service to which the output channel sends messages. Remarks The EndpointAddress serves as both the ultimate destination and the physical address if a Via is not specified. If the Via is specified, then that is the actual physical address to which the message is sent and through which the message must go to arrive at its destination. Via Gets the URI that contains the transport address to which messages are sent on the output channel. Declaration Uri Via { get; } Property Value Type Description Uri The Uri that contains the transport address to which messages are sent on the output channel. Remarks The EndpointAddress serves as both the ultimate destination and the physical address if a Via is not specified. If the Via is specified, then that is the actual physical address to which the message is sent and through which the message must go to arrive at its destination. Methods SendAsync(Message) Declaration Task SendAsync(Message message) Parameters Type Name Description Message message Returns Type Description Task SendAsync(Message, CancellationToken) Declaration Task SendAsync(Message message, CancellationToken token) Parameters Type Name Description Message message CancellationToken token Returns Type Description Task"
  },
  "api-corewcf/CoreWCF.Channels.IOutputSession.html": {
    "href": "api-corewcf/CoreWCF.Channels.IOutputSession.html",
    "title": "Interface IOutputSession",
    "keywords": "Interface IOutputSession Defines the interface for the session implemented on the sending side of a one-way communication between messaging endpoints. Inherited Members ISession.Id Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface IOutputSession : ISession Remarks On the other side of the message interchange, the IInputSession interface represents an incoming ISession implemented on the receiving side of a one-way communication between messaging endpoints. Note these two sessions are distinct."
  },
  "api-corewcf/CoreWCF.Channels.IOutputSessionChannel.html": {
    "href": "api-corewcf/CoreWCF.Channels.IOutputSessionChannel.html",
    "title": "Interface IOutputSessionChannel",
    "keywords": "Interface IOutputSessionChannel Defines the interface that associates an output channel with a session. Inherited Members IOutputChannel.SendAsync(Message) IOutputChannel.SendAsync(Message, CancellationToken) IOutputChannel.RemoteAddress IOutputChannel.Via IChannel.GetProperty<T>() IChannel.ChannelDispatcher ICommunicationObject.Abort() ICommunicationObject.CloseAsync() ICommunicationObject.CloseAsync(CancellationToken) ICommunicationObject.OpenAsync() ICommunicationObject.OpenAsync(CancellationToken) ICommunicationObject.State ICommunicationObject.Closed ICommunicationObject.Closing ICommunicationObject.Faulted ICommunicationObject.Opened ICommunicationObject.Opening ISessionChannel<IOutputSession>.Session Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface IOutputSessionChannel : IOutputChannel, IChannel, ICommunicationObject, ISessionChannel<IOutputSession> Remarks The IOutputSessionChannel interface indicates that an IOutputChannel implements IOutputSession semantics. The IOutputSession associated with an IOutputSessionChannel can be retrieved through the Session property."
  },
  "api-corewcf/CoreWCF.Channels.IReplyChannel.html": {
    "href": "api-corewcf/CoreWCF.Channels.IReplyChannel.html",
    "title": "Interface IReplyChannel",
    "keywords": "Interface IReplyChannel Defines the interface that a channel must implement to be on the receiving side of a request-reply communication between messaging endpoints. Inherited Members IChannel.GetProperty<T>() IChannel.ChannelDispatcher ICommunicationObject.Abort() ICommunicationObject.CloseAsync() ICommunicationObject.CloseAsync(CancellationToken) ICommunicationObject.OpenAsync() ICommunicationObject.OpenAsync(CancellationToken) ICommunicationObject.State ICommunicationObject.Closed ICommunicationObject.Closing ICommunicationObject.Faulted ICommunicationObject.Opened ICommunicationObject.Opening Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface IReplyChannel : IChannel, ICommunicationObject Remarks The IReplyChannel interface includes synchronous and asynchronous variants of a ReceiveRequest method return an RequestContext that can be used to construct replies to received requests. The contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality. An IReplyChannel is not necessarily bound to a single sender. Other channels and channel interfaces provide correlation between the sender and the reply channel, but the base contract makes no such restriction. The pull model is used with an IReplyChannel to receive messages. This model consists of calling ReceiveRequest (or one of its variants) and then waiting for a message to arrive. Properties LocalAddress Gets the address on which this reply channel receives messages. Declaration EndpointAddress LocalAddress { get; } Property Value Type Description EndpointAddress The EndpointAddress on which this reply channel receives messages."
  },
  "api-corewcf/CoreWCF.Channels.IReplySessionChannel.html": {
    "href": "api-corewcf/CoreWCF.Channels.IReplySessionChannel.html",
    "title": "Interface IReplySessionChannel",
    "keywords": "Interface IReplySessionChannel Defines the interface to associate a reply channel with a session. Inherited Members IReplyChannel.LocalAddress IChannel.GetProperty<T>() IChannel.ChannelDispatcher ICommunicationObject.Abort() ICommunicationObject.CloseAsync() ICommunicationObject.CloseAsync(CancellationToken) ICommunicationObject.OpenAsync() ICommunicationObject.OpenAsync(CancellationToken) ICommunicationObject.State ICommunicationObject.Closed ICommunicationObject.Closing ICommunicationObject.Faulted ICommunicationObject.Opened ICommunicationObject.Opening ISessionChannel<IInputSession>.Session Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface IReplySessionChannel : IReplyChannel, IChannel, ICommunicationObject, ISessionChannel<IInputSession> Remarks The IReplySessionChannel interface indicates that an IReplyChannel implements IInputSession semantics. The IInputSession associated with its IReplySessionChannel can be retrieved through the Session property."
  },
  "api-corewcf/CoreWCF.Channels.IRequestChannel.html": {
    "href": "api-corewcf/CoreWCF.Channels.IRequestChannel.html",
    "title": "Interface IRequestChannel",
    "keywords": "Interface IRequestChannel Defines the contract that a channel must implement to be on the requesting side of a request-reply communication between messaging endpoints. Inherited Members IChannel.GetProperty<T>() IChannel.ChannelDispatcher ICommunicationObject.Abort() ICommunicationObject.CloseAsync() ICommunicationObject.CloseAsync(CancellationToken) ICommunicationObject.OpenAsync() ICommunicationObject.OpenAsync(CancellationToken) ICommunicationObject.State ICommunicationObject.Closed ICommunicationObject.Closing ICommunicationObject.Faulted ICommunicationObject.Opened ICommunicationObject.Opening Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface IRequestChannel : IChannel, ICommunicationObject Remarks The IRequestChannel defines synchronous and asynchronous variants of a IRequestChannel.Request method that returns a response message. It also provides a RemoteAddress and Via properties to retrieve the endpoint address and URI to which the request message is sent. Properties RemoteAddress Gets the remote address to which the request channel sends messages. Declaration EndpointAddress RemoteAddress { get; } Property Value Type Description EndpointAddress The EndpointAddress to which the request channel sends messages. Remarks The EndpointAddress serves as both the ultimate destination and the physical address if a Via is not specified. If the Via is specified, then that is the actual physical address to which the message is sent and through which the message must go to arrive at its destination. Via Gets the transport address to which the request is send. Declaration Uri Via { get; } Property Value Type Description Uri The Uri that contains the transport address to which the message is sent. Remarks The EndpointAddress serves as both the ultimate destination and the physical address if a Via is not specified. If the Via is specified, then that is the actual physical address to which the message is sent and through which the message must go to arrive at its destination. Methods RequestAsync(Message) Declaration Task<Message> RequestAsync(Message message) Parameters Type Name Description Message message Returns Type Description Task < Message > RequestAsync(Message, CancellationToken) Declaration Task<Message> RequestAsync(Message message, CancellationToken token) Parameters Type Name Description Message message CancellationToken token Returns Type Description Task < Message >"
  },
  "api-corewcf/CoreWCF.Channels.IRequestReplyCorrelator.html": {
    "href": "api-corewcf/CoreWCF.Channels.IRequestReplyCorrelator.html",
    "title": "Interface IRequestReplyCorrelator",
    "keywords": "Interface IRequestReplyCorrelator Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface IRequestReplyCorrelator Methods Add<T>(Message, T) Declaration void Add<T>(Message request, T state) Parameters Type Name Description Message request T state Type Parameters Name Description T Find<T>(Message, Boolean) Declaration T Find<T>(Message reply, bool remove) Parameters Type Name Description Message reply Boolean remove Returns Type Description T Type Parameters Name Description T"
  },
  "api-corewcf/CoreWCF.Channels.IRequestSessionChannel.html": {
    "href": "api-corewcf/CoreWCF.Channels.IRequestSessionChannel.html",
    "title": "Interface IRequestSessionChannel",
    "keywords": "Interface IRequestSessionChannel Defines the interface to associate a request channel with a session. Inherited Members IRequestChannel.RequestAsync(Message) IRequestChannel.RequestAsync(Message, CancellationToken) IRequestChannel.RemoteAddress IRequestChannel.Via IChannel.GetProperty<T>() IChannel.ChannelDispatcher ICommunicationObject.Abort() ICommunicationObject.CloseAsync() ICommunicationObject.CloseAsync(CancellationToken) ICommunicationObject.OpenAsync() ICommunicationObject.OpenAsync(CancellationToken) ICommunicationObject.State ICommunicationObject.Closed ICommunicationObject.Closing ICommunicationObject.Faulted ICommunicationObject.Opened ICommunicationObject.Opening ISessionChannel<IOutputSession>.Session Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface IRequestSessionChannel : IRequestChannel, IChannel, ICommunicationObject, ISessionChannel<IOutputSession> Remarks The IRequestSessionChannel interface indicates that an IRequestChannel implements IOutputSession semantics. The IOutputSession associated with its IReplySessionChannel can be retrieved through the Session property."
  },
  "api-corewcf/CoreWCF.Channels.ISecurityCapabilities.html": {
    "href": "api-corewcf/CoreWCF.Channels.ISecurityCapabilities.html",
    "title": "Interface ISecurityCapabilities",
    "keywords": "Interface ISecurityCapabilities Defines the contract for specifying the security capabilities for bindings. Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface ISecurityCapabilities Properties SupportedRequestProtectionLevel Gets the protection level requests supported by the binding. Declaration ProtectionLevel SupportedRequestProtectionLevel { get; } Property Value Type Description ProtectionLevel The ProtectionLevel that specifies the protection level requests supported by the binding. SupportedResponseProtectionLevel Gets the protection level responses supported by the binding. Declaration ProtectionLevel SupportedResponseProtectionLevel { get; } Property Value Type Description ProtectionLevel The ProtectionLevel that specifies the protection level responses supported by the binding. SupportsClientAuthentication Gets a value that indicates whether the binding supports client authentication. Declaration bool SupportsClientAuthentication { get; } Property Value Type Description Boolean true if the binding can support client authentication; otherwise, false. SupportsClientWindowsIdentity Gets a value that indicates whether the binding supports client Windows identity. Declaration bool SupportsClientWindowsIdentity { get; } Property Value Type Description Boolean true if the binding can support client Windows identity; otherwise, false. SupportsServerAuthentication Gets a value that indicates whether the binding supports server authentication. Declaration bool SupportsServerAuthentication { get; } Property Value Type Description Boolean true if the binding can support server authentication; otherwise, false."
  },
  "api-corewcf/CoreWCF.Channels.ISecuritySession.html": {
    "href": "api-corewcf/CoreWCF.Channels.ISecuritySession.html",
    "title": "Interface ISecuritySession",
    "keywords": "Interface ISecuritySession Represents a kind of that enforces the requirement that all messages exchanged on the session are between the same communicating parties that established the session. Inherited Members ISession.Id Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface ISecuritySession : ISession Remarks <xref:CoreWCF.Security.ISecuritySession> instances are provided by message security channels (which use WS-SecureConversation) and by TCP secure transport channels. Properties RemoteIdentity Declaration EndpointIdentity RemoteIdentity { get; } Property Value Type Description EndpointIdentity"
  },
  "api-corewcf/CoreWCF.Channels.ISession.html": {
    "href": "api-corewcf/CoreWCF.Channels.ISession.html",
    "title": "Interface ISession",
    "keywords": "Interface ISession Defines the interface to establish a shared context among parties that exchange messages by providing an ID for the communication session. Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface ISession Remarks The ISession interface is the base interface for all sessions. It contains a Id property for identifying the session. A session is a shared context among all participants in a communication exchange. This shared context is characterized by the following three properties: Session establishment - a process for establishing shared context among all participants. Message correlation - a method for correlating a group of messages to an instance of shared context. The ISession interface is not informed as to the number of participants in a session or the lifetime of a session. These session properties are provided by associating an ID with a session. ISession is inherited by: IInputSession IOutputSession IDuplexSession ISessionChannel<TSession> of type ISession Properties Id Gets the ID that uniquely identifies the session. Declaration string Id { get; } Property Value Type Description String The ID that uniquely identifies the session Remarks If the session is interrupted, it can be retrieved using the Id ."
  },
  "api-corewcf/CoreWCF.Channels.ISessionChannel-1.html": {
    "href": "api-corewcf/CoreWCF.Channels.ISessionChannel-1.html",
    "title": "Interface ISessionChannel<TSession>",
    "keywords": "Interface ISessionChannel<TSession> Defines the interface that associates a channel with a specific type of session. Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface ISessionChannel<TSession> where TSession : ISession Type Parameters Name Description TSession The type of ISession associated with the cannel. Remarks The ISessionChannel<TSession> interface is the base interface for session-based channels. It associates the type of session with the channel by setting the generic type parameter TSession to a type that implements the ISession interface in a way that reflects its role in the message exchange. For example, the TSession is set to IInputSession for an incoming session on the receiving side of a one-way communication, to IOutputSession for an outgoing session on the sending side of a one-way communication, and to IDuplexSession for a duplex session for a bi-directional communication pattern. The ISessionChannel<TSession> interface provides a Session property to retrieve the session with which the channel is associated. Properties Session Gets the type of session associated with this channel. Declaration TSession Session { get; } Property Value Type Description TSession The type of ISession associated with this channel."
  },
  "api-corewcf/CoreWCF.Channels.ITransportCompressionSupport.html": {
    "href": "api-corewcf/CoreWCF.Channels.ITransportCompressionSupport.html",
    "title": "Interface ITransportCompressionSupport",
    "keywords": "Interface ITransportCompressionSupport Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface ITransportCompressionSupport Methods IsCompressionFormatSupported(CompressionFormat) Declaration bool IsCompressionFormatSupported(CompressionFormat compressionFormat) Parameters Type Name Description CompressionFormat compressionFormat Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.Channels.ITransportFactorySettings.html": {
    "href": "api-corewcf/CoreWCF.Channels.ITransportFactorySettings.html",
    "title": "Interface ITransportFactorySettings",
    "keywords": "Interface ITransportFactorySettings Inherited Members IDefaultCommunicationTimeouts.CloseTimeout IDefaultCommunicationTimeouts.OpenTimeout IDefaultCommunicationTimeouts.ReceiveTimeout IDefaultCommunicationTimeouts.SendTimeout Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface ITransportFactorySettings : IDefaultCommunicationTimeouts Properties BufferManager Declaration BufferManager BufferManager { get; } Property Value Type Description BufferManager ManualAddressing Declaration bool ManualAddressing { get; } Property Value Type Description Boolean MaxReceivedMessageSize Declaration long MaxReceivedMessageSize { get; } Property Value Type Description Int64 MessageEncoderFactory Declaration MessageEncoderFactory MessageEncoderFactory { get; } Property Value Type Description MessageEncoderFactory MessageVersion Declaration MessageVersion MessageVersion { get; } Property Value Type Description MessageVersion"
  },
  "api-corewcf/CoreWCF.Channels.ITransportTokenAssertionProvider.html": {
    "href": "api-corewcf/CoreWCF.Channels.ITransportTokenAssertionProvider.html",
    "title": "Interface ITransportTokenAssertionProvider",
    "keywords": "Interface ITransportTokenAssertionProvider Provides a transport token assertion (for example, an HTTPS token assertion) for use in policy exports. Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public interface ITransportTokenAssertionProvider Methods GetTransportTokenAssertion() Gets a transport token assertion. Declaration XmlElement GetTransportTokenAssertion() Returns Type Description XmlElement An XmlElement that represents a transport token assertion."
  },
  "api-corewcf/CoreWCF.Channels.IWebSocketCloseDetails.html": {
    "href": "api-corewcf/CoreWCF.Channels.IWebSocketCloseDetails.html",
    "title": "Interface IWebSocketCloseDetails",
    "keywords": "Interface IWebSocketCloseDetails Represents the details of the close status of the web socket connection. Namespace : CoreWCF.Channels Assembly : CoreWCF.Http.dll Syntax public interface IWebSocketCloseDetails Properties InputCloseStatus Gets the status of the input close details. Declaration Nullable<WebSocketCloseStatus> InputCloseStatus { get; } Property Value Type Description Nullable < WebSocketCloseStatus > The status of the input close details. InputCloseStatusDescription Gets the status description of the close details. Declaration string InputCloseStatusDescription { get; } Property Value Type Description String The status description of the close details. Methods SetOutputCloseStatus(WebSocketCloseStatus, String) Sets the output status and description of the close details of the web socket. Declaration void SetOutputCloseStatus(WebSocketCloseStatus closeStatus, string closeStatusDescription) Parameters Type Name Description WebSocketCloseStatus closeStatus The status of the output close details. String closeStatusDescription The status description of the output close details."
  },
  "api-corewcf/CoreWCF.Channels.LocalServiceSecuritySettings.html": {
    "href": "api-corewcf/CoreWCF.Channels.LocalServiceSecuritySettings.html",
    "title": "Class LocalServiceSecuritySettings",
    "keywords": "Class LocalServiceSecuritySettings Provides local service security properties that can be set. Inheritance Object LocalServiceSecuritySettings Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public sealed class LocalServiceSecuritySettings : Object Remarks This class contains the local security settings used by the SecurityBindingElement to build the security channel. These settings are local to the service and are not represented in the service's security policy. Constructors LocalServiceSecuritySettings() Initializes a new instance of the LocalServiceSecuritySettings class. Declaration public LocalServiceSecuritySettings() Properties DetectReplays Gets or sets a value that indicates whether replay detection is enabled on the service. Declaration public bool DetectReplays { get; set; } Property Value Type Description Boolean true if replay detection is enabled on the service; otherwise, false. The default is true. InactivityTimeout Gets or sets the duration to wait before the channel is closed due to inactivity. Declaration public TimeSpan InactivityTimeout { get; set; } Property Value Type Description TimeSpan A TimeSpan that represents the duration to wait before the security session with the client is closed due to inactivity. The default is 2 minutes. Remarks In a secure conversation session, note that both this property and the ReceiveTimeout property on the binding affect session timeout. The shorter of the two determines when timeouts occur. Session settings such as this one are applicable under any of the following conditions: All client credential types for WSDualHttpBinding and NetTcpBinding . If <reliableSession> element is enabled. If <reliableSession> element is not enabled, on WSHttpBinding with UserName = true or ClientCredentials.Windows = true. Session settings such as this one are not applicable under any of the following conditions: For BasicHttpBinding . For NetNamedPipeBinding . If <reliableSession> element is not enabled, on WSHttpBinding with ClientCertificate = true or with none of the ClientCredentials properties set to true. IssuedCookieLifetime Gets or sets the lifetime for the SecurityContextSecurityToken that the service issues for the client. Declaration public TimeSpan IssuedCookieLifetime { get; set; } Property Value Type Description TimeSpan A TimeSpan that represents the lifetime for new security cookies. The default is 10 hours. Remarks When the service issues secure conversation cookie tokens to the client, their validity period is determined by the value of this property. MaxCachedCookies Gets or sets the maximum number of SecurityContextSecurityTokens that the service allows to cache at once. Declaration public int MaxCachedCookies { get; set; } Property Value Type Description Int32 The maximum number of secure conversation cookies that can be cached by the service. When this limit is reached the service removes the oldest cached secure conversation cookies to make room for new secure conversation cookies. The default is 1000. MaxClockSkew Gets or sets the maximum allowable time difference between the system clocks of the two parties that are communicating. Declaration public TimeSpan MaxClockSkew { get; set; } Property Value Type Description TimeSpan A TimeSpan that represents the maximum allowable time difference between the system clocks of the two parties that are communicating. The default is 5 minutes. Remarks The default value for this property is 5 minutes. Messages that do not pass the send-time test are rejected. This property is used in conjunction with the message timestamp verification and the ReplayWindow property. MaxPendingSessions Gets or sets the maximum number of concurrent security sessions that are established with the server for which it has issued a session token but for which no application messages are sent. Declaration public int MaxPendingSessions { get; set; } Property Value Type Description Int32 The maximum number of concurrent security sessions. The default is 128. MaxStatefulNegotiations Gets or sets the maximum number of concurrent security negotiations with clients that the service can participate in. Declaration public int MaxStatefulNegotiations { get; set; } Property Value Type Description Int32 The maximum number of concurrent security negotiations with clients that the service can participate in. The default is 128. Remarks Negotiation sessions in excess of this limit are rejected and a SOAP fault is sent back to the client. The client typically must retry later, which allows some time for existing negotiations on the service to complete. NegotiationTimeout Gets or sets the maximum duration of the security negotiation phase between client and service. Declaration public TimeSpan NegotiationTimeout { get; set; } Property Value Type Description TimeSpan A TimeSpan that represents the maximum duration of the security negotiation phase between client and service. Any negotiation with the service (for example during message level SPNego or SSL authentication) must complete within this time. The default is 1 minute. Remarks If this limit is exceeded, an exception is thrown. NonceCache Gets or sets the cache for the local service security settings. Declaration public NonceCache NonceCache { get; set; } Property Value Type Description NonceCache The cache for the local service security settings. ReconnectTransportOnFailure Gets or sets a value that indicates whether security sessions attempt to reconnect after transport failures. Declaration public bool ReconnectTransportOnFailure { get; set; } Property Value Type Description Boolean true if security sessions attempt to reconnect after transport failures; otherwise false. The default is true. Remarks If this flag is set to true, the service allows the client to send messages that correspond to a single security session over multiple transport connections. This is useful in the case of secure WS-ReliableMessaging because the client requires the session to tolerate transient transport failures. ReplayCacheSize Gets or sets the size of the nonce cache used for replay detection. Declaration public int ReplayCacheSize { get; set; } Property Value Type Description Int32 The size of the nonce cache used for replay detection. The default is 900,000. Remarks A nonce is a \"number used once\". If the nonce count is exceeded, the incoming message is rejected and a MessageSecurityException is thrown. Old nonces are removed in a timely manner. ReplayWindow Gets or sets the maximum amount of time within which the service can accept a message. Declaration public TimeSpan ReplayWindow { get; set; } Property Value Type Description TimeSpan A TimeSpan that represents the maximum amount of time within which the service can accept a message. The default is 5 minutes. Remarks A nonce is a \"number used once\". The service rejects all messages that are sent more than the ReplayWindow duration in the past. Messages that arrive within the ReplayWindow have their nonce checked for uniqueness. SessionKeyRenewalInterval Gets or sets the lifetime of a key used in a security session. When this interval expires the key is automatically renewed. Declaration public TimeSpan SessionKeyRenewalInterval { get; set; } Property Value Type Description TimeSpan The time span after which the service requires that the initiator renew the key used for the security session. If the initiator does not renew the key within this time the service sends back a fault to the initiator. The default is 15 hours. Remarks Session settings such as this one are applicable under any of the following conditions: All client credential types for WSDualHttpBinding and NetTcpBinding . If <reliableSession> element is enabled. If <reliableSession> element is not enabled, on WSHttpBinding with UserName = true or ClientCredentials.Windows = true. Session settings such as this one are not applicable under any of the following conditions: For BasicHttpBinding . For NetNamedPipeBinding . If <reliableSession> element is not enabled, on WSHttpBinding with ClientCertificate = true or with none of the ClientCredentials properties set to true. SessionKeyRolloverInterval Gets or sets the time interval after key renewal for which the previous session key is valid on incoming messages during a key renewal. Declaration public TimeSpan SessionKeyRolloverInterval { get; set; } Property Value Type Description TimeSpan The time interval after key renewal for which the previous session key is valid on incoming messages after a key renewal. The default is 5 minutes. Remarks After key renewal, the client and server should always send messages using the most current available key. Both parties can accept incoming messages secured with the previous session key until the rollover time expires. Session settings such as this one are applicable under any of the following conditions: All client credential types for WSDualHttpBinding and NetTcpBinding . If <reliableSession> element is enabled. If <reliableSession> element is not enabled, on WSHttpBinding with UserName = true or ClientCredentials.Windows = true. Session settings such as this one are not applicable under any of the following conditions: For BasicHttpBinding . For NetNamedPipeBinding . If <reliableSession> element is not enabled, on WSHttpBinding with ClientCertificate = true or with none of the ClientCredentials properties set to true. TimestampValidityDuration Gets or sets the maximum duration of time that messages are valid when sent by the service. If the client receives the service's message after this duration, it discards the message. Declaration public TimeSpan TimestampValidityDuration { get; set; } Property Value Type Description TimeSpan The maximum duration of time that messages are valid when sent by the service. The default is 5 minutes. Methods Clone() Creates a new instance of this class from the current instance. Declaration public LocalServiceSecuritySettings Clone() Returns Type Description LocalServiceSecuritySettings A new instance of LocalServiceSecuritySettings ."
  },
  "api-corewcf/CoreWCF.Channels.Message.html": {
    "href": "api-corewcf/CoreWCF.Channels.Message.html",
    "title": "Class Message",
    "keywords": "Class Message Represents the unit of communication between endpoints in a distributed environment. Inheritance Object Message Implements IDisposable Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class Message : Object Remarks The Message class provides a means of communicating arbitrary information between a sender and a receiver on a network. It can be used to relay information, suggest or demand a course of action, or request data. The structure of a Message object represents a SOAP envelope. It consists of two distinct parts: the message's body and an optional collection of headers, represented by the Headers class. The message content is application-defined data sent from a sender to a receiver. The message headers enable system and application extensibility to meet the changing requirements, because you can define code to manipulate and respond to specific headers. You can also define your own headers. Message headers are serialized or deserialized along with the contents of the message. Messages are received and sent in particular formats. Support is provided for two formats: the standard text-based XML format and a binary-based XML format. The Message object can be used to represent both SOAP 1.1 and SOAP 1.2 envelopes. Note that an instance of Message is fixed upon creation and is bound to a specific SOAP version. The Version property represents the SOAP version of the message. A Message object can be serialized to an external store by using the WriteMessage method. Properties of the message can also be serialized, but they have to be individually identified and serialized separately. Deserializing a message to create an in-memory Message object can be done using CreateMessage . Properties must also be deserialized individually and manually added to the property collection for the specific Message instance. The size of a Message object is fixed to the size of data it is transmitting. Every body is modeled as an instance of XmlReader , with no predefined limit on the size of the stream that the XmlReader instance is wrapping. However, specific channel providers can have a limit on the size of messages that they process. A Message can be annotated with useful information generated by an entity that has examined and processed the message. This functionality is provided by the Headers and Properties properties. The Headers collection represents the set of SOAP headers on the message. The Properties property represents the set of processing-level annotations on the message. Because information in headers is transmitted on the wire, an entity that examines a header must support the underlying version(s) of the protocols used by the header. However, properties provide a more version-independent way of annotating a message. To create a Message instance, use one of the CreateMessage methods. It is recommended that a consumer of a message always call Close() when the consumer is finished accessing the contents of the message. This action frees finite system resources (for example, sockets, named pipes) that are tied to the lifetime of the message. Special note for Managed C++ users deriving from this class: Put your cleanup code in (On)(Begin)Close (and/or OnAbort), not in a destructor. Avoid destructors: they cause the compiler to auto-generate IDisposable . Avoid non-reference members: they can cause the compiler to auto-generate IDisposable . Avoid finalizers; but if you include one, suppress the build warning and call SuppressFinalize(Object) and the finalizer itself from (On)(Begin)Close (and/or OnAbort) to emulate what would have been the auto-generated IDisposable behavior. Constructors Message() Initializes a new instance of the Message class. Declaration protected Message() Properties Headers When overridden in a derived class, gets the headers of the message. Declaration public abstract MessageHeaders Headers { get; } Property Value Type Description MessageHeaders A MessageHeaders object that represents the headers of the message. Remarks A Message can have zero or more headers that are used as an extension mechanism to pass information in messages that is application-specific. You can use Headers to add message headers to a message by calling the Add method. Windows Communication Foundation (WCF) provides a number of predefined message headers, as shown in the following table. Header Name Description To Contains the role that the message is targeting. Action Provides a description of how the message should be processed. FaultTo Contains the address of the node to which faults should be sent. From Contains the address of the node that sent the message. Request Indicates whether the message is a request. MessageID Contains the unique ID of the message. RelatesTo Contains the IDs of messages that are related to this message. ReplyTo Contains the address of the node to which a reply should be sent for a request. IsDisposed Returns a value that indicates whether the Message is disposed. Declaration protected bool IsDisposed { get; } Property Value Type Description Boolean true if the message is disposed; otherwise, false. IsEmpty Returns a value that indicates whether the Message is empty. Declaration public virtual bool IsEmpty { get; } Property Value Type Description Boolean true if the message is empty; otherwise, false. IsFault Gets a value that indicates whether this message generates any SOAP faults. Declaration public virtual bool IsFault { get; } Property Value Type Description Boolean true if this message generates any SOAP faults; otherwise, false. Properties When overridden in a derived class, gets a set of processing-level annotations to the message. Declaration public abstract MessageProperties Properties { get; } Property Value Type Description MessageProperties A MessageProperties that contains a set of processing-level annotations to the message. Remarks Because information in headers is transmitted on the wire, an entity that examines a header must support the underlying version(s) of the protocols used by the header. However, properties provide a more version-independent way of annotating a message. RecycledMessageState Declaration public virtual RecycledMessageState RecycledMessageState { get; } Property Value Type Description RecycledMessageState State Gets the current state of this Message . Declaration public MessageState State { get; } Property Value Type Description MessageState A MessageState that contains the current state of this Message . Remarks Because the body of a Message object is a stream, it can only be read or written once. This is enforced by maintaining the current state of the Message object. A Message object can be read, written, or copied when in the Created state. Other states are Read , Written and Copied , which means that the respective action has been performed already once. Version When overridden in a derived class, gets the SOAP version of the message. Declaration public abstract MessageVersion Version { get; } Property Value Type Description MessageVersion A MessageVersion object that represents the SOAP version. Remarks This value is immutable for the message. There are two possible values for the version: Soap11 and Soap12 that correspond to SOAP 1.1 and SOAP 1.2 respectively. Knowing the underlying SOAP version is important because the structure of Message is firmly correlated with that of a SOAP message. Methods Close() Closes the Message and releases any resources. Declaration public void Close() Remarks The Message does have a finalizer, which causes Close() to be called for you when the message is garbage-collected. This is non-optimal, as the .NET Framework's Garbage Collection (GC) mechanism does not necessarily run when you run out of system resources other than memory. For this reason, you should always call this method when finished with the contents of the message. The Close() method is a synonym for Dispose (which Message also implements). The message also disposes the object that was used to construct the body when it is disposed. An ObjectDisposedException is thrown if you call any method or access any properties of the message once it is closed. Calling any method or accessing any properties of other objects related to the message once it is closed, (such as message header collection, message property values, or XmlReader instances returned for the body or for a header) has undefined behavior. CreateBufferedCopy(Int32) Stores an entire Message into a memory buffer for future access. Declaration public MessageBuffer CreateBufferedCopy(int maxBufferSize) Parameters Type Name Description Int32 maxBufferSize The maximum size of the buffer to be created. Returns Type Description MessageBuffer A newly created MessageBuffer object. Remarks The body of a Message instance can only be accessed or written once. If you want to access a Message instance more than once, you should use the MessageBuffer class to completely store an entire Message instance into memory. A MessageBuffer instance is constructed by calling CreateBufferedCopy(Int32) of a Message instance. CreateMessage(MessageVersion, MessageFault, String) Declaration public static Message CreateMessage(MessageVersion version, MessageFault fault, string action) Parameters Type Name Description MessageVersion version MessageFault fault String action Returns Type Description Message CreateMessage(MessageVersion, String) Creates a message that contains a version and an action. Declaration public static Message CreateMessage(MessageVersion version, string action) Parameters Type Name Description MessageVersion version A MessageVersion object that specifies the SOAP version to use for the message. String action A description of how the message should be processed. Returns Type Description Message A Message object for the message created. Remarks This static method is used to create a new copy of message ready for sending. CreateMessage(MessageVersion, String, BodyWriter) Creates a message with a body that consists of an array of bytes. Declaration public static Message CreateMessage(MessageVersion version, string action, BodyWriter body) Parameters Type Name Description MessageVersion version A MessageVersion object that specifies the SOAP version to use for the message. String action A description of how the message should be processed. BodyWriter body A BodyWriter of type byte. Returns Type Description Message A Message object for the message created. Remarks An empty message is useful for an endpoint to send an alert to another endpoint without any actual content. CreateMessage(MessageVersion, String, Object) Creates a message with the specified version, action and body. Declaration public static Message CreateMessage(MessageVersion version, string action, object body) Parameters Type Name Description MessageVersion version A MessageVersion object that specifies the SOAP version to use for the message. String action A description of how the message should be processed. Object body The body of the message. Returns Type Description Message A Message object for the message created. Remarks This static method is used to create a new copy of message ready for sending. When working with JSON messages use the CreateMessage(MessageVersion, String, Object, XmlObjectSerializer) method, the CreateMessage(MessageVersion, String, Object) method does not work with JSON messages. CreateMessage(MessageVersion, String, Object, XmlObjectSerializer) Creates a message using the specified version, action, message body and serializer. Declaration public static Message CreateMessage(MessageVersion version, string action, object body, XmlObjectSerializer serializer) Parameters Type Name Description MessageVersion version A MessageVersion object that specifies the SOAP version to use for the message. String action A description of how the message should be processed. Object body The body of the message. XmlObjectSerializer serializer A XmlObjectSerializer object used to serialize the message. Returns Type Description Message A Message object for the message created. Remarks This static method is used to create a new copy of message ready for sending. When working with JSON messages use the CreateMessage(MessageVersion, String, Object, XmlObjectSerializer) method, the CreateMessage(MessageVersion, String, Object) method does not work with JSON messages. CreateMessage(MessageVersion, String, XmlDictionaryReader) Creates a message with the specified version, action and body. Declaration public static Message CreateMessage(MessageVersion version, string action, XmlDictionaryReader body) Parameters Type Name Description MessageVersion version A MessageVersion object that specifies the SOAP version to use for the message. String action A description of how the message should be processed. XmlDictionaryReader body The body of the message. Returns Type Description Message A Message object for the message created. Remarks This static method is used to create a new copy of message ready for sending. CreateMessage(MessageVersion, String, XmlReader) Creates a message using the specified reader, action and version. Declaration public static Message CreateMessage(MessageVersion version, string action, XmlReader body) Parameters Type Name Description MessageVersion version A MessageVersion object that specifies the SOAP version to use for the message. String action A description of how the message should be processed. XmlReader body The XmlReader object to be used for reading the SOAP message. Returns Type Description Message A Message object for the message created. Remarks This static method is used to create a new copy of message ready for sending. CreateMessage(XmlDictionaryReader, Int32, MessageVersion) Creates a message using the specified reader, action and version. Declaration public static Message CreateMessage(XmlDictionaryReader envelopeReader, int maxSizeOfHeaders, MessageVersion version) Parameters Type Name Description XmlDictionaryReader envelopeReader The XmlDictionaryReader object to be used for reading the SOAP message. Int32 maxSizeOfHeaders The maximum size in bytes of a header. MessageVersion version A valid MessageVersion value that specifies the SOAP version to use for the message. Returns Type Description Message A Message object for the message created. Remarks Message takes ownership of envelopeReader. This method reads the envelope, buffers all the headers into the header collection, and reads up to but not including the Body start tag, and returns the message. If the method call throws an exception, it closes the reader. The body of the returned message can then be either read or written. The message body can be read using the GetBody methods on the returned message. The returned object encapsulates all the child elements within the Body element. The message body can be written using WriteBody or WriteMessage . Once written, it cannot be read. Closing the message closes the underlying envelope reader. CreateMessage(XmlReader, Int32, MessageVersion) Creates a message using the specified reader, action and version. Declaration public static Message CreateMessage(XmlReader envelopeReader, int maxSizeOfHeaders, MessageVersion version) Parameters Type Name Description XmlReader envelopeReader The XmlReader object to be used for reading the SOAP message. Int32 maxSizeOfHeaders The maximum size in bytes of a header. MessageVersion version A MessageVersion object that specifies the SOAP version to use for the message. Returns Type Description Message A Message object for the message created. Remarks Message takes ownership of envelopeReader. This method reads the envelope, buffers all the headers into the header collection, and reads up to but not including the Body start tag, and returns the message. If the method call throws an exception, it closes the reader. The body of the returned message can then be either read or written. The message body can be read using the GetBody methods on the returned message. The returned object encapsulates all the child elements within the Body element. The message body can be written using WriteBody or WriteMessage . Once written, it cannot be read. Closing the message closes the underlying envelope reader. GetBody<T>() Retrieves the body of this Message instance. Declaration public T GetBody<T>() Returns Type Description T An object of type T that contains the body of this message. Type Parameters Name Description T The body of the message. Remarks A Message instance has a body that corresponds to the SOAP body. It can be accessed as an XmlDictionaryReader by calling GetReaderAtBodyContents() . It is initially positioned directly after the <S:Body> element, and it returns EOF on reaching the </S:Body> element. Alternatively, if you expect the body to contain a serialized object, you can call GetBody instead. You should be aware that a message body can only be accessed once and a message can only be written once. If you want to access the Body multiple times, use CreateBufferedCopy(Int32) to create a MessageBuffer instance. Use the GetBody<T>(XmlObjectSerializer) overload when working with JSON messages; the GetBody<T>() overload does not work. GetBody<T>(XmlObjectSerializer) Retrieves the body of this Message using the specified serializer. Declaration public T GetBody<T>(XmlObjectSerializer serializer) Parameters Type Name Description XmlObjectSerializer serializer A XmlObjectSerializer object used to read the body of the message. Returns Type Description T An object of type T that contains the body of this message. Type Parameters Name Description T The body of the message. Remarks A Message instance has a body that corresponds to the SOAP body. It can be accessed as an XmlDictionaryReader by calling GetReaderAtBodyContents() . It is initially positioned directly after the <S:Body> element, and it returns EOF on reaching the </S:Body> element. Alternatively, if you expect the body to contain a serialized object, you can call GetBody instead. You should be aware that a message body can only be accessed once and a message can only be written once. If you want to access the Body multiple times, use CreateBufferedCopy(Int32) to create a MessageBuffer instance. Use the GetBody<T>(XmlObjectSerializer) overload when working with JSON messages; the GetBody<T>() overload does not work. GetBodyAttribute(String, String) Retrieves the attributes of the message body. Declaration public string GetBodyAttribute(string localName, string ns) Parameters Type Name Description String localName The local name of the XML node. The name of the element that corresponds to this member. This string must be a valid XML element name. String ns The namespace to which this XML element belongs. The namespace URI of the element that corresponds to this member. The system does not validate any URIs other than transport addresses. Returns Type Description String The attributes of the message body. Remarks A Message instance has a body that corresponds to the SOAP body. It can be accessed as an XmlDictionaryReader by calling GetReaderAtBodyContents() . It is initially positioned directly after the <S:Body> element, and it returns EOF on reaching the </S:Body> element. Alternatively, if you expect the body to contain a serialized object, you can call GetBody instead. You should be aware that a message body can only be accessed once and a message can only be written once. If you want to access the Body multiple times, use CreateBufferedCopy(Int32) to create a MessageBuffer instance. GetReaderAtBodyContents() Gets the XML dictionary reader that accesses the body content of this message. Declaration public XmlDictionaryReader GetReaderAtBodyContents() Returns Type Description XmlDictionaryReader A XmlDictionaryReader object that accesses the body content of this message. Remarks A Message instance has a body that corresponds to the SOAP body. It can be accessed as an XmlDictionaryReader by calling GetReaderAtBodyContents() . It is initially positioned directly after the <S:Body> element. Alternatively, if you expect the body to contain a serialized object, you can call GetBody instead. You should be aware that a message body can only be accessed once and a message can only be written once. If you want to access the Body multiple times, use CreateBufferedCopy(Int32) to create a MessageBuffer instance. GetReaderAtHeader() Declaration public virtual XmlDictionaryReader GetReaderAtHeader() Returns Type Description XmlDictionaryReader OnBodyToString(XmlDictionaryWriter) Called when the message body is converted to a string. Declaration protected virtual void OnBodyToString(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer A XmlDictionaryWriter that is used to convert the message body to a string. OnClose() Called when the message is closing. Declaration protected virtual void OnClose() OnCreateBufferedCopy(Int32) Called when a message buffer is created to store this message. Declaration protected virtual MessageBuffer OnCreateBufferedCopy(int maxBufferSize) Parameters Type Name Description Int32 maxBufferSize The maximum size of the buffer to be created. Returns Type Description MessageBuffer A MessageBuffer object for the newly created message copy. OnCreateBufferedCopy(Int32, XmlDictionaryReaderQuotas) Declaration public MessageBuffer OnCreateBufferedCopy(int maxBufferSize, XmlDictionaryReaderQuotas quotas) Parameters Type Name Description Int32 maxBufferSize XmlDictionaryReaderQuotas quotas Returns Type Description MessageBuffer OnGetBody<T>(XmlDictionaryReader) Called when the body of the message is retrieved. Declaration protected virtual T OnGetBody<T>(XmlDictionaryReader reader) Parameters Type Name Description XmlDictionaryReader reader A XmlDictionaryReader object used to read the body of the message. Returns Type Description T A MessageBuffer that represents the body of the message. Type Parameters Name Description T The type of the message body. Remarks A Message instance has a body that corresponds to the SOAP body. It can be accessed as an XmlDictionaryReader by calling GetReaderAtBodyContents() . It is initially positioned directly after the <S:Body> element, and it returns EOF on reaching the </S:Body> element. Alternatively, if you expect the body to contain a serialized object, you can call GetBody instead. You should be aware that a message body can only be accessed once and a message can only be written once. If you want to access the Body multiple times, use CreateBufferedCopy(Int32) to create a MessageBuffer instance. Use the GetBody<T>(XmlObjectSerializer) overload when working with JSON messages; the GetBody<T>() overload does not work. OnGetBodyAttribute(String, String) Called when the attributes of the message body is retrieved. Declaration protected virtual string OnGetBodyAttribute(string localName, string ns) Parameters Type Name Description String localName The local name of the XML node. The name of the element that corresponds to this member. This string must be a valid XML element name. String ns The namespace to which this XML element belongs. The namespace URI of the element that corresponds to this member. The system does not validate any URIs other than transport addresses. Returns Type Description String The attributes of the message body. OnGetReaderAtBodyContents() Called when an XML dictionary reader that accesses the body content of this message is retrieved. Declaration protected virtual XmlDictionaryReader OnGetReaderAtBodyContents() Returns Type Description XmlDictionaryReader A XmlDictionaryReader object that accesses the body content of this message. OnWriteBodyContents(XmlDictionaryWriter) Called when the message body is written to an XML file. Declaration protected abstract void OnWriteBodyContents(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer A XmlDictionaryWriter that is used to write this message body to an XML file. OnWriteMessage(XmlDictionaryWriter) Called when the entire message is written to an XML file. Declaration protected virtual void OnWriteMessage(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer A XmlDictionaryWriter that is used to write this message to an XML file. OnWriteMessageAsync(XmlDictionaryWriter) Declaration public virtual Task OnWriteMessageAsync(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer Returns Type Description Task OnWriteStartBody(XmlDictionaryWriter) Called when the start body is written to an XML file. Declaration protected virtual void OnWriteStartBody(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer A XmlDictionaryWriter that is used to write the start body to an XML file. OnWriteStartEnvelope(XmlDictionaryWriter) Called when the start envelope is written to an XML file. Declaration protected virtual void OnWriteStartEnvelope(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer A XmlDictionaryWriter that is used to write the start envelope to an XML file. OnWriteStartHeaders(XmlDictionaryWriter) Called when the start header is written to an XML file. Declaration protected virtual void OnWriteStartHeaders(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer A XmlDictionaryWriter that is used to write the start header to an XML file. ToString() Returns a string that represents the current Message instance. Declaration public override string ToString() Returns Type Description String The string representation of the current Message instance. WriteBody(XmlDictionaryWriter) Writes the body element using the specified XmlDictionaryWriter . Declaration public void WriteBody(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer An XmlDictionaryWriter object to be used to write the body element. Remarks This method writes the body contents as well as the start and end tags of the element. WriteBody(XmlWriter) Serializes the message body using the specified XmlWriter . Declaration public void WriteBody(XmlWriter writer) Parameters Type Name Description XmlWriter writer The XmlWriter object to be used to write the body of the message. Remarks This method writes the body contents as well as the start and end tags of the element. WriteBodyContents(XmlDictionaryWriter) Serializes the body content using the specified XmlDictionaryWriter . Declaration public void WriteBodyContents(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer An XmlDictionaryWriter object to be used to write the body element. WriteBodyContentsAsync(XmlDictionaryWriter) Declaration public Task WriteBodyContentsAsync(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer Returns Type Description Task WriteMessage(XmlDictionaryWriter) Serializes the entire message using the specified XmlDictionaryWriter . Declaration public void WriteMessage(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer An XmlDictionaryWriter object to be used to write the message. Remarks This method serializes the entire message. Once a message is written, it cannot be rewritten unless a MessageBuffer instance exists for the message. WriteMessage(XmlWriter) Serializes the entire message using the specified XmlWriter . Declaration public void WriteMessage(XmlWriter writer) Parameters Type Name Description XmlWriter writer The XmlWriter object to be used to write the entire message. Remarks This method serializes the entire message. Once a message is written, it cannot be rewritten unless there is a MessageBuffer for the message. WriteMessageAsync(XmlDictionaryWriter) Declaration public virtual Task WriteMessageAsync(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer Returns Type Description Task WriteMessageAsync(XmlWriter) Declaration public virtual Task WriteMessageAsync(XmlWriter writer) Parameters Type Name Description XmlWriter writer Returns Type Description Task WriteStartBody(XmlDictionaryWriter) Serializes the start body of the message using the specified XmlDictionaryWriter . Declaration public void WriteStartBody(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer An XmlDictionaryWriter object to be used to write the start body. WriteStartBody(XmlWriter) Serializes the start body of the message using the specified XmlDictionaryWriter . Declaration public void WriteStartBody(XmlWriter writer) Parameters Type Name Description XmlWriter writer The XmlDictionaryWriter object to be used to write the start body of the message. WriteStartEnvelope(XmlDictionaryWriter) Serializes the start envelope using the specified XmlDictionaryWriter . Declaration public void WriteStartEnvelope(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer An XmlDictionaryWriter object to be used to write the start envelope. Implements System.IDisposable"
  },
  "api-corewcf/CoreWCF.Channels.MessageBuffer.html": {
    "href": "api-corewcf/CoreWCF.Channels.MessageBuffer.html",
    "title": "Class MessageBuffer",
    "keywords": "Class MessageBuffer Represents a memory buffer that stores an entire message for future consumption. Inheritance Object MessageBuffer Implements IDisposable Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class MessageBuffer : Object Remarks The body of a Message instance can only be consumed or written once. If you wish to consume a Message instance more than once, you should use the MessageBuffer class to completely store an entire Message instance into memory. A MessageBuffer instance is constructed by calling CreateBufferedCopy of a Message instance. A new MessageBuffer is then created and returned, which assumes ownership of the Message and reads the entire content into memory. In order to retrieve a copy of a Message from the MessageBuffer , you must call the CreateMessage method of the MessageBuffer . This returns an identical copy of the original Message instance you provided. You can control the maximum size of the buffer by setting BufferSize to the maximum number of bytes desired. This number does not necessarily cover any transient allocations related to building the buffer, or properties attached to the message. You should always close a MessageBuffer instance by calling Close() when finished working with it. This allows system resources to potentially be freed sooner. Special note for Managed C++ users deriving from this class: Put your cleanup code in (On)(Begin)Close (and/or OnAbort), not in a destructor. Avoid destructors: they cause the compiler to auto-generate IDisposable Avoid non-reference members: they can cause the compiler to auto-generate IDisposable Avoid finalizers; but if you include one, you should suppress the build warning and call SuppressFinalize(Object) and the finalizer itself from (On)(Begin)Close (and/or OnAbort) in order to emulate what would have been the auto-generated IDisposable behavior. Constructors MessageBuffer() Initializes a new instance of the MessageBuffer class. Declaration protected MessageBuffer() Properties BufferSize Gets the approximate number of bytes consumed by this MessageBuffer . Declaration public abstract int BufferSize { get; } Property Value Type Description Int32 The approximate number of bytes consumed by this MessageBuffer . Remarks You can control the maximum size of the buffer by setting BufferSize to the maximum number of bytes desired. This number does not necessarily cover any transient allocations related to building the buffer, or properties attached to the message. It is not related to the actual size of the message when serialized. MessageContentType Gets the type of message content stored in this buffer. Declaration public virtual string MessageContentType { get; } Property Value Type Description String The type of message content stored in this buffer. Methods Close() Finishes working with the buffer. Declaration public abstract void Close() Remarks You should always close a MessageBuffer instance by calling Close when finished working with it. This allows system resources to potentially be freed sooner. If you have called CreateBufferedCopy to create a message buffer of a message, and inspected the message using CreateMessage , you will get a InvalidOperationException when you attempt to close the buffer using this method. To avoid this problem, you need to recreate the message from the buffer before closing. See the code sample in the Example section for a demonstration of the previous scenario and a way to resolve this problem. CreateMessage() Returns a copy of the original message. Declaration public abstract Message CreateMessage() Returns Type Description Message An identical copy of the original Message instance you previously provided to the CreateBufferedCopy(Int32) method of a Message instance. Remarks Calling this method creates an identical copy of the original Message instance you previously provided to the CreateBufferedCopy method of a Message instance. You can then save the message to a durable storage. WriteMessage(Stream) Writes the entire content of this buffer to the specified IO stream. Declaration public virtual void WriteMessage(Stream stream) Parameters Type Name Description Stream stream An IO stream that the entire content of this buffer is written to. Remarks This function uses a binary encoder instead of a UTF-8 encoder. Therefore, you cannot directly convert from a MessageBuffer to a Message . The code in the example section shows how to work around this problem. Implements System.IDisposable"
  },
  "api-corewcf/CoreWCF.Channels.MessageEncoder.html": {
    "href": "api-corewcf/CoreWCF.Channels.MessageEncoder.html",
    "title": "Class MessageEncoder",
    "keywords": "Class MessageEncoder The encoder is the component that is used to write messages to a stream and to read messages from a stream. Inheritance Object MessageEncoder Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class MessageEncoder : Object Remarks MessageEncoder is a base class that provides implementations that support a Multipurpose Internet Mail Extensions (MIME) content type and message version, and defines the interface for the serialization and deserialization of messages according to that content type. Use it as a base class for writing your own custom encoder. Use this class if you want to implement a custom message encoder. To implement your own custom message encoder, you must provide custom implementations of the following abstract base classes: MessageEncodingBindingElement MessageEncoderFactory MessageEncoder Override the Encoder to return an instance of your custom MessageEncoder . Then wire up your custom MessageEncoderFactory to the binding element stack used to configure the service or client by overriding the CreateMessageEncoderFactory() method to return an instance of this factory. The task of converting between the in-memory representation of a message and an XML Information Set (Infoset) representation that can be written to a stream is encapsulated within the MessageEncoder class, which most commonly serves as a factory for XML readers and XML writers that support specific types of XML encodings. The key methods on MessageEncoder are WriteMessage and ReadMessage . WriteMessage takes a Message object and writes it into a Stream object. ReadMessage takes a Stream object and a maximum header size and returns a Message object. Constructors MessageEncoder() Initializes a new instance of the MessageEncoder class. Declaration protected MessageEncoder() Properties ContentType When overridden in a derived class, gets the MIME content type used by the encoder. Declaration public abstract string ContentType { get; } Property Value Type Description String The content type that is supported by the message encoder. Remarks The content type is a Multipurpose Internet Mail Exchange (MIME) header that appears at the beginning of a MIME message as well as within the separate body parts. Content-type headers are used to specify the media type and subtype of data in the body of a message and to fully specify the media type and subtype of data in the body of a message and to specify the character encoding (optional) of the data. An example of a MIME content type that can be supported: \"application/soap+xml; charset='utf8' \". A grammar that details the syntax of the content-type header is described in RFC 2045 , Section 5.1. RFC 2046 provides detailed information on MIME media types and their parameters. MediaType When overridden in a derived class, gets the media type value that is used by the encoder. Declaration public abstract string MediaType { get; } Property Value Type Description String The media type that is supported by the message encoder. Remarks The media type is part of the content-type header. MessageVersion When overridden in a derived class, gets the message version value that is used by the encoder. Declaration public abstract MessageVersion MessageVersion { get; } Property Value Type Description MessageVersion The MessageVersion that is used by the encoder. Remarks Specifies the versions of SOAP and WS-Addressing associated with a message and its exchange. If SOAP versions are not to be used, this property should be overridden to return None . Methods GetProperty<T>() Returns a typed object requested, if present, from the appropriate layer in the channel stack. Declaration public virtual T GetProperty<T>() where T : class Returns Type Description T The typed object T requested if it is present or null if it is not. Type Parameters Name Description T The typed object for which the method is querying. Remarks Use this to request a typed object such as an interface for setting properties or getting status from the appropriate layer in the channel stack. If a layer supports returning the requested object, it returns it. If not, it delegates the call down to the next layer in the stack. If it gets to the bottom of the stack and no channel layer supported the requested object, then the method returns null. IsCharSetSupported(String) Declaration protected virtual bool IsCharSetSupported(string charset) Parameters Type Name Description String charset Returns Type Description Boolean IsContentTypeSupported(String) Returns a value that indicates whether a specified message-level content-type value is supported by the message encoder. Declaration public virtual bool IsContentTypeSupported(string contentType) Parameters Type Name Description String contentType The message-level content-type being tested. Returns Type Description Boolean true if the message-level content-type specified is supported; otherwise false. Remarks This method is used to determine whether the message encoder can be used to read a particular style of message, based on its content-type. The information in the ContentType class is used to describe the data that is contained in a message and is used to determine if there is a content-type match. A grammar that details the syntax of the content-type header is described in RFC 2045 Section 5.1. RFC 2046 provides detailed information on Multipurpose Internet Mail Extensions (MIME) media types and their parameters. IsContentTypeSupported(String, String, String) Declaration protected bool IsContentTypeSupported(string contentType, string supportedContentType, string supportedMediaType) Parameters Type Name Description String contentType String supportedContentType String supportedMediaType Returns Type Description Boolean ReadMessage(ArraySegment<Byte>, BufferManager) When overridden in a derived class, reads a message from a specified buffer. Declaration public Message ReadMessage(ArraySegment<byte> buffer, BufferManager bufferManager) Parameters Type Name Description ArraySegment < Byte > buffer A ArraySegment of type Byte that provides the buffer from which the message is deserialized. BufferManager bufferManager The BufferManager that manages the buffer from which the message is deserialized. Returns Type Description Message The Message that is read from the buffer specified. ReadMessage(ArraySegment<Byte>, BufferManager, String) When overridden in a derived class, reads a message from a specified stream. Declaration public abstract Message ReadMessage(ArraySegment<byte> buffer, BufferManager bufferManager, string contentType) Parameters Type Name Description ArraySegment < Byte > buffer A ArraySegment of type Byte that provides the buffer from which the message is deserialized. BufferManager bufferManager The BufferManager that manages the buffer from which the message is deserialized. String contentType The Multipurpose Internet Mail Extensions (MIME) message-level content-type. Returns Type Description Message The Message that is read from the stream specified. ReadMessageAsync(Stream, Int32) When overridden in a derived class, reads a message from a specified stream. Declaration public Task<Message> ReadMessageAsync(Stream stream, int maxSizeOfHeaders) Parameters Type Name Description Stream stream The Stream object from which the message is read. Int32 maxSizeOfHeaders The maximum size of the headers that can be read from the message. Returns Type Description Task < Message > The Message that is read from the stream specified. ReadMessageAsync(Stream, Int32, String) When overridden in a derived class, reads a message from a specified stream. Declaration public abstract Task<Message> ReadMessageAsync(Stream stream, int maxSizeOfHeaders, string contentType) Parameters Type Name Description Stream stream The Stream object from which the message is read. Int32 maxSizeOfHeaders The maximum size of the headers that can be read from the message. String contentType The Multipurpose Internet Mail Extensions (MIME) message-level content-type. Returns Type Description Task < Message > The Message that is read from the stream specified. ThrowIfMismatchedMessageVersion(Message) Declaration protected void ThrowIfMismatchedMessageVersion(Message message) Parameters Type Name Description Message message ToString() Returns the content type that is used by the message encoder. Declaration public override string ToString() Returns Type Description String The content type that is used by the message encoder. WriteMessage(Message, Int32, BufferManager) Writes a message less than a specified size to a byte array buffer. Declaration public ArraySegment<byte> WriteMessage(Message message, int maxMessageSize, BufferManager bufferManager) Parameters Type Name Description Message message The Message to write to the message buffer. Int32 maxMessageSize The maximum message size that can be written. BufferManager bufferManager The BufferManager that manages the buffer to which the message is written. Returns Type Description ArraySegment < Byte > A ArraySegment of type byte that provides the buffer to which the message is serialized. WriteMessage(Message, Int32, BufferManager, Int32) When overridden in a derived class, writes a message of less than a specified size to a byte array buffer at the specified offset. Declaration public abstract ArraySegment<byte> WriteMessage(Message message, int maxMessageSize, BufferManager bufferManager, int messageOffset) Parameters Type Name Description Message message The Message to write to the message buffer. Int32 maxMessageSize The maximum message size that can be written. BufferManager bufferManager The BufferManager that manages the buffer to which the message is written. Int32 messageOffset The offset of the segment that begins from the start of the byte array that provides the buffer. Returns Type Description ArraySegment < Byte > A ArraySegment of type byte that provides the buffer to which the message is serialized. Remarks This method is called by WriteMessage(Message, Int32, BufferManager, Int32) . WriteMessageAsync(Message, Stream) When overridden in a derived class, writes a message to a specified stream. Declaration public abstract Task WriteMessageAsync(Message message, Stream stream) Parameters Type Name Description Message message The Message to write to the stream. Stream stream The Stream object to which the message is written. Returns Type Description Task"
  },
  "api-corewcf/CoreWCF.Channels.MessageEncoderFactory.html": {
    "href": "api-corewcf/CoreWCF.Channels.MessageEncoderFactory.html",
    "title": "Class MessageEncoderFactory",
    "keywords": "Class MessageEncoderFactory An abstract base class that represents the factory for producing message encoders that can read messages from a stream and write them to a stream for various types of message encoding. Inheritance Object MessageEncoderFactory WebMessageEncoderFactory Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class MessageEncoderFactory : Object Remarks Encoding is the process of transforming a message into a sequence of bytes. Decoding is the reverse process. Use this class if you want to implement a custom message encoder. To implement your own custom message encoder, you must provide custom implementations of the following three abstract base classes: MessageEncodingBindingElement MessageEncoderFactory MessageEncoder Override the Encoder to return an instance of your custom MessageEncoder . Then wire up your custom MessageEncoderFactory to the binding element stack used to configure the service or client by overriding the CreateMessageEncoderFactory() method to return an instance of this factory. For more information about custom encoders, see Data Transfer and Serialization . Constructors MessageEncoderFactory() Initializes a new instance of the MessageEncoderFactory class. Declaration protected MessageEncoderFactory() Properties Encoder When overridden in a derived class, gets the message encoder that is produced by the factory. Declaration public abstract MessageEncoder Encoder { get; } Property Value Type Description MessageEncoder The MessageEncoder used by the factory. MessageVersion When overridden in a derived class, gets the message version that is used by the encoders produced by the factory to encode messages. Declaration public abstract MessageVersion MessageVersion { get; } Property Value Type Description MessageVersion The MessageVersion used by the factory. Remarks The message version can be set using the MessageVersion property. MessageVersion is limited to using certain versions of SOAP and WS-Addressing and is not extensible. So if these versions are not to be used, this property should be overridden to return MessageVersion.None . Methods CreateSessionEncoder() Returns a message encoder that can be used to correlate messages in session-based exchanges. Declaration public virtual MessageEncoder CreateSessionEncoder() Returns Type Description MessageEncoder The MessageEncoder that is used in session-based exchanges of messages. Remarks A session-based message encoder can keep track the individual messages that form part of a conversation that consists of all the messages exchanged between two endpoints that are part of a session."
  },
  "api-corewcf/CoreWCF.Channels.MessageEncodingBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Channels.MessageEncodingBindingElement.html",
    "title": "Class MessageEncodingBindingElement",
    "keywords": "Class MessageEncodingBindingElement The binding element that specifies the message version used to encode messages. Inheritance Object BindingElement MessageEncodingBindingElement BinaryMessageEncodingBindingElement ByteStreamMessageEncodingBindingElement MtomMessageEncodingBindingElement TextMessageEncodingBindingElement WebMessageEncodingBindingElement Inherited Members BindingElement.Clone() BindingElement.BuildServiceDispatcher<TChannel>(BindingContext, IServiceDispatcher) BindingElement.CanBuildServiceDispatcher<TChannel>(BindingContext) Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class MessageEncodingBindingElement : BindingElement Remarks Encoding is the process of transforming a message into a sequence of bytes. Decoding is the reverse process. Windows Communication Foundation (WCF) includes three types of encoding for SOAP messages: Text, Binary and Message Transmission Optimization Mechanism (MTOM). Use this class if you want to implement a custom message encoder. To implement your own custom message encoder, you must provide custom implementations of the following three abstract base classes: MessageEncodingBindingElement MessageEncoderFactory MessageEncoder Override the Encoder to return an instance of your custom MessageEncoder . Override the CreateMessageEncoderFactory() method to return an instance of this factory. Any type that derives from MessageEncodingBindingElement is responsible for updating the version of the SOAP binding in the WSDL document generated for the service. This is done by implementing the ExportEndpoint(WsdlExporter, WsdlEndpointConversionContext) method to modify the generated WSDL. Windows Communication Foundation (WCF) provides three types of binding elements derived from the MessageEncodingBindingElement class that can provide for text, binary and Message Transmission Optimization Mechanism (MTOM) encoding. TextMessageEncodingBindingElement : the most interoperable, but the least efficient encoder for XML messages. A Web service or Web service client can generally understand textual XML. However, transmitting large blocks of binary data as text is not efficient. BinaryMessageEncodingBindingElement : represents the binding element that specifies the character encoding and message versioning used for binary-based XML messages. This is most efficient but least interoperable of the encoding options. MtomMessageEncodingBindingElement : represents the binding element that specifies the character encoding and message versioning used for a message using a Message Transmission Optimization Mechanism (MTOM) encoding. MTOM is an efficient technology for transmitting binary data in WCF messages. The MTOM encoder attempts to balance efficiency and interoperability. The MTOM encoding transmits most XML in textual form, but optimizes large blocks of binary data by transmitting them as-is, without conversion to text. Constructors MessageEncodingBindingElement() Initializes a new instance of the MessageEncodingBindingElement class. Declaration protected MessageEncodingBindingElement() MessageEncodingBindingElement(MessageEncodingBindingElement) Initializes a new instance of the MessageEncodingBindingElement class initialized from an existing element. Declaration protected MessageEncodingBindingElement(MessageEncodingBindingElement elementToBeCloned) Parameters Type Name Description MessageEncodingBindingElement elementToBeCloned The MessageEncodingBindingElement to be cloned. Properties MessageVersion When overridden in a derived class, gets or sets the message version that can be handled by the message encoders produced by the message encoder factory. Declaration public abstract MessageVersion MessageVersion { get; set; } Property Value Type Description MessageVersion The MessageVersion used by the encoders produced by the message encoder factory. Remarks When binding elements are asked to process a message that has a MessageVersion not returned by this property, it should throw an exception. Methods CheckEncodingVersion(EnvelopeVersion) Declaration protected virtual bool CheckEncodingVersion(EnvelopeVersion version) Parameters Type Name Description EnvelopeVersion version Returns Type Description Boolean CreateMessageEncoderFactory() When overridden in a derived class, creates a factory for producing message encoders. Declaration public abstract MessageEncoderFactory CreateMessageEncoderFactory() Returns Type Description MessageEncoderFactory The MessageEncoderFactory used to produce message encoders. GetProperty<T>(BindingContext) Returns the typed object requested, if present, from the appropriate layer in the channel stack. Declaration public override T GetProperty<T>(BindingContext context) where T : class Parameters Type Name Description BindingContext context The BindingContext for the current binding element. Returns Type Description T The typed object T requested if it is present or null if it is not. Type Parameters Name Description T The typed object for which the method is querying. Overrides BindingElement.GetProperty<T>(BindingContext) IsMatch(BindingElement) Declaration protected override bool IsMatch(BindingElement b) Parameters Type Name Description BindingElement b Returns Type Description Boolean Overrides BindingElement.IsMatch(BindingElement)"
  },
  "api-corewcf/CoreWCF.Channels.MessageFault.html": {
    "href": "api-corewcf/CoreWCF.Channels.MessageFault.html",
    "title": "Class MessageFault",
    "keywords": "Class MessageFault Represents an in-memory representation of a SOAP fault that can be passed to CreateMessage to create a message that contains a fault. Inheritance Object MessageFault Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class MessageFault : Object Remarks Use the MessageFault class any time you need an in-memory SOAP fault that can be modified and used to create a SOAP message that contains the fault information. Typically, the MessageFault class is used when implementing the IErrorHandler interface. In this case, Windows Communication Foundation (WCF) passes the MessageFault object and you use it for your specific needs (for example, you can customize the MessageFault or to log fault information). However, MessageFault can be used anywhere custom SOAP fault message handling is required. Constructors MessageFault() When called in a derived class, initializes a new instance of the MessageFault class. Declaration protected MessageFault() Properties Actor Gets or sets the value of the actor. Declaration public virtual string Actor { get; } Property Value Type Description String The value of the actor. Code Gets the SOAP fault code. Declaration public abstract FaultCode Code { get; } Property Value Type Description FaultCode A FaultCode that contains the SOAP fault code. HasDetail Gets a value that indicates whether the MessageFault has a detail object. Declaration public abstract bool HasDetail { get; } Property Value Type Description Boolean true if the MessageFault has a detail object; otherwise, false. Node Gets the SOAP node containing information about which SOAP node on a message path cause the fault. Declaration public virtual string Node { get; } Property Value Type Description String The SOAP node containing information about which SOAP node on a message path cause the fault. Reason Gets a textual description of a SOAP fault. Declaration public abstract FaultReason Reason { get; } Property Value Type Description FaultReason A FaultReason that contains a textual description of a SOAP fault. Methods CreateFault(Message, Int32) Returns a new MessageFault object that uses the specified Message and the specified maximum buffer size for the message buffer. Declaration public static MessageFault CreateFault(Message message, int maxBufferSize) Parameters Type Name Description Message message The specified Message to be used to create the MessageFault object. Int32 maxBufferSize The specified maximum buffer size for the message buffer. Returns Type Description MessageFault A MessageFault object with initial values from the passed in parameters. CreateFault(FaultCode, FaultReason, Object, XmlObjectSerializer, String, String) Returns a new MessageFault object that uses the specified FaultCode , FaultReason , detail object, XmlObjectSerializer , and actor. Declaration public static MessageFault CreateFault(FaultCode code, FaultReason reason, object detail, XmlObjectSerializer serializer, string actor, string node) Parameters Type Name Description FaultCode code The fault code for the fault message. FaultReason reason The reason for the fault. Object detail The fault detail object. XmlObjectSerializer serializer The serializer to use when serializing the detail object. String actor The value of the actor. String node The value of the node. Returns Type Description MessageFault A MessageFault object with initial values from the passed in parameters. GetDetail<T>() Returns the detail object of the message fault. Declaration public T GetDetail<T>() Returns Type Description T The detail object of the message fault. Type Parameters Name Description T The type of the detail object. GetDetail<T>(XmlObjectSerializer) Returns the detail object that uses the specified XmlObjectSerializer . Declaration public T GetDetail<T>(XmlObjectSerializer serializer) Parameters Type Name Description XmlObjectSerializer serializer The XmlObjectSerializer to use when deserializing the detail object. Returns Type Description T The detail object contained in the MessageFault . Type Parameters Name Description T The type of the detail object. GetReaderAtDetailContents() Returns an XmlDictionaryReader object that is positioned on the detail object of the MessageFault. Declaration public XmlDictionaryReader GetReaderAtDetailContents() Returns Type Description XmlDictionaryReader An XmlDictionaryReader object that is positioned on the detail object of the MessageFault . OnGetReaderAtDetailContents() When called in a derived class, returns an XmlDictionaryReader object that is positioned on the detail object of the MessageFault . Declaration protected virtual XmlDictionaryReader OnGetReaderAtDetailContents() Returns Type Description XmlDictionaryReader An XmlDictionaryReader object that is positioned on the detail object of the MessageFault . OnWriteDetail(XmlDictionaryWriter, EnvelopeVersion) Invoked prior to writing the detail contents. Declaration protected virtual void OnWriteDetail(XmlDictionaryWriter writer, EnvelopeVersion version) Parameters Type Name Description XmlDictionaryWriter writer The XmlDictionaryWriter used to write the detail element. EnvelopeVersion version The version of the SOAP envelope to write. Remarks Override the OnWriteDetail method to participate in the detail writing process. The default behavior is to call OnWriteStartDetail followed by OnWriteDetailContents . OnWriteDetailContents(XmlDictionaryWriter) When overridden in a non-abstract derived class, writes the contents of the detail element. Declaration protected abstract void OnWriteDetailContents(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer The XmlDictionaryWriter used to write the detail element. Remarks The OnWriteDetailContents method is called subsequent to OnWriteStartDetail and prior to writing the end element. OnWriteStartDetail(XmlDictionaryWriter, EnvelopeVersion) Writes the start element using the specified XmlDictionaryWriter and SOAP envelope version. Declaration protected virtual void OnWriteStartDetail(XmlDictionaryWriter writer, EnvelopeVersion version) Parameters Type Name Description XmlDictionaryWriter writer The XmlDictionaryWriter used to write the detail element. EnvelopeVersion version The version of the SOAP envelope to write."
  },
  "api-corewcf/CoreWCF.Channels.MessageHeader.html": {
    "href": "api-corewcf/CoreWCF.Channels.MessageHeader.html",
    "title": "Class MessageHeader",
    "keywords": "Class MessageHeader Represents the content of a SOAP header. Inheritance Object MessageHeaderInfo MessageHeader DictionaryHeader Inherited Members MessageHeaderInfo.Name MessageHeaderInfo.Namespace Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class MessageHeader : MessageHeaderInfo Remarks A message header contains optional metadata that describe a message encapsulated by the Message class. A Message can have zero or more headers that are used as an extension mechanism to pass information in messages that are application-specific. You can use Headers to add message headers to a message by calling the Add method. Windows Communication Foundation (WCF) provides a number of predefined message headers, as shown in the following table. Header Name Description To Contains the role that the message is targeting. Action Provides a description of how the message should be processed. FaultTo Contains the address of the node to which faults should be sent. From Contains the address of the node that sent the message. Request Indicates whether the message is a request. MessageID Contains the unique ID of the message. RelatesTo Contains the IDs of messages that are related to this message. ReplyTo Contains the address of the node to which a reply should be sent for a request. Constructors MessageHeader() Initializes a new instance of the MessageHeader class. Declaration protected MessageHeader() Properties Actor Gets or sets the targeted recipient of the message header. Declaration public override string Actor { get; } Property Value Type Description String The targeted recipient of the message header. The default is an empty string (\"\"). Overrides MessageHeaderInfo.Actor Remarks If this property is empty, the header is interpreted as targeted for the ultimate recipient of the message. IsReferenceParameter Gets a value that specifies whether this message header contains reference parameters of an endpoint reference. Declaration public override bool IsReferenceParameter { get; } Property Value Type Description Boolean true if this message header contains reference parameters of an endpoint reference; otherwise, false. Overrides MessageHeaderInfo.IsReferenceParameter Remarks A reference parameter corresponds to the element described in the WS-Addressing specification . MustUnderstand Gets or sets a value that indicates whether the header must be understood, according to SOAP 1.1/1.2 specification. Declaration public override bool MustUnderstand { get; } Property Value Type Description Boolean true if the header must be understood; otherwise, false. Overrides MessageHeaderInfo.MustUnderstand Remarks If this property is true and the message receiver cannot interpret the message header, the message is not processed and an exception is thrown. If this property is false, the receiver can ignore the message header and continue processing. Relay Gets a value that indicates whether the header should be relayed. Declaration public override bool Relay { get; } Property Value Type Description Boolean true if the header should be relayed; otherwise, false. Overrides MessageHeaderInfo.Relay Remarks According to SOAP 1.1 spec, this value is always false. Methods CreateHeader(String, String, Object) Creates a new message header with the specified data. Declaration public static MessageHeader CreateHeader(string name, string ns, object value) Parameters Type Name Description String name The local name of the header XML element. String ns The namespace URI of the header XML element. Object value The content of the header to be created. Returns Type Description MessageHeader A new MessageHeader object with the specified data. CreateHeader(String, String, Object, Boolean) Creates a new message header with the specified data. Declaration public static MessageHeader CreateHeader(string name, string ns, object value, bool mustUnderstand) Parameters Type Name Description String name The local name of the header XML element. String ns The namespace URI of the header XML element. Object value The content of the header to be created. Boolean mustUnderstand A value that indicates whether the header must be understood. Returns Type Description MessageHeader A new MessageHeader object with the specified data. CreateHeader(String, String, Object, Boolean, String) Creates a new message header with the specified data. Declaration public static MessageHeader CreateHeader(string name, string ns, object value, bool mustUnderstand, string actor) Parameters Type Name Description String name The local name of the header XML element. String ns The namespace URI of the header XML element. Object value The content of the header to be created. Boolean mustUnderstand A value that indicates whether the header must be understood. String actor The targeted recipient of the message header. Returns Type Description MessageHeader A new MessageHeader object with the specified data. CreateHeader(String, String, Object, Boolean, String, Boolean) Creates a new message header with the specified data. Declaration public static MessageHeader CreateHeader(string name, string ns, object value, bool mustUnderstand, string actor, bool relay) Parameters Type Name Description String name The local name of the header XML element. String ns The namespace URI of the header XML element. Object value The content of the header to be created. Boolean mustUnderstand A value that indicates whether the header must be understood. String actor The targeted recipient of the message header. Boolean relay A value that indicates whether the header should be relayed. Returns Type Description MessageHeader A new MessageHeader object with the specified data. CreateHeader(String, String, Object, XmlObjectSerializer) Creates a header from an object to be serialized using the XmlFormatter. Declaration public static MessageHeader CreateHeader(string name, string ns, object value, XmlObjectSerializer serializer) Parameters Type Name Description String name The local name of the header XML element. String ns The namespace URI of the header XML element. Object value The content of the header to be created. XmlObjectSerializer serializer An XmlObjectSerializer that is used to serialize the header. Returns Type Description MessageHeader A new MessageHeader object with the specified data. CreateHeader(String, String, Object, XmlObjectSerializer, Boolean) Creates a new message header with the specified data. Declaration public static MessageHeader CreateHeader(string name, string ns, object value, XmlObjectSerializer serializer, bool mustUnderstand) Parameters Type Name Description String name The local name of the header XML element. String ns The namespace URI of the header XML element. Object value The content of the header to be created. XmlObjectSerializer serializer An XmlObjectSerializer that is used to serialize the header. Boolean mustUnderstand A value that indicates whether the header must be understood. Returns Type Description MessageHeader A new MessageHeader object with the specified data. CreateHeader(String, String, Object, XmlObjectSerializer, Boolean, String) Creates a new message header with the specified data. Declaration public static MessageHeader CreateHeader(string name, string ns, object value, XmlObjectSerializer serializer, bool mustUnderstand, string actor) Parameters Type Name Description String name The local name of the header XML element. String ns The namespace URI of the header XML element. Object value The content of the header to be created. XmlObjectSerializer serializer An XmlObjectSerializer that is used to serialize the header. Boolean mustUnderstand A value that indicates whether the header must be understood. String actor The targeted recipient of the message header. Returns Type Description MessageHeader A new MessageHeader object with the specified data. CreateHeader(String, String, Object, XmlObjectSerializer, Boolean, String, Boolean) Creates a new message header with the specified data. Declaration public static MessageHeader CreateHeader(string name, string ns, object value, XmlObjectSerializer serializer, bool mustUnderstand, string actor, bool relay) Parameters Type Name Description String name The local name of the header XML element. String ns The namespace URI of the header XML element. Object value The content of the header to be created. XmlObjectSerializer serializer An XmlObjectSerializer that is used to serialize the header. Boolean mustUnderstand A value that indicates whether the header must be understood. String actor The targeted recipient of the message header. Boolean relay A value that indicates whether the header should be relayed. Returns Type Description MessageHeader A new MessageHeader object with the specified data. IsMessageVersionSupported(MessageVersion) Verifies whether the specified message version is supported. Declaration public virtual bool IsMessageVersionSupported(MessageVersion messageVersion) Parameters Type Name Description MessageVersion messageVersion The object that contains information related to the version of SOAP associated with a message and its exchange. Returns Type Description Boolean true if the specified message version is supported; otherwise, false. OnWriteHeaderContents(XmlDictionaryWriter, MessageVersion) Called when the header content is serialized using the specified XML writer. Declaration protected abstract void OnWriteHeaderContents(XmlDictionaryWriter writer, MessageVersion messageVersion) Parameters Type Name Description XmlDictionaryWriter writer An XmlDictionaryWriter that is used to serialize the header contents. MessageVersion messageVersion The object that contains information related to the version of SOAP associated with a message and its exchange. OnWriteStartHeader(XmlDictionaryWriter, MessageVersion) Called when the start header is serialized using the specified XML writer. Declaration protected virtual void OnWriteStartHeader(XmlDictionaryWriter writer, MessageVersion messageVersion) Parameters Type Name Description XmlDictionaryWriter writer An XmlDictionaryWriter that is used to serialize the start header. MessageVersion messageVersion The object that contains information related to the version of SOAP associated with a message and its exchange. ToString() Returns the string representation of this message header. Declaration public override string ToString() Returns Type Description String The string representation of this message header. WriteHeader(XmlDictionaryWriter, MessageVersion) Serializes the header using the specified XML writer. Declaration public void WriteHeader(XmlDictionaryWriter writer, MessageVersion messageVersion) Parameters Type Name Description XmlDictionaryWriter writer An XmlDictionaryWriter that is used to serialize the header. MessageVersion messageVersion The object that contains information related to the version of SOAP associated with a message and its exchange. WriteHeader(XmlWriter, MessageVersion) Serializes the header using the specified XML writer. Declaration public void WriteHeader(XmlWriter writer, MessageVersion messageVersion) Parameters Type Name Description XmlWriter writer An XmlWriter that is used to serialize the header. MessageVersion messageVersion The object that contains information related to the version of SOAP associated with a message and its exchange. WriteHeaderAttributes(XmlDictionaryWriter, MessageVersion) Serializes the header attributes using the specified XML writer. Declaration protected void WriteHeaderAttributes(XmlDictionaryWriter writer, MessageVersion messageVersion) Parameters Type Name Description XmlDictionaryWriter writer An XmlDictionaryWriter that is used to serialize the header attributes. MessageVersion messageVersion The object that contains information related to the version of SOAP associated with a message and its exchange. WriteHeaderContents(XmlDictionaryWriter, MessageVersion) Serializes the header contents using the specified XML writer. Declaration public void WriteHeaderContents(XmlDictionaryWriter writer, MessageVersion messageVersion) Parameters Type Name Description XmlDictionaryWriter writer An XmlWriter that is used to serialize the header contents. MessageVersion messageVersion The object that contains information related to the version of SOAP associated with a message and its exchange. WriteStartHeader(XmlDictionaryWriter, MessageVersion) Serializes the start header using the specified XML writer. Declaration public void WriteStartHeader(XmlDictionaryWriter writer, MessageVersion messageVersion) Parameters Type Name Description XmlDictionaryWriter writer An XmlDictionaryWriter that is used to serialize the start header. MessageVersion messageVersion That object that contains information related to the version of SOAP associated with a message and its exchange."
  },
  "api-corewcf/CoreWCF.Channels.MessageHeaderInfo.html": {
    "href": "api-corewcf/CoreWCF.Channels.MessageHeaderInfo.html",
    "title": "Class MessageHeaderInfo",
    "keywords": "Class MessageHeaderInfo Represents system information regarding a SOAP message header. Inheritance Object MessageHeaderInfo HeaderInfoCache.HeaderInfo MessageHeader Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class MessageHeaderInfo : Object Constructors MessageHeaderInfo() Initializes a new instance of the MessageHeaderInfo class. Declaration protected MessageHeaderInfo() Properties Actor Gets or sets the intended recipient of the message header. Declaration public abstract string Actor { get; } Property Value Type Description String A URI that indicates the intended recipient of the message header. Remarks If this property is empty, the header is interpreted as targeted for the ultimate recipient of the message. IsReferenceParameter Gets a value that specifies whether the message header represents reference parameters of an endpoint reference. Declaration public abstract bool IsReferenceParameter { get; } Property Value Type Description Boolean true if the message header represents reference parameters of an endpoint reference; otherwise, false. Remarks A reference parameter corresponds to the element described in the WS-Addressing specification . MustUnderstand Gets or sets a value that indicates whether processing the message header is mandatory or optional. Declaration public abstract bool MustUnderstand { get; } Property Value Type Description Boolean true if processing the message header is mandatory; otherwise, false. Remarks If this property is true and the message receiver cannot interpret the message header, the message is not processed and an exception is thrown. If this property is false, the receiver can ignore the message header and continue processing. Name Gets the name of the message header. Declaration public abstract string Name { get; } Property Value Type Description String The name of the message header. Namespace Gets the namespace of the message header. Declaration public abstract string Namespace { get; } Property Value Type Description String The namespace of the message header. Relay Gets or sets a value that indicates whether the message header can be relayed. Declaration public abstract bool Relay { get; } Property Value Type Description Boolean true if the message header can be relayed; otherwise, false. Remarks The SOAP specification defines a header block as one that can be relayed in the forwarded message if the header block is targeted at a role acted on by the SOAP intermediary, but not otherwise processed by the intermediary."
  },
  "api-corewcf/CoreWCF.Channels.MessageHeaders.html": {
    "href": "api-corewcf/CoreWCF.Channels.MessageHeaders.html",
    "title": "Class MessageHeaders",
    "keywords": "Class MessageHeaders Represents a collection of message headers for a message. This class cannot be inherited. Inheritance Object MessageHeaders Implements IEnumerable < MessageHeaderInfo > IEnumerable Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public sealed class MessageHeaders : Object Remarks A message header contains optional metadata that describe a message encapsulated by the Message class. A Message can have zero or more headers that are used as an extension mechanism to pass information in messages that are application-specific. You can use Headers to add message headers to a message by calling the Add method. Windows Communication Foundation (WCF) provides a number of predefined message headers: Header Name Description To Contains the role that the message is targeting. Action Provides a description of how the message should be processed. FaultTo Contains the address of the node to which faults should be sent. From Contains the address of the node that sent the message. Request Indicates whether the message is a request. MessageID Contains the unique ID of the message. RelatesTo Contains the IDs of messages that are related to this message. ReplyTo Contains the address of the node to which a reply should be sent for a request. Constructors MessageHeaders(MessageHeaders) Initializes a new instance of the MessageHeaders class with the specified message version and size. Declaration public MessageHeaders(MessageHeaders collection) Parameters Type Name Description MessageHeaders collection A collection of message headers. MessageHeaders(MessageVersion) Initializes a new instance of the MessageHeaders class with the specified message version. Declaration public MessageHeaders(MessageVersion version) Parameters Type Name Description MessageVersion version The SOAP version of the message. MessageHeaders(MessageVersion, Int32) Initializes a new instance of the MessageHeaders class with the specified message version and size. Declaration public MessageHeaders(MessageVersion version, int initialSize) Parameters Type Name Description MessageVersion version The SOAP version of the message. Int32 initialSize The size of the header. MessageHeaders(MessageVersion, XmlDictionaryReader, IBufferedMessageData, RecycledMessageState, Boolean[], Boolean) Declaration public MessageHeaders(MessageVersion version, XmlDictionaryReader reader, IBufferedMessageData bufferedMessageData, RecycledMessageState recycledMessageState, bool[] understoodHeaders, bool understoodHeadersModified) Parameters Type Name Description MessageVersion version XmlDictionaryReader reader IBufferedMessageData bufferedMessageData RecycledMessageState recycledMessageState Boolean [] understoodHeaders Boolean understoodHeadersModified Fields WildcardAction Declaration public const string WildcardAction = \"*\" Field Value Type Description String Properties Action Gets or sets a description of how the message should be processed. Declaration public string Action { get; set; } Property Value Type Description String A description of how the message should be processed. Remarks This property corresponds to the element described in the WS-Addressing specification . CanRecycle Declaration public bool CanRecycle { get; } Property Value Type Description Boolean ContainsOnlyBufferedMessageHeaders Declaration public bool ContainsOnlyBufferedMessageHeaders { get; } Property Value Type Description Boolean Count Gets the number of message headers in this collection. Declaration public int Count { get; } Property Value Type Description Int32 The number of message headers in this collection. FaultTo Gets or sets the address of the node to which faults should be sent. Declaration public EndpointAddress FaultTo { get; set; } Property Value Type Description EndpointAddress An EndpointAddress of the node to which faults should be sent. Remarks This property corresponds to the element described in the WS-Addressing specification . From Gets or sets the address of the node that sent the message. Declaration public EndpointAddress From { get; set; } Property Value Type Description EndpointAddress An EndpointAddress of the node that sent the message. Remarks This property corresponds to the element described in the WS-Addressing specification . Item[Int32] Retrieves a header at the given index. Declaration public MessageHeaderInfo this[int index] { get; } Parameters Type Name Description Int32 index The zero-based index of the header in the list. Property Value Type Description MessageHeaderInfo The MessageHeaderInfo in the collection. If index is greater than or equal to the number of headers in the list, this returns null. MessageId Gets or sets the unique ID of the message. Declaration public UniqueId MessageId { get; set; } Property Value Type Description UniqueId The unique ID of the message. Remarks This property corresponds to the element described in the WS-Addressing specification . MessageVersion Gets the SOAP version of the message. Declaration public MessageVersion MessageVersion { get; } Property Value Type Description MessageVersion A MessageVersion that is SOAP version of the message. RelatesTo Declaration public UniqueId RelatesTo { get; set; } Property Value Type Description UniqueId The IDs of messages that are related to this message. Remarks This property corresponds to the element described in the WS-Addressing specification . ReplyTo Gets or sets the address of the node to which a reply should be sent for a request. Declaration public EndpointAddress ReplyTo { get; set; } Property Value Type Description EndpointAddress An EndpointAddress of the node to which a reply should be sent for a request. Remarks This property corresponds to the element described in the WS-Addressing specification . To Gets or sets the destination endpoint of a message. Declaration public Uri To { get; set; } Property Value Type Description Uri A URI that contains the destination endpoint of a message. Remarks This property corresponds to the element described in the WS-Addressing specification . UnderstoodHeaders Gets all the message headers that must be understood, according to SOAP 1.1/1.2 specification. Declaration public UnderstoodHeaders UnderstoodHeaders { get; } Property Value Type Description UnderstoodHeaders A UnderstoodHeaders that represents the message headers that must be understood. Remarks If the message receiver cannot interpret the message headers contained in this property, the message is not processed and an exception is thrown. Methods Add(MessageHeader) Adds the specified message header to the collection. Declaration public void Add(MessageHeader header) Parameters Type Name Description MessageHeader header A message header to be added to the collection. Clear() Removes all the headers from the collection. Declaration public void Clear() CopyHeaderFrom(Message, Int32) Copies the header content located at the specified index from the specified message to this instance. Declaration public void CopyHeaderFrom(Message message, int headerIndex) Parameters Type Name Description Message message A message from which the header is copied from. Int32 headerIndex The location of the original message header, from which the content is copied over. CopyHeaderFrom(MessageHeaders, Int32) Copies the header content located at the specified index from the specified message header collection to this instance. Declaration public void CopyHeaderFrom(MessageHeaders collection, int headerIndex) Parameters Type Name Description MessageHeaders collection A MessageHeaders collection object. Int32 headerIndex The location of the original message header, from which the content is copied over. CopyHeadersFrom(Message) Copies the content of all the headers from the specified message to this instance. Declaration public void CopyHeadersFrom(Message message) Parameters Type Name Description Message message A message from which the headers are copied from. CopyHeadersFrom(MessageHeaders) Copies the content from the specified header collection to this instance. Declaration public void CopyHeadersFrom(MessageHeaders collection) Parameters Type Name Description MessageHeaders collection A MessageHeaders collection object from which the headers are copied to this instance. CopyTo(MessageHeaderInfo[], Int32) Copies the headers from this collection to an array, starting at a particular index of the array. Declaration public void CopyTo(MessageHeaderInfo[] array, int index) Parameters Type Name Description MessageHeaderInfo [] array The one-dimensional Array that is the destination of the message header objects copied from this instance. The Array must have zero-based indexing. Int32 index The zero-based index in the array at which copying begins. FindHeader(String, String) Finds a message header in this collection by the specified LocalName and namespace URI of the header element. Declaration public int FindHeader(string name, string ns) Parameters Type Name Description String name The LocalName of the header XML element. String ns The namespace URI of the header XML element. Returns Type Description Int32 The index of the message header in this collection if found or -1 if the header specified does not exist. FindHeader(String, String, String[]) Finds a message header in this collection by the specified LocalName, namespace URI and actors of the header element. Declaration public int FindHeader(string name, string ns, params string[] actors) Parameters Type Name Description String name The LocalName of the header XML element. String ns The namespace URI of the header XML element. String [] actors The targeted recipient of the message header. Returns Type Description Int32 The index of the message header in this collection if found, or -1 if the header specified does not exist. GetEnumerator() Returns an enumerator for iterating through the collection. This method cannot be inherited. Declaration public IEnumerator<MessageHeaderInfo> GetEnumerator() Returns Type Description IEnumerator < MessageHeaderInfo > An IEnumerator object that can be used to iterate through the collection. GetHeader<T>(Int32) Retrieves a message header at a specific position in this collection. Declaration public T GetHeader<T>(int index) Parameters Type Name Description Int32 index The zero-based index of the header to get. Returns Type Description T A message header at the specified index. Type Parameters Name Description T The type of the message header. Remarks This method only uses the DataContractSerializer . It does not try to detect from the type whether it should use the XmlObjectSerializer or DataContractSerializer. To use the XML serializer, call GetHeader (String, String, XmlObjectSerializer) or obtain the reader at the contents and call directly into the serializer. GetHeader<T>(Int32, XmlObjectSerializer) Retrieves a message header at a specific position in this collection. Declaration public T GetHeader<T>(int index, XmlObjectSerializer serializer) Parameters Type Name Description Int32 index The zero-based index of the header to get. XmlObjectSerializer serializer An XmlObjectSerializer that is used to serialize the header. Returns Type Description T A message header at the specified index. Type Parameters Name Description T The type of the message header. GetHeader<T>(String, String) Finds a message header in this collection by the specified LocalName and namespace URI of the header element. Declaration public T GetHeader<T>(string name, string ns) Parameters Type Name Description String name The LocalName of the header XML element. String ns The namespace URI of the header XML element. Returns Type Description T A message header with the specified name. Type Parameters Name Description T The type of the message header. Remarks This method only uses the DataContractSerializer . It does not try to detect from the type whether it should use the XmlObjectSerializer or the DataContractSerializer. To use the XML serializer, call GetHeader (String, String, XmlObjectSerializer) or obtain the reader at the contents and call directly into the serializer. GetHeader<T>(String, String, XmlObjectSerializer) Retrieves a message header in this collection by the specified LocalName, namespace URI and serializer. Declaration public T GetHeader<T>(string name, string ns, XmlObjectSerializer serializer) Parameters Type Name Description String name The LocalName of the header XML element. String ns The namespace URI of the header XML element. XmlObjectSerializer serializer An XmlObjectSerializer that is used to serialize the header. Returns Type Description T A message header with the specified name. Type Parameters Name Description T The type of the message header. GetHeader<T>(String, String, String[]) Retrieves a message header in this collection by the specified LocalName, namespace URI and actors of the header element. Declaration public T GetHeader<T>(string name, string ns, params string[] actors) Parameters Type Name Description String name The LocalName of the header XML element. String ns The namespace URI of the header XML element. String [] actors The targeted recipient of the message header. Returns Type Description T A message header with the specified name. Type Parameters Name Description T The type of the message header. Remarks This method only uses the DataContractSerializer . It does not try to detect from the type whether it should use the XmlObjectSerializer or DataContractSerializer. To use the XML serializer, call GetHeader (String, String, XmlObjectSerializer) or obtain the reader at the contents and call directly into the serializer. GetReaderAtHeader(Int32) Gets a XML dictionary reader that consumes the message header at the specified location of the collection. Declaration public XmlDictionaryReader GetReaderAtHeader(int headerIndex) Parameters Type Name Description Int32 headerIndex The zero-based index of the header to get. Returns Type Description XmlDictionaryReader An XmlDictionaryReader object that consumes the message header at the specified location of the collection. HaveMandatoryHeadersBeenUnderstood() Verifies whether all the message headers marked with MustUnderstand have been properly interpreted and processed. Declaration public bool HaveMandatoryHeadersBeenUnderstood() Returns Type Description Boolean true if the recipients specified by actors have properly interpreted and processed all the message headers marked with MustUnderstand; otherwise, false. Remarks If the message receiver cannot interpret the message headers marked with MustUnderstand, the message is not processed and an exception is thrown. HaveMandatoryHeadersBeenUnderstood(String[]) Verifies whether the specified recipients have properly interpreted and processed all the message headers marked with MustUnderstand. Declaration public bool HaveMandatoryHeadersBeenUnderstood(params string[] actors) Parameters Type Name Description String [] actors The targeted recipient of the message header. Returns Type Description Boolean true if the recipients specified by actors have properly interpreted and processed all the message headers marked with MustUnderstand; otherwise, false. Remarks If the message receiver cannot interpret the message headers marked with MustUnderstand, the message is not processed and an exception is thrown. Init(MessageVersion, XmlDictionaryReader, IBufferedMessageData, RecycledMessageState, Boolean[], Boolean) Declaration public void Init(MessageVersion version, XmlDictionaryReader reader, IBufferedMessageData bufferedMessageData, RecycledMessageState recycledMessageState, bool[] understoodHeaders, bool understoodHeadersModified) Parameters Type Name Description MessageVersion version XmlDictionaryReader reader IBufferedMessageData bufferedMessageData RecycledMessageState recycledMessageState Boolean [] understoodHeaders Boolean understoodHeadersModified Insert(Int32, MessageHeader) Inserts a message header into the collection at the specified index. Declaration public void Insert(int headerIndex, MessageHeader header) Parameters Type Name Description Int32 headerIndex The zero-based index at which header should be inserted. MessageHeader header A message header to insert. IsUnderstood(Int32) Declaration public bool IsUnderstood(int i) Parameters Type Name Description Int32 i Returns Type Description Boolean RemoveAll(String, String) Removes all headers with the specified name and namespace from the collection. Declaration public void RemoveAll(string name, string ns) Parameters Type Name Description String name The LocalName of the header XML element. String ns The namespace URI of the header XML element. RemoveAt(Int32) Removes the message header at the specified index from the collection. Declaration public void RemoveAt(int headerIndex) Parameters Type Name Description Int32 headerIndex The zero-based index of the header to remove. SetAction(XmlDictionaryString) Sets the action element of the header. Declaration public void SetAction(XmlDictionaryString action) Parameters Type Name Description XmlDictionaryString action A description of how the message should be processed. WriteHeader(Int32, XmlDictionaryWriter) Serializes the start header using the specified XML writer. Declaration public void WriteHeader(int headerIndex, XmlDictionaryWriter writer) Parameters Type Name Description Int32 headerIndex The zero-based index of the header to be serialized. XmlDictionaryWriter writer An XmlDictionaryWriter that is used to serialize the start header. WriteHeader(Int32, XmlWriter) Serializes the header from the specified location using the specified XML writer. Declaration public void WriteHeader(int headerIndex, XmlWriter writer) Parameters Type Name Description Int32 headerIndex The zero-based index of the header to be serialized. XmlWriter writer An XmlWriter that is used to serialize the header. WriteHeaderContents(Int32, XmlDictionaryWriter) Serializes the specified header content using the specified XML writer. Declaration public void WriteHeaderContents(int headerIndex, XmlDictionaryWriter writer) Parameters Type Name Description Int32 headerIndex The zero-based index of the header to be serialized. XmlDictionaryWriter writer An XmlDictionaryWriter that is used to serialize the header contents. WriteHeaderContents(Int32, XmlWriter) Serializes the specified header content using the specified XML writer. Declaration public void WriteHeaderContents(int headerIndex, XmlWriter writer) Parameters Type Name Description Int32 headerIndex The zero-based index of the header to be serialized. XmlWriter writer An XmlWriter that is used to serialize the header contents. WriteStartHeader(Int32, XmlDictionaryWriter) Serializes the start header using the specified XML writer. Declaration public void WriteStartHeader(int headerIndex, XmlDictionaryWriter writer) Parameters Type Name Description Int32 headerIndex The zero-based index of the header to be serialized. XmlDictionaryWriter writer An XmlDictionaryWriter that is used to serialize the start header. WriteStartHeader(Int32, XmlWriter) Serializes the start header using the specified XML writer. Declaration public void WriteStartHeader(int headerIndex, XmlWriter writer) Parameters Type Name Description Int32 headerIndex The zero-based index of the header to be serialized. XmlWriter writer An XmlWriter that is used to serialize the start header. Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api-corewcf/CoreWCF.Channels.MessageProperties.html": {
    "href": "api-corewcf/CoreWCF.Channels.MessageProperties.html",
    "title": "Class MessageProperties",
    "keywords": "Class MessageProperties Represents a set of properties for a message. This class cannot be inherited. Inheritance Object MessageProperties Implements IDictionary < String , Object > ICollection < KeyValuePair < String , Object >> IEnumerable < KeyValuePair < String , Object >> IEnumerable IDisposable Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public sealed class MessageProperties : Object Remarks As a message passes through the channel infrastructure, it passes through a number of logically separate processing entities. For instance, a message that is part of a reliable messaging stream can potentially pass through a MessageEncoder , a transport-level channel provider, the reliable-messaging channel provider, the streaming channel provider or any channel extensions. Sometimes these intermediaries annotate the message with the results of that processing by using the MessageProperties class. A MessageProperties instance is an annotation on a message and is stored as a set of name-to-object mappings in the Properties property of a Message instance. Note The message properties should be cleared out when the user gets the following error: The server committed a protocol violation. Section=ResponseBody Detail=Response chunk format is invalid Constructors MessageProperties() Initializes a new instance of the MessageProperties class. Declaration public MessageProperties() MessageProperties(MessageProperties) Initializes a new instance of the MessageProperties class with preset properties. Declaration public MessageProperties(MessageProperties properties) Parameters Type Name Description MessageProperties properties A MessageProperties . Properties AllowOutputBatching Gets or sets a value that specifies whether to store this message before giving it to the transport. Declaration public bool AllowOutputBatching { get; set; } Property Value Type Description Boolean true if the batching of outgoing messages is allowed; otherwise, false. Count Gets the total number of properties in the MessageProperties . Declaration public int Count { get; } Property Value Type Description Int32 The total number of properties in the MessageProperties . Encoder Gets the encoder that is used to write messages to a stream and to read messages from a stream. Declaration public MessageEncoder Encoder { get; set; } Property Value Type Description MessageEncoder A MessageEncoder that is used to write messages to a stream and to read messages from a stream. Remarks This property specifies a message encoder that can be used to serialize or deserialize the message instance this MessageProperties instance is attached to. IsFixedSize Gets a value that indicates whether the MessageProperties has a fixed size. Declaration public bool IsFixedSize { get; } Property Value Type Description Boolean true if the MessageProperties has a fixed size; otherwise, false. IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean Item[String] Retrieves a property with the specified name, identifier, or key value. Declaration public object this[string name] { get; set; } Parameters Type Name Description String name The name of the property to get from the collection. Property Value Type Description Object The property with the specified name, or null if the property does not exist. Keys Gets an ICollection that contains the keys in the MessageProperties . Declaration public ICollection<string> Keys { get; } Property Value Type Description ICollection < String > An ICollection that contains the keys in the MessageProperties . Security Declaration public SecurityMessageProperty Security { get; set; } Property Value Type Description SecurityMessageProperty Values Gets an ICollection that contains the values in the MessageProperties . Declaration public ICollection<object> Values { get; } Property Value Type Description ICollection < Object > An ICollection that contains the values in the MessageProperties . Via Gets or sets the transport address that is used to send messages. Declaration public Uri Via { get; set; } Property Value Type Description Uri A URI that contains the transport address that is used to send messages. Remarks The transport channel owns the Via property and it overwrites whatever value you set for the message headers. You do have one opportunity to set the channel's Via, which is during the creation of the channel from the channel factory, for example, with CreateChannel(EndpointAddress, Uri) . Methods Add(String, Object) Adds an element with the specified name and property into the MessageProperties collection. Declaration public void Add(string name, object property) Parameters Type Name Description String name The name of the element to add. Object property The value of the element to add. Clear() Removes all elements from the MessageProperties collection. Declaration public void Clear() ContainsKey(String) Determines whether the MessageProperties contains a specific name, key, or identifier. Declaration public bool ContainsKey(string name) Parameters Type Name Description String name The name, key, or identifier to locate in the MessageProperties . Returns Type Description Boolean true if the MessageProperties contains an element with the specified name; otherwise, false. CopyProperties(MessageProperties) Copies the content of the specified MessageProperties to this instance. Declaration public void CopyProperties(MessageProperties properties) Parameters Type Name Description MessageProperties properties A MessageProperties object in which to copy from. Dispose() Releases all resources used by the MessageProperties class. Declaration public void Dispose() Remarks Call Dispose() when you are finished using the MessageProperties . The Dispose() method leaves the MessageProperties in an unusable state. After calling Dispose() , you must release all references to the MessageProperties so the garbage collector can reclaim the memory that the MessageProperties occupied. Note Always call Dispose() before you release your last reference to the MessageProperties . Otherwise, the resources it is using are not freed until the garbage collector calls the MessageProperties object's Finalize method. Remove(String) Removes the element with the specified name from the MessageProperties . Declaration public bool Remove(string name) Parameters Type Name Description String name The name of the element to remove. Returns Type Description Boolean true if the MessageProperties contains an element with the specified name and can be removed; otherwise, false. TryGetValue(String, out Object) Determines whether the MessageProperties contains a specific name, and retrieves its value. Declaration public bool TryGetValue(string name, out object value) Parameters Type Name Description String name The name of the element to locate. Object value The value of the found element. Returns Type Description Boolean true if the MessageProperties contains an element with the specified name; otherwise, false. TryGetValue<TProperty>(String, out TProperty) Declaration public bool TryGetValue<TProperty>(string name, out TProperty property) Parameters Type Name Description String name TProperty property Returns Type Description Boolean Type Parameters Name Description TProperty Implements System.Collections.Generic.IDictionary<TKey,TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable System.IDisposable"
  },
  "api-corewcf/CoreWCF.Channels.MessageState.html": {
    "href": "api-corewcf/CoreWCF.Channels.MessageState.html",
    "title": "Class MessageState",
    "keywords": "Class MessageState Specifies the status of a message. Inheritance Object MessageState Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public sealed class MessageState : Enum Remarks As the body of a Message object is a stream, it can only be read or written once. This is enforced by maintaining the current state of the Message object. A Message object can be read/written/copied when in the Created state. Other states are Read, Written and Copied, which means that the respective action has been performed already once. Fields Closed Declaration public const MessageState Closed Field Value Type Description MessageState The message has been closed and can no longer be accessed. Copied Declaration public const MessageState Copied Field Value Type Description MessageState The message has been copied. Created Declaration public const MessageState Created Field Value Type Description MessageState The message has been created. Read Declaration public const MessageState Read Field Value Type Description MessageState The message is being read. value__ Declaration public int value__ Field Value Type Description Int32 Written Declaration public const MessageState Written Field Value Type Description MessageState The message has been written."
  },
  "api-corewcf/CoreWCF.Channels.MessageVersion.html": {
    "href": "api-corewcf/CoreWCF.Channels.MessageVersion.html",
    "title": "Class MessageVersion",
    "keywords": "Class MessageVersion Specifies the versions of SOAP and WS-Addressing associated with a message and its exchange Inheritance Object MessageVersion Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public sealed class MessageVersion : Object Remarks The MessageVersion contains the versioning information both about the SOAP envelope and the addressing protocol that is used by a message. An instance of Message is bound upon creation to a specific MessageVersion by passing the version as a parameter into one of the Message overloads. All the static 'get'; properties in this class, such as Soap11WSAddressing10 and Soap12 have enumeration-like semantics. They provide an enumeration of the possible message versions supported by the Windows Communication Foundation (WCF) runtime. A message has an envelope structure and an addressing structure. MessageVersion is just a shortcut for supplying { EnvelopeVersion , AddressingVersion } together. There are currently two SOAP envelope versions available: SOAP 1.1 and SOAP 1.2. These versions of SOAP are represented by EnvelopeVersion and are returned by the Soap11 and Soap12 properties. The version of SOAP associated with the MessageVersion can be recovered by using the Envelope property. For more information, see the schema for [SOAP 1.1] and [SOAP 1.2]. There are currently two versions of WS-Addressing available. The one submitted on 10 August 2004 and the one specified in the WS-Addressing 1.0 protocol. The address version used by the current message version can be recovered using the Addressing property. These versions of WS-Addressing are represented by AddressingVersion and are returned by the WSAddressingAugust2004 and WSAddressing10 properties. The WS-Addressing August 2004 is retained as a legacy value. The 10 August 2004 W3C Member Submission for WS-Addressing is available at Web Services Addressing (WS-Addressing) . The 17 August 2005 W3C Candidate Recommendation for WS-Addressing 1.0 - Core is available at Web Services Addressing 1.0 - Core . None provides support for using 'plain old XML'; (POX)-style messaging. Enabling basic POX messaging is now a matter of setting up an HTTP binding on your service with a text encoder that uses None . Message version objects can be created using specified versions of WS-Addressing and SOAP using one of the CreateVersion overloads. Properties Addressing Gets or sets the version of WS-Addressing that is associated with the current message version Declaration public AddressingVersion Addressing { get; } Property Value Type Description AddressingVersion The AddressingVersion that is associated with the current message version Remarks These versions of WS-Addressing are represented by AddressingVersion and are returned by the WSAddressingAugust2004 and WSAddressing10 properties. The WS-Addressing August 2004 is retained as a legacy value. The 10 August 2004 W3C Member Submission for WS-Addressing is available at Web Services Addressing (WS-Addressing) . The 17 August 2005 W3C Candidate Recommendation for WS-Addressing 1.0 - Core is available at Web Services Addressing 1.0 - Core Default Gets the default message version used by Windows Communication Foundation (WCF) Declaration public static MessageVersion Default { get; } Property Value Type Description MessageVersion The MessageVersion that uses WS-Addressing 1.0 and SOAP1.2 Remarks This returns the same object as Soap12WSAddressing10 Envelope Gets the SOAP version associated with the current message version Declaration public EnvelopeVersion Envelope { get; } Property Value Type Description EnvelopeVersion The EnvelopeVersion associated with the current message version Remarks There are currently two SOAP envelope versions available: SOAP 1.1 and SOAP 1.2. These versions of SOAP are represented by EnvelopeVersion and are returned by the Soap11 and Soap12 properties. The version of SOAP associated with the MessageVersion can be recovered by using the Envelope property. For more information, see the schema for SOAP 1.1 and SOAP 1.2 None Gets the message version that does not use SOAP or WS-Addressing Declaration public static MessageVersion None { get; } Property Value Type Description MessageVersion The MessageVersion that does not use SOAP or WS-Addressing Remarks The None consists of the None and None . This provides support for using 'plain old XML' (POX)-style messaging. Enabling basic POX messaging is now a matter of setting up an HTTP binding on your service with a text encoder that uses None . Note that when a service is configured with the BasicHttpBinding and the MessageVersion is set to None , the action header in a request message is removed from the response message. This is consistent with the way ASMX services work Soap11 Gets the message version using SOAP 1.1 Declaration public static MessageVersion Soap11 { get; } Property Value Type Description MessageVersion The MessageVersion using SOAP 1.1 but no version of WS-Addressing Soap11WSAddressing10 Declaration public static MessageVersion Soap11WSAddressing10 { get; } Property Value Type Description MessageVersion Soap11WSAddressingAugust2004 Gets the message version by using WS-Addressing submitted 10 August 2004 and SOAP 1.1 Declaration public static MessageVersion Soap11WSAddressingAugust2004 { get; } Property Value Type Description MessageVersion The MessageVersion using the version of WS-Addressing submitted 10 August 2004 and SOAP 1.1 Remarks For more information and the schemas for the 10 August 2004 W3C Member Submission for WS-Addressing and SOAP 1.1, see the following: - 10 August 2004 W3C Member Submission for WS-Addressing - WS-Addressing submitted 10 August 2004 schema - SOAP 1.1 Soap12 Gets the message version using SOAP 1.2 Declaration public static MessageVersion Soap12 { get; } Property Value Type Description MessageVersion The MessageVersion using SOAP 1.2 but no version of WS-Addressing Soap12WSAddressing10 Gets the message version using WS-Addressing 1.0 and SOAP 1.2 Declaration public static MessageVersion Soap12WSAddressing10 { get; } Property Value Type Description MessageVersion The MessageVersion using the version of WS-Addressing 1.0 and SOAP 1.2 Remarks For more information and the schemas of the 17 August 2005 W3C Candidate Recommendation for WS-Addressing and SOAP 1.2, see the following: - 17 August 2005 W3C Candidate Recommendation for WS-Addressing 1.0 - Core - WS-Addressing 1.0 schema - SOAP 1.2 schema Soap12WSAddressingAugust2004 Gets the message version using WS-Addressing submitted August 2004 and SOAP 1.2 Declaration public static MessageVersion Soap12WSAddressingAugust2004 { get; } Property Value Type Description MessageVersion The MessageVersion using the version of WS-Addressing submitted 10 August 2004 and SOAP 1.2. Remarks For more information and the schemas for 10 August W3C Member Submission for WS-Addressing and SOAP 1.2, see the following: - 10 August 2004 W3C Member Submission for WS-Addressing - WS-Addressing submitted 10 August 2004 schema - SOAP 1.2 schema Methods CreateVersion(EnvelopeVersion) Creates a message version object by using WS-Addressing 1.0 and with a specified SOAP version. Declaration public static MessageVersion CreateVersion(EnvelopeVersion envelopeVersion) Parameters Type Name Description EnvelopeVersion envelopeVersion The EnvelopeVersion that indicates the SOAP version to be used. Returns Type Description MessageVersion The MessageVersion using the specified version of SOAP and WS-Addressing 1.0. Remarks The SOAP versions currently available are SOAP 1.1 and SOAP 1.2. There is an EnvelopeVersion for each version of SOAP that contains the data relevant to its use. CreateVersion(EnvelopeVersion, AddressingVersion) Creates a message version object with specified SOAP and WS-Addressing versions Declaration public static MessageVersion CreateVersion(EnvelopeVersion envelopeVersion, AddressingVersion addressingVersion) Parameters Type Name Description EnvelopeVersion envelopeVersion The EnvelopeVersion that indicates the SOAP version AddressingVersion addressingVersion The AddressingVersion that indicates the WS-Addressing version. Returns Type Description MessageVersion The MessageVersion using the specified versions of WS-Addressing and SOAP. Remarks The SOAP versions currently available are SOAP 1.1 and SOAP 1.2. There is an EnvelopeVersion for each version of SOAP that contains the data relevant to its use. There are currently two versions of WS-Addressing available. One submitted 10 August 2004 and the other submitted August 2005 and referred to as the WS-Addressing 1.0 protocol Equals(Object) Returns a value that indicates whether the current message version is equal to a specified object Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The Object to compare with the current message version Returns Type Description Boolean true if the specified object is equal to the current MessageVersion object; otherwise, false GetHashCode() Gets a hash code for the current message version Declaration public override int GetHashCode() Returns Type Description Int32 A unique hash code for the current MessageVersion ToString() Returns the string representation of the current message version Declaration public override string ToString() Returns Type Description String The string representation of the current message version"
  },
  "api-corewcf/CoreWCF.Channels.MtomMessageEncodingBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Channels.MtomMessageEncodingBindingElement.html",
    "title": "Class MtomMessageEncodingBindingElement",
    "keywords": "Class MtomMessageEncodingBindingElement The binding element that specifies the encoding and versioning used for Message Transmission Optimization Mechanism (MTOM) messages. Inheritance Object BindingElement MessageEncodingBindingElement MtomMessageEncodingBindingElement Implements IWsdlExportExtension IPolicyExportExtension Inherited Members BindingElement.BuildServiceDispatcher<TChannel>(BindingContext, IServiceDispatcher) BindingElement.CanBuildServiceDispatcher<TChannel>(BindingContext) Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public sealed class MtomMessageEncodingBindingElement : MessageEncodingBindingElement, IWsdlExportExtension, IPolicyExportExtension Remarks Encoding is the process of transforming a message into a sequence of bytes. Decoding is the reverse process. Windows Communication Foundation (WCF) includes three types of encoding for SOAP messages: Text, Binary and Message Transmission Optimization Mechanism (MTOM). The MtomMessageEncodingBindingElement represents the binding element that specifies the character encoding and message versioning and other settings used for messages using a Message Transmission Optimization Mechanism (MTOM) encoding. MTOM is an efficient technology for transmitting binary data in WCF messages. The MTOM encoder attempts to create a balance between efficiency and interoperability. The MTOM encoding transmits most XML in textual form, but optimizes large blocks of binary data by transmitting them as-is, without conversion to their base64 encoded format. For more information about the binding element that specifies that messages are encoded using a textual representation of XML, see TextMessageEncodingBindingElement . For more information about the binding element that specifies messages are encoded using the .NET Binary Format for XML, see BinaryMessageEncodingBindingElement . To implement a custom message encoder, use the MessageEncodingBindingElement class. Constructors MtomMessageEncodingBindingElement() Initializes a new instance of the MtomMessageEncodingBindingElement class. Declaration public MtomMessageEncodingBindingElement() Remarks The default MessageVersion used consists of the version of WS-Addressing 1.0 and SOAP1.2. The default character encoding is UTF-8. MtomMessageEncodingBindingElement(MessageVersion, Encoding) Initializes a new instance of the MtomMessageEncodingBindingElement class with a specified message version and character encoding. Declaration public MtomMessageEncodingBindingElement(MessageVersion messageVersion, Encoding writeEncoding) Parameters Type Name Description MessageVersion messageVersion The MessageVersion that is used for the SOAP message. Encoding writeEncoding The Encoding that is used to format the message characters. Properties MaxBufferSize Gets or sets the maximum buffer size. Declaration public int MaxBufferSize { get; set; } Property Value Type Description Int32 The maximum size of the buffer. The default value is 65536 (0x10000) bytes. Remarks Message Transmission Optimization Mechanism (MTOM) messages in Windows Communication Foundation (WCF) can consist of multiple MIME parts. The message always includes a Multipurpose Internet Mail Extensions (MIME) part that contains the infoset portion of the message. In addition, if the message contains binary data that is optimized, it may contain additional MIME parts that contain binary data. There are no requirements imposed about what order these MIME parts must appear in the message. The message reading process sometimes must buffer MIME parts if they appear out of order. The message reading process also may have to buffer relevant MIME header information in each part. This MaxBufferSize quota is intended to cap the amount of memory that can be allocated when reading MTOM messages and so limit the excessive consumption of memory due to the buffering requirements. MaxReadPoolSize Gets or sets the maximum number of XML readers that is allocated to a pool and is ready for use to process incoming messages. Declaration public int MaxReadPoolSize { get; set; } Property Value Type Description Int32 The maximum number of readers to be kept in the pool. The default value is 64 readers. Remarks Increasing this number increases memory consumption, but prepares the encoder to deal with sudden bursts of incoming messages because it is able to use readers from the pool that are already created instead of creating new ones. MaxWritePoolSize Gets or sets the maximum number of XML writers that is allocated to a pool and are ready for use to process outgoing messages. Declaration public int MaxWritePoolSize { get; set; } Property Value Type Description Int32 The maximum number of writers to be kept in the pool. The default value is 16 writers. Remarks Increasing this number increases memory consumption, but prepares the encoder to deal with sudden bursts of outgoing messages because it is able to use writers from the pool that are already created instead of creating new ones. MessageVersion Gets or sets the SOAP message and WS-Addressing versions that are used or expected. Declaration public override MessageVersion MessageVersion { get; set; } Property Value Type Description MessageVersion The MessageVersion that is used for the SOAP message. Overrides MessageEncodingBindingElement.MessageVersion ReaderQuotas Gets or sets constraints on the complexity of XML messages that can be processed by endpoints configured with this binding element. Declaration public XmlDictionaryReaderQuotas ReaderQuotas { get; } Property Value Type Description XmlDictionaryReaderQuotas The XmlDictionaryReaderQuotas that specifies the complexity constraints on SOAP messages exchanged. The default values for these constraints are provided in the following Remarks section. Remarks The complexity constraints protect against a class of denial of service (DOS) attacks that attempt to use message complexity to tie up endpoint processing resources. The properties that express these constraints and their default values are as follows: MaxDepth = 32 MaxStringContentLength = 8192 MaxArrayLength = 16384 MaxBytesPerRead = 4096 MaxNameTableCharCount = 16384 For more information, see XmlDictionaryReaderQuotas . WriteEncoding Gets or sets the encoding that is used to format the characters in the text message. Declaration public Encoding WriteEncoding { get; set; } Property Value Type Description Encoding The Encoding that is used to format the characters in the text message. Remarks The default text encoding is the UTF-8 format. Other possible encodings include, for example, Unicode and Big Endian Unicode. Methods CheckEncodingVersion(EnvelopeVersion) Declaration protected override bool CheckEncodingVersion(EnvelopeVersion version) Parameters Type Name Description EnvelopeVersion version Returns Type Description Boolean Overrides MessageEncodingBindingElement.CheckEncodingVersion(EnvelopeVersion) Clone() Creates a new MtomMessageEncodingBindingElement object initialized from the current one. Declaration public override BindingElement Clone() Returns Type Description BindingElement A MtomMessageEncodingBindingElement object with property values equal to those of the current element. Overrides BindingElement.Clone() Remarks This creates a complete copy of the current binding element object tree, also called a deep clone. A deep clone of an object creates a copy of the object and a copy of everything directly or indirectly referenced by that object. (This is called copying the entire object graph.) Returning a deep clone enables the runtime to support the case in which multiple custom bindings share a custom binding element. If a deep clone is not returned, the run-time behavior is undefined. A shallow clone of an object, by contrast, is a copy of the object only. If the object contains references to other objects, the shallow copy does not create copies of the referred objects; instead, it copies only the references to the original objects. CreateMessageEncoderFactory() Creates a message encoder factory that encodes MTOM messages. Declaration public override MessageEncoderFactory CreateMessageEncoderFactory() Returns Type Description MessageEncoderFactory The MessageEncoderFactory that encodes MTOM messages. Overrides MessageEncodingBindingElement.CreateMessageEncoderFactory() GetProperty<T>(BindingContext) Returns a typed object requested, if present, from the appropriate layer in the binding element stack. Declaration public override T GetProperty<T>(BindingContext context) where T : class Parameters Type Name Description BindingContext context The BindingContext for the binding element. Returns Type Description T The typed object T requested if it is present or null if it is not. Type Parameters Name Description T The typed object for which the method is querying. Overrides MessageEncodingBindingElement.GetProperty<T>(BindingContext) Remarks Use this to request a typed object for setting properties or getting status from the appropriate layer in the binding element stack. If a layer supports returning the requested object, it returns it. If not, it simply delegates the call down to the next layer in the stack. If it gets to the bottom of the stack and no binding element layer supported the requested object, then the method returns null. IsMatch(BindingElement) Declaration protected override bool IsMatch(BindingElement b) Parameters Type Name Description BindingElement b Returns Type Description Boolean Overrides MessageEncodingBindingElement.IsMatch(BindingElement) Explicit Interface Implementations IPolicyExportExtension.ExportPolicy(MetadataExporter, PolicyConversionContext) Declaration void IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext policyContext) Parameters Type Name Description MetadataExporter exporter PolicyConversionContext policyContext IWsdlExportExtension.ExportContract(WsdlExporter, WsdlContractConversionContext) Declaration void IWsdlExportExtension.ExportContract(WsdlExporter exporter, WsdlContractConversionContext context) Parameters Type Name Description WsdlExporter exporter WsdlContractConversionContext context IWsdlExportExtension.ExportEndpoint(WsdlExporter, WsdlEndpointConversionContext) Declaration void IWsdlExportExtension.ExportEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext context) Parameters Type Name Description WsdlExporter exporter WsdlEndpointConversionContext context Implements IWsdlExportExtension IPolicyExportExtension"
  },
  "api-corewcf/CoreWCF.Channels.PrivacyNoticeBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Channels.PrivacyNoticeBindingElement.html",
    "title": "Class PrivacyNoticeBindingElement",
    "keywords": "Class PrivacyNoticeBindingElement Represents the binding element that contains the privacy policy for the WS-Federation binding. Inheritance Object BindingElement PrivacyNoticeBindingElement Implements IPolicyExportExtension Inherited Members BindingElement.BuildServiceDispatcher<TChannel>(BindingContext, IServiceDispatcher) BindingElement.CanBuildServiceDispatcher<TChannel>(BindingContext) Namespace : CoreWCF.Channels Assembly : CoreWCF.Http.dll Syntax public sealed class PrivacyNoticeBindingElement : BindingElement, IPolicyExportExtension Remarks To be added. Constructors PrivacyNoticeBindingElement() Initializes a new instance of the PrivacyNoticeBindingElement class. Declaration public PrivacyNoticeBindingElement() PrivacyNoticeBindingElement(PrivacyNoticeBindingElement) Initializes a new instance of the PrivacyNoticeBindingElement class from an existing element. Declaration public PrivacyNoticeBindingElement(PrivacyNoticeBindingElement elementToBeCloned) Parameters Type Name Description PrivacyNoticeBindingElement elementToBeCloned The PrivacyNoticeBindingElement used to initialize the new element. Properties Url Gets or sets the URI at which the privacy notice is located. Declaration public Uri Url { get; set; } Property Value Type Description Uri The Uri at which the privacy notice is located. Version Gets or sets the privacy notice version number for the binding. Declaration public int Version { get; set; } Property Value Type Description Int32 The version number of the privacy notice. Methods Clone() Creates a copy of the current binding element. Declaration public override BindingElement Clone() Returns Type Description BindingElement A BindingElement that is a copy of the current element. Overrides BindingElement.Clone() GetProperty<T>(BindingContext) Queries the binding element stack to see whether it supports a particular interface. Declaration public override T GetProperty<T>(BindingContext context) where T : class Parameters Type Name Description BindingContext context The BindingContext for the current binding element. Returns Type Description T The interface whose support is being tested. Type Parameters Name Description T The interface whose support is being tested. Overrides BindingElement.GetProperty<T>(BindingContext) Remarks Calls GetProperty<T>(BindingContext) on the next binding element in the binding context. IsMatch(BindingElement) Declaration protected override bool IsMatch(BindingElement b) Parameters Type Name Description BindingElement b Returns Type Description Boolean Overrides BindingElement.IsMatch(BindingElement) Explicit Interface Implementations IPolicyExportExtension.ExportPolicy(MetadataExporter, PolicyConversionContext) Exports custom policy assertions regarding the privacy notice from the binding elements that contain the policy. Declaration void IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext context) Parameters Type Name Description MetadataExporter exporter The MetadataExporter that you can use to modify the exporting process. PolicyConversionContext context The PolicyConversionContext that contains the binding assertions and elements associated with the policy. Implements IPolicyExportExtension"
  },
  "api-corewcf/CoreWCF.Channels.ReceiveContextState.html": {
    "href": "api-corewcf/CoreWCF.Channels.ReceiveContextState.html",
    "title": "Class ReceiveContextState",
    "keywords": "Class ReceiveContextState Represents the possible states for the receive context state machine. Inheritance Object ReceiveContextState Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public sealed class ReceiveContextState : Enum Fields Abandoned Represents the abandoned state. Declaration public const ReceiveContextState Abandoned Field Value Type Description ReceiveContextState Abandoning Represents the abandoning state. Declaration public const ReceiveContextState Abandoning Field Value Type Description ReceiveContextState Completed Represents the completed state. Declaration public const ReceiveContextState Completed Field Value Type Description ReceiveContextState Completing Represents the completing state. Declaration public const ReceiveContextState Completing Field Value Type Description ReceiveContextState Faulted Represents the faulted state. Declaration public const ReceiveContextState Faulted Field Value Type Description ReceiveContextState Received Represents the received state. Declaration public const ReceiveContextState Received Field Value Type Description ReceiveContextState value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.Channels.RecycledMessageState.html": {
    "href": "api-corewcf/CoreWCF.Channels.RecycledMessageState.html",
    "title": "Class RecycledMessageState",
    "keywords": "Class RecycledMessageState Inheritance Object RecycledMessageState Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public class RecycledMessageState : Object Constructors RecycledMessageState() Declaration public RecycledMessageState() Properties HeaderInfoCache Declaration public HeaderInfoCache HeaderInfoCache { get; } Property Value Type Description HeaderInfoCache UriCache Declaration public UriCache UriCache { get; } Property Value Type Description UriCache Methods ReturnHeaders(MessageHeaders) Declaration public void ReturnHeaders(MessageHeaders headers) Parameters Type Name Description MessageHeaders headers ReturnProperties(MessageProperties) Declaration public void ReturnProperties(MessageProperties properties) Parameters Type Name Description MessageProperties properties TakeHeaders() Declaration public MessageHeaders TakeHeaders() Returns Type Description MessageHeaders TakeProperties() Declaration public MessageProperties TakeProperties() Returns Type Description MessageProperties"
  },
  "api-corewcf/CoreWCF.Channels.RemoteEndpointMessageProperty.html": {
    "href": "api-corewcf/CoreWCF.Channels.RemoteEndpointMessageProperty.html",
    "title": "Class RemoteEndpointMessageProperty",
    "keywords": "Class RemoteEndpointMessageProperty Makes available the client IP address and port number associated with the remote endpoint from which a message was sent. Inheritance Object RemoteEndpointMessageProperty Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public sealed class RemoteEndpointMessageProperty : Object Remarks The property is added to each incoming message to a Windows Communication Foundation (WCF) service through both the HTTP and TCP transports. The property is not present on messages received through either a named pipes or MSMQ transport. Availability of the property when using HTTP hosted in IIS depends on having a currently active request. Therefore, this property is not available after the request has completed, such as when performing a one-way receive. The IP address and port number are that of the node from which the message was received. If a message goes through a relay or proxy, the IP address and port number of the respective relay or proxy is the one attached to the message by this property. Be aware that the IP address and port could be spoofed by an attacker and thus should not be relied upon for security sensitive authentication or authorization unless additional application specific logic is added. Constructors RemoteEndpointMessageProperty(IPEndPoint) Declaration public RemoteEndpointMessageProperty(IPEndPoint remoteEndPoint) Parameters Type Name Description IPEndPoint remoteEndPoint RemoteEndpointMessageProperty(String, Int32) Initializes a new instance of the RemoteEndpointMessageProperty class for a specified IP address and port that identify the client from which the message was sent. Declaration public RemoteEndpointMessageProperty(string address, int port) Parameters Type Name Description String address The IP address of the remote endpoint associated with the message. Int32 port The port number of the remote endpoint associated with the message. Remarks Be aware that the IP address and port could be spoofed by an attacker and thus should not be relied upon for security sensitive authentication or authorization unless additional application specific logic is added. Properties Address Gets the IP address of the client from which the message was sent. Declaration public string Address { get; } Property Value Type Description String The IP address of the client from which the message was sent. Name Returns the string \"System.ServiceModel.Channels.RemoteEndpointMessageProperty\". Declaration public static string Name { get; } Property Value Type Description String System.ServiceModel.Channels.RemoteEndpointMessageProperty Port Gets the port number of the client from which the message was sent. Declaration public int Port { get; } Property Value Type Description Int32 The port number of the client from which the message was sent."
  },
  "api-corewcf/CoreWCF.Channels.RequestContext.html": {
    "href": "api-corewcf/CoreWCF.Channels.RequestContext.html",
    "title": "Class RequestContext",
    "keywords": "Class RequestContext Provides a reply that is correlated to an incoming request. Inheritance Object RequestContext Implements IDisposable Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class RequestContext : Object Remarks You get a request context from an IReplyChannel . Each RequestContext encapsulates the information required to reply to the request, so that you do not have to block on the channel when waiting for each request message to receive a reply. In the request/reply model, the RequestContext object is the link between the request that comes in and the reply that goes out. When the server receives a request, it provides a RequestContext instance that represents the request to the channel. The request context contains the original request message among other useful properties. This request context is then stashed inside the OperationContext for retrieval by your service. You typically use the Current property to access the request of the current operation. The value of the RequestContext can be null . Because the role of the request context is to link requests to replies, it does not make sense to have a request context when you do not have a reply, and so in this case the context is set to null . For a one-way operation on top of the request/reply model, the server receives requests but does not send back a response to the client. So if the RequestContext is null unexpectedly, check first whether the operation contract is IsOneWay. Special note for Managed C++ users deriving from this class: Put your cleanup code in (On)(Begin)Close (and/or OnAbort), not in a destructor. Avoid destructors: they cause the compiler to auto-generate IDisposable . Avoid non-reference members: they can cause the compiler to auto-generate IDisposable . Avoid finalizers; but if you include one, you should suppress the build warning and call SuppressFinalize(Object) and the finalizer itself from (On)(Begin)Close (and/or OnAbort) to emulate what would have been the auto-generated IDisposable behavior. Constructors RequestContext() Initializes a new instance of the RequestContext class. Declaration protected RequestContext() Properties RequestMessage When overridden in a derived class, gets the message that contains the request. Declaration public abstract Message RequestMessage { get; } Property Value Type Description Message The Message that contains the request. Methods Abort() When overridden in a derived class, aborts processing the request associated with the context. Declaration public abstract void Abort() CloseAsync() Declaration public abstract Task CloseAsync() Returns Type Description Task CloseAsync(CancellationToken) Declaration public abstract Task CloseAsync(CancellationToken token) Parameters Type Name Description CancellationToken token Returns Type Description Task Dispose(Boolean) Releases resources associated with the context. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. OnOperationInvoke() Declaration public virtual void OnOperationInvoke() ReplyAsync(Message) Declaration public abstract Task ReplyAsync(Message message) Parameters Type Name Description Message message Returns Type Description Task ReplyAsync(Message, CancellationToken) Declaration public abstract Task ReplyAsync(Message message, CancellationToken token) Parameters Type Name Description Message message CancellationToken token Returns Type Description Task Implements System.IDisposable"
  },
  "api-corewcf/CoreWCF.Channels.SecurityBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Channels.SecurityBindingElement.html",
    "title": "Class SecurityBindingElement",
    "keywords": "Class SecurityBindingElement An abstract class that, when implemented, represents a binding element that supports channel SOAP message security. Inheritance Object BindingElement SecurityBindingElement SymmetricSecurityBindingElement TransportSecurityBindingElement Inherited Members BindingElement.Clone() BindingElement.IsMatch(BindingElement) Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class SecurityBindingElement : BindingElement Remarks This class is the base class for the SOAP message security binding elements in WCF. There are three implementations of this abstract class: SymmetricSecurityBindingElement , AsymmetricSecurityBindingElement , and TransportSecurityBindingElement . These implementations model the bindings defined in the WS-Security Policy specification. A custom binding contains a collection of binding elements arranged in a specific order: the element that represents the top of the binding stack is added first, the next element down in the binding stack is added second, and so on. To add this class to a binding, do the following: Create a BindingElementCollection . Create a custom binding element that is above this binding element in the binding stack, such as the optional TransactionFlowBindingElement and ReliableSessionBindingElement . Add these elements in the order previously described to the BindingElementCollection using the InsertItem method. Create an instance of a security binding element derived from SecurityBindingElement , such as AsymmetricSecurityBindingElement , SymmetricSecurityBindingElement , or TransportSecurityBindingElement . Add the derived security binding element to the collection. Add any additional custom binding elements to the collection, such as TcpTransportBindingElement . For more information about using a SecurityBindingElement , see SecurityBindingElement Authentication Modes and How to: Create a Custom Binding Using the SecurityBindingElement . Note Once a SecurityBindingElement object is created, you should treat its properties as immutable. Calling set on some properties may have unpredictable effects: the binding may behave as if the property retained its old value, with a runtime failure being the only indication of an issue. Two properties known to behave this way are KeyType and MessageSecurityVersion . There may be other properties of which this is also true. Properties AllowInsecureTransport Declaration public bool AllowInsecureTransport { get; set; } Property Value Type Description Boolean DefaultAlgorithmSuite Gets or sets the message encryption and key-wrap algorithms. Declaration public SecurityAlgorithmSuite DefaultAlgorithmSuite { get; set; } Property Value Type Description SecurityAlgorithmSuite The SecurityAlgorithmSuite object that represents the message encryption and key-wrap algorithms. Remarks The SecurityAlgorithmSuite object that contains numerous properties that specify security algorithms that are to be used for signing, encryption, key derivation, and other cryptographic operations. It also controls the key sizes that are used for doing these cryptographic operations. EnableUnsecuredResponse Declaration public bool EnableUnsecuredResponse { get; set; } Property Value Type Description Boolean EndpointSupportingTokenParameters Gets the endpoint that supports token parameters. Declaration public SupportingTokenParameters EndpointSupportingTokenParameters { get; } Property Value Type Description SupportingTokenParameters The SupportingTokenParameters object that represents the endpoint that supports token parameters. Remarks Supporting tokens provide additional claims beyond those contained in the primary tokens for the binding. The collection returned by the EndpointSupportingTokenParameters contains additional token parameters ( SecurityTokenParameters ) for all operations defined by an endpoint. The primary token parameters are found on either the SymmetricSecurityBindingElement or the AsymmetricSecurityBindingElement (both inherit from the SecurityBindingElement class). In the case of the SymmetricSecurityBindingElement , the primary token parameters are returned by the ProtectionTokenParameters property. On the AsymmetricSecurityBindingElement element there are two parameter properties, the InitiatorTokenParameters and RecipientTokenParameters properties. Note The properties are called parameters because they specify only the type of the security token, not the actual values. Supporting tokens can be scoped at the endpoint level, in which case they are included in all secured messages sent by the client to the service. The service enforces that all secured messages from the client contain the supporting token types configured by this property. To provide supporting tokens only for an operation (not all operations on an endpoint), use the OptionalOperationSupportingTokenParameters property. IncludeTimestamp Gets or sets a value that indicates whether time stamps are included in each message. Declaration public bool IncludeTimestamp { get; set; } Property Value Type Description Boolean true if time stamps are included in each message; otherwise, false . The default is true . Remarks If the IncludeTimestamp property is true and if DetectReplays is true , WCF detects a replay attack. KeyEntropyMode Gets or sets the source of entropy used to create keys. Declaration public SecurityKeyEntropyMode KeyEntropyMode { get; set; } Property Value Type Description SecurityKeyEntropyMode The SecurityKeyEntropyMode used to create keys. The default value is CombinedEntropy . Remarks The KeyEntropyMode specifies how the key for tokens (such as SecurityContextSecurityToken ) issued by the service is computed: whether it is computed based on the client key material only, on the service key material only, or on a combination of both. LocalServiceSettings Declaration public LocalServiceSecuritySettings LocalServiceSettings { get; } Property Value Type Description LocalServiceSecuritySettings MessageSecurityVersion Gets or sets the message security version. Declaration public MessageSecurityVersion MessageSecurityVersion { get; set; } Property Value Type Description MessageSecurityVersion The MessageSecurityVersion object that represents the message security version. Remarks The MessageSecurityVersion contains numerous properties that specify version numbers of different security specifications used when securing messages exchanged on the channel. Note Once a SecurityBindingElement object is created, this property is immutable. Calling set on it does not change it. OperationSupportingTokenParameters Declaration public IDictionary<string, SupportingTokenParameters> OperationSupportingTokenParameters { get; } Property Value Type Description IDictionary < String , SupportingTokenParameters > OptionalEndpointSupportingTokenParameters Declaration public SupportingTokenParameters OptionalEndpointSupportingTokenParameters { get; } Property Value Type Description SupportingTokenParameters OptionalOperationSupportingTokenParameters Declaration public IDictionary<string, SupportingTokenParameters> OptionalOperationSupportingTokenParameters { get; } Property Value Type Description IDictionary < String , SupportingTokenParameters > ProtectTokens Declaration public bool ProtectTokens { get; set; } Property Value Type Description Boolean SecurityHeaderLayout Gets or sets the ordering of the elements in the security header for this binding. Declaration public SecurityHeaderLayout SecurityHeaderLayout { get; set; } Property Value Type Description SecurityHeaderLayout The SecurityHeaderLayout that represents the ordering of the elements in the security header for this binding. The default is Strict . Remarks The SecurityHeaderLayout enumeration contains the following members: Strict : Items are added to the security header according to the general principle of \"declare before use \". Lax : Items are added to the security header in any order that conforms to WSS: SOAP Message security. LaxTimestampFirst : Items are added to the security header in any order that conforms to WSS: SOAP message security except that the first element in the security header must be a wsse:Timestamp element. LaxTimestampLast : Items are added to the security header in any order that conforms to WSS: SOAP message security except that the last element in the security header must be a wsse:Timestamp element. Methods BuildServiceDispatcher<TChannel>(BindingContext, IServiceDispatcher) Declaration public override IServiceDispatcher BuildServiceDispatcher<TChannel>(BindingContext context, IServiceDispatcher innerDispatcher) where TChannel : class, IChannel Parameters Type Name Description BindingContext context IServiceDispatcher innerDispatcher Returns Type Description IServiceDispatcher Type Parameters Name Description TChannel Overrides BindingElement.BuildServiceDispatcher<TChannel>(BindingContext, IServiceDispatcher) BuildServiceDispatcherCore<TChannel>(BindingContext, IServiceDispatcher) Declaration protected abstract IServiceDispatcher BuildServiceDispatcherCore<TChannel>(BindingContext context, IServiceDispatcher serviceDispatcher) where TChannel : class, IChannel Parameters Type Name Description BindingContext context IServiceDispatcher serviceDispatcher Returns Type Description IServiceDispatcher Type Parameters Name Description TChannel CanBuildServiceDispatcher<TChannel>(BindingContext) Declaration public override bool CanBuildServiceDispatcher<TChannel>(BindingContext context) where TChannel : class, IChannel Parameters Type Name Description BindingContext context Returns Type Description Boolean Type Parameters Name Description TChannel Overrides BindingElement.CanBuildServiceDispatcher<TChannel>(BindingContext) CreateCertificateOverTransportBindingElement() Creates a security binding element that expects clients to do certificate-based authentication using SOAP message security. Declaration public static TransportSecurityBindingElement CreateCertificateOverTransportBindingElement() Returns Type Description TransportSecurityBindingElement A TransportSecurityBindingElement object. Remarks This binding element expects the transport to provide server authentication as well as message protection (for example, HTTPS). The binding element is configured to use the Default property of the MessageSecurityVersion class. The created binding has IncludeTimestamp set to true . The LocalClientSecuritySettings object returned from LocalClientSettings has its DetectReplays property set to false . The LocalServiceSecuritySettings object returned from LocalServiceSettings has its DetectReplays property set to false . CreateCertificateOverTransportBindingElement(MessageSecurityVersion) Creates a security binding element that expects clients to do certificate-based authentication using SOAP message security. Declaration public static TransportSecurityBindingElement CreateCertificateOverTransportBindingElement(MessageSecurityVersion version) Parameters Type Name Description MessageSecurityVersion version The MessageSecurityVersion for the binding. Returns Type Description TransportSecurityBindingElement A TransportSecurityBindingElement object. Remarks This binding element expects the transport to provide server authentication as well as message protection (for example, HTTPS). The binding element is configured with the specified MessageSecurityVersion . The created binding has IncludeTimestamp set to true . The LocalClientSecuritySettings object returned from LocalClientSettings has its DetectReplays property set to false . The LocalServiceSecuritySettings object returned from LocalServiceSettings has its DetectReplays property set to false . CreateIssuedTokenForCertificateBindingElement(IssuedSecurityTokenParameters) Declaration public static SymmetricSecurityBindingElement CreateIssuedTokenForCertificateBindingElement(IssuedSecurityTokenParameters issuedTokenParameters) Parameters Type Name Description IssuedSecurityTokenParameters issuedTokenParameters Returns Type Description SymmetricSecurityBindingElement CreateIssuedTokenForSslBindingElement(IssuedSecurityTokenParameters, Boolean) Declaration public static SymmetricSecurityBindingElement CreateIssuedTokenForSslBindingElement(IssuedSecurityTokenParameters issuedTokenParameters, bool requireCancellation) Parameters Type Name Description IssuedSecurityTokenParameters issuedTokenParameters Boolean requireCancellation Returns Type Description SymmetricSecurityBindingElement CreateIssuedTokenOverTransportBindingElement(IssuedSecurityTokenParameters) Creates a security binding element configured to require SOAP security based client authentication using an issued token. This binding element requires the transport to provide server authentication and message protection (for example, HTTPS). Declaration public static TransportSecurityBindingElement CreateIssuedTokenOverTransportBindingElement(IssuedSecurityTokenParameters issuedTokenParameters) Parameters Type Name Description IssuedSecurityTokenParameters issuedTokenParameters An IssuedSecurityTokenParameters . Returns Type Description TransportSecurityBindingElement A TransportSecurityBindingElement object. Remarks The created binding has IncludeTimestamp set to true . The LocalClientSecuritySettings object returned from LocalClientSettings has its DetectReplays property set to false . The LocalServiceSecuritySettings object returned from LocalServiceSettings has its DetectReplays property set to false . Note Once a SecurityBindingElement object is created by calling this method, the KeyType property should be treated as immutable. Inconsistent binding behavior may occur if this value is modified. CreateSecureConversationBindingElement(SecurityBindingElement) Creates a symmetric security binding element that is configured to establish a secure conversation between the client and service. The security context token issued at the end of the secure conversation handshake is used to secure the messages. The bootstrap security binding element specifies how the secure conversation handshake messages are secured. Declaration public static SecurityBindingElement CreateSecureConversationBindingElement(SecurityBindingElement bootstrapSecurity) Parameters Type Name Description SecurityBindingElement bootstrapSecurity A SecurityBindingElement that contains specification on how the secure conversation handshake messages are secured. Returns Type Description SecurityBindingElement A SecurityBindingElement object. Remarks The binding element is configured to use session-based security context tokens. The bootstrapSecurity is used to indicate the security binding and policy used to request a secure conversation token from the service. If bootstrapSecurity is a TransportSecurityBindingElement , the binding element returned by this method is also one, and IncludeTimestamp is set to true ; and the LocalClientSecuritySettings object returned from LocalClientSettings has its DetectReplays property set to false ; and the LocalServiceSecuritySettings object returned from LocalServiceSettings has its DetectReplays property set to false . Otherwise, a SymmetricSecurityBindingElement is returned, with RequireSignatureConfirmation set to false. CreateSecureConversationBindingElement(SecurityBindingElement, Boolean) Declaration public static SecurityBindingElement CreateSecureConversationBindingElement(SecurityBindingElement bootstrapSecurity, bool requireCancellation) Parameters Type Name Description SecurityBindingElement bootstrapSecurity Boolean requireCancellation Returns Type Description SecurityBindingElement CreateSecureConversationBindingElement(SecurityBindingElement, Boolean, ChannelProtectionRequirements) Declaration public static SecurityBindingElement CreateSecureConversationBindingElement(SecurityBindingElement bootstrapSecurity, bool requireCancellation, ChannelProtectionRequirements bootstrapProtectionRequirements) Parameters Type Name Description SecurityBindingElement bootstrapSecurity Boolean requireCancellation ChannelProtectionRequirements bootstrapProtectionRequirements Returns Type Description SecurityBindingElement CreateSspiNegotiationOverTransportBindingElement(Boolean) Declaration public static TransportSecurityBindingElement CreateSspiNegotiationOverTransportBindingElement(bool requireCancellation) Parameters Type Name Description Boolean requireCancellation Returns Type Description TransportSecurityBindingElement CreateUserNameOverTransportBindingElement() Creates a security binding element that is configured for client authentication based on a user name and password sent as part of the SOAP message. The binding element requires the transport to provide server authentication and message protection (for example, HTTPS). Declaration public static TransportSecurityBindingElement CreateUserNameOverTransportBindingElement() Returns Type Description TransportSecurityBindingElement A TransportSecurityBindingElement object. Remarks The created binding has IncludeTimestamp set to true . The LocalClientSecuritySettings object returned from LocalClientSettings has its DetectReplays property set to false . The LocalServiceSecuritySettings object returned from LocalServiceSettings has its DetectReplays property set to false . ExportPolicyForTransportTokenAssertionProviders(MetadataExporter, PolicyConversionContext) Declaration public static void ExportPolicyForTransportTokenAssertionProviders(MetadataExporter exporter, PolicyConversionContext context) Parameters Type Name Description MetadataExporter exporter PolicyConversionContext context ExportTransportSecurityBindingElement(TransportSecurityBindingElement, ITransportTokenAssertionProvider, MetadataExporter, PolicyConversionContext) Declaration public static void ExportTransportSecurityBindingElement(TransportSecurityBindingElement binding, ITransportTokenAssertionProvider transportTokenAssertionProvider, MetadataExporter exporter, PolicyConversionContext policyContext) Parameters Type Name Description TransportSecurityBindingElement binding ITransportTokenAssertionProvider transportTokenAssertionProvider MetadataExporter exporter PolicyConversionContext policyContext GetProperty<T>(BindingContext) Gets a specified object using the specified BindingContext . Declaration public override T GetProperty<T>(BindingContext context) where T : class Parameters Type Name Description BindingContext context The BindingContext . Returns Type Description T The specified object from the BindingContext or null if the object is not found. Type Parameters Name Description T The property to get. Overrides BindingElement.GetProperty<T>(BindingContext) Remarks This method gets the specified object from the base class, or from one of that class's ancestors. The object returned is usually a collection of properties, for example, an object that implements ISecurityCapabilities . If the SecurityBindingElement does not recognize the type of property requested, it delegates the call to the binding element stack below it, passing the binding context parameter. The types of properties that the SecurityBindingElement can provide are ISecurityCapabilities and IdentityVerifier . SetIssuerBindingContextIfRequired(SecurityTokenParameters, BindingContext) Declaration protected static void SetIssuerBindingContextIfRequired(SecurityTokenParameters parameters, BindingContext issuerBindingContext) Parameters Type Name Description SecurityTokenParameters parameters BindingContext issuerBindingContext SetKeyDerivation(Boolean) Declaration public virtual void SetKeyDerivation(bool requireDerivedKeys) Parameters Type Name Description Boolean requireDerivedKeys"
  },
  "api-corewcf/CoreWCF.Channels.SecurityHeaderLayout.html": {
    "href": "api-corewcf/CoreWCF.Channels.SecurityHeaderLayout.html",
    "title": "Class SecurityHeaderLayout",
    "keywords": "Class SecurityHeaderLayout Describes the layout of the security header. Inheritance Object SecurityHeaderLayout Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public sealed class SecurityHeaderLayout : Enum Remarks The default value is Strict. Fields Lax Declaration public const SecurityHeaderLayout Lax Field Value Type Description SecurityHeaderLayout Items are added to the security header in any order that confirms to WSS: SOAP Message security. LaxTimestampFirst Declaration public const SecurityHeaderLayout LaxTimestampFirst Field Value Type Description SecurityHeaderLayout LaxTimestampLast Declaration public const SecurityHeaderLayout LaxTimestampLast Field Value Type Description SecurityHeaderLayout Strict Declaration public const SecurityHeaderLayout Strict Field Value Type Description SecurityHeaderLayout Items are added to the security header according to the general principle of \"declare before use\". value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.Channels.ServiceChannelFactory.html": {
    "href": "api-corewcf/CoreWCF.Channels.ServiceChannelFactory.html",
    "title": "Class ServiceChannelFactory",
    "keywords": "Class ServiceChannelFactory Inheritance Object ServiceChannelFactory Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public class ServiceChannelFactory : Object Constructors ServiceChannelFactory() Declaration public ServiceChannelFactory()"
  },
  "api-corewcf/CoreWCF.Channels.ServiceChannelProxy.html": {
    "href": "api-corewcf/CoreWCF.Channels.ServiceChannelProxy.html",
    "title": "Class ServiceChannelProxy",
    "keywords": "Class ServiceChannelProxy Inheritance Object ServiceChannelProxy Implements IClientChannel IDisposable IOutputChannel IRequestChannel IContextChannel IChannel ICommunicationObject IExtensibleObject < IContextChannel > Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public class ServiceChannelProxy : DispatchProxy, IClientChannel, IOutputChannel, IRequestChannel, IContextChannel, IChannel, ICommunicationObject, IExtensibleObject<IContextChannel> Constructors ServiceChannelProxy() Declaration public ServiceChannelProxy() Methods Invoke(MethodInfo, Object[]) Declaration protected sealed override object Invoke(MethodInfo targetMethod, object[] args) Parameters Type Name Description MethodInfo targetMethod Object [] args Returns Type Description Object ToString() Declaration public sealed override string ToString() Returns Type Description String Explicit Interface Implementations IChannel.ChannelDispatcher Declaration IServiceChannelDispatcher IChannel.ChannelDispatcher { get; set; } Returns Type Description IServiceChannelDispatcher IChannel.GetProperty<T>() Declaration T IChannel.GetProperty<T>() where T : class Returns Type Description T Type Parameters Name Description T IOutputChannel.RemoteAddress Declaration EndpointAddress IOutputChannel.RemoteAddress { get; } Returns Type Description EndpointAddress IOutputChannel.SendAsync(Message) Declaration Task IOutputChannel.SendAsync(Message message) Parameters Type Name Description Message message Returns Type Description Task IOutputChannel.SendAsync(Message, CancellationToken) Declaration Task IOutputChannel.SendAsync(Message message, CancellationToken token) Parameters Type Name Description Message message CancellationToken token Returns Type Description Task IOutputChannel.Via Declaration Uri IOutputChannel.Via { get; } Returns Type Description Uri IRequestChannel.RemoteAddress Declaration EndpointAddress IRequestChannel.RemoteAddress { get; } Returns Type Description EndpointAddress IRequestChannel.RequestAsync(Message) Declaration Task<Message> IRequestChannel.RequestAsync(Message message) Parameters Type Name Description Message message Returns Type Description Task < Message > IRequestChannel.RequestAsync(Message, CancellationToken) Declaration Task<Message> IRequestChannel.RequestAsync(Message message, CancellationToken token) Parameters Type Name Description Message message CancellationToken token Returns Type Description Task < Message > IRequestChannel.Via Declaration Uri IRequestChannel.Via { get; } Returns Type Description Uri IClientChannel.UnknownMessageReceived Declaration event EventHandler<UnknownMessageReceivedEventArgs> IClientChannel.UnknownMessageReceived Returns Type Description EventHandler < UnknownMessageReceivedEventArgs > ICommunicationObject.Abort() Declaration void ICommunicationObject.Abort() ICommunicationObject.CloseAsync() Declaration Task ICommunicationObject.CloseAsync() Returns Type Description Task ICommunicationObject.CloseAsync(CancellationToken) Declaration Task ICommunicationObject.CloseAsync(CancellationToken token) Parameters Type Name Description CancellationToken token Returns Type Description Task ICommunicationObject.Closed Declaration event EventHandler ICommunicationObject.Closed Returns Type Description EventHandler ICommunicationObject.Closing Declaration event EventHandler ICommunicationObject.Closing Returns Type Description EventHandler ICommunicationObject.Faulted Declaration event EventHandler ICommunicationObject.Faulted Returns Type Description EventHandler ICommunicationObject.OpenAsync() Declaration Task ICommunicationObject.OpenAsync() Returns Type Description Task ICommunicationObject.OpenAsync(CancellationToken) Declaration Task ICommunicationObject.OpenAsync(CancellationToken token) Parameters Type Name Description CancellationToken token Returns Type Description Task ICommunicationObject.Opened Declaration event EventHandler ICommunicationObject.Opened Returns Type Description EventHandler ICommunicationObject.Opening Declaration event EventHandler ICommunicationObject.Opening Returns Type Description EventHandler ICommunicationObject.State Declaration CommunicationState ICommunicationObject.State { get; } Returns Type Description CommunicationState IContextChannel.InputSession Declaration IInputSession IContextChannel.InputSession { get; } Returns Type Description IInputSession IContextChannel.LocalAddress Declaration EndpointAddress IContextChannel.LocalAddress { get; } Returns Type Description EndpointAddress IContextChannel.OperationTimeout Declaration TimeSpan IContextChannel.OperationTimeout { get; set; } Returns Type Description TimeSpan IContextChannel.OutputSession Declaration IOutputSession IContextChannel.OutputSession { get; } Returns Type Description IOutputSession IContextChannel.RemoteAddress Declaration EndpointAddress IContextChannel.RemoteAddress { get; } Returns Type Description EndpointAddress IContextChannel.SessionId Declaration string IContextChannel.SessionId { get; } Returns Type Description String IExtensibleObject<IContextChannel>.Extensions Declaration IExtensionCollection<IContextChannel> IExtensibleObject<IContextChannel>.Extensions { get; } Returns Type Description IExtensionCollection < IContextChannel > Implements IClientChannel System.IDisposable IOutputChannel IRequestChannel IContextChannel IChannel ICommunicationObject IExtensibleObject<T>"
  },
  "api-corewcf/CoreWCF.Channels.ServiceModelHttpMiddleware.html": {
    "href": "api-corewcf/CoreWCF.Channels.ServiceModelHttpMiddleware.html",
    "title": "Class ServiceModelHttpMiddleware",
    "keywords": "Class ServiceModelHttpMiddleware Inheritance Object ServiceModelHttpMiddleware Namespace : CoreWCF.Channels Assembly : CoreWCF.Http.dll Syntax public class ServiceModelHttpMiddleware : Object Constructors ServiceModelHttpMiddleware(RequestDelegate, IApplicationBuilder, IServiceBuilder, IDispatcherBuilder, ILogger<ServiceModelHttpMiddleware>) Declaration public ServiceModelHttpMiddleware(RequestDelegate next, IApplicationBuilder app, IServiceBuilder serviceBuilder, IDispatcherBuilder dispatcherBuilder, ILogger<ServiceModelHttpMiddleware> logger) Parameters Type Name Description RequestDelegate next IApplicationBuilder app IServiceBuilder serviceBuilder IDispatcherBuilder dispatcherBuilder ILogger < ServiceModelHttpMiddleware > logger Methods InvokeAsync(HttpContext) Declaration public Task InvokeAsync(HttpContext context) Parameters Type Name Description HttpContext context Returns Type Description Task"
  },
  "api-corewcf/CoreWCF.Channels.SessionOpenNotification.html": {
    "href": "api-corewcf/CoreWCF.Channels.SessionOpenNotification.html",
    "title": "Class SessionOpenNotification",
    "keywords": "Class SessionOpenNotification Represents an open session notification used to update message properties. Inheritance Object SessionOpenNotification Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class SessionOpenNotification : Object Constructors SessionOpenNotification() Initializes an instance of the SessionOpenNotification class. Declaration protected SessionOpenNotification() Properties IsEnabled Gets or sets a value that indicates whether notification is enabled. Declaration public abstract bool IsEnabled { get; } Property Value Type Description Boolean true if notification is enabled; otherwise, false . Methods UpdateMessageProperties(MessageProperties) Updates the message properties. Declaration public abstract void UpdateMessageProperties(MessageProperties inboundMessageProperties) Parameters Type Name Description MessageProperties inboundMessageProperties The message properties to update."
  },
  "api-corewcf/CoreWCF.Channels.SslStreamSecurityBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Channels.SslStreamSecurityBindingElement.html",
    "title": "Class SslStreamSecurityBindingElement",
    "keywords": "Class SslStreamSecurityBindingElement Represents a custom binding element that supports channel security using an SSL stream. Inheritance Object BindingElement StreamUpgradeBindingElement SslStreamSecurityBindingElement Implements ITransportTokenAssertionProvider IPolicyExportExtension Inherited Members BindingElement.BuildServiceDispatcher<TChannel>(BindingContext, IServiceDispatcher) BindingElement.CanBuildServiceDispatcher<TChannel>(BindingContext) Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public class SslStreamSecurityBindingElement : StreamUpgradeBindingElement, ITransportTokenAssertionProvider, IPolicyExportExtension Remarks Transports that use a stream-oriented protocol such as TCP and named pipes support stream-based transport upgrades. Specifically, Windows Communication Foundation (WCF) provides security upgrades. The configuration of this transport security is encapsulated by this class as well as by SslStreamSecurityBindingElement , which can be configured and added to a custom binding. In addition, a third party can write their own custom StreamSecurityBindingElement . These binding elements extend the StreamUpgradeBindingElement class that is called to build the client and server stream upgrade providers. A custom binding contains a collection of binding elements arranged in a specific order: the element that represents the top of the binding stack is added first, the next element down in the binding stack is added second, and so on. To add this class to a binding Create a BindingElementCollection . Create custom binding elements that are above this binding element in the binding stack, such as the optional TransactionFlowBindingElement and ReliableSessionBindingElement . Add the created elements in the order described previously to the BindingElementCollection using the InsertItem method. Create an instance of SslStreamSecurityBindingElement and add it to the collection. Add any additional custom binding elements to the collection, such as TcpTransportBindingElement . There are three scenarios in which you must either manually specify the correct UPN/SPN on the client endpoint after importing the WSDL, or specify a custom IdentityVerifier on the client's SslStreamSecurityBindingElement . No service identity is published in WSDL. SspiNegotiatedOverTransport and HTTPS are used (for example, a WSHttpBinding with SecurityMode = TransportWithMessageCredential ). If the service is not running with the machine identity, you must manually specify the correct UPN/SPN on the client endpoint after importing the WSDL. DNS service identity is published in WSDL. SspiNegotiatedOverTransport and SslStreamSecurityBindingElement are used (for example, NetTcpBinding with SecurityMode = TransportWithMessageCredential ) instead of a UPN/SPN. If the service is not running with the machine identity, or the DNS identity is not the machine's identity, you must manually specify the correct UPN/SPN on the client endpoint after importing the WSDL. DNS identity is published in WSDL. If SslStreamSecurityBindingElement is overridden on the client, you must specify a custom IdentityVerifier on the client's SslStreamSecurityBindingElement . The following code shows how to manually specify the correct UPN/SPN on the client endpoint, as well as how to specify a custom IdentityVerifier on the client's SslStreamSecurityBindingElement . using System; using System.Collections.Generic; using System.Linq; using System.Net; using System.IdentityModel.Claims; using System.IdentityModel.Policy; using System.Security.Cryptography.X509Certificates; using CoreWCF; using CoreWCF.Channels; using CoreWCF.Description; using CoreWCF.Security; using System.Xml; namespace ServiceNamespace { [ServiceContract] interface IService { [OperationContract] void DoSomething(); } class DnsIdentityVerifier : IdentityVerifier { DnsEndpointIdentity _expectedIdentity; public DnsIdentityVerifier(EndpointAddress serviceEndpoint) { _expectedIdentity = new DnsEndpointIdentity(serviceEndpoint.Uri.DnsSafeHost); } public override bool CheckAccess(EndpointIdentity identity, AuthorizationContext authContext) { Claim dnsClaim = authContext.Claims().Single(claim => claim.ClaimType == ClaimTypes.Dns); return String.Equals(_expectedIdentity.IdentityClaim.Resource, dnsClaim.Resource); } public override bool TryGetIdentity(EndpointAddress reference, out EndpointIdentity identity) { identity = _expectedIdentity; return true; } } static class LinqExtensionForClaims { public static IEnumerable&lt;Claim> Claims(this AuthorizationContext authContext) { if (null != authContext.ClaimSets) { foreach (ClaimSet claimSet in authContext.ClaimSets) { if (null != claimSet) { foreach (Claim claim in claimSet) { yield return claim; } } } } } } class Service : IService { public void DoSomething() { Console.WriteLine(&quot;Service called.&quot;); } } class Program { static void Main(string[] args) { string hostname = Dns.GetHostEntry(String.Empty).HostName; NetTcpBinding serviceBinding = new NetTcpBinding(SecurityMode.TransportWithMessageCredential); ServiceHost serviceHost = new ServiceHost(typeof(Service), new Uri(String.Format(&quot;net.tcp://{0}:8080/Service&quot;, hostname))); serviceHost.Credentials.ServiceCertificate.SetCertificate(StoreLocation.LocalMachine, StoreName.My, X509FindType.FindByThumbprint, &quot;8a 42 1b eb cf 8a 14 b1 de 83 d9 a5 70 88 0a 62 f9 bf 69 06&quot;); ServiceEndpoint serviceEndpoint = serviceHost.AddServiceEndpoint(typeof(IService), serviceBinding, &quot;Endpoint&quot;); serviceHost.Open(); CustomBinding clientBinding = new CustomBinding(serviceBinding.CreateBindingElements()); SslStreamSecurityBindingElement sslStream = clientBinding.Elements.Find&lt;SslStreamSecurityBindingElement>(); sslStream.IdentityVerifier = new DnsIdentityVerifier(serviceEndpoint.Address); ChannelFactory&lt;IService> channelFactory = new ChannelFactory&lt;IService>(clientBinding, new EndpointAddress(serviceEndpoint.Address.Uri, UpnEndpointIdentity.CreateUpnIdentity(&quot;username@domain&quot;))); channelFactory.Credentials.Windows.AllowNtlm = false; IService channel = channelFactory.CreateChannel(); channel.DoSomething(); } } Constructors SslStreamSecurityBindingElement() Initializes a new instance of the SslStreamSecurityBindingElement class. Declaration public SslStreamSecurityBindingElement() SslStreamSecurityBindingElement(SslStreamSecurityBindingElement) Initializes a new instance of the SslStreamSecurityBindingElement class using the values from another SslStreamSecurityBindingElement . Declaration protected SslStreamSecurityBindingElement(SslStreamSecurityBindingElement elementToBeCloned) Parameters Type Name Description SslStreamSecurityBindingElement elementToBeCloned The SslStreamSecurityBindingElement to clone. Properties RequireClientCertificate Gets or sets a value that specifies whether a client certificate is required for this binding. Declaration public bool RequireClientCertificate { get; set; } Property Value Type Description Boolean true if a client certificate is required for this binding; otherwise, false . The default is false . SslProtocols Specifies the list of SSL/TLS protocols to negotiate when using a client credential type of TcpClientCredentialType.Certificate. The value can be a combination of one of more of the following enumeration members: Ssl3, Tls, Tls11, Tls12. Declaration public SslProtocols SslProtocols { get; set; } Property Value Type Description SslProtocols Returns SslProtocols . Remarks The default value is Ssl3 | Tls | Tls11 | Tls12. Versions of the framework prior to 4.6 only support Ssl3 and Tls. If these are not included, communication with earlier versions of the framework will not be possible. Specifying Tls11 and/or Tls12 will disable the usage of Ssl3, even if it has been included. Methods BuildServerStreamUpgradeProvider(BindingContext) Creates an instance on the server of the StreamUpgradeProvider based on the channel context provided. Declaration public override StreamUpgradeProvider BuildServerStreamUpgradeProvider(BindingContext context) Parameters Type Name Description BindingContext context The BindingContext for the entire channel stack. Returns Type Description StreamUpgradeProvider An instance of the StreamUpgradeProvider . Overrides StreamUpgradeBindingElement.BuildServerStreamUpgradeProvider(BindingContext) Remarks This method is called when opening the service and provides a custom implementation of the StreamUpgradeProvider abstract class. The BindingContext parameter enables reacting to other elements in the channel stack. Clone() Creates a new instance that is a copy of the current instance. Declaration public override BindingElement Clone() Returns Type Description BindingElement A SslStreamSecurityBindingElement instance that is a copy of the current instance. Overrides BindingElement.Clone() GetProperty<T>(BindingContext) Gets a specified object from the BindingContext . Declaration public override T GetProperty<T>(BindingContext context) where T : class Parameters Type Name Description BindingContext context Returns Type Description T The object of type T from the BindingContext, or null if the object is not found. Type Parameters Name Description T The type of the object to get. Overrides BindingElement.GetProperty<T>(BindingContext) Remarks This method gets the specified object from the base class or from one of that class's ancestors. The object returned is usually a collection of properties, for example, an object that implements ISecurityCapabilities . GetTransportTokenAssertion() Gets the XmlElement that represents the transport token used in the security binding. Declaration public XmlElement GetTransportTokenAssertion() Returns Type Description XmlElement An XmlElement that represents the transport token used in the security binding. Remarks This method is used to generate WSDL for the associated service. IsMatch(BindingElement) Declaration protected override bool IsMatch(BindingElement b) Parameters Type Name Description BindingElement b Returns Type Description Boolean Overrides BindingElement.IsMatch(BindingElement) Explicit Interface Implementations IPolicyExportExtension.ExportPolicy(MetadataExporter, PolicyConversionContext) Exports a custom policy assertion about bindings. Declaration void IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext context) Parameters Type Name Description MetadataExporter exporter The MetadataExporter that you can use to modify the exporting process. PolicyConversionContext context The PolicyConversionContext that you can use to insert your custom policy assertion. Remarks This method writes binding-related statements into the WSDL information exposed by a particular contract and is used by WCF to communicate to clients the existence of this custom binding element in the binding stack. This method takes two parameters: the MetadataExporter and PolicyConversionContext objects. Use the GetBindingAssertions , GetMessageBindingAssertions , and GetOperationBindingAssertions methods to obtain collections of policy assertions that have already been exported at various scopes. Then use this method to add your own policy assertions to the appropriate collection. The Contract property exposes the ContractDescription for the endpoint that is being exported. This enables this method to correctly scope their exported policy assertions. For example, security attributes in code can add behaviors to the ContractDescription that indicate where security policy assertions should be added. Once custom policy assertions are attached to the WSDL information, clients can detect and import the custom binding assertions by implementing an IPolicyImportExtension interface. Implements ITransportTokenAssertionProvider IPolicyExportExtension"
  },
  "api-corewcf/CoreWCF.Channels.StreamBodyWriter.html": {
    "href": "api-corewcf/CoreWCF.Channels.StreamBodyWriter.html",
    "title": "Class StreamBodyWriter",
    "keywords": "Class StreamBodyWriter An abstract base class used to create custom BodyWriter classes that can be used to a message body as a stream. Inheritance Object BodyWriter StreamBodyWriter Inherited Members BodyWriter.CreateBufferedCopy(Int32) BodyWriter.OnWriteBodyContentsAsync(XmlDictionaryWriter) BodyWriter.WriteBodyContents(XmlDictionaryWriter) BodyWriter.WriteBodyContentsAsync(XmlDictionaryWriter) BodyWriter.IsBuffered Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class StreamBodyWriter : BodyWriter Constructors StreamBodyWriter(Boolean) Initializes a new instance of the StreamBodyWriter class. Declaration protected StreamBodyWriter(bool isBuffered) Parameters Type Name Description Boolean isBuffered true if the stream is buffered; otherwise false . Methods OnCreateBufferedCopy(Int32) Override this method to create a buffered copy of the stream. Declaration protected override BodyWriter OnCreateBufferedCopy(int maxBufferSize) Parameters Type Name Description Int32 maxBufferSize The maximum buffer size. Returns Type Description BodyWriter A body writer. Overrides BodyWriter.OnCreateBufferedCopy(Int32) OnWriteBodyContents(Stream) Override this method to handle writing the message body contents. Declaration protected abstract void OnWriteBodyContents(Stream stream) Parameters Type Name Description Stream stream The stream to write to. OnWriteBodyContents(XmlDictionaryWriter) Override this method to handle writing the message body contents. Declaration protected override void OnWriteBodyContents(XmlDictionaryWriter writer) Parameters Type Name Description XmlDictionaryWriter writer The writer to write to. Overrides BodyWriter.OnWriteBodyContents(XmlDictionaryWriter)"
  },
  "api-corewcf/CoreWCF.Channels.StreamSecurityUpgradeAcceptor.html": {
    "href": "api-corewcf/CoreWCF.Channels.StreamSecurityUpgradeAcceptor.html",
    "title": "Class StreamSecurityUpgradeAcceptor",
    "keywords": "Class StreamSecurityUpgradeAcceptor To implement a custom security upgrade acceptor, inherit from this abstract base class. Inheritance Object StreamUpgradeAcceptor StreamSecurityUpgradeAcceptor Inherited Members StreamUpgradeAcceptor.CanUpgrade(String) StreamUpgradeAcceptor.AcceptUpgradeAsync(Stream) Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class StreamSecurityUpgradeAcceptor : StreamUpgradeAcceptor Remarks This class is used with StreamSecurityUpgradeInitiator and StreamSecurityUpgradeProvider to implement a security stream upgrade. For a detailed description of the upgrade process, see StreamUpgradeProvider . Constructors StreamSecurityUpgradeAcceptor() Initializes a new instance of the StreamSecurityUpgradeAcceptor class. Declaration protected StreamSecurityUpgradeAcceptor() Methods GetRemoteSecurity() Gets the security message property provided on the stream for performing custom security negotiation based on the information provided in the security context. Declaration public abstract SecurityMessageProperty GetRemoteSecurity() Returns Type Description SecurityMessageProperty Returns the SecurityMessageProperty . Remarks This information is useful for implementing a stream-level authentication mechanism based on the identities provided in the security context."
  },
  "api-corewcf/CoreWCF.Channels.StreamSecurityUpgradeProvider.html": {
    "href": "api-corewcf/CoreWCF.Channels.StreamSecurityUpgradeProvider.html",
    "title": "Class StreamSecurityUpgradeProvider",
    "keywords": "Class StreamSecurityUpgradeProvider Implements a custom security upgrade provider, inherited from this abstract base class. Inheritance Object CommunicationObject StreamUpgradeProvider StreamSecurityUpgradeProvider Implements ICommunicationObject Inherited Members StreamUpgradeProvider.GetProperty<T>() StreamUpgradeProvider.CreateUpgradeAcceptor() StreamUpgradeProvider.DefaultCloseTimeout StreamUpgradeProvider.DefaultOpenTimeout CommunicationObject.Abort() CommunicationObject.CloseAsync() CommunicationObject.CloseAsync(CancellationToken) CommunicationObject.OpenAsync() CommunicationObject.OpenAsync(CancellationToken) CommunicationObject.Fault(Exception) CommunicationObject.Fault() CommunicationObject.GetCommunicationObjectType() CommunicationObject.OnAbort() CommunicationObject.OnCloseAsync(CancellationToken) CommunicationObject.OnOpenAsync(CancellationToken) CommunicationObject.OnClosed() CommunicationObject.OnClosing() CommunicationObject.OnFaulted() CommunicationObject.OnOpened() CommunicationObject.OnOpening() CommunicationObject.ThrowIfDisposed() CommunicationObject.ThrowIfDisposedOrImmutable() CommunicationObject.ThrowIfDisposedOrNotOpen() CommunicationObject.ThrowIfNotOpened() CommunicationObject.ThrowPending() CommunicationObject.IsDisposed CommunicationObject.State CommunicationObject.ThisLock CommunicationObject.Closed CommunicationObject.Closing CommunicationObject.Faulted CommunicationObject.Opened CommunicationObject.Opening Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class StreamSecurityUpgradeProvider : StreamUpgradeProvider, ICommunicationObject Remarks To add a security upgrade, you implement a class that derives from StreamSecurityUpgradeProvider . The upgrade process has the following steps: Implement a class that derives from StreamSecurityUpgradeProvider . Register it. You do this by creating a binding element for it, and registering the provider in a custom binding. The derived class that you implement creates an instance of StreamSecurityUpgradeInitiator , which at run time initiates a request to the other end of its connection to upgrade the channel transport layer. The derived class that you implement creates an instance of StreamSecurityUpgradeAcceptor , which at run time receives the upgrade request from the preceding step, and if possible, accepts the upgrade, and returns the upgraded stream to the other side of its connection. The security upgrade request can be one of many similar requests. If so, the requests are processed in a definite order. For more information, see StreamUpgradeProvider . Constructors StreamSecurityUpgradeProvider() Declaration protected StreamSecurityUpgradeProvider() StreamSecurityUpgradeProvider(IDefaultCommunicationTimeouts) Initializes a new instance of the StreamSecurityUpgradeProvider class. Declaration protected StreamSecurityUpgradeProvider(IDefaultCommunicationTimeouts timeouts) Parameters Type Name Description IDefaultCommunicationTimeouts timeouts The default communication time-outs. Remarks These time-outs control the default Close and Open time-outs when using the custom security upgrade provider. Properties Identity Gets the identity being used for the security upgrade. Declaration public abstract EndpointIdentity Identity { get; } Property Value Type Description EndpointIdentity Returns the EndpointIdentity of the client that requests the security upgrade. Remarks This identity can be used for developing custom stream-level authentication schemes through inheriting from the upgrade provider class. Implements ICommunicationObject"
  },
  "api-corewcf/CoreWCF.Channels.StreamUpgradeAcceptor.html": {
    "href": "api-corewcf/CoreWCF.Channels.StreamUpgradeAcceptor.html",
    "title": "Class StreamUpgradeAcceptor",
    "keywords": "Class StreamUpgradeAcceptor To implement a custom upgrade acceptor, inherited from this abstract base class. Inheritance Object StreamUpgradeAcceptor StreamSecurityUpgradeAcceptor Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class StreamUpgradeAcceptor : Object Remarks An example of a stream upgrade is to build a compression stream directly on top of the transport stream. This class is used with StreamUpgradeInitiator and StreamUpgradeProvider to implement a custom stream upgrade. For a detailed description of the upgrade process, see StreamUpgradeProvider . Constructors StreamUpgradeAcceptor() Initializes a new instance of the StreamUpgradeAcceptor class. Declaration protected StreamUpgradeAcceptor() Methods AcceptUpgradeAsync(Stream) Upgrades the transport stream and returns the upgraded stream. Declaration public abstract Task<Stream> AcceptUpgradeAsync(Stream stream) Parameters Type Name Description Stream stream The stream to be upgraded. Returns Type Description Task < Stream > Returns the upgraded stream. Remarks This method can be used to wrap the existing transport stream by providing additional capabilities; for example, a compressing stream. CanUpgrade(String) Determines whether the upgrade requested is supported by this upgrade acceptor. Declaration public abstract bool CanUpgrade(string contentType) Parameters Type Name Description String contentType The type of content to be checked. Returns Type Description Boolean true if this kind of upgrade is supported; otherwise, false . Remarks The developer can inspect the requested content type and determine whether the resulting upgrade can be performed by this upgrade acceptor. This content type comes from the GetNextUpgrade method on the matching upgrade initiator."
  },
  "api-corewcf/CoreWCF.Channels.StreamUpgradeBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Channels.StreamUpgradeBindingElement.html",
    "title": "Class StreamUpgradeBindingElement",
    "keywords": "Class StreamUpgradeBindingElement Adds a custom stream upgrade provider to a custom binding. Inheritance Object BindingElement StreamUpgradeBindingElement SslStreamSecurityBindingElement WindowsStreamSecurityBindingElement Inherited Members BindingElement.Clone() BindingElement.GetProperty<T>(BindingContext) BindingElement.IsMatch(BindingElement) BindingElement.BuildServiceDispatcher<TChannel>(BindingContext, IServiceDispatcher) BindingElement.CanBuildServiceDispatcher<TChannel>(BindingContext) Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class StreamUpgradeBindingElement : BindingElement Remarks To indicate that a custom stream upgrade provider should be used, implement a binding element that implements this abstract class on the custom binding. This abstract class is implemented by: <xref:CoreWCF.Channels.WindowsStreamSecurityBindingElement> <xref:CoreWCF.Channels.SslStreamSecurityBindingElement> Constructors StreamUpgradeBindingElement() Declaration protected StreamUpgradeBindingElement() StreamUpgradeBindingElement(StreamUpgradeBindingElement) Declaration protected StreamUpgradeBindingElement(StreamUpgradeBindingElement elementToBeCloned) Parameters Type Name Description StreamUpgradeBindingElement elementToBeCloned Methods BuildServerStreamUpgradeProvider(BindingContext) Declaration public abstract StreamUpgradeProvider BuildServerStreamUpgradeProvider(BindingContext context) Parameters Type Name Description BindingContext context Returns Type Description StreamUpgradeProvider"
  },
  "api-corewcf/CoreWCF.Channels.StreamUpgradeProvider.html": {
    "href": "api-corewcf/CoreWCF.Channels.StreamUpgradeProvider.html",
    "title": "Class StreamUpgradeProvider",
    "keywords": "Class StreamUpgradeProvider Implements a custom upgrade provider, inherited from this base class. Inheritance Object CommunicationObject StreamUpgradeProvider StreamSecurityUpgradeProvider Implements ICommunicationObject Inherited Members CommunicationObject.Abort() CommunicationObject.CloseAsync() CommunicationObject.CloseAsync(CancellationToken) CommunicationObject.OpenAsync() CommunicationObject.OpenAsync(CancellationToken) CommunicationObject.Fault(Exception) CommunicationObject.Fault() CommunicationObject.GetCommunicationObjectType() CommunicationObject.OnAbort() CommunicationObject.OnCloseAsync(CancellationToken) CommunicationObject.OnOpenAsync(CancellationToken) CommunicationObject.OnClosed() CommunicationObject.OnClosing() CommunicationObject.OnFaulted() CommunicationObject.OnOpened() CommunicationObject.OnOpening() CommunicationObject.ThrowIfDisposed() CommunicationObject.ThrowIfDisposedOrImmutable() CommunicationObject.ThrowIfDisposedOrNotOpen() CommunicationObject.ThrowIfNotOpened() CommunicationObject.ThrowPending() CommunicationObject.IsDisposed CommunicationObject.State CommunicationObject.ThisLock CommunicationObject.Closed CommunicationObject.Closing CommunicationObject.Faulted CommunicationObject.Opened CommunicationObject.Opening Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class StreamUpgradeProvider : CommunicationObject, ICommunicationObject Remarks An example of a stream upgrade is to build a compression stream directly on top of the transport stream. To add a security upgrade, you additionally implement a class that derives from <xref:CoreWCF.Channels.StreamSecurityUpgradeProvider>. You can implement multiple upgrades, each wrapping the preceding one. The upgrade process has the following steps: Implement a class that derives from <xref:CoreWCF.Channels.StreamUpgradeProvider>. Register it. You do this by creating a binding element for it, and registering the provider in a custom binding. The derived class that you implement creates an instance of <xref:CoreWCF.Channels.StreamUpgradeInitiator>, which at run time initiates a request to the other end of its connection to upgrade the channel transport layer. The derived class that you implement creates an instance of <xref:CoreWCF.Channels.StreamUpgradeAcceptor>, which at run time receives the upgrade request from the preceding step and, if possible, accepts the upgrade and returns the upgraded stream to the other side of its connection. If there are additional upgrade requests, they are processed sequentially, as described in the preceding two steps. Constructors StreamUpgradeProvider() Declaration protected StreamUpgradeProvider() StreamUpgradeProvider(IDefaultCommunicationTimeouts) Declaration protected StreamUpgradeProvider(IDefaultCommunicationTimeouts timeouts) Parameters Type Name Description IDefaultCommunicationTimeouts timeouts Properties DefaultCloseTimeout Declaration protected override TimeSpan DefaultCloseTimeout { get; } Property Value Type Description TimeSpan Overrides CommunicationObject.DefaultCloseTimeout DefaultOpenTimeout Declaration protected override TimeSpan DefaultOpenTimeout { get; } Property Value Type Description TimeSpan Overrides CommunicationObject.DefaultOpenTimeout Methods CreateUpgradeAcceptor() Declaration public abstract StreamUpgradeAcceptor CreateUpgradeAcceptor() Returns Type Description StreamUpgradeAcceptor GetProperty<T>() Declaration public virtual T GetProperty<T>() where T : class Returns Type Description T Type Parameters Name Description T Implements ICommunicationObject"
  },
  "api-corewcf/CoreWCF.Channels.SymmetricSecurityBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Channels.SymmetricSecurityBindingElement.html",
    "title": "Class SymmetricSecurityBindingElement",
    "keywords": "Class SymmetricSecurityBindingElement Represents a custom binding element that supports channel security using symmetric encryption. Inheritance Object BindingElement SecurityBindingElement SymmetricSecurityBindingElement Inherited Members SecurityBindingElement.CreateIssuedTokenOverTransportBindingElement(IssuedSecurityTokenParameters) SecurityBindingElement.CreateIssuedTokenForCertificateBindingElement(IssuedSecurityTokenParameters) SecurityBindingElement.CreateIssuedTokenForSslBindingElement(IssuedSecurityTokenParameters, Boolean) SecurityBindingElement.BuildServiceDispatcher<TChannel>(BindingContext, IServiceDispatcher) SecurityBindingElement.CanBuildServiceDispatcher<TChannel>(BindingContext) SecurityBindingElement.SetIssuerBindingContextIfRequired(SecurityTokenParameters, BindingContext) SecurityBindingElement.CreateUserNameOverTransportBindingElement() SecurityBindingElement.CreateSecureConversationBindingElement(SecurityBindingElement) SecurityBindingElement.CreateSecureConversationBindingElement(SecurityBindingElement, Boolean) SecurityBindingElement.CreateCertificateOverTransportBindingElement() SecurityBindingElement.CreateCertificateOverTransportBindingElement(MessageSecurityVersion) SecurityBindingElement.CreateSecureConversationBindingElement(SecurityBindingElement, Boolean, ChannelProtectionRequirements) SecurityBindingElement.CreateSspiNegotiationOverTransportBindingElement(Boolean) SecurityBindingElement.ExportPolicyForTransportTokenAssertionProviders(MetadataExporter, PolicyConversionContext) SecurityBindingElement.ExportTransportSecurityBindingElement(TransportSecurityBindingElement, ITransportTokenAssertionProvider, MetadataExporter, PolicyConversionContext) SecurityBindingElement.EndpointSupportingTokenParameters SecurityBindingElement.OptionalEndpointSupportingTokenParameters SecurityBindingElement.OperationSupportingTokenParameters SecurityBindingElement.OptionalOperationSupportingTokenParameters SecurityBindingElement.SecurityHeaderLayout SecurityBindingElement.MessageSecurityVersion SecurityBindingElement.EnableUnsecuredResponse SecurityBindingElement.IncludeTimestamp SecurityBindingElement.AllowInsecureTransport SecurityBindingElement.DefaultAlgorithmSuite SecurityBindingElement.ProtectTokens SecurityBindingElement.LocalServiceSettings SecurityBindingElement.KeyEntropyMode BindingElement.IsMatch(BindingElement) Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public sealed class SymmetricSecurityBindingElement : SecurityBindingElement Remarks A custom binding contains a collection of binding elements arranged in a specific order: the element that represents the top of the binding stack is added first, the next element down in the binding stack, is added second, and so forth. To add this class to a binding Create a BindingElementCollection . Create custom binding elements that is above this binding element in the binding stack, such as the optional TransactionFlowBindingElement and ReliableSessionBindingElement . Add the created elements, in the order mentioned previously, to the BindingElementCollection using the InsertItem method. Create an instance of SymmetricSecurityBindingElement and add it to the collection. Add any additional custom binding elements to the collection, such as TcpTransportBindingElement . Note Once an instance of this object is created, you should treat the properties of its base class, SecurityBindingElement , as immutable. Calling set on some properties may have unpredictable effects: the binding may behave as if the property retained its old value, with a run-time failure being the only indication of an issue. Two properties known to behave this way are KeyType and MessageSecurityVersion . There may be other properties for which this is true. Constructors SymmetricSecurityBindingElement() Initializes a new instance of the SymmetricSecurityBindingElement class. Declaration public SymmetricSecurityBindingElement() SymmetricSecurityBindingElement(SecurityTokenParameters) Initializes a new instance of the SymmetricSecurityBindingElement class using specified security token parameters. Declaration public SymmetricSecurityBindingElement(SecurityTokenParameters protectionTokenParameters) Parameters Type Name Description SecurityTokenParameters protectionTokenParameters The SecurityTokenParameters . Properties MessageProtectionOrder Gets or sets the order of message encryption and signing for this binding. Declaration public MessageProtectionOrder MessageProtectionOrder { get; set; } Property Value Type Description MessageProtectionOrder The MessageProtectionOrder that specifies how the message is protected. The default is SignBeforeEncrypt . Remarks Note If there is nothing in the message that is encrypted, the signature element is not encrypted even when the MessageProtectionOrder property is set to SignBeforeEncryptAndEncryptSignature . This behavior occurs even with system-provided bindings. However, the WSDL generated by WCF still contains the <sp:EncryptSignature> assertion. For a listing of the members and their descriptions, see MessageProtectionOrder . ProtectionTokenParameters Gets or sets the protection token parameters. Declaration public SecurityTokenParameters ProtectionTokenParameters { get; set; } Property Value Type Description SecurityTokenParameters The SecurityTokenParameters . RequireSignatureConfirmation Gets or sets a value that indicates whether message signatures must be confirmed. Declaration public bool RequireSignatureConfirmation { get; set; } Property Value Type Description Boolean true if message signatures must be confirmed; otherwise, false . The default is false . Remarks This property specifies whether the signature must be encrypted. If the value is true , the primary signature must be encrypted and any signature confirmation elements must also be encrypted. If the value is false , the primary signature must not be encrypted and any signature confirmation elements must not be encrypted. Methods BuildServiceDispatcherCore<TChannel>(BindingContext, IServiceDispatcher) Declaration protected override IServiceDispatcher BuildServiceDispatcherCore<TChannel>(BindingContext context, IServiceDispatcher serviceDispatcher) where TChannel : class, IChannel Parameters Type Name Description BindingContext context IServiceDispatcher serviceDispatcher Returns Type Description IServiceDispatcher Type Parameters Name Description TChannel Overrides SecurityBindingElement.BuildServiceDispatcherCore<TChannel>(BindingContext, IServiceDispatcher) Clone() Creates a new instance of this class initialized from the current one. Declaration public override BindingElement Clone() Returns Type Description BindingElement A BindingElement object with property values equal to those of the current instance. Overrides BindingElement.Clone() Remarks This creates a complete copy of the current binding element object tree, also called a deep clone. A deep clone of an object creates a copy of the object and a copy of everything directly or indirectly referenced by that object. This can also be described as copying the entire object graph. Returning a deep clone enables the runtime to support the case in which multiple custom bindings share a custom binding element. If a deep clone is not returned, the run-time behavior is undefined. A shallow clone of an object, by contrast, is a copy of the object only. If the object contains references to other objects, the shallow copy does not create copies of the referred objects; instead, it copies only the references to the original objects. GetProperty<T>(BindingContext) Gets a specified object from the BindingContext . Declaration public override T GetProperty<T>(BindingContext context) where T : class Parameters Type Name Description BindingContext context A BindingContext . Returns Type Description T The specified object of type T from the BindingContext , or null if the object is not found. Type Parameters Name Description T The type of the object to get. Overrides SecurityBindingElement.GetProperty<T>(BindingContext) Remarks This method gets the specified object from the base class or from one of that class's ancestors. The object returned is usually a collection of properties, for example an object that implements ISecurityCapabilities . SetKeyDerivation(Boolean) Sets a value that indicates whether derived keys are required. Declaration public override void SetKeyDerivation(bool requireDerivedKeys) Parameters Type Name Description Boolean requireDerivedKeys true to indicate that derived keys are required; otherwise, false . Overrides SecurityBindingElement.SetKeyDerivation(Boolean) Remarks A derived key is created from an existing key and makes it possible to vary the key used in the course of a conversation. This makes it more difficult for a hacker to decrypt the communication. ToString() Returns a string that represents this SymmetricSecurityBindingElement instance. Declaration public override string ToString() Returns Type Description String A string that represents this SymmetricSecurityBindingElement instance. Remarks Information returned by ToString includes the MessageProtectionOrder , RequireSignatureConfirmation , and ProtectionTokenParameters values of the current instance."
  },
  "api-corewcf/CoreWCF.Channels.TcpConnectionPoolSettings.html": {
    "href": "api-corewcf/CoreWCF.Channels.TcpConnectionPoolSettings.html",
    "title": "Class TcpConnectionPoolSettings",
    "keywords": "Class TcpConnectionPoolSettings Represents properties that control the behavior of the TCP connection pool. Inheritance Object TcpConnectionPoolSettings Namespace : CoreWCF.Channels Assembly : CoreWCF.NetTcp.dll Syntax public sealed class TcpConnectionPoolSettings : Object Remarks To be added. Properties IdleTimeout Gets or sets the maximum time the connection can be idle in the connection pool before being disconnected. Declaration public TimeSpan IdleTimeout { get; set; } Property Value Type Description TimeSpan Returns a TimeSpan structure that indicates the maximum time the connection can be idle in the connection pool before being disconnected. MaxOutboundConnectionsPerEndpoint Gets or sets the maximum number of outbound connections for each endpoint that is cached in the connection pool. Declaration public int MaxOutboundConnectionsPerEndpoint { get; set; } Property Value Type Description Int32 The maximum number of allowed outbound connections for each endpoint that is cached in the connection pool. The default value is 10. Remarks This limits the number of connections that are cached for each unique remote endpoint. If this value is exceeded by having more active client connections, then the service may appear unresponsive to the client and this value should be adjusted to exceed the maximum number of expected connections that are cached for each unique remote endpoint."
  },
  "api-corewcf/CoreWCF.Channels.TcpTransportBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Channels.TcpTransportBindingElement.html",
    "title": "Class TcpTransportBindingElement",
    "keywords": "Class TcpTransportBindingElement Represents the binding element for the TCP transport. Inheritance Object BindingElement TransportBindingElement ConnectionOrientedTransportBindingElement TcpTransportBindingElement Implements IWsdlExportExtension IPolicyExportExtension Inherited Members ConnectionOrientedTransportBindingElement.CanBuildServiceDispatcher<TChannel>(BindingContext) ConnectionOrientedTransportBindingElement.IPolicyExportExtension.ExportPolicy(MetadataExporter, PolicyConversionContext) ConnectionOrientedTransportBindingElement.IWsdlExportExtension.ExportContract(WsdlExporter, WsdlContractConversionContext) ConnectionOrientedTransportBindingElement.IWsdlExportExtension.ExportEndpoint(WsdlExporter, WsdlEndpointConversionContext) ConnectionOrientedTransportBindingElement.IsMatch(BindingElement) ConnectionOrientedTransportBindingElement.ConnectionBufferSize ConnectionOrientedTransportBindingElement.HostNameComparisonMode ConnectionOrientedTransportBindingElement.MaxBufferSize ConnectionOrientedTransportBindingElement.MaxPendingConnections ConnectionOrientedTransportBindingElement.ChannelInitializationTimeout ConnectionOrientedTransportBindingElement.MaxOutputDelay ConnectionOrientedTransportBindingElement.MaxPendingAccepts ConnectionOrientedTransportBindingElement.TransferMode TransportBindingElement.ExportWsdlEndpoint(WsdlExporter, WsdlEndpointConversionContext, String, EndpointAddress, AddressingVersion) TransportBindingElement.ManualAddressing TransportBindingElement.MaxBufferPoolSize TransportBindingElement.MaxReceivedMessageSize Namespace : CoreWCF.Channels Assembly : CoreWCF.NetTcp.dll Syntax public class TcpTransportBindingElement : ConnectionOrientedTransportBindingElement, IWsdlExportExtension, IPolicyExportExtension Remarks This transport uses URIs of the form \" net.tcp :// hostname : port / path \". Other URI components are optional. The TcpTransportBindingElement class is the starting point for creating a custom binding that implements the TCP transport protocol. This transport is optimized for WCF communication. The WCF service model uses this class to create factory objects that implement the IChannelFactory and IChannelListener interfaces. These factory objects, in turn, create and accept the channels that transmit SOAP messages using the TCP protocol. You configure the factories that this class creates by setting its properties, such as PortSharingEnabled and LeaseTimeout . You can also set properties on the base class ConnectionOrientedTransportBindingElement , such as MaxBufferSize , TransferMode , and ConnectionBufferSize . For a complete list of properties, see ConnectionOrientedTransportBindingElement . Finally, you can set properties on the base class TransportBindingElement , such as ManualAddressing and MaxBufferPoolSize . For a complete list of properties, see TransportBindingElement . Constructors TcpTransportBindingElement() Initializes a new instance of the TcpTransportBindingElement class. Declaration public TcpTransportBindingElement() TcpTransportBindingElement(TcpTransportBindingElement) Initializes a new instance of the TcpTransportBindingElement class. Declaration protected TcpTransportBindingElement(TcpTransportBindingElement elementToBeCloned) Parameters Type Name Description TcpTransportBindingElement elementToBeCloned An instance of the TcpTransportBindingElement class. Remarks This method is a copy constructor used to clone the binding element, and is exposed so that derived classes can implement Clone() . Properties ConnectionPoolSettings Gets a collection of connection pool settings. Declaration public TcpConnectionPoolSettings ConnectionPoolSettings { get; } Property Value Type Description TcpConnectionPoolSettings A TcpConnectionPoolSettings object that contains various properties related to connection pooling. ExtendedProtectionPolicy Declaration public ExtendedProtectionPolicy ExtendedProtectionPolicy { get; set; } Property Value Type Description ExtendedProtectionPolicy ListenBacklog Declaration public int ListenBacklog { get; set; } Property Value Type Description Int32 Scheme Returns the URI scheme for the transport. Declaration public override string Scheme { get; } Property Value Type Description String Returns the URI scheme for the transport, which is \"net.tcp\". Overrides TransportBindingElement.Scheme Remarks The property is provided for validating bindings against base addresses. Methods BuildServiceDispatcher<TChannel>(BindingContext, IServiceDispatcher) Declaration public override IServiceDispatcher BuildServiceDispatcher<TChannel>(BindingContext context, IServiceDispatcher innerDispatcher) where TChannel : class, IChannel Parameters Type Name Description BindingContext context IServiceDispatcher innerDispatcher Returns Type Description IServiceDispatcher Type Parameters Name Description TChannel Overrides BindingElement.BuildServiceDispatcher<TChannel>(BindingContext, IServiceDispatcher) Clone() Creates a copy of the current binding element. Declaration public override BindingElement Clone() Returns Type Description BindingElement Returns a copy of the current binding element. Overrides BindingElement.Clone() GetProperty<T>(BindingContext) Gets a specified object from the BindingContext . Declaration public override T GetProperty<T>(BindingContext context) where T : class Parameters Type Name Description BindingContext context A BindingContext . Returns Type Description T The specified object from the BindingContext , or null if the object is not found. Type Parameters Name Description T The object to get. Overrides ConnectionOrientedTransportBindingElement.GetProperty<T>(BindingContext) Remarks This method gets the specified object from the base class, or from one of that class's ancestors. The object returned is usually a collection of properties, for example, an object that implements ISecurityCapabilities . Implements IWsdlExportExtension IPolicyExportExtension"
  },
  "api-corewcf/CoreWCF.Channels.TextMessageEncodingBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Channels.TextMessageEncodingBindingElement.html",
    "title": "Class TextMessageEncodingBindingElement",
    "keywords": "Class TextMessageEncodingBindingElement The binding element that specifies the character encoding and message versioning used for text-based SOAP messages. Inheritance Object BindingElement MessageEncodingBindingElement TextMessageEncodingBindingElement Implements IWsdlExportExtension IPolicyExportExtension Inherited Members BindingElement.BuildServiceDispatcher<TChannel>(BindingContext, IServiceDispatcher) BindingElement.CanBuildServiceDispatcher<TChannel>(BindingContext) Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public sealed class TextMessageEncodingBindingElement : MessageEncodingBindingElement, IWsdlExportExtension, IPolicyExportExtension Remarks Encoding is the process of transforming a message into a sequence of bytes. Decoding is the reverse process. Windows Communication Foundation (WCF) includes three types of encoding for SOAP messages: Text, Binary and Message Transmission Optimization Mechanism (MTOM). The text encoding represented by the TextMessageEncodingBindingElement is the most interoperable, but the least efficient encoder for XML messages. Web service or Web service client can generally understand textual XML. However, transmitting large blocks of binary data as text is not efficient. For more information about the binding element that specifies messages are encoded using the .NET Binary Format for XML, see BinaryMessageEncodingBindingElement . For more information about the binding element that specifies messages are encoded using the MTOM message encoding, see MtomMessageEncodingBindingElement . For more information about how to implement a custom message encoder, use the MessageEncodingBindingElement class. Constructors TextMessageEncodingBindingElement() Initializes a new instance of the TextMessageEncodingBindingElement class. Declaration public TextMessageEncodingBindingElement() Remarks The default MessageVersion for this constructor is the version of WS-Addressing 1.0 and SOAP 1.2. The default text encoding is the UTF-8 format. TextMessageEncodingBindingElement(MessageVersion, Encoding) Initializes a new instance of the TextMessageEncodingBindingElement class with a specified message version and encoding. Declaration public TextMessageEncodingBindingElement(MessageVersion messageVersion, Encoding writeEncoding) Parameters Type Name Description MessageVersion messageVersion The MessageVersion that is used for the message version. Encoding writeEncoding The Encoding that is used to format the message characters. Properties MaxReadPoolSize Declaration public int MaxReadPoolSize { get; set; } Property Value Type Description Int32 MaxWritePoolSize Declaration public int MaxWritePoolSize { get; set; } Property Value Type Description Int32 MessageVersion Gets or sets the SOAP and WS-Addressing versions that are used to format the text message. Declaration public override MessageVersion MessageVersion { get; set; } Property Value Type Description MessageVersion The MessageVersion that is used to format messages. The default value is Soap12WSAddressing10 . Overrides MessageEncodingBindingElement.MessageVersion Remarks The default MessageVersion for this constructor is the version of WS-Addressing 1.0 and SOAP 1.2. ReaderQuotas Gets or sets constraints on the complexity of SOAP messages that can be processed by endpoints configured with this binding. Declaration public XmlDictionaryReaderQuotas ReaderQuotas { get; set; } Property Value Type Description XmlDictionaryReaderQuotas The XmlDictionaryReaderQuotas that specifies the complexity constraints on SOAP messages exchanged. The default values for these constraints are provided in the following Remarks section. Remarks The complexity constraints protect against a class of denial of service (DOS) attacks that attempt to use message complexity to tie up endpoint processing resources. The properties that express these constraints and their default values are as follows: MaxDepth = 32 MaxStringContentLength = 8192 MaxArrayLength = 16384 MaxBytesPerRead = 4096 MaxNameTableCharCount = 16384 For more information, see XmlDictionaryReaderQuotas . WriteEncoding Gets or sets the encoding that is used to format the characters in the text message. Declaration public Encoding WriteEncoding { get; set; } Property Value Type Description Encoding The Encoding that is used to format the characters in the text message. The default text encoding is the UTF-8 format. Remarks When specifying a content type such as \"utf-16\" an XML declaration is required in the message. Alternatively you can specify either \"utf-16LE\" or \"utf-16BE\" and an XML declaration is not required. Methods CheckEncodingVersion(EnvelopeVersion) Declaration protected override bool CheckEncodingVersion(EnvelopeVersion version) Parameters Type Name Description EnvelopeVersion version Returns Type Description Boolean Overrides MessageEncodingBindingElement.CheckEncodingVersion(EnvelopeVersion) Clone() Creates a new TextMessageEncodingBindingElement object initialized from the current one. Declaration public override BindingElement Clone() Returns Type Description BindingElement A TextMessageEncodingBindingElement object with property values equal to those of the current element. Overrides BindingElement.Clone() Remarks This creates a complete copy of the current binding element object tree, also called a deep clone. A deep clone of an object creates a copy of the object and a copy of everything directly or indirectly referenced by that object. (This is called copying the entire object graph.) Returning a deep clone enables the runtime to support the case in which multiple custom bindings share a custom binding element. If a deep clone is not returned, the run-time behavior is undefined. A shallow clone of an object, by contrast, is a copy of the object only. If the object contains references to other objects, the shallow copy does not create copies of the referred objects; instead, it copies only the references to the original objects. CreateMessageEncoderFactory() Creates a factory for text message encoders that employs the message version and character encoding specified by the current encoding binding element. Declaration public override MessageEncoderFactory CreateMessageEncoderFactory() Returns Type Description MessageEncoderFactory The MessageEncoderFactory that this factory creates. Overrides MessageEncodingBindingElement.CreateMessageEncoderFactory() Remarks The MessageEncoder objects that the factory produces can read messages from a stream and write them to a stream for specific types of message encoding. GetProperty<T>(BindingContext) Returns a typed object requested, if present, from the appropriate layer in the binding element stack. Declaration public override T GetProperty<T>(BindingContext context) where T : class Parameters Type Name Description BindingContext context The BindingContext for the binding element. Returns Type Description T The typed object T requested if it is present or null if it is not. Type Parameters Name Description T The typed object for which the method is querying. Overrides MessageEncodingBindingElement.GetProperty<T>(BindingContext) Remarks Use this to request a typed object for setting properties or getting status from the appropriate layer in the binding element stack. If a layer supports returning the requested object, it returns it. If not, it delegates the call down to the next layer in the stack. If it gets to the bottom of the stack and no binding element layer supported the requested object, then the method returns null . IsMatch(BindingElement) Declaration protected override bool IsMatch(BindingElement b) Parameters Type Name Description BindingElement b Returns Type Description Boolean Overrides MessageEncodingBindingElement.IsMatch(BindingElement) Explicit Interface Implementations IPolicyExportExtension.ExportPolicy(MetadataExporter, PolicyConversionContext) Declaration void IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext context) Parameters Type Name Description MetadataExporter exporter PolicyConversionContext context IWsdlExportExtension.ExportContract(WsdlExporter, WsdlContractConversionContext) Declaration void IWsdlExportExtension.ExportContract(WsdlExporter exporter, WsdlContractConversionContext context) Parameters Type Name Description WsdlExporter exporter WsdlContractConversionContext context IWsdlExportExtension.ExportEndpoint(WsdlExporter, WsdlEndpointConversionContext) Declaration void IWsdlExportExtension.ExportEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext context) Parameters Type Name Description WsdlExporter exporter WsdlEndpointConversionContext context Implements IWsdlExportExtension IPolicyExportExtension"
  },
  "api-corewcf/CoreWCF.Channels.ToHeader.html": {
    "href": "api-corewcf/CoreWCF.Channels.ToHeader.html",
    "title": "Class ToHeader",
    "keywords": "Class ToHeader Inheritance Object MessageHeaderInfo MessageHeader DictionaryHeader AddressingHeader ToHeader Inherited Members AddressingHeader.DictionaryNamespace DictionaryHeader.OnWriteStartHeader(XmlDictionaryWriter, MessageVersion) DictionaryHeader.Name DictionaryHeader.Namespace MessageHeader.IsMessageVersionSupported(MessageVersion) MessageHeader.ToString() MessageHeader.WriteHeader(XmlWriter, MessageVersion) MessageHeader.WriteHeader(XmlDictionaryWriter, MessageVersion) MessageHeader.WriteStartHeader(XmlDictionaryWriter, MessageVersion) MessageHeader.WriteHeaderContents(XmlDictionaryWriter, MessageVersion) MessageHeader.WriteHeaderAttributes(XmlDictionaryWriter, MessageVersion) MessageHeader.CreateHeader(String, String, Object) MessageHeader.CreateHeader(String, String, Object, Boolean) MessageHeader.CreateHeader(String, String, Object, Boolean, String) MessageHeader.CreateHeader(String, String, Object, Boolean, String, Boolean) MessageHeader.CreateHeader(String, String, Object, XmlObjectSerializer) MessageHeader.CreateHeader(String, String, Object, XmlObjectSerializer, Boolean) MessageHeader.CreateHeader(String, String, Object, XmlObjectSerializer, Boolean, String) MessageHeader.CreateHeader(String, String, Object, XmlObjectSerializer, Boolean, String, Boolean) MessageHeader.Actor MessageHeader.IsReferenceParameter MessageHeader.Relay Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public class ToHeader : AddressingHeader Constructors ToHeader(Uri, AddressingVersion) Declaration protected ToHeader(Uri to, AddressingVersion version) Parameters Type Name Description Uri to AddressingVersion version Properties DictionaryName Declaration public override XmlDictionaryString DictionaryName { get; } Property Value Type Description XmlDictionaryString Overrides DictionaryHeader.DictionaryName MustUnderstand Declaration public override bool MustUnderstand { get; } Property Value Type Description Boolean Overrides MessageHeader.MustUnderstand To Declaration public Uri To { get; } Property Value Type Description Uri Methods Create(Uri, AddressingVersion) Declaration public static ToHeader Create(Uri to, AddressingVersion addressingVersion) Parameters Type Name Description Uri to AddressingVersion addressingVersion Returns Type Description ToHeader Create(Uri, XmlDictionaryString, AddressingVersion) Declaration public static ToHeader Create(Uri toUri, XmlDictionaryString dictionaryTo, AddressingVersion addressingVersion) Parameters Type Name Description Uri toUri XmlDictionaryString dictionaryTo AddressingVersion addressingVersion Returns Type Description ToHeader OnWriteHeaderContents(XmlDictionaryWriter, MessageVersion) Declaration protected override void OnWriteHeaderContents(XmlDictionaryWriter writer, MessageVersion messageVersion) Parameters Type Name Description XmlDictionaryWriter writer MessageVersion messageVersion Overrides MessageHeader.OnWriteHeaderContents(XmlDictionaryWriter, MessageVersion) ReadHeaderValue(XmlDictionaryReader, AddressingVersion) Declaration public static Uri ReadHeaderValue(XmlDictionaryReader reader, AddressingVersion version) Parameters Type Name Description XmlDictionaryReader reader AddressingVersion version Returns Type Description Uri"
  },
  "api-corewcf/CoreWCF.Channels.TransportBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Channels.TransportBindingElement.html",
    "title": "Class TransportBindingElement",
    "keywords": "Class TransportBindingElement An abstract base class that represents a transport binding element. Inheritance Object BindingElement TransportBindingElement ConnectionOrientedTransportBindingElement HttpTransportBindingElement Inherited Members BindingElement.Clone() BindingElement.BuildServiceDispatcher<TChannel>(BindingContext, IServiceDispatcher) BindingElement.CanBuildServiceDispatcher<TChannel>(BindingContext) Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public abstract class TransportBindingElement : BindingElement Remarks This class factors out properties that are common to all of the transport binding elements provided by the Windows Communication Foundation (WCF). It handles the translation of the base transport settings into run-time manifestations. It delegates the translation of transport-specific settings (for example, HttpProxySettings for HTTP) logic in its concrete derived class transport bindings, which include the following classes: PeerTransportBindingElement HttpTransportBindingElement HttpsTransportBindingElement TcpTransportBindingElement NamedPipeTransportBindingElement MsmqTransportBindingElement MsmqIntegrationBindingElement ConnectionOrientedTransportBindingElement Note Custom transport binding element developers must inherit from this class, which derives from the BindingElement class. Constructors TransportBindingElement() Creates a new instance of this class. Declaration protected TransportBindingElement() TransportBindingElement(TransportBindingElement) Creates a new instance of this class from an existing instance. Declaration protected TransportBindingElement(TransportBindingElement elementToBeCloned) Parameters Type Name Description TransportBindingElement elementToBeCloned The TransportBindingElement to be cloned. Properties ManualAddressing Gets or sets a value that indicates whether manual addressing of the message is required. Declaration public virtual bool ManualAddressing { get; set; } Property Value Type Description Boolean true if manual addressing of the message is required; otherwise false . The default is false . Remarks This property is usually used in router scenarios, where the application determines which one of several destinations to send a message to. If this property is set to true , the channel assumes the message has already been addressed and does not add any additional information. If false , the sending channel applies the EndpointAddress configured as the To addressee on the channel to outgoing messages. MaxBufferPoolSize Gets or sets the maximum size, in bytes, of any buffer pools used by the transport. Declaration public virtual long MaxBufferPoolSize { get; set; } Property Value Type Description Int64 The maximum size of the buffer pool. The default is 524,288 bytes. Remarks Many parts of WCF use buffers. Creating and destroying buffers each time they are used is expensive, and garbage collection for buffers is also expensive. With buffer pools, you can take a buffer from the pool, use it, and return it to the pool once you are done. Thus the overhead in creating and destroying buffers is avoided. The downside is that there is an increase in memory usage because your buffers are not getting garbage collected. If the MaxBufferPoolSize is set to 0, no buffers are returned to the pool, and instead garbage collection begins. MaxReceivedMessageSize Gets or sets the maximum allowable message size, in bytes, that can be received. Declaration public virtual long MaxReceivedMessageSize { get; set; } Property Value Type Description Int64 The maximum allowable message size that can be received. The default is 65,536 bytes. Remarks This property can counter a hacker scenario where a message is sent with a very large or infinite specified length, or where data is sent continuously to a connected Named Pipe. Scheme Gets the URI scheme for the transport. Declaration public abstract string Scheme { get; } Property Value Type Description String Returns the URI scheme for the transport, which varies depending on what derived class implements this method. Remarks This is overridden by each concrete transport implementation and is provided to validate bindings against base addresses. Methods ExportWsdlEndpoint(WsdlExporter, WsdlEndpointConversionContext, String, EndpointAddress, AddressingVersion) Declaration public static void ExportWsdlEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext endpointContext, string wsdlTransportUri, EndpointAddress address, AddressingVersion addressingVersion) Parameters Type Name Description WsdlExporter exporter WsdlEndpointConversionContext endpointContext String wsdlTransportUri EndpointAddress address AddressingVersion addressingVersion GetProperty<T>(BindingContext) Gets a property from the specified BindingContext . Declaration public override T GetProperty<T>(BindingContext context) where T : class Parameters Type Name Description BindingContext context A BindingContext . Returns Type Description T The property from the specified BindingContext . Type Parameters Name Description T The property to get. Overrides BindingElement.GetProperty<T>(BindingContext) Remarks This method receives a binding context as an input parameter, which represents the stack of binding elements. This method gets the specified object directly, delegates the inquiry to the next lower binding element in the stack, or a combination of the two. It can modify the context if it delegates the inquiry. Each binding element in the stack can repeat this process, if it has been delegated to, until the bottom of the stack is reached. The object returned is usually a collection of properties. If the type of T is ChannelProtectionRequirements , XmlDictionaryReaderQuotas , or MessageVersion then an instance of this class is returned. If the type of T matches the type of an instance in BindingParameters , that instance is returned. This method is implemented by binding elements as well as by the run-time objects such as IChannelFactory , IChannelListener , and IChannel . IsMatch(BindingElement) Declaration protected override bool IsMatch(BindingElement b) Parameters Type Name Description BindingElement b Returns Type Description Boolean Overrides BindingElement.IsMatch(BindingElement)"
  },
  "api-corewcf/CoreWCF.Channels.TransportCompressionSupportHelper.html": {
    "href": "api-corewcf/CoreWCF.Channels.TransportCompressionSupportHelper.html",
    "title": "Class TransportCompressionSupportHelper",
    "keywords": "Class TransportCompressionSupportHelper Inheritance Object TransportCompressionSupportHelper Implements ITransportCompressionSupport Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public class TransportCompressionSupportHelper : Object, ITransportCompressionSupport Constructors TransportCompressionSupportHelper() Declaration public TransportCompressionSupportHelper() Methods IsCompressionFormatSupported(CompressionFormat) Declaration public bool IsCompressionFormatSupported(CompressionFormat compressionFormat) Parameters Type Name Description CompressionFormat compressionFormat Returns Type Description Boolean Implements ITransportCompressionSupport"
  },
  "api-corewcf/CoreWCF.Channels.TransportSecurityBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Channels.TransportSecurityBindingElement.html",
    "title": "Class TransportSecurityBindingElement",
    "keywords": "Class TransportSecurityBindingElement Represents a custom binding element that supports mixed-mode security (such as, optimized message security over a secure transport). Inheritance Object BindingElement SecurityBindingElement TransportSecurityBindingElement Inherited Members SecurityBindingElement.CreateIssuedTokenOverTransportBindingElement(IssuedSecurityTokenParameters) SecurityBindingElement.CreateIssuedTokenForCertificateBindingElement(IssuedSecurityTokenParameters) SecurityBindingElement.CreateIssuedTokenForSslBindingElement(IssuedSecurityTokenParameters, Boolean) SecurityBindingElement.BuildServiceDispatcher<TChannel>(BindingContext, IServiceDispatcher) SecurityBindingElement.CanBuildServiceDispatcher<TChannel>(BindingContext) SecurityBindingElement.SetKeyDerivation(Boolean) SecurityBindingElement.SetIssuerBindingContextIfRequired(SecurityTokenParameters, BindingContext) SecurityBindingElement.CreateUserNameOverTransportBindingElement() SecurityBindingElement.CreateSecureConversationBindingElement(SecurityBindingElement) SecurityBindingElement.CreateSecureConversationBindingElement(SecurityBindingElement, Boolean) SecurityBindingElement.CreateCertificateOverTransportBindingElement() SecurityBindingElement.CreateCertificateOverTransportBindingElement(MessageSecurityVersion) SecurityBindingElement.CreateSecureConversationBindingElement(SecurityBindingElement, Boolean, ChannelProtectionRequirements) SecurityBindingElement.CreateSspiNegotiationOverTransportBindingElement(Boolean) SecurityBindingElement.ExportPolicyForTransportTokenAssertionProviders(MetadataExporter, PolicyConversionContext) SecurityBindingElement.ExportTransportSecurityBindingElement(TransportSecurityBindingElement, ITransportTokenAssertionProvider, MetadataExporter, PolicyConversionContext) SecurityBindingElement.EndpointSupportingTokenParameters SecurityBindingElement.OptionalEndpointSupportingTokenParameters SecurityBindingElement.OperationSupportingTokenParameters SecurityBindingElement.OptionalOperationSupportingTokenParameters SecurityBindingElement.SecurityHeaderLayout SecurityBindingElement.MessageSecurityVersion SecurityBindingElement.EnableUnsecuredResponse SecurityBindingElement.IncludeTimestamp SecurityBindingElement.AllowInsecureTransport SecurityBindingElement.DefaultAlgorithmSuite SecurityBindingElement.ProtectTokens SecurityBindingElement.LocalServiceSettings SecurityBindingElement.KeyEntropyMode BindingElement.IsMatch(BindingElement) Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public sealed class TransportSecurityBindingElement : SecurityBindingElement Remarks A custom binding contains a collection of binding elements arranged in a specific order: the element that represents the top of the binding stack is added first, the next element down in the binding stack is added second, and so forth. To add this class to a binding Create a BindingElementCollection . Create custom binding elements that will be above this binding element in the binding stack, such as the optional TransactionFlowBindingElement and ReliableSessionBindingElement . Add these elements in the previously mentioned order to the BindingElementCollection using the InsertItem method. Create an instance of TransportSecurityBindingElement and add it to the collection. Add any additional custom binding elements to the collection, such as TcpTransportBindingElement . Note Once an instance of this object is created, you should treat the properties of its base class, SecurityBindingElement , as immutable. Calling set on some properties may have unpredictable effects: the binding may behave as if the property retained its old value, with a run-time failure being the only indication of an issue. Two properties known to behave this way are KeyType and MessageSecurityVersion . There may be other properties for which this is true. Constructors TransportSecurityBindingElement() Creates an instance of the TransportSecurityBindingElement class. Declaration public TransportSecurityBindingElement() Methods BuildServiceDispatcherCore<TChannel>(BindingContext, IServiceDispatcher) Declaration protected override IServiceDispatcher BuildServiceDispatcherCore<TChannel>(BindingContext context, IServiceDispatcher serviceDispatcher) where TChannel : class, IChannel Parameters Type Name Description BindingContext context IServiceDispatcher serviceDispatcher Returns Type Description IServiceDispatcher Type Parameters Name Description TChannel Overrides SecurityBindingElement.BuildServiceDispatcherCore<TChannel>(BindingContext, IServiceDispatcher) Clone() Creates a new BindingElement object initialized from the current class. Declaration public override BindingElement Clone() Returns Type Description BindingElement A BindingElement object with property values equal to those of the current instance. Overrides BindingElement.Clone() Remarks This creates a complete copy of the current binding element object tree, also called a deep clone. A deep clone of an object creates a copy of the object and a copy of everything directly or indirectly referenced by that object. (This can also be described as copying the entire object graph.) Returning a deep clone enables the runtime to support the case in which multiple custom bindings share a custom binding element. If a deep clone is not returned, the run-time behavior is undefined. A shallow clone of an object, by contrast, is a copy of the object only. If the object contains references to other objects, the shallow copy does not create copies of the referred objects; instead, it copies only the references to the original objects. GetProperty<T>(BindingContext) Gets a property from the specified BindingContext . Declaration public override T GetProperty<T>(BindingContext context) where T : class Parameters Type Name Description BindingContext context A BindingContext . Returns Type Description T The property from the specified BindingContext or null if the object is not found. Type Parameters Name Description T The property to get. Overrides SecurityBindingElement.GetProperty<T>(BindingContext)"
  },
  "api-corewcf/CoreWCF.Channels.UnderstoodHeaders.html": {
    "href": "api-corewcf/CoreWCF.Channels.UnderstoodHeaders.html",
    "title": "Class UnderstoodHeaders",
    "keywords": "Class UnderstoodHeaders Represents a collection of message headers that are understood. This class cannot be inherited. Inheritance Object UnderstoodHeaders Implements IEnumerable < MessageHeaderInfo > IEnumerable Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public sealed class UnderstoodHeaders : Object Remarks This class contains a collection of message headers that are understood. SOAP processors at various layers (Security, Reliability, Transaction and application dispatcher) must add their MustUnderstand headers to this collection after processing the headers. The dispatcher throws a MessageHeader fault if a header exists in the Message.Headers collection that must be understood, but is not found in this collection. Properties Modified Declaration public bool Modified { get; set; } Property Value Type Description Boolean Methods Add(MessageHeaderInfo) Adds the specified MessageHeaderInfo to this collection. This implies that the specific header has been understood. Declaration public void Add(MessageHeaderInfo headerInfo) Parameters Type Name Description MessageHeaderInfo headerInfo Contains additional information regarding a message header. Contains(MessageHeaderInfo) Verifies whether the specified MessageHeaderInfo is present in this collection. Declaration public bool Contains(MessageHeaderInfo headerInfo) Parameters Type Name Description MessageHeaderInfo headerInfo Contains additional information regarding a message header. Returns Type Description Boolean true if the specified MessageHeaderInfo is present in this collection; otherwise, false . GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<MessageHeaderInfo> GetEnumerator() Returns Type Description IEnumerator < MessageHeaderInfo > An IEnumerator object that can be used to iterate through the collection. Remove(MessageHeaderInfo) Removes the specified MessageHeaderInfo from this collection. Declaration public void Remove(MessageHeaderInfo headerInfo) Parameters Type Name Description MessageHeaderInfo headerInfo Contains additional information regarding a message header. Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api-corewcf/CoreWCF.Channels.UriCache.html": {
    "href": "api-corewcf/CoreWCF.Channels.UriCache.html",
    "title": "Class UriCache",
    "keywords": "Class UriCache Inheritance Object UriCache Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public class UriCache : Object Constructors UriCache() Declaration public UriCache() Methods CreateUri(String) Declaration public Uri CreateUri(string uriString) Parameters Type Name Description String uriString Returns Type Description Uri"
  },
  "api-corewcf/CoreWCF.Channels.WebBodyFormatMessageProperty.html": {
    "href": "api-corewcf/CoreWCF.Channels.WebBodyFormatMessageProperty.html",
    "title": "Class WebBodyFormatMessageProperty",
    "keywords": "Class WebBodyFormatMessageProperty Stores and retrieves the message encoding format of incoming and outgoing messages for the composite Web message encoder. Inheritance Object WebBodyFormatMessageProperty Implements IMessageProperty Namespace : CoreWCF.Channels Assembly : CoreWCF.WebHttp.dll Syntax public sealed class WebBodyFormatMessageProperty : Object, IMessageProperty Remarks This property allows, for example, the composite Web message formatter to know how the composite Web message encoder has encoded the message. WebBodyFormatMessageProperty implements IMessageProperty . Objects that implement this interface are added by value to Properties with the Name providing the access key. Constructors WebBodyFormatMessageProperty(WebContentFormat) Initializes a new instance of the WebBodyFormatMessageProperty class with a specified format. Declaration public WebBodyFormatMessageProperty(WebContentFormat format) Parameters Type Name Description WebContentFormat format The WebContentFormat of the message body. Fields Name Returns the name of the property. Declaration public const string Name = \"WebBodyFormatMessageProperty\" Field Value Type Description String Remarks The WebBodyFormatMessageProperty object must have the name \"WebBodyFormatMessageProperty\" as its key in the MessageProperties collection for the value to be accessed and used as a processing annotation. Properties Format Gets the format used for the message body. Declaration public WebContentFormat Format { get; } Property Value Type Description WebContentFormat The WebContentFormat that specifies the format used for the message body. Methods CreateCopy() Returns the current instance of the current property. Declaration public IMessageProperty CreateCopy() Returns Type Description IMessageProperty An instance of the IMessageProperty interface that is a copy of the current WebBodyFormatMessageProperty . ToString() Returns the name of the property and the encoding format used when constructed. Declaration public override string ToString() Returns Type Description String Returns \"WebBodyFormatMessageProperty: EncodingFormat={0}\", where {0} is WebContentFormat.ToString() , which specifies the encoding format used. Implements IMessageProperty"
  },
  "api-corewcf/CoreWCF.Channels.WebContentFormat.html": {
    "href": "api-corewcf/CoreWCF.Channels.WebContentFormat.html",
    "title": "Class WebContentFormat",
    "keywords": "Class WebContentFormat Specifies the message formats to which content types of incoming messages can be mapped. Inheritance Object WebContentFormat Namespace : CoreWCF.Channels Assembly : CoreWCF.WebHttp.dll Syntax public sealed class WebContentFormat : Enum Remarks A value of WebContentFormat is returned by an instance of WebContentTypeMapper to indicate the format to which the content type of an incoming message is mapped. Fields Default Declaration public const WebContentFormat Default Field Value Type Description WebContentFormat The format to map to cannot be determined. Json Declaration public const WebContentFormat Json Field Value Type Description WebContentFormat Map to the JSON format. Raw Declaration public const WebContentFormat Raw Field Value Type Description WebContentFormat Map to the \"Raw\" binary format. value__ Declaration public int value__ Field Value Type Description Int32 Xml Declaration public const WebContentFormat Xml Field Value Type Description WebContentFormat Map to the XML format."
  },
  "api-corewcf/CoreWCF.Channels.WebContentTypeMapper.html": {
    "href": "api-corewcf/CoreWCF.Channels.WebContentTypeMapper.html",
    "title": "Class WebContentTypeMapper",
    "keywords": "Class WebContentTypeMapper Specifies the format to which the content type of an incoming message is mapped. Inheritance Object WebContentTypeMapper Namespace : CoreWCF.Channels Assembly : CoreWCF.WebHttp.dll Syntax public abstract class WebContentTypeMapper : Object Remarks This is an extensibility point in the programming model that is used by the Web message encoder to override how content types are mapped to formats. To implement this class, override the GetMessageFormatForContentType(String) method. Constructors WebContentTypeMapper() Initializes a new instance of the WebContentTypeMapper class. Declaration protected WebContentTypeMapper() Methods GetMessageFormatForContentType(String) When overridden in a derived class, returns the message format used for a specified content type. Declaration public abstract WebContentFormat GetMessageFormatForContentType(string contentType) Parameters Type Name Description String contentType The content type that indicates the MIME type of data to be interpreted. Returns Type Description WebContentFormat The WebContentFormat that specifies the format to which the message content type is mapped. Remarks This is intended to be an extensibility mechanism that can be used to override how content types are mapped to Web content formats. For example, if all incoming messages are processed as \"raw binary data\" without ever doing XML or JSON parsing, you could implement a WebContentTypeMapper that always returned Raw regardless of the content type that was passed in."
  },
  "api-corewcf/CoreWCF.Channels.WebMessageEncoderFactory.html": {
    "href": "api-corewcf/CoreWCF.Channels.WebMessageEncoderFactory.html",
    "title": "Class WebMessageEncoderFactory",
    "keywords": "Class WebMessageEncoderFactory Inheritance Object MessageEncoderFactory WebMessageEncoderFactory Inherited Members MessageEncoderFactory.CreateSessionEncoder() Namespace : CoreWCF.Channels Assembly : CoreWCF.WebHttp.dll Syntax public class WebMessageEncoderFactory : MessageEncoderFactory Constructors WebMessageEncoderFactory(Encoding, Int32, Int32, XmlDictionaryReaderQuotas, WebContentTypeMapper, Boolean) Declaration public WebMessageEncoderFactory(Encoding writeEncoding, int maxReadPoolSize, int maxWritePoolSize, XmlDictionaryReaderQuotas quotas, WebContentTypeMapper contentTypeMapper, bool javascriptCallbackEnabled) Parameters Type Name Description Encoding writeEncoding Int32 maxReadPoolSize Int32 maxWritePoolSize XmlDictionaryReaderQuotas quotas WebContentTypeMapper contentTypeMapper Boolean javascriptCallbackEnabled Properties Encoder Declaration public override MessageEncoder Encoder { get; } Property Value Type Description MessageEncoder Overrides MessageEncoderFactory.Encoder MessageVersion Declaration public override MessageVersion MessageVersion { get; } Property Value Type Description MessageVersion Overrides MessageEncoderFactory.MessageVersion"
  },
  "api-corewcf/CoreWCF.Channels.WebMessageEncodingBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Channels.WebMessageEncodingBindingElement.html",
    "title": "Class WebMessageEncodingBindingElement",
    "keywords": "Class WebMessageEncodingBindingElement Enables plain-text XML, JavaScript Object Notation (JSON) message encodings and \"raw\" binary content to be read and written when used in a Windows Communication Foundation (WCF) binding. Inheritance Object BindingElement MessageEncodingBindingElement WebMessageEncodingBindingElement Inherited Members BindingElement.BuildServiceDispatcher<TChannel>(BindingContext, IServiceDispatcher) BindingElement.CanBuildServiceDispatcher<TChannel>(BindingContext) Namespace : CoreWCF.Channels Assembly : CoreWCF.WebHttp.dll Syntax public sealed class WebMessageEncodingBindingElement : MessageEncodingBindingElement Remarks Encoding is the process of transforming a message into a sequence of bytes. Decoding is the reverse process. These processes require the specification of a character encoding. The WebMessageEncodingBindingElement works by delegating to a series of inner encoders to handle the plain-text XML and JSON encodings, and \"raw\" binary data. This delegation is done by a composite message encoder. This binding element and its composite encoder are used to control the encoding in scenarios that do not use SOAP messaging used by the WebHttpBinding . These scenarios include \"Plain Old XML\" (POX), Representational State Transfer (REST), Really Simple Syndication (RSS) and Atom syndication, and Asynchronous JavaScript and XML (AJAX). The composite message encoder does not support SOAP or WS-Addressing, and so MessageVersion always returns None . The binding element can be configured with a write character encoding at construction time using the WebMessageEncodingBindingElement(Encoding) constructor. The <xref:System.Text.Encoding) value specifies the behavior on write for the JSON and Textual XML cases. On read, any valid message encoding and text encoding is understood. This constructor sets default values on the maximum number of readers and writers that are allocated to pools and that are respectively available to process incoming and outgoing messages without allocating new readers or writers. The properties MaxReadPoolSize and MaxWritePoolSize can also be used to set the maximum number of readers and writers to be allocated respectively. By default 64 readers and 16 writers are allocated. Default complexity constraints are also set by this constructor on the XmlDictionaryReaderQuotas associated with this encoding by the ReaderQuotas property to protect against a class of denial of service (DOS) attacks that attempt to use message complexity to tie up endpoint processing resources. The WebMessageEncodingBindingElement has a CreateMessageEncoderFactory() method that creates a message encoder factory that produces JSON, XML or Raw message decoders and encoders as appropriate depending on the content type specified. The WebMessageEncodingBindingElement also provides the methods to build the factories and listeners for the channels through which the HTTP requests flow. The composite encoder and its associated classes and configuration components are usable in partial trust and this use does not require any special permissions. Constructors WebMessageEncodingBindingElement() Initializes a new instance of the WebMessageEncodingBindingElement class. Declaration public WebMessageEncodingBindingElement() Remarks This constructor uses UTF8Encoding as the default character encoding. So use this constructor when you want this character encoding. If you want another character encoding, use the WebMessageEncodingBindingElement(Encoding) constructor. This constructor sets default values on the maximum number of readers and writers that are allocated to pools and that are respectively available to process incoming and outgoing messages without allocating new readers or writers. There are 64 readers allocated by default for the MaxReadPoolSize property and there are 16 writers allocated by default for the MaxWritePoolSize property. Default complexity constraints are also set by this constructor on the XmlDictionaryReaderQuotas associated with this message encoding by the ReaderQuotas property to protect against a class of denial of service (DOS) attacks that attempt to use message complexity to tie up endpoint processing resources. The properties that express these constraints and their default values (in bytes) are as follows: MaxDepth = 32 MaxStringContentLength = 8192 MaxArrayLength = 16384 MaxBytesPerRead = 4096 MaxNameTableCharCount = 16384 WebMessageEncodingBindingElement(Encoding) Initializes a new instance of the WebMessageEncodingBindingElement class with a specified write character encoding. Declaration public WebMessageEncodingBindingElement(Encoding writeEncoding) Parameters Type Name Description Encoding writeEncoding The Encoding to be used to write characters in a message. Remarks The message text encodings supported are UTF-8, Unicode, and Big-Endian Unicode. If another text encoding is specified, an ArgumentException is thrown. This constructor sets default values on the maximum number of readers and writers that are allocated to pools and that are respectively available to process incoming and outgoing messages without allocating new readers or writers. There are 64 readers allocated by default for the MaxReadPoolSize property and there are 16 writers allocated by default for the MaxWritePoolSize property. Default complexity constraints are also set by this constructor on the XmlDictionaryReaderQuotas associated with this message encoding by the ReaderQuotas property to protect against a class of denial of service (DOS) attacks that attempt to use message complexity to tie up endpoint processing resources. The properties that express these constraints and their default values (in bytes) are as follows: MaxDepth = 32 MaxStringContentLength = 8192 MaxArrayLength = 16384 MaxBytesPerRead = 4096 MaxNameTableCharCount = 16384 Properties ContentTypeMapper Gets or sets how the content type of an incoming message is mapped to a format. Declaration public WebContentTypeMapper ContentTypeMapper { get; set; } Property Value Type Description WebContentTypeMapper The WebContentTypeMapper that indicates the format for the content type of the incoming message. CrossDomainScriptAccessEnabled Gets or sets a value that determines if cross domain script access is enabled. Declaration public bool CrossDomainScriptAccessEnabled { get; set; } Property Value Type Description Boolean true if cross domain script access is enabled; otherwise, false . MaxReadPoolSize Gets or sets a value that specifies the maximum number of readers that is allocated to a pool and that is available to process incoming messages without allocating new readers. Declaration public int MaxReadPoolSize { get; set; } Property Value Type Description Int32 The maximum number of readers available to process incoming messages. The default value is 64 readers of each type. Remarks Increasing this number increases memory consumption, but prepares the encoder to deal with sudden bursts of incoming messages because it is able to use readers from the pool that are already created instead of creating new ones. MaxWritePoolSize Gets or sets a value that specifies the maximum number of writers that is allocated to a pool and that is available to process outgoing messages without allocating new writers. Declaration public int MaxWritePoolSize { get; set; } Property Value Type Description Int32 The maximum number of writers available to process outgoing messages. The default is 16 writers of each type. Remarks Increasing this number increases memory consumption, but prepares the encoder to deal with sudden bursts of outgoing messages because it is able to use writers from the pool that are already created instead of creating new ones. MessageVersion Gets or sets the message version that indicates that the binding element does not use SOAP or WS-Addressing. Declaration public override MessageVersion MessageVersion { get; set; } Property Value Type Description MessageVersion None Overrides MessageEncodingBindingElement.MessageVersion Remarks The JSON message encoding does not support either SOAP or WS-Addressing. The None contains None and None , which respectively specifies this non-support. ReaderQuotas Gets constraints on the complexity of SOAP messages that can be processed by endpoints configured with this binding. Declaration public XmlDictionaryReaderQuotas ReaderQuotas { get; } Property Value Type Description XmlDictionaryReaderQuotas The XmlDictionaryReaderQuotas that specifies the complexity constraints on SOAP messages that are exchanged. The default values for these constraints are provided in the following Remarks section. Remarks The complexity constraints protect against a class of denial of service (DOS) attacks that attempt to use message complexity to tie up endpoint processing resources. The properties that express these constraints and their default values (in bytes) are as follows: MaxDepth = 32 MaxStringContentLength = 8192 MaxArrayLength = 16384 MaxBytesPerRead = 4096 MaxNameTableCharCount = 16384 WriteEncoding Gets or sets the character encoding that is used to write the message text. Declaration public Encoding WriteEncoding { get; set; } Property Value Type Description Encoding The Encoding that indicates the character encoding that is used to write the message text. The default is UTF8Encoding . Methods CheckEncodingVersion(EnvelopeVersion) Declaration protected override bool CheckEncodingVersion(EnvelopeVersion version) Parameters Type Name Description EnvelopeVersion version Returns Type Description Boolean Overrides MessageEncodingBindingElement.CheckEncodingVersion(EnvelopeVersion) Clone() Creates a new WebMessageEncodingBindingElement object initialized from the current one. Declaration public override BindingElement Clone() Returns Type Description BindingElement A WebMessageEncodingBindingElement object with property values equal to those of the current element. Overrides BindingElement.Clone() Remarks This creates a complete copy of the current binding element object tree, also called a deep clone. A deep clone of an object creates a copy of the object and a copy of everything directly or indirectly referenced by that object. This is called copying the entire object graph. Returning a deep clone enables the runtime to support the case in which multiple custom bindings share a custom binding element. If a deep clone is not returned, the run-time behavior is undefined. A shallow clone of an object, by contrast, is a copy of the object only. If the object contains references to other objects, the shallow copy does not create copies of the referred objects; instead, it copies only the references to the original objects. CreateMessageEncoderFactory() Creates a message encoder factory that produces message encoders that can write either JavaScript Object Notation (JSON) or XML messages. Declaration public override MessageEncoderFactory CreateMessageEncoderFactory() Returns Type Description MessageEncoderFactory The MessageEncoderFactory that encodes JSON, XML or \"raw\" binary messages. Overrides MessageEncodingBindingElement.CreateMessageEncoderFactory() Remarks The value of the WriteEncoding property determines the character encoding used to write the message. The maximum number of readers and writers that are allocated to pools and that is respectively available to process incoming and outgoing messages without allocating new readers are specified by the MaxReadPoolSize and MaxWritePoolSize properties. The default complexity constraints that are used by the message encoders produced by the MessageEncoderFactory can be obtained from the XmlDictionaryReaderQuotas associated with this encoding by the ReaderQuotas property to protect against a class of denial of service (DOS) attacks that attempt to use message complexity to tie up endpoint processing resources. GetProperty<T>(BindingContext) Returns the object of the type requested, if present, from the appropriate layer in the channel stack, or null if it is not present. Declaration public override T GetProperty<T>(BindingContext context) where T : class Parameters Type Name Description BindingContext context The BindingContext for the current binding element. Returns Type Description T The typed object T requested if it is present or null if it is not. Type Parameters Name Description T The typed object for which the method is querying. Overrides MessageEncodingBindingElement.GetProperty<T>(BindingContext) Remarks This override adds one property to the base GetProperty (BindingContext) implementation: when T is XmlDictionaryReaderQuotas , the ReaderQuotas property is returned. IsMatch(BindingElement) Declaration protected override bool IsMatch(BindingElement b) Parameters Type Name Description BindingElement b Returns Type Description Boolean Overrides MessageEncodingBindingElement.IsMatch(BindingElement)"
  },
  "api-corewcf/CoreWCF.Channels.WebSocketMessageProperty.html": {
    "href": "api-corewcf/CoreWCF.Channels.WebSocketMessageProperty.html",
    "title": "Class WebSocketMessageProperty",
    "keywords": "Class WebSocketMessageProperty Represents a web socket message property. Inheritance Object WebSocketMessageProperty Namespace : CoreWCF.Channels Assembly : CoreWCF.Http.dll Syntax public sealed class WebSocketMessageProperty : Object Remarks To be added. Constructors WebSocketMessageProperty() Initializes a new instance of the WebSocketMessageProperty class. Declaration public WebSocketMessageProperty() Fields Name Specifies the message property name. Declaration public const string Name = \"WebSocketMessageProperty\" Field Value Type Description String Properties MessageType Gets the web socket message type. Declaration public WebSocketMessageType MessageType { get; set; } Property Value Type Description WebSocketMessageType The web socket message type. OpeningHandshakeProperties Gets a collection of opening handshake properties. Declaration public ReadOnlyDictionary<string, object> OpeningHandshakeProperties { get; } Property Value Type Description ReadOnlyDictionary < String , Object > A collection of opening handshake properties that contains in the ReadOnlyDictionary<TKey,TValue> . SubProtocol Gets or sets the sub protocol message. Declaration public string SubProtocol { get; } Property Value Type Description String The sub protocol message. WebSocketContext Gets or sets the web socket context.. Declaration public WebSocketContext WebSocketContext { get; } Property Value Type Description WebSocketContext The web socket context."
  },
  "api-corewcf/CoreWCF.Channels.WebSocketTransportSettings.html": {
    "href": "api-corewcf/CoreWCF.Channels.WebSocketTransportSettings.html",
    "title": "Class WebSocketTransportSettings",
    "keywords": "Class WebSocketTransportSettings Represents settings for web socket transport. Inheritance Object WebSocketTransportSettings Implements IEquatable < WebSocketTransportSettings > Namespace : CoreWCF.Channels Assembly : CoreWCF.Http.dll Syntax public sealed class WebSocketTransportSettings : Object Remarks To be added. Constructors WebSocketTransportSettings() Initializes a new instance of the WebSocketTransportSettings class. Declaration public WebSocketTransportSettings() Fields BinaryEncoderTransferModeHeader Specifies the header for the binary encoder transfer mode. Declaration public const string BinaryEncoderTransferModeHeader = \"microsoft-binary-transfer-mode\" Field Value Type Description String BinaryMessageReceivedAction Specifies the action when web socket binary message is received. Declaration public const string BinaryMessageReceivedAction = \"http://schemas.microsoft.com/2011/02/websockets/onbinarymessage\" Field Value Type Description String ConnectionOpenedAction Specifies the action when web socket connection is opened. Declaration public const string ConnectionOpenedAction = \"http://schemas.microsoft.com/2011/02/session/onopen\" Field Value Type Description String SoapContentTypeHeader Specifies the soap content type header. Declaration public const string SoapContentTypeHeader = \"soap-content-type\" Field Value Type Description String TextMessageReceivedAction Specifies the action when web socket text message is received. Declaration public const string TextMessageReceivedAction = \"http://schemas.microsoft.com/2011/02/websockets/ontextmessage\" Field Value Type Description String Properties CreateNotificationOnConnection Gets or sets the create notification during connection. Declaration public bool CreateNotificationOnConnection { get; set; } Property Value Type Description Boolean The create notification during connection. DisablePayloadMasking Gets or sets a value that indicates whether the web socket masking is disabled. Declaration public bool DisablePayloadMasking { get; set; } Property Value Type Description Boolean true if the web socket masking is disabled; otherwise, false . KeepAliveInterval Gets or sets the value of the keep alive interval of the connection. Declaration public TimeSpan KeepAliveInterval { get; set; } Property Value Type Description TimeSpan The value of the keep alive interval of the connection. MaxPendingConnections Gets or sets the maximum number of allowed pending connections. Declaration public int MaxPendingConnections { get; set; } Property Value Type Description Int32 The maximum number of allowed pending connections. SubProtocol Gets or sets the web socket sub protocol. Declaration public string SubProtocol { get; set; } Property Value Type Description String The web socket sub protocol. TransportUsage Gets or sets the web socket transport usage. Declaration public WebSocketTransportUsage TransportUsage { get; set; } Property Value Type Description WebSocketTransportUsage One of the values of the WebSocketTransportUsage enumeration. Methods Equals(WebSocketTransportSettings) Determines whether the specified web socket transport settings object is equal with the current object. Declaration public bool Equals(WebSocketTransportSettings other) Parameters Type Name Description WebSocketTransportSettings other The web socket transport settings object to compare with the current object. Returns Type Description Boolean true if the specified object is equal with the current object; otherwise, false . Equals(Object) Determines whether the specified object is equal with the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current object. Returns Type Description Boolean true if the specified object is equal with the current object; otherwise, false . GetHashCode() Gets the hash code value for this object. Declaration public override int GetHashCode() Returns Type Description Int32 The hash code value for this object. Implements System.IEquatable<T>"
  },
  "api-corewcf/CoreWCF.Channels.WebSocketTransportUsage.html": {
    "href": "api-corewcf/CoreWCF.Channels.WebSocketTransportUsage.html",
    "title": "Class WebSocketTransportUsage",
    "keywords": "Class WebSocketTransportUsage Specifies an enumeration of WebSocket transport usage. Inheritance Object WebSocketTransportUsage Namespace : CoreWCF.Channels Assembly : CoreWCF.Http.dll Syntax public sealed class WebSocketTransportUsage : Enum Remarks To be added. Fields Always Indicates WebSocket transport will always be used. Declaration public const WebSocketTransportUsage Always Field Value Type Description WebSocketTransportUsage Indicates WebSocket transport will always be used. Never Indicates WebSocket transport will never be used. Declaration public const WebSocketTransportUsage Never Field Value Type Description WebSocketTransportUsage Indicates WebSocket transport will never be used. value__ Declaration public int value__ Field Value Type Description Int32 WhenDuplex Indicates WebSocket transport will be used for duplex service contracts only. Declaration public const WebSocketTransportUsage WhenDuplex Field Value Type Description WebSocketTransportUsage Indicates WebSocket transport will be used for duplex service contracts only."
  },
  "api-corewcf/CoreWCF.Channels.WindowsStreamSecurityBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Channels.WindowsStreamSecurityBindingElement.html",
    "title": "Class WindowsStreamSecurityBindingElement",
    "keywords": "Class WindowsStreamSecurityBindingElement Represents the binding element used to specify Windows stream security settings. Inheritance Object BindingElement StreamUpgradeBindingElement WindowsStreamSecurityBindingElement Inherited Members BindingElement.IsMatch(BindingElement) BindingElement.BuildServiceDispatcher<TChannel>(BindingContext, IServiceDispatcher) BindingElement.CanBuildServiceDispatcher<TChannel>(BindingContext) Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public class WindowsStreamSecurityBindingElement : StreamUpgradeBindingElement Remarks Transports that use a stream-oriented protocol such as TCP and named pipes support stream-based transport upgrades. Specifically, WCF provides security upgrades. The configuration of this transport security is encapsulated by this class as well as by SslStreamSecurityBindingElement , which can be configured and added to a custom binding. In addition, a third party can write its own custom StreamSecurityBindingElement . These binding elements extend the StreamUpgradeBindingElement class that is called to build the client and server stream upgrade providers. A custom binding contains a collection of binding elements arranged in a specific order: the element representing the top of the binding stack is added first, the next element down in the binding stack is added second, and so on. To add this class to a binding Create a BindingElementCollection . Create any required custom binding elements that are above this binding element in the binding stack, such as the optional TransactionFlowBindingElement and ReliableSessionBindingElement . Add the created elements in the order described previously to the BindingElementCollection using the InsertItem method. Create an instance of WindowsStreamSecurityBindingElement and add it to the collection. Add any additional custom binding elements to the collection, such as TcpTransportBindingElement . Constructors WindowsStreamSecurityBindingElement() Initializes a new instance of the WindowsStreamSecurityBindingElement class. Declaration public WindowsStreamSecurityBindingElement() WindowsStreamSecurityBindingElement(WindowsStreamSecurityBindingElement) Initializes a new instance of the WindowsStreamSecurityBindingElement class from an existing instance. Declaration protected WindowsStreamSecurityBindingElement(WindowsStreamSecurityBindingElement elementToBeCloned) Parameters Type Name Description WindowsStreamSecurityBindingElement elementToBeCloned Instance of this class to clone. Properties ProtectionLevel Gets or sets the protection level. Declaration public ProtectionLevel ProtectionLevel { get; set; } Property Value Type Description ProtectionLevel The ProtectionLevel . The default value is EncryptAndSign . Methods BuildServerStreamUpgradeProvider(BindingContext) Creates an instance on the server of the StreamUpgradeProvider based on the channel context provided. Declaration public override StreamUpgradeProvider BuildServerStreamUpgradeProvider(BindingContext context) Parameters Type Name Description BindingContext context The BindingContext for the entire channel stack. Returns Type Description StreamUpgradeProvider An instance of the StreamUpgradeProvider . Overrides StreamUpgradeBindingElement.BuildServerStreamUpgradeProvider(BindingContext) Remarks This method is called when building the provider channel listener and provides a custom implementation of the StreamUpgradeProvider abstract class. The BindingContext parameter enables reacting to other elements in the channel stack. Clone() Creates a new binding element from this instance of the class. Declaration public override BindingElement Clone() Returns Type Description BindingElement BindingElement . Overrides BindingElement.Clone() GetProperty<T>(BindingContext) Gets a specified object from the BindingContext. Declaration public override T GetProperty<T>(BindingContext context) where T : class Parameters Type Name Description BindingContext context A BindingContext . Returns Type Description T The specified object from the BindingContext or null if the object is not found. Type Parameters Name Description T The object to get. Overrides BindingElement.GetProperty<T>(BindingContext) Remarks This method receives a binding context as an input parameter, which represents the stack of binding elements. This method gets the specified object directly, delegates the inquiry to the next-lower binding element in the stack, or a combination of the two. It can modify the context if it delegates the inquiry. Each binding element in the stack can repeat this process, if it has been delegated to, until the bottom of the stack is reached. The object returned is usually a collection of properties. If the type of T is ISecurityCapabilities , then an instance of this class is returned with SupportsClientAuthentication , SupportsClientWindowsIdentity , and SupportsServerAuthentication all set to true , and SupportedRequestProtectionLevel and SupportedResponseProtectionLevel set to the current value in this binding. If the type of T is IdentityVerifier , then a default instance of this class is returned. This method is implemented by binding elements as well as by the run-time objects such as IChannelFactory , IChannelListener , and IChannel ."
  },
  "api-corewcf/CoreWCF.Channels.XmlAttributeHolder.html": {
    "href": "api-corewcf/CoreWCF.Channels.XmlAttributeHolder.html",
    "title": "Class XmlAttributeHolder",
    "keywords": "Class XmlAttributeHolder Inheritance Object XmlAttributeHolder Namespace : CoreWCF.Channels Assembly : CoreWCF.Primitives.dll Syntax public sealed class XmlAttributeHolder : ValueType Constructors XmlAttributeHolder(String, String, String, String) Declaration public XmlAttributeHolder(string prefix, string localName, string ns, string value) Parameters Type Name Description String prefix String localName String ns String value Fields emptyArray Declaration public static XmlAttributeHolder[] emptyArray Field Value Type Description XmlAttributeHolder [] Properties LocalName Declaration public string LocalName { get; } Property Value Type Description String NamespaceUri Declaration public string NamespaceUri { get; } Property Value Type Description String Prefix Declaration public string Prefix { get; } Property Value Type Description String Value Declaration public string Value { get; } Property Value Type Description String Methods GetAttribute(XmlAttributeHolder[], String, String) Declaration public static string GetAttribute(XmlAttributeHolder[] attributes, string localName, string ns) Parameters Type Name Description XmlAttributeHolder [] attributes String localName String ns Returns Type Description String ReadAttributes(XmlDictionaryReader) Declaration public static XmlAttributeHolder[] ReadAttributes(XmlDictionaryReader reader) Parameters Type Name Description XmlDictionaryReader reader Returns Type Description XmlAttributeHolder [] ReadAttributes(XmlDictionaryReader, ref Int32) Declaration public static XmlAttributeHolder[] ReadAttributes(XmlDictionaryReader reader, ref int maxSizeOfHeaders) Parameters Type Name Description XmlDictionaryReader reader Int32 maxSizeOfHeaders Returns Type Description XmlAttributeHolder [] WriteAttributes(XmlAttributeHolder[], XmlWriter) Declaration public static void WriteAttributes(XmlAttributeHolder[] attributes, XmlWriter writer) Parameters Type Name Description XmlAttributeHolder [] attributes XmlWriter writer WriteTo(XmlWriter) Declaration public void WriteTo(XmlWriter writer) Parameters Type Name Description XmlWriter writer"
  },
  "api-corewcf/CoreWCF.Collections.Generic.html": {
    "href": "api-corewcf/CoreWCF.Collections.Generic.html",
    "title": "Namespace CoreWCF.Collections.Generic",
    "keywords": "Namespace CoreWCF.Collections.Generic Classes KeyedByTypeCollection<TItem> Provides a collection whose items are types that serve as keys. SynchronizedCollection<T> Provides a thread-safe collection that contains objects of a type specified by the generic parameter as elements. SynchronizedKeyedCollection<K, T> Provides a thread-safe collection that contains objects of a type specified by a generic parameter and that are grouped by keys."
  },
  "api-corewcf/CoreWCF.Collections.Generic.KeyedByTypeCollection-1.html": {
    "href": "api-corewcf/CoreWCF.Collections.Generic.KeyedByTypeCollection-1.html",
    "title": "Class KeyedByTypeCollection<TItem>",
    "keywords": "Class KeyedByTypeCollection<TItem> Provides a collection whose items are types that serve as keys. Inheritance Object KeyedByTypeCollection<TItem> BindingParameterCollection Namespace : CoreWCF.Collections.Generic Assembly : CoreWCF.Primitives.dll Syntax public class KeyedByTypeCollection<TItem> : KeyedCollection<Type, TItem> Type Parameters Name Description TItem The item types contained in the collection that also serve as the keys for the collection. Remarks Only one object of each type is allowed in the collection because the type is the key and each key must be unique. But you can find objects of different types. Constructors KeyedByTypeCollection() Initializes a new instance of the KeyedByTypeCollection<TItem> class. Declaration public KeyedByTypeCollection() KeyedByTypeCollection(IEnumerable<TItem>) Initializes a new instance of the KeyedByTypeCollection<TItem> class for a specified enumeration of objects. Declaration public KeyedByTypeCollection(IEnumerable<TItem> items) Parameters Type Name Description IEnumerable <TItem> items The IEnumerable<T> of generic type Object used to initialize the collection. Methods Find<T>() Returns the first item in the collection of a specified type. Declaration public T Find<T>() Returns Type Description T The object of type T if it is a reference type and the value of type T if it is a value type. The default value of the type is returned if no object of type T is contained in the collection: null if it is a reference type and 0 if it is a value type. Type Parameters Name Description T The type of item in the collection to find. FindAll<T>() Returns a collection of objects of type T that are contained in the KeyedByTypeCollection<TItem> . Declaration public Collection<T> FindAll<T>() Returns Type Description Collection <T> A Collection<T> of type T that contains the objects of type T from the original collection. Type Parameters Name Description T The type of item in the collection to find. GetKeyForItem(TItem) Gets the type of an item contained in the collection. Declaration protected override Type GetKeyForItem(TItem item) Parameters Type Name Description TItem item The item in the collection whose type is to be retrieved. Returns Type Description Type The type of the specified item in the collection. InsertItem(Int32, TItem) Inserts an element into the collection at a specific location. Declaration protected override void InsertItem(int index, TItem item) Parameters Type Name Description Int32 index The zero-based index at which item should be inserted. TItem item The object to insert into the collection. Remove<T>() Removes an object of a specified type from the collection. Declaration public T Remove<T>() Returns Type Description T The object removed from the collection. Type Parameters Name Description T The type of item in the collection to remove. RemoveAll<T>() Removes all of the elements of a specified type from the collection. Declaration public Collection<T> RemoveAll<T>() Returns Type Description Collection <T> The Collection<T> that contains the objects of type T from the original collection. Type Parameters Name Description T The type of item in the collection to remove. SetItem(Int32, TItem) Replaces the item at the specified index with a new object. Declaration protected override void SetItem(int index, TItem item) Parameters Type Name Description Int32 index The zero-based index of the item to be replaced. TItem item The object to add to the collection."
  },
  "api-corewcf/CoreWCF.Collections.Generic.SynchronizedCollection-1.html": {
    "href": "api-corewcf/CoreWCF.Collections.Generic.SynchronizedCollection-1.html",
    "title": "Class SynchronizedCollection<T>",
    "keywords": "Class SynchronizedCollection<T> Provides a thread-safe collection that contains objects of a type specified by the generic parameter as elements. Inheritance Object SynchronizedCollection<T> SynchronizedKeyedCollection<K, T> ChannelDispatcherCollection ExtensionCollection<T> Implements IList <T> ICollection <T> IEnumerable <T> IEnumerable IList ICollection Namespace : CoreWCF.Collections.Generic Assembly : CoreWCF.Primitives.dll Syntax public class SynchronizedCollection<T> : Object Type Parameters Name Description T The type of object contained as items in the thread-safe collection. Remarks The SynchronizedCollection<T> stores data in a List<T> container and provides an object that can be set and used to synchronize access to the collection so that it is thread-safe. The IList<T> container can be recovered using the Items property. The synchronized object can be recovered using the SyncRoot property. It can only be set using one of the constructors that take the syncRoot parameter. Constructors SynchronizedCollection() Initializes a new instance of the SynchronizedCollection<T> class. Declaration public SynchronizedCollection() SynchronizedCollection(Object) Initializes a new instance of the SynchronizedCollection<T> class with the object used to synchronize access to the thread-safe collection. Declaration public SynchronizedCollection(object syncRoot) Parameters Type Name Description Object syncRoot The object used to synchronize access the thread-safe collection. Remarks If multiple instances of the SynchronizedCollection<T> are created using the same syncRoot , then access is protected across all instances. SynchronizedCollection(Object, T[]) Initializes a new instance of the SynchronizedCollection<T> class from a specified array of elements and with the object used to synchronize access to the thread-safe collection. Declaration public SynchronizedCollection(object syncRoot, params T[] list) Parameters Type Name Description Object syncRoot The object used to synchronize access the thread-safe collection. T[] list The Array of type T elements used to initialize the thread-safe collection. SynchronizedCollection(Object, IEnumerable<T>) Initializes a new instance of the SynchronizedCollection<T> class from a specified enumerable list of elements and with the object used to synchronize access to the thread-safe collection. Declaration public SynchronizedCollection(object syncRoot, IEnumerable<T> list) Parameters Type Name Description Object syncRoot The object used to synchronize access to the thread-safe collection. IEnumerable <T> list The IEnumerable<T> collection of elements used to initialize the thread-safe collection. Properties Count Gets the number of elements contained in the thread-safe collection. Declaration public int Count { get; } Property Value Type Description Int32 The number of elements contained in the thread-safe, read-only collection. Item[Int32] Gets an element from the thread-safe collection with a specified index. Declaration public T this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index of the element to be retrieved from the collection. Property Value Type Description T The object in the collection that has the specified index . Items Gets the list of elements contained in the thread-safe collection. Declaration protected List<T> Items { get; } Property Value Type Description List <T> The IList<T> of elements that are contained in the thread-safe, read-only collection. SyncRoot Gets the object used to synchronize access to the thread-safe collection. Declaration public object SyncRoot { get; } Property Value Type Description Object An object used to synchronize access to the thread-safe collection. Methods Add(T) Adds an item to the thread-safe, read-only collection. Declaration public void Add(T item) Parameters Type Name Description T item Adds an item to the thread-safe, read-only collection. Clear() Removes all items from the collection. Declaration public void Clear() ClearItems() Removes all items from the collection. Declaration protected virtual void ClearItems() Contains(T) Determines whether the collection contains an element with a specific value. Declaration public bool Contains(T item) Parameters Type Name Description T item The object to locate in the collection. Returns Type Description Boolean true if the element value is found in the collection; otherwise false . CopyTo(T[], Int32) Copies the elements of the collection to a specified array, starting at a particular index. Declaration public void CopyTo(T[] array, int index) Parameters Type Name Description T[] array The destination Array for the elements of type T copied from the collection. Int32 index The zero-based index in the array at which copying begins. GetEnumerator() Returns an enumerator that iterates through the synchronized collection. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> An IEnumerator<T> for objects of the type stored in the collection. IndexOf(T) Returns the index of the first occurrence of a value in the collection. Declaration public int IndexOf(T item) Parameters Type Name Description T item Removes all items from the collection. Returns Type Description Int32 The zero-based index of the first occurrence of the value in the collection. Insert(Int32, T) Inserts an item into the collection at a specified index. Declaration public void Insert(int index, T item) Parameters Type Name Description Int32 index The zero-based index of the element to be retrieved from the collection. T item The object to be inserted into the collection as an element. Remarks If the index is equal to the number of elements in the collection, the item is appended to the list. If the index is less than the number of elements in the collection, the elements that follow the point of insertion of the item move down to accommodate the new element. InsertItem(Int32, T) Inserts an item into the collection at a specified index. Declaration protected virtual void InsertItem(int index, T item) Parameters Type Name Description Int32 index The zero-based index of the collection where the object is to be inserted. T item The object to be inserted into the collection. Remarks If the index is equal to the number of elements in the collection, the item is appended to the list. If the index is less than the number of elements in the collection, the elements that follow the point of insertion of the item move down to accommodate the new element. Remove(T) Removes the first occurrence of a specified item from the collection. Declaration public bool Remove(T item) Parameters Type Name Description T item The object to remove from the collection. Returns Type Description Boolean true if item was successfully removed from the collection; otherwise, false . Remarks The elements in the collection that follow the removed element move up to occupy the vacated spot and their indices are updated accordingly. RemoveAt(Int32) Removes an item at a specified index from the collection. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index The zero-based index of the element to be retrieved from the collection. Remarks The elements in the collection that follow the removed element move up to occupy the vacated spot and their indices are updated accordingly. RemoveItem(Int32) Removes an item at a specified index from the collection. Declaration protected virtual void RemoveItem(int index) Parameters Type Name Description Int32 index The zero-based index of the element to be retrieved from the collection. SetItem(Int32, T) Replaces the item at a specified index with another item. Declaration protected virtual void SetItem(int index, T item) Parameters Type Name Description Int32 index The zero-based index of the object to be replaced. T item The object to replace. Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable System.Collections.IList System.Collections.ICollection"
  },
  "api-corewcf/CoreWCF.Collections.Generic.SynchronizedKeyedCollection-2.html": {
    "href": "api-corewcf/CoreWCF.Collections.Generic.SynchronizedKeyedCollection-2.html",
    "title": "Class SynchronizedKeyedCollection<K, T>",
    "keywords": "Class SynchronizedKeyedCollection<K, T> Provides a thread-safe collection that contains objects of a type specified by a generic parameter and that are grouped by keys. Inheritance Object SynchronizedCollection <T> SynchronizedKeyedCollection<K, T> UriSchemeKeyedCollection Implements IList <T> ICollection <T> IEnumerable <T> IEnumerable IList ICollection Inherited Members SynchronizedCollection<T>.Add(T) SynchronizedCollection<T>.Clear() SynchronizedCollection<T>.CopyTo(T[], Int32) SynchronizedCollection<T>.Contains(T) SynchronizedCollection<T>.GetEnumerator() SynchronizedCollection<T>.IndexOf(T) SynchronizedCollection<T>.Insert(Int32, T) SynchronizedCollection<T>.Remove(T) SynchronizedCollection<T>.RemoveAt(Int32) SynchronizedCollection<T>.Count SynchronizedCollection<T>.Items SynchronizedCollection<T>.SyncRoot SynchronizedCollection<T>.Item[Int32] Namespace : CoreWCF.Collections.Generic Assembly : CoreWCF.Primitives.dll Syntax public abstract class SynchronizedKeyedCollection<K, T> : SynchronizedCollection<T> Type Parameters Name Description K The type of the key used to group the items contained in the collection. T The type of items contained in the thread-safe, keyed collection. Remarks Inherited by UriSchemeKeyedCollection for use hosting. Constructors SynchronizedKeyedCollection() Initializes a new instance of the SynchronizedKeyedCollection<K, T> class. Declaration protected SynchronizedKeyedCollection() SynchronizedKeyedCollection(Object) Initializes a new instance of the SynchronizedKeyedCollection<K, T> class with access synchronized by an explicitly specified object. Declaration protected SynchronizedKeyedCollection(object syncRoot) Parameters Type Name Description Object syncRoot The object used to synchronize access to the thread-safe collection. Remarks If multiple instances of the SynchronizedKeyedCollection<K, T> are created using the same syncRoot, then access is protected across all instances. SynchronizedKeyedCollection(Object, IEqualityComparer<K>) Initializes a new instance of the SynchronizedKeyedCollection<K, T> class with access synchronized by an explicitly specified object and with keys compared in a specified way. Declaration protected SynchronizedKeyedCollection(object syncRoot, IEqualityComparer<K> comparer) Parameters Type Name Description Object syncRoot The object used to synchronize access to the thread-safe collection. IEqualityComparer <K> comparer The IEqualityComparer<T> of type K used to compare key objects of type K for equality. Remarks The generic parameter K used by the IEqualityComparer<T> input parameter is the first generic parameter for this class. This allows us to compare keys for equality in a customized way that can be used, for example, to optimize on the most critical aspects of the comparison. SynchronizedKeyedCollection(Object, IEqualityComparer<K>, Int32) Initializes a new instance of the SynchronizedKeyedCollection<K, T> class with access synchronized by an explicitly specified object and with keys compared in a specified way. Declaration protected SynchronizedKeyedCollection(object syncRoot, IEqualityComparer<K> comparer, int dictionaryCreationThreshold) Parameters Type Name Description Object syncRoot The object used to synchronize access to the thread-safe collection. IEqualityComparer <K> comparer The IEqualityComparer<T> of type K used to compare key objects of type K for equality. Int32 dictionaryCreationThreshold The number of items required to create a dictionary for the collection. Remarks Setting dictionaryCreationThreshold to -1 assigns the MaxValue (2,147,483,647; hexadecimal 0x7FFFFFFF) to it. Properties Dictionary Gets the dictionary associated with the collection. Declaration protected IDictionary<K, T> Dictionary { get; } Property Value Type Description IDictionary <K, T> The IDictionary<TKey,TValue> that contains the key-item pairs for the collection. Item[K] Gets the items with a specified key from the collection. Declaration public T this[K key] { get; } Parameters Type Name Description K key The key for the item being retrieved. Property Value Type Description T The item of type T from the collection with the key specified. Methods ChangeItemKey(T, K) Changes the key for a specified item in the synchronized collection. Declaration protected void ChangeItemKey(T item, K newKey) Parameters Type Name Description T item The item whose key is being changed. K newKey The new key for the specified item. ClearItems() Clears all items from the collection. Declaration protected override void ClearItems() Overrides SynchronizedCollection<T>.ClearItems() Contains(K) Returns a value that indicates whether the collection contains an item with a specified key. Declaration public bool Contains(K key) Parameters Type Name Description K key The key of type K being tested for. Returns Type Description Boolean true if the collection contains an item with the key specified; otherwise, false . GetKeyForItem(T) When overridden in a derived class, gets the key for a specified item. Declaration protected abstract K GetKeyForItem(T item) Parameters Type Name Description T item The item of type T whose key is being retrieved. Returns Type Description K The key of type K for the specified item of type T . InsertItem(Int32, T) Inserts an item into the collection at a specified location. Declaration protected override void InsertItem(int index, T item) Parameters Type Name Description Int32 index The zero-based index that specifies the insertion location for the item in the collection. T item The item of type T to be inserted into the collection. Overrides SynchronizedCollection<T>.InsertItem(Int32, T) Remove(K) Removes an item with a specified key from the collection and returns a value that indicates whether an item was removed. Declaration public bool Remove(K key) Parameters Type Name Description K key The key of the item to be removed. Returns Type Description Boolean true if an item with the specified key was removed; otherwise, false . RemoveItem(Int32) Removes an item at a specified location from the collection. Declaration protected override void RemoveItem(int index) Parameters Type Name Description Int32 index The zero-based index that specifies the location of the item that is removed from the collection. Overrides SynchronizedCollection<T>.RemoveItem(Int32) SetItem(Int32, T) Replaces an item at a specified location of the collection with a new item. Declaration protected override void SetItem(int index, T item) Parameters Type Name Description Int32 index The zero-based index that specifies the insertion location for the item in the collection. T item The item of type T to be inserted into the collection. Overrides SynchronizedCollection<T>.SetItem(Int32, T) Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable System.Collections.IList System.Collections.ICollection"
  },
  "api-corewcf/CoreWCF.CommunicationException.html": {
    "href": "api-corewcf/CoreWCF.CommunicationException.html",
    "title": "Class CommunicationException",
    "keywords": "Class CommunicationException Represents a communication error in either the service or client application. Inheritance Object CommunicationException ActionNotSupportedException AddressAlreadyInUseException CommunicationObjectAbortedException CommunicationObjectFaultedException EndpointNotFoundException FaultException ProtocolException MessageSecurityException SecurityNegotiationException ServerTooBusyException ServiceActivationException Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class CommunicationException : Exception Remarks Robust client and service Windows Communication Foundation (WCF) applications handle CommunicationException objects that may be thrown during communication. There are also two CommunicationException -derived exception types ( FaultException and FaultException ) that clients also often expect. Therefore, in order to prevent the generic CommunicationException handler from catching these more specific exception types, catch these exceptions prior to handling CommunicationException . FaultException > objects are thrown on the client when a SOAP fault that is specified in the operation contract is received in response to a two-way operation (that is, a method with an OperationContractAttribute attribute with IsOneWay set to false ). FaultException objects are thrown when a listener receives a SOAP fault that is not expected or specified in the operation contract. This usually occurs when the application is being debugged and the service has the IncludeExceptionDetailInFaults property set to true . Note When implementing custom channels and binding elements, it is strongly recommended that your components throw only TimeoutException or CommunicationException -derived objects. In the case where your components throw a recoverable exception that is specific to the component, wrap that exception inside a CommunicationException object. For more details about designing and using the WCF fault system, see Specifying and Handling Faults in Contracts and Services . Important The WCF Runtime will not throw a CommunicationException that is unsafe to handle at the point where it leaves the WCF Runtime and enters user code. Constructors CommunicationException() Initializes a new instance of the CommunicationException class. Declaration public CommunicationException() CommunicationException(SerializationInfo, StreamingContext) Initializes a new instance of the CommunicationException class, using the specified serialization information and context objects. Declaration protected CommunicationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info Information relevant to the deserialization process. StreamingContext context The context of the deserialization process. CommunicationException(String) Initializes a new instance of the CommunicationException class, using the specified message. Declaration public CommunicationException(string message) Parameters Type Name Description String message The description of the error condition. CommunicationException(String, Exception) Initializes a new instance of the CommunicationException class, using the specified message and the inner exception. Declaration public CommunicationException(string message, Exception innerException) Parameters Type Name Description String message The description of the error condition. Exception innerException The inner exception to be used."
  },
  "api-corewcf/CoreWCF.CommunicationObjectAbortedException.html": {
    "href": "api-corewcf/CoreWCF.CommunicationObjectAbortedException.html",
    "title": "Class CommunicationObjectAbortedException",
    "keywords": "Class CommunicationObjectAbortedException The exception that is thrown when the call is to an ICommunicationObject object that has aborted. Inheritance Object CommunicationException CommunicationObjectAbortedException Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class CommunicationObjectAbortedException : CommunicationException Remarks CommunicationObjectAbortedException is a derived class of CommunicationException and can occur in correct applications. Because typically the code that calls the Abort() method reports the error condition that caused the call to Abort() , this exception indicates that the call failed but the most useful error information is elsewhere. Constructors CommunicationObjectAbortedException() Initializes a new instance of the CommunicationObjectAbortedException class. Declaration public CommunicationObjectAbortedException() CommunicationObjectAbortedException(String) Initializes a new instance of the CommunicationObjectAbortedException class with the specified message. Declaration public CommunicationObjectAbortedException(string message) Parameters Type Name Description String message The message carried in the exception. Remarks Creates a new CommunicationObjectAbortedException using the specified message . CommunicationObjectAbortedException(String, Exception) Initializes a new instance of the CommunicationObjectAbortedException class using the specified message and inner exception. Declaration public CommunicationObjectAbortedException(string message, Exception innerException) Parameters Type Name Description String message The exception message. Exception innerException The inner exception. Remarks Creates a new CommunicationObjectAbortedException using the specified message and innerException ."
  },
  "api-corewcf/CoreWCF.CommunicationObjectFaultedException.html": {
    "href": "api-corewcf/CoreWCF.CommunicationObjectFaultedException.html",
    "title": "Class CommunicationObjectFaultedException",
    "keywords": "Class CommunicationObjectFaultedException The exception that is thrown when a call is made to a communication object that has faulted. Inheritance Object CommunicationException CommunicationObjectFaultedException Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class CommunicationObjectFaultedException : CommunicationException Remarks A CommunicationObjectFaultedException is thrown when a call is made to a faulted communication object. CommunicationObjectFaultedException is a derived class of CommunicationException and can occur in correct applications. Because typically the code that calls the Abort() method reports the error condition that caused the call to Abort() , this exception indicates that the call failed but the most useful error information is elsewhere. Note If an object is faulted with several pending calls, only one call throws a specific exception; the others throw CommunicationObjectFaultedException . Constructors CommunicationObjectFaultedException() Initializes a new instance of the CommunicationObjectFaultedException class. Declaration public CommunicationObjectFaultedException() Remarks Creates a new CommunicationObjectFaultedException . CommunicationObjectFaultedException(String) Initializes a new instance of the CommunicationObjectFaultedException class using the specified message. Declaration public CommunicationObjectFaultedException(string message) Parameters Type Name Description String message The message that describes the exception. Remarks Creates a new CommunicationObjectFaultedException using the specified message. CommunicationObjectFaultedException(String, Exception) Initializes a new instance of the CommunicationObjectFaultedException class using the specified message and inner exception. Declaration public CommunicationObjectFaultedException(string message, Exception innerException) Parameters Type Name Description String message The exception message. Exception innerException The inner exception. Remarks Creates a new CommunicationObjectFaultedException using the specified message and innerException."
  },
  "api-corewcf/CoreWCF.CommunicationState.html": {
    "href": "api-corewcf/CoreWCF.CommunicationState.html",
    "title": "Class CommunicationState",
    "keywords": "Class CommunicationState Defines the states in which an can exist. Inheritance Object CommunicationState Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class CommunicationState : Enum Remarks This enumeration defines the states that are valid for all communication objects in the system, including channels, listeners, factories, dispatchers, and service hosts. The methods that manage transitions between these states and the events that can be associated with them are defined in the ICommunicationObject interface. The state of an object can be obtained using the State property. There are four main states and two transient states that a communication object can occupy. The main states are: Created Opened Closed Faulted The two transitory states that a communication object can occupy when transitioning between these main states are: Opening Closing The communication object can be configured in the Created state. For example, its properties can be changed, and its events can be registered. No input or output can occur in this state. So messages, for example, cannot be sent or received from a channel in this state. The Opening is a temporary state that the communication object enters when the Open method is invoked. Unless otherwise noted on derived classes, objects in the opening state cannot be configured. This transition state can only be entered from the Created state. Objects transition to the Opened state when the open process completes. This transition to the Opened state is only valid from the Opening state. Unless otherwise noted on derived classes, the configuration of the object is now disabled. At this point, the object is fully usable for message transfers. The Closing is a temporary state that the object enters when the Close method is invoked for a graceful shutdown or the object is aborted. At this point, the object becomes (if not already) unusable. This transition is valid from any state except the Closed state. The Closed state is equivalent to being disposed and the configuration of the object can still be inspected. The Faulted state is used to indicate that the object has transitioned to a state where it can no longer be used. There are two primary scenarios where this can happen: If the Open method fails for any reason, the object transitions to the faulted state. If a session-based channel detects an error that it cannot recover from, it transitions to the faulted state. This can happen for instance if there is a protocol error (that is, it receives a protocol message at an invalid time) or if the remote endpoint aborts the session. An object in the Faulted state is not closed and may be holding resources. The Abort method should be used to close an object that has faulted. If Close is called on an object in the Faulted state, a CommunicationObjectFaultedException is thrown because the object cannot be gracefully closed. Fields Closed Declaration public const CommunicationState Closed Field Value Type Description CommunicationState Indicates that the communication object has been instantiated and is configurable, but not yet open or ready for use. Closing Declaration public const CommunicationState Closing Field Value Type Description CommunicationState Indicates that the communication object is transitioning to the Closed state. Created Declaration public const CommunicationState Created Field Value Type Description CommunicationState Indicates that the communication object has been instantiated and is configurable, but not yet open or ready for use. Faulted Declaration public const CommunicationState Faulted Field Value Type Description CommunicationState Indicates that the communication object has encountered an error or fault from which it cannot recover and from which it is no longer usable. Opened Declaration public const CommunicationState Opened Field Value Type Description CommunicationState Indicates that the communication object is now open and ready to be used. Opening Declaration public const CommunicationState Opening Field Value Type Description CommunicationState Indicates that the communication object is being transitioned from the Created state to the Opened state. value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.ConcurrencyMode.html": {
    "href": "api-corewcf/CoreWCF.ConcurrencyMode.html",
    "title": "Class ConcurrencyMode",
    "keywords": "Class ConcurrencyMode Specifies the concurrency options for the properties in a conceptual model. Inheritance Object ConcurrencyMode Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class ConcurrencyMode : Enum Remarks ConcurrencyMode is used in conjunction with the ConcurrencyMode property to specify whether a service class supports single-threaded or multi-threaded modes of operation. A single-threaded operation can be either reentrant or non-reentrant. The following table shows when Windows Communication Foundation (WCF) permits an operation to be invoked while another one is in progress, depending upon the ConcurrencyMode . ConcurrencyMode Value ConcurrencyMode Value Single Never. Reentrant Only while invoking another service or a callback. Multiple Always. Fields Multiple Declaration public const ConcurrencyMode Multiple Field Value Type Description ConcurrencyMode The service instance is multi-threaded. No synchronization guarantees are made. Because other threads can change your service object at any time, you must handle synchronization and state consistency at all times. Reentrant Declaration public const ConcurrencyMode Reentrant Field Value Type Description ConcurrencyMode The service instance is single-threaded and accepts reentrant calls. The reentrant service accepts calls when you call another service; it is therefore your responsibility to leave your object state consistent before callouts and you must confirm that operation-local data is valid after callouts. Note that the service instance is unlocked only by calling another service over a WCF channel. In this case, the called service can reenter the first service via a callback. If the first service is not reentrant, the sequence of calls results in a deadlock. For details, see ConcurrencyMode . Single Declaration public const ConcurrencyMode Single Field Value Type Description ConcurrencyMode The service instance is single-threaded and does not accept reentrant calls. If the InstanceContextMode property is Single , and additional messages arrive while the instance services a call, these messages must wait until the service is available or until the messages time out. value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.Configuration.AddressHeaderCollectionElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.AddressHeaderCollectionElement.html",
    "title": "Class AddressHeaderCollectionElement",
    "keywords": "Class AddressHeaderCollectionElement Represents the configuration element that contains a collection of address headers. This class cannot be inherited. Inheritance Object ServiceModelConfigurationElement AddressHeaderCollectionElement Inherited Members ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public sealed class AddressHeaderCollectionElement : ServiceModelConfigurationElement Constructors AddressHeaderCollectionElement() Initializes a new instance of the AddressHeaderCollectionElement class. Declaration public AddressHeaderCollectionElement() Properties Headers Gets or sets a collection of address headers. Declaration public AddressHeaderCollection Headers { get; set; } Property Value Type Description AddressHeaderCollection A collection of address headers. Methods DeserializeElement(XmlReader, Boolean) Reads XML from the configuration file. Declaration protected override void DeserializeElement(XmlReader reader, bool serializeCollectionKey) Parameters Type Name Description XmlReader reader The XmlReader that reads from the configuration file. Boolean serializeCollectionKey true to serialize only the collection key properties; otherwise, false . SerializeToXmlElement(XmlWriter, String) Writes the outer tags of this configuration element to the configuration file when implemented in a derived class. Declaration protected override bool SerializeToXmlElement(XmlWriter writer, string elementName) Parameters Type Name Description XmlWriter writer String elementName The name of the ConfigurationElement to be written. Returns Type Description Boolean true if writing was successful; otherwise, false . Remarks The SerializeToXmlElement method is called after the call to the Unmerge method during serialization. The SerializeToXmlElement method writes out the contents of the configuration element between the beginning and ending tags of the element. Override SerializeToXmlElement to provide a custom serialization method."
  },
  "api-corewcf/CoreWCF.Configuration.AuthenticationMode.html": {
    "href": "api-corewcf/CoreWCF.Configuration.AuthenticationMode.html",
    "title": "Class AuthenticationMode",
    "keywords": "Class AuthenticationMode Specifies the authentication setting used for message exchange. Inheritance Object AuthenticationMode Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public sealed class AuthenticationMode : Enum Fields CertificateOverTransport Specifies that the initiator is authenticated by an X.509 version 3 certificate, and that the responder is authenticated by SSL over HTTPS. Declaration public const AuthenticationMode CertificateOverTransport Field Value Type Description AuthenticationMode IssuedTokenForCertificate Specifies that the initiator is authenticated by an XML symmetric key token, and that the responder is authenticated by an X.509 version 3 certificate. Declaration public const AuthenticationMode IssuedTokenForCertificate Field Value Type Description AuthenticationMode IssuedTokenForSslNegotiated Specifies that the initiator is authenticated by an XML symmetric key token, and that the responder is authenticated by the SOAP implementation of SSL. Declaration public const AuthenticationMode IssuedTokenForSslNegotiated Field Value Type Description AuthenticationMode IssuedTokenOverTransport Specifies that the initiator is authenticated by an XML symmetric key token, and that the responder is authenticated by SSL over HTTPS. Declaration public const AuthenticationMode IssuedTokenOverTransport Field Value Type Description AuthenticationMode SecureConversation Specifies that WS-SecureConversation authentication is used. Declaration public const AuthenticationMode SecureConversation Field Value Type Description AuthenticationMode SspiNegotiatedOverTransport Specifies that the initiator is authenticated by a security context using the Security Service Provider Interface (SSPI), and the responder is authenticated by SSL over HTTPS. Declaration public const AuthenticationMode SspiNegotiatedOverTransport Field Value Type Description AuthenticationMode UserNameOverTransport Specifies that the initiator is authenticated using a username token, and that the responder is authenticated by SSL over HTTPS. Declaration public const AuthenticationMode UserNameOverTransport Field Value Type Description AuthenticationMode value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.Configuration.BasicHttpBindingCollectionElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.BasicHttpBindingCollectionElement.html",
    "title": "Class BasicHttpBindingCollectionElement",
    "keywords": "Class BasicHttpBindingCollectionElement Represents a configuration section that holds a collection of BasicHttpContextBindingElement instances. Inheritance Object BindingCollectionElement StandardBindingCollectionElement < BasicHttpBinding , BasicHttpBindingElement > BasicHttpBindingCollectionElement Inherited Members StandardBindingCollectionElement<BasicHttpBinding, BasicHttpBindingElement>.Bindings Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class BasicHttpBindingCollectionElement : StandardBindingCollectionElement<BasicHttpBinding, BasicHttpBindingElement> Constructors BasicHttpBindingCollectionElement() Initializes a new instance of the BasicHttpContextBindingCollectionElement class. Declaration public BasicHttpBindingCollectionElement()"
  },
  "api-corewcf/CoreWCF.Configuration.BasicHttpBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.BasicHttpBindingElement.html",
    "title": "Class BasicHttpBindingElement",
    "keywords": "Class BasicHttpBindingElement Represents an XML element that specifies a binding used to communicate with WS-I Basic Profile 1.1-conformant Web Services like ASMX-based services or to accept messages from ASMX-based clients. Inheritance Object ServiceModelConfigurationElement StandardBindingElement HttpBindingBaseElement BasicHttpBindingElement Implements IDefaultCommunicationTimeouts IStandardBindingElement Inherited Members HttpBindingBaseElement.AllowCookies HttpBindingBaseElement.BypassProxyOnLocal HttpBindingBaseElement.HostNameComparisonMode HttpBindingBaseElement.MaxBufferPoolSize HttpBindingBaseElement.MaxBufferSize HttpBindingBaseElement.MaxReceivedMessageSize HttpBindingBaseElement.ProxyAddress HttpBindingBaseElement.TextEncoding HttpBindingBaseElement.TransferMode HttpBindingBaseElement.UseDefaultWebProxy HttpBindingBaseElement.ReaderQuotas StandardBindingElement.Name StandardBindingElement.CloseTimeout StandardBindingElement.OpenTimeout StandardBindingElement.ReceiveTimeout StandardBindingElement.SendTimeout ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class BasicHttpBindingElement : HttpBindingBaseElement, IDefaultCommunicationTimeouts, IStandardBindingElement Constructors BasicHttpBindingElement() Initializes a new instance of the BasicHttpBindingElement class. Declaration public BasicHttpBindingElement() BasicHttpBindingElement(String) Initializes a new instance of the BasicHttpBindingElement class with a name. Declaration public BasicHttpBindingElement(string name) Parameters Type Name Description String name The name of the binding element. Properties Security Gets or sets the type of security to be used with this binding. Declaration public BasicHttpSecurityElement Security { get; } Property Value Type Description BasicHttpSecurityElement The BasicHttpSecurityElement that specifies the type of security to be used with this binding. Methods CreateBinding() Declaration public override Binding CreateBinding() Returns Type Description Binding Overrides StandardBindingElement.CreateBinding() Implements IDefaultCommunicationTimeouts IStandardBindingElement"
  },
  "api-corewcf/CoreWCF.Configuration.BasicHttpMessageSecurityElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.BasicHttpMessageSecurityElement.html",
    "title": "Class BasicHttpMessageSecurityElement",
    "keywords": "Class BasicHttpMessageSecurityElement An XML element that configures HTTP message security. Inheritance Object ServiceModelConfigurationElement BasicHttpMessageSecurityElement Inherited Members ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class BasicHttpMessageSecurityElement : ServiceModelConfigurationElement Constructors BasicHttpMessageSecurityElement() Initializes a new instance of the BasicHttpMessageSecurityElement class. Declaration public BasicHttpMessageSecurityElement() Properties AlgorithmSuite Specifies the algorithms to use with the BasicHttpMessageSecurityElement class. Declaration public SecurityAlgorithmSuite AlgorithmSuite { get; set; } Property Value Type Description SecurityAlgorithmSuite A SecurityAlgorithmSuite . The default is Basic256 . ClientCredentialType Specifies the type of client credential to use with the BasicHttpMessageSecurityElement class. Declaration public BasicHttpMessageCredentialType ClientCredentialType { get; set; } Property Value Type Description BasicHttpMessageCredentialType A BasicHttpMessageCredentialType . The default is UserName."
  },
  "api-corewcf/CoreWCF.Configuration.BasicHttpSecurityElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.BasicHttpSecurityElement.html",
    "title": "Class BasicHttpSecurityElement",
    "keywords": "Class BasicHttpSecurityElement Represents an XML element that configures the security for a basic HTTP service. Inheritance Object ServiceModelConfigurationElement BasicHttpSecurityElement Inherited Members ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class BasicHttpSecurityElement : ServiceModelConfigurationElement Constructors BasicHttpSecurityElement() Initializes a new instance of the BasicHttpSecurityElement class. Declaration public BasicHttpSecurityElement() Properties Message Gets an XML element that configures the message security for a basic HTTP service. Declaration public BasicHttpMessageSecurityElement Message { get; } Property Value Type Description BasicHttpMessageSecurityElement An XML element that configures the message security for a basic HTTP service. Mode Declaration public BasicHttpSecurityMode Mode { get; set; } Property Value Type Description BasicHttpSecurityMode The security mode for a basic HTTP service. Transport Declaration public HttpTransportSecurityElement Transport { get; } Property Value Type Description HttpTransportSecurityElement"
  },
  "api-corewcf/CoreWCF.Configuration.BinaryMessageEncodingElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.BinaryMessageEncodingElement.html",
    "title": "Class BinaryMessageEncodingElement",
    "keywords": "Class BinaryMessageEncodingElement Represents a message encoder that encodes Windows Communication Foundation (WCF) messages in binary on the wire. This class cannot be inherited. Inheritance Object ServiceModelConfigurationElement ServiceModelExtensionElement BindingElementExtensionElement BinaryMessageEncodingElement Inherited Members ServiceModelExtensionElement.ExtensionCollectionName ServiceModelExtensionElement.ConfigurationElementName ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public sealed class BinaryMessageEncodingElement : BindingElementExtensionElement Remarks Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. The BinaryMessageEncodingElement class represents the configuration section that specifies the character encoding and message versioning used for binary-based XML messages. The binary message encoder encodes WCF messages in binary on the wire. While this encoding results in very fast transmission of messages, interoperability based on the WS-* standards is lost. The MtomMessageEncodingElement class represents the configuration section that specifies the character encoding and message versioning used for a message using a Message Transmission Optimization Mechanism (MTOM) encoding. MTOM is an efficient technology for transmitting binary data in WCF messages. The MTOM encoder attempts to balance between efficiency and interoperability. The MTOM encoding transmits most XML in textual form, but optimizes large blocks of binary data by transmitting them as-is, without conversion to text. The TextMessageEncodingElement class represents a configuration section that specifies a text encoder used to create text-based messages on the wire. Messages produced by this encoder are suitable for WS-* based interoperability. Web service or Web service client can generally understand textual XML. However, transmitting large blocks of binary data as text is the least efficient method for encoding XML messages. Constructors BinaryMessageEncodingElement() Initializes a new instance of the BindingElementExtensionElement class. Declaration public BinaryMessageEncodingElement() Properties BindingElementType When overridden in a derived class, gets the Type object that represents the custom binding element. Declaration public override Type BindingElementType { get; } Property Value Type Description Type A Type object that represents the custom binding type. Overrides BindingElementExtensionElement.BindingElementType Remarks Override and implement the BindingElementType property to return the type of the custom binding element this BindingElementExtensionElement associates with the configuration system. CompressionFormat Gets or sets the compression format used in the binary message encoding element. Declaration public CompressionFormat CompressionFormat { get; set; } Property Value Type Description CompressionFormat The compression format used. MaxReadPoolSize Gets or sets a value that specifies the maximum number of messages that can be read simultaneously without allocating new readers. Declaration public int MaxReadPoolSize { get; set; } Property Value Type Description Int32 The maximum number of messages that can be read simultaneously without allocating new readers. The default is 64. Remarks Larger pool sizes make the system more tolerant to activity spikes at the cost of a larger working set. MaxSessionSize Gets or sets a value that specifies the size, in bytes, of the buffer used for encoding. Declaration public int MaxSessionSize { get; set; } Property Value Type Description Int32 The size, in bytes, of the buffer used for encoding. The default is 2048. Remarks A larger buffer increases encoding speed at the expense of the size of the working set. MaxWritePoolSize Gets or sets a value that specifies the maximum number of messages that can be sent simultaneously without allocating new writers. Declaration public int MaxWritePoolSize { get; set; } Property Value Type Description Int32 The maximum number of messages that can be sent simultaneously without allocating new writers. The default is 16. Remarks Larger pool sizes make the system more tolerant to activity spikes at the cost of a larger working set. ReaderQuotas Gets or sets constraints on the complexity of SOAP messages that can be processed by endpoints configured with this binding. Declaration public XmlDictionaryReaderQuotasElement ReaderQuotas { get; } Property Value Type Description XmlDictionaryReaderQuotasElement The XmlDictionaryReaderQuotas that specifies the complexity constraints. Remarks The complexity constraints include items such as a maximum element depth, a maximum length for string content within the message. The constraints protect against a class of denial of service (DOS) attacks that attempt to use message complexity to tie up endpoint processing resources. Methods ApplyConfiguration(BindingElement) Applies the content of a specified binding element to this binding configuration section. Declaration public override void ApplyConfiguration(BindingElement bindingElement) Parameters Type Name Description BindingElement bindingElement A binding element. Overrides BindingElementExtensionElement.ApplyConfiguration(BindingElement) CopyFrom(ServiceModelExtensionElement) Copies the content of the specified configuration section to this configuration section. Declaration public override void CopyFrom(ServiceModelExtensionElement from) Parameters Type Name Description ServiceModelExtensionElement from The configuration section to be copied. Overrides ServiceModelExtensionElement.CopyFrom(ServiceModelExtensionElement) CreateBindingElement() When overridden in a derived class, returns a custom binding element object. Declaration protected override BindingElement CreateBindingElement() Returns Type Description BindingElement A custom BindingElement object. Overrides BindingElementExtensionElement.CreateBindingElement() InitializeFrom(BindingElement) Initializes this binding configuration section with the content of the specified binding element. Declaration protected override void InitializeFrom(BindingElement bindingElement) Parameters Type Name Description BindingElement bindingElement A binding element. Overrides BindingElementExtensionElement.InitializeFrom(BindingElement)"
  },
  "api-corewcf/CoreWCF.Configuration.BindingCollectionElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.BindingCollectionElement.html",
    "title": "Class BindingCollectionElement",
    "keywords": "Class BindingCollectionElement Represents a configuration section that contains a collection of binding elements, each of which describes an aspect of how an endpoint communicates with other endpoints, that is built, consistently, into a channel factory on the client and a channel listener on the service. Inheritance Object BindingCollectionElement StandardBindingCollectionElement<TStandardBinding, TBindingConfiguration> Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public abstract class BindingCollectionElement : ConfigurationElement Constructors BindingCollectionElement() Initializes a new instance of the BindingCollectionElement class. Declaration protected BindingCollectionElement()"
  },
  "api-corewcf/CoreWCF.Configuration.BindingElementExtensionElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.BindingElementExtensionElement.html",
    "title": "Class BindingElementExtensionElement",
    "keywords": "Class BindingElementExtensionElement Enables the use of a custom BindingElement implementation from a machine or application configuration file. Inheritance Object ServiceModelConfigurationElement ServiceModelExtensionElement BindingElementExtensionElement BinaryMessageEncodingElement MtomMessageEncodingElement SecurityElementBase SslStreamSecurityElement TextMessageEncodingElement TransportElement WindowsStreamSecurityElement Inherited Members ServiceModelExtensionElement.CopyFrom(ServiceModelExtensionElement) ServiceModelExtensionElement.ExtensionCollectionName ServiceModelExtensionElement.ConfigurationElementName ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public abstract class BindingElementExtensionElement : ServiceModelExtensionElement Remarks You should derive from the BindingElementExtensionElement class to use a custom BindingElement implementation from a machine or application configuration file. Once a BindingElementExtensionElement instance has been created, a custom binding element is returned. You can use this in an application configuration file by using the <add> element and setting the type attribute to the BindingElementExtensionElement class, and the name attribute to the custom binding element. Constructors BindingElementExtensionElement() Initializes a new instance of the BindingElementExtensionElement class. Declaration protected BindingElementExtensionElement() Properties BindingElementType When overridden in a derived class, gets the Type object that represents the custom binding element. Declaration public abstract Type BindingElementType { get; } Property Value Type Description Type A Type object that represents the custom binding type. Methods ApplyConfiguration(BindingElement) Applies the content of a specified binding element to this binding configuration element. Declaration public virtual void ApplyConfiguration(BindingElement bindingElement) Parameters Type Name Description BindingElement bindingElement A binding element. CreateBindingElement() When overridden in a derived class, returns a custom binding element object. Declaration protected abstract BindingElement CreateBindingElement() Returns Type Description BindingElement A custom BindingElement object. InitializeFrom(BindingElement) Initializes this binding configuration section with the content of the specified binding element. Declaration protected virtual void InitializeFrom(BindingElement bindingElement) Parameters Type Name Description BindingElement bindingElement A binding element."
  },
  "api-corewcf/CoreWCF.Configuration.BindingNotFoundException.html": {
    "href": "api-corewcf/CoreWCF.Configuration.BindingNotFoundException.html",
    "title": "Class BindingNotFoundException",
    "keywords": "Class BindingNotFoundException Inheritance Object BindingNotFoundException Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class BindingNotFoundException : Exception Constructors BindingNotFoundException() Declaration public BindingNotFoundException() BindingNotFoundException(String) Declaration public BindingNotFoundException(string message) Parameters Type Name Description String message BindingNotFoundException(String, Exception) Declaration public BindingNotFoundException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException"
  },
  "api-corewcf/CoreWCF.Configuration.BindingsSection.html": {
    "href": "api-corewcf/CoreWCF.Configuration.BindingsSection.html",
    "title": "Class BindingsSection",
    "keywords": "Class BindingsSection Represents a collection of binding elements. This class cannot be inherited. Inheritance Object BindingsSection Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public sealed class BindingsSection : ConfigurationSection Constructors BindingsSection() Initializes a new instance of the BindingsSection class. Declaration public BindingsSection() Properties BasicHttpBinding Gets the configuration element that contains a collection of BasicHttpBindingElement objects. Declaration public BasicHttpBindingCollectionElement BasicHttpBinding { get; } Property Value Type Description BasicHttpBindingCollectionElement A BasicHttpBindingCollectionElement object that defines the configuration section that contains a collection of BasicHttpBindingElement objects. CustomBinding Gets the configuration section that provides full control over the messaging stack for the user. Declaration public CustomBindingCollectionElement CustomBinding { get; } Property Value Type Description CustomBindingCollectionElement A CustomBindingCollectionElement object that contains a collection of custom binding elements. NetHttpBinding Gets the net HTTPS binding used. Declaration public NetHttpBindingCollectionElement NetHttpBinding { get; } Property Value Type Description NetHttpBindingCollectionElement A NetHttpsBindingCollectionElement object that defines the configuration section that contains a collection of NetHttpsBindingElement objects. NetTcpBinding Gets the configuration element that contains a collection of NetTcpBindingElement objects. Declaration public NetTcpBindingCollectionElement NetTcpBinding { get; } Property Value Type Description NetTcpBindingCollectionElement A NetTcpBindingCollectionElement that contains a collection of NetTcpBindingElement objects. wsHttpBinding Gets the configuration element that contains a collection of WSHttpBindingElement objects. Declaration public WSHttpBindingCollectionElement wsHttpBinding { get; } Property Value Type Description WSHttpBindingCollectionElement A WSHttpBindingCollectionElement that contains a collection of WSHttpBindingElement objects."
  },
  "api-corewcf/CoreWCF.Configuration.ClaimTypeElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ClaimTypeElement.html",
    "title": "Class ClaimTypeElement",
    "keywords": "Class ClaimTypeElement Represents a configuration element that contains the type of claim. This class cannot be inherited. Inheritance Object ClaimTypeElement Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public sealed class ClaimTypeElement : ConfigurationElement Remarks To be added. Constructors ClaimTypeElement() Declaration public ClaimTypeElement() ClaimTypeElement(String, Boolean) Declaration public ClaimTypeElement(string claimType, bool isOptional) Parameters Type Name Description String claimType Boolean isOptional Properties ClaimType Declaration public string ClaimType { get; set; } Property Value Type Description String IsOptional Declaration public bool IsOptional { get; set; } Property Value Type Description Boolean"
  },
  "api-corewcf/CoreWCF.Configuration.ClaimTypeElementCollection.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ClaimTypeElementCollection.html",
    "title": "Class ClaimTypeElementCollection",
    "keywords": "Class ClaimTypeElementCollection Represents a collection of ClaimTypeElement instances. This class cannot be inherited. Inheritance Object ServiceModelConfigurationElementCollection < ClaimTypeElement > ClaimTypeElementCollection Inherited Members ServiceModelConfigurationElementCollection<ClaimTypeElement>.CreateNewElement() Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public sealed class ClaimTypeElementCollection : ServiceModelConfigurationElementCollection<ClaimTypeElement> Remarks To be added. Constructors ClaimTypeElementCollection() Initializes a new instance of the ClaimTypeElementCollection class. Declaration public ClaimTypeElementCollection() Methods GetElementKey(ConfigurationElement) Gets the element key for a specified configuration element when overridden in a derived class. Declaration protected override object GetElementKey(ConfigurationElement element) Parameters Type Name Description ConfigurationElement element The ConfigurationElement to return the key for. Returns Type Description Object An Object that acts as the key for the specified ConfigurationElement ."
  },
  "api-corewcf/CoreWCF.Configuration.ConfigurationManagerExtensions.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ConfigurationManagerExtensions.html",
    "title": "Class ConfigurationManagerExtensions",
    "keywords": "Class ConfigurationManagerExtensions Inheritance Object ConfigurationManagerExtensions Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public static class ConfigurationManagerExtensions : Object Methods AddServiceModelConfigurationManagerFile(IServiceCollection, String) Declaration public static IServiceCollection AddServiceModelConfigurationManagerFile(this IServiceCollection builder, string path) Parameters Type Name Description IServiceCollection builder String path Returns Type Description IServiceCollection"
  },
  "api-corewcf/CoreWCF.Configuration.ConnectionOrientedTransportElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ConnectionOrientedTransportElement.html",
    "title": "Class ConnectionOrientedTransportElement",
    "keywords": "Class ConnectionOrientedTransportElement Represents the configuration element that provides additional configuration settings to connection-oriented transport binding elements, such as TCP and named pipes. Inheritance Object ServiceModelConfigurationElement ServiceModelExtensionElement BindingElementExtensionElement TransportElement ConnectionOrientedTransportElement TcpTransportElement Inherited Members TransportElement.CreateBindingElement() TransportElement.CreateDefaultBindingElement() TransportElement.ManualAddressing TransportElement.MaxBufferPoolSize TransportElement.MaxReceivedMessageSize BindingElementExtensionElement.BindingElementType ServiceModelExtensionElement.ExtensionCollectionName ServiceModelExtensionElement.ConfigurationElementName ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public abstract class ConnectionOrientedTransportElement : TransportElement Remarks To be added. Properties ChannelInitializationTimeout Declaration public TimeSpan ChannelInitializationTimeout { get; set; } Property Value Type Description TimeSpan ConnectionBufferSize Declaration public int ConnectionBufferSize { get; set; } Property Value Type Description Int32 HostNameComparisonMode Declaration public HostNameComparisonMode HostNameComparisonMode { get; set; } Property Value Type Description HostNameComparisonMode MaxBufferSize Declaration public int MaxBufferSize { get; set; } Property Value Type Description Int32 MaxOutputDelay Declaration public TimeSpan MaxOutputDelay { get; set; } Property Value Type Description TimeSpan MaxPendingAccepts Declaration public int MaxPendingAccepts { get; set; } Property Value Type Description Int32 MaxPendingConnections Declaration public int MaxPendingConnections { get; set; } Property Value Type Description Int32 TransferMode Declaration public TransferMode TransferMode { get; set; } Property Value Type Description TransferMode Methods ApplyConfiguration(BindingElement) Declaration public override void ApplyConfiguration(BindingElement bindingElement) Parameters Type Name Description BindingElement bindingElement Overrides TransportElement.ApplyConfiguration(BindingElement) CopyFrom(ServiceModelExtensionElement) Declaration public override void CopyFrom(ServiceModelExtensionElement from) Parameters Type Name Description ServiceModelExtensionElement from Overrides TransportElement.CopyFrom(ServiceModelExtensionElement) InitializeFrom(BindingElement) Declaration protected override void InitializeFrom(BindingElement bindingElement) Parameters Type Name Description BindingElement bindingElement Overrides TransportElement.InitializeFrom(BindingElement)"
  },
  "api-corewcf/CoreWCF.Configuration.CustomBindingCollectionElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.CustomBindingCollectionElement.html",
    "title": "Class CustomBindingCollectionElement",
    "keywords": "Class CustomBindingCollectionElement Represents a collection of configuration elements that provide full control over the messaging stack for the user. This class cannot be inherited. Inheritance Object BindingCollectionElement StandardBindingCollectionElement < CustomBinding , CustomBindingElement > CustomBindingCollectionElement Inherited Members StandardBindingCollectionElement<CustomBinding, CustomBindingElement>.Bindings Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class CustomBindingCollectionElement : StandardBindingCollectionElement<CustomBinding, CustomBindingElement> Remarks Custom bindings provide full control over the Windows Communication Foundation (WCF) messaging stack. An individual binding defines the message stack by specifying the configuration elements for the stack elements in the order they appear on the stack. Each element defines and configures the one element of the stack. There must be one and only one transport element in each custom binding. Without this element, the messaging stack is incomplete. The order in which elements appear in the stack matters, because it is the order in which operations are applied to the message. The recommended order of stack elements is the following: Transactions (optional) Reliable Messaging (optional) Security (optional) Transport Encoder (optional) Constructors CustomBindingCollectionElement() Declaration public CustomBindingCollectionElement()"
  },
  "api-corewcf/CoreWCF.Configuration.CustomBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.CustomBindingElement.html",
    "title": "Class CustomBindingElement",
    "keywords": "Class CustomBindingElement Represents the configuration section that provides full control over the messaging stack for the user. Inheritance Object ServiceModelConfigurationElement ServiceModelExtensionCollectionElement < BindingElementExtensionElement > NamedServiceModelExtensionCollectionElement < BindingElementExtensionElement > CustomBindingElement Implements ICollection < BindingElementExtensionElement > IEnumerable < BindingElementExtensionElement > IEnumerable IDefaultCommunicationTimeouts IStandardBindingElement Inherited Members NamedServiceModelExtensionCollectionElement<BindingElementExtensionElement>.Name NamedServiceModelExtensionCollectionElement<BindingElementExtensionElement>.Properties ServiceModelExtensionCollectionElement<BindingElementExtensionElement>.Clear() ServiceModelExtensionCollectionElement<BindingElementExtensionElement>.Contains(BindingElementExtensionElement) ServiceModelExtensionCollectionElement<BindingElementExtensionElement>.ContainsKey(Type) ServiceModelExtensionCollectionElement<BindingElementExtensionElement>.ContainsKey(String) ServiceModelExtensionCollectionElement<BindingElementExtensionElement>.CopyTo(BindingElementExtensionElement[], Int32) ServiceModelExtensionCollectionElement<BindingElementExtensionElement>.DeserializeElement(XmlReader, Boolean) ServiceModelExtensionCollectionElement<BindingElementExtensionElement>.GetEnumerator() ServiceModelExtensionCollectionElement<BindingElementExtensionElement>.IsModified() ServiceModelExtensionCollectionElement<BindingElementExtensionElement>.OnDeserializeUnrecognizedElement(String, XmlReader) ServiceModelExtensionCollectionElement<BindingElementExtensionElement>.Remove(BindingElementExtensionElement) ServiceModelExtensionCollectionElement<BindingElementExtensionElement>.Reset(ConfigurationElement) ServiceModelExtensionCollectionElement<BindingElementExtensionElement>.ResetModified() ServiceModelExtensionCollectionElement<BindingElementExtensionElement>.SetIsModified() ServiceModelExtensionCollectionElement<BindingElementExtensionElement>.SetReadOnly() ServiceModelExtensionCollectionElement<BindingElementExtensionElement>.Unmerge(ConfigurationElement, ConfigurationElement, ConfigurationSaveMode) ServiceModelExtensionCollectionElement<BindingElementExtensionElement>.Item[Int32] ServiceModelExtensionCollectionElement<BindingElementExtensionElement>.Item[Type] ServiceModelExtensionCollectionElement<BindingElementExtensionElement>.Count ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public sealed class CustomBindingElement : NamedServiceModelExtensionCollectionElement<BindingElementExtensionElement>, IDefaultCommunicationTimeouts, IStandardBindingElement Remarks Custom bindings provide full control over the Windows Communication Foundation (WCF) messaging stack. An individual binding defines the message stack by specifying the configuration elements for the stack elements in the order they appear on the stack. Each element defines and configures the one element of the stack. There must be one and only one transport element in each custom binding. Without this element, the messaging stack is incomplete. The order in which elements appear in the stack matters, because it is the order in which operations are applied to the message. The recommended order of stack elements is the following: Transactions (optional) Reliable Messaging (optional) Security (optional) Transport Encoder (optional) Constructors CustomBindingElement() Declaration public CustomBindingElement() CustomBindingElement(String) Declaration public CustomBindingElement(string name) Parameters Type Name Description String name Properties CloseTimeout Declaration public TimeSpan CloseTimeout { get; set; } Property Value Type Description TimeSpan OpenTimeout Declaration public TimeSpan OpenTimeout { get; set; } Property Value Type Description TimeSpan ReceiveTimeout Declaration public TimeSpan ReceiveTimeout { get; set; } Property Value Type Description TimeSpan SendTimeout Declaration public TimeSpan SendTimeout { get; set; } Property Value Type Description TimeSpan Methods Add(BindingElementExtensionElement) Declaration public override void Add(BindingElementExtensionElement element) Parameters Type Name Description BindingElementExtensionElement element Overrides CoreWCF.Configuration.ServiceModelExtensionCollectionElement<CoreWCF.Configuration.BindingElementExtensionElement>.Add(CoreWCF.Configuration.BindingElementExtensionElement) ApplyConfiguration(Binding) Declaration public void ApplyConfiguration(Binding binding) Parameters Type Name Description Binding binding CanAdd(BindingElementExtensionElement) Declaration public override bool CanAdd(BindingElementExtensionElement element) Parameters Type Name Description BindingElementExtensionElement element Returns Type Description Boolean Overrides CoreWCF.Configuration.ServiceModelExtensionCollectionElement<CoreWCF.Configuration.BindingElementExtensionElement>.CanAdd(CoreWCF.Configuration.BindingElementExtensionElement) CreateBinding() Declaration public Binding CreateBinding() Returns Type Description Binding Implements System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IDefaultCommunicationTimeouts IStandardBindingElement"
  },
  "api-corewcf/CoreWCF.Configuration.EndpointAddressElementBase.html": {
    "href": "api-corewcf/CoreWCF.Configuration.EndpointAddressElementBase.html",
    "title": "Class EndpointAddressElementBase",
    "keywords": "Class EndpointAddressElementBase An XML element that contains a unique network address that a client uses to communicate with a service endpoint. Inheritance Object ServiceModelConfigurationElement EndpointAddressElementBase IssuedTokenParametersEndpointAddressElement Inherited Members ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class EndpointAddressElementBase : ServiceModelConfigurationElement Remarks To be added. Constructors EndpointAddressElementBase() Declaration protected EndpointAddressElementBase() Properties Address Declaration public Uri Address { get; set; } Property Value Type Description Uri Headers Declaration public AddressHeaderCollectionElement Headers { get; } Property Value Type Description AddressHeaderCollectionElement Methods Copy(EndpointAddressElementBase) Declaration protected void Copy(EndpointAddressElementBase source) Parameters Type Name Description EndpointAddressElementBase source InitializeFrom(EndpointAddress) Declaration public void InitializeFrom(EndpointAddress endpointAddress) Parameters Type Name Description EndpointAddress endpointAddress"
  },
  "api-corewcf/CoreWCF.Configuration.ExtendedProtectionPolicyElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ExtendedProtectionPolicyElement.html",
    "title": "Class ExtendedProtectionPolicyElement",
    "keywords": "Class ExtendedProtectionPolicyElement The class represents a configuration element for an . Inheritance Object ExtendedProtectionPolicyElement Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public sealed class ExtendedProtectionPolicyElement : ConfigurationElement Remarks An <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy> can be configured for server applications using standard configuration files. Constructors ExtendedProtectionPolicyElement() Declaration public ExtendedProtectionPolicyElement() Properties CustomServiceNames Declaration public ServiceNameElementCollection CustomServiceNames { get; } Property Value Type Description ServiceNameElementCollection PolicyEnforcement Declaration public PolicyEnforcement PolicyEnforcement { get; set; } Property Value Type Description PolicyEnforcement Properties Declaration protected override ConfigurationPropertyCollection Properties { get; } Property Value Type Description ConfigurationPropertyCollection ProtectionScenario Declaration public ProtectionScenario ProtectionScenario { get; set; } Property Value Type Description ProtectionScenario Methods BuildPolicy() Declaration public ExtendedProtectionPolicy BuildPolicy() Returns Type Description ExtendedProtectionPolicy"
  },
  "api-corewcf/CoreWCF.Configuration.FramingConnectionHandshakeBuilder.html": {
    "href": "api-corewcf/CoreWCF.Configuration.FramingConnectionHandshakeBuilder.html",
    "title": "Class FramingConnectionHandshakeBuilder",
    "keywords": "Class FramingConnectionHandshakeBuilder Inheritance Object FramingConnectionHandshakeBuilder Implements IFramingConnectionHandshakeBuilder Namespace : CoreWCF.Configuration Assembly : CoreWCF.NetTcp.dll Syntax public class FramingConnectionHandshakeBuilder : Object, IFramingConnectionHandshakeBuilder Constructors FramingConnectionHandshakeBuilder(FramingConnectionHandshakeBuilder) Declaration public FramingConnectionHandshakeBuilder(FramingConnectionHandshakeBuilder connectionHandshakeBuilder) Parameters Type Name Description FramingConnectionHandshakeBuilder connectionHandshakeBuilder FramingConnectionHandshakeBuilder(IServiceProvider) Declaration public FramingConnectionHandshakeBuilder(IServiceProvider serviceProvider) Parameters Type Name Description IServiceProvider serviceProvider Properties HandshakeServices Declaration public IServiceProvider HandshakeServices { get; set; } Property Value Type Description IServiceProvider Properties Declaration public IDictionary<string, object> Properties { get; } Property Value Type Description IDictionary < String , Object > Methods Build() Declaration public HandshakeDelegate Build() Returns Type Description HandshakeDelegate New() Declaration public IFramingConnectionHandshakeBuilder New() Returns Type Description IFramingConnectionHandshakeBuilder Use(Func<HandshakeDelegate, HandshakeDelegate>) Declaration public IFramingConnectionHandshakeBuilder Use(Func<HandshakeDelegate, HandshakeDelegate> middleware) Parameters Type Name Description Func < HandshakeDelegate , HandshakeDelegate > middleware Returns Type Description IFramingConnectionHandshakeBuilder Implements IFramingConnectionHandshakeBuilder"
  },
  "api-corewcf/CoreWCF.Configuration.HandshakeDelegate.html": {
    "href": "api-corewcf/CoreWCF.Configuration.HandshakeDelegate.html",
    "title": "Class HandshakeDelegate",
    "keywords": "Class HandshakeDelegate Inheritance Object HandshakeDelegate Namespace : CoreWCF.Configuration Assembly : CoreWCF.NetTcp.dll Syntax public sealed class HandshakeDelegate : MulticastDelegate Constructors HandshakeDelegate(Object, IntPtr) Declaration public HandshakeDelegate(object object, IntPtr method) Parameters Type Name Description Object object IntPtr method Methods BeginInvoke(FramingConnection, AsyncCallback, Object) Declaration public virtual IAsyncResult BeginInvoke(FramingConnection connection, AsyncCallback callback, object object) Parameters Type Name Description FramingConnection connection AsyncCallback callback Object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual Task EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description Task Invoke(FramingConnection) Declaration public virtual Task Invoke(FramingConnection connection) Parameters Type Name Description FramingConnection connection Returns Type Description Task"
  },
  "api-corewcf/CoreWCF.Configuration.html": {
    "href": "api-corewcf/CoreWCF.Configuration.html",
    "title": "Namespace CoreWCF.Configuration",
    "keywords": "Namespace CoreWCF.Configuration Classes AddressHeaderCollectionElement Represents the configuration element that contains a collection of address headers. This class cannot be inherited. AuthenticationMode Specifies the authentication setting used for message exchange. BasicHttpBindingCollectionElement Represents a configuration section that holds a collection of BasicHttpContextBindingElement instances. BasicHttpBindingElement Represents an XML element that specifies a binding used to communicate with WS-I Basic Profile 1.1-conformant Web Services like ASMX-based services or to accept messages from ASMX-based clients. BasicHttpMessageSecurityElement An XML element that configures HTTP message security. BasicHttpSecurityElement Represents an XML element that configures the security for a basic HTTP service. BinaryMessageEncodingElement Represents a message encoder that encodes Windows Communication Foundation (WCF) messages in binary on the wire. This class cannot be inherited. BindingCollectionElement Represents a configuration section that contains a collection of binding elements, each of which describes an aspect of how an endpoint communicates with other endpoints, that is built, consistently, into a channel factory on the client and a channel listener on the service. BindingElementExtensionElement Enables the use of a custom BindingElement implementation from a machine or application configuration file. BindingNotFoundException BindingsSection Represents a collection of binding elements. This class cannot be inherited. ClaimTypeElement Represents a configuration element that contains the type of claim. This class cannot be inherited. ClaimTypeElementCollection Represents a collection of ClaimTypeElement instances. This class cannot be inherited. ConfigurationManagerExtensions ConnectionOrientedTransportElement Represents the configuration element that provides additional configuration settings to connection-oriented transport binding elements, such as TCP and named pipes. CustomBindingCollectionElement Represents a collection of configuration elements that provide full control over the messaging stack for the user. This class cannot be inherited. CustomBindingElement Represents the configuration section that provides full control over the messaging stack for the user. EndpointAddressElementBase An XML element that contains a unique network address that a client uses to communicate with a service endpoint. ExtendedProtectionPolicyElement The class represents a configuration element for an . FramingConnectionHandshakeBuilder HandshakeDelegate HttpBindingBaseElement Represents HttpBindingBaseElement for HttpBindingBase. HttpsTransportElement Represents the configuration element that specifies an HTTPS transport for transmitting SOAP messages. HttpTransportElement Represents the configuration element that specifies an HTTP transport for transmitting SOAP messages. HttpTransportSecurityElement Represents a configuration element that controls authentication parameters for the HTTP transport. This class cannot be inherited. IssuedTokenParametersElement Represents a configuration element that specifies additional settings for an issued token. This class cannot be inherited. IssuedTokenParametersEndpointAddressElement Represents a configuration element that specifies an endpoint that issues a security token. This class cannot be inherited. LocalServiceSecuritySettingsElement Configures the security settings of a local service. This class cannot be inherited. MapExtensions Extension methods for the MapMiddleware . MapMiddleware Represents a middleware that maps a request path to a sub-request pipeline. MapOptions Options for the MapMiddleware . MessageSecurityOverHttpElement Defines the security configuration settings for message sent using HTTP. MessageSecurityOverTcpElement Defines the configuration settings for the security of a message sent using TCP. This class cannot be inherited. MetadataServiceCollectionExtensions MtomMessageEncodingElement Represents the configuration section that specifies the encoding and message versioning used for SOAP Message Transmission Optimization Mechanism (MTOM) based messages. This class cannot be inherited. NamedServiceModelExtensionCollectionElement<TServiceModelExtensionElement> Contains a collection of instances. NetHttpBindingCollectionElement Represents a net http binding collection element. NetHttpBindingElement Represents a net http binding element. NetHttpWebSocketTransportSettingsElement Represents NetHttpWebSocketTransportSettingsElement for WebSocketTransportSettings. NetTcpBindingCollectionElement Represents a configuration element that contains a collection of instances. NetTcpBindingElement Represents an XML element that specifies a binding for peer channel-specific TCP messaging. NetTcpSecurityElement Defines the security settings for the netTcpBinding binding. This class cannot be inherited. NonDualMessageSecurityOverHttpElement Represents the configuration settings for the security of a message sent using HTTP for non-duplex service contracts. This class cannot be inherited. SecurityElement Represents the XML object model for encoding security objects. This class cannot be inherited. SecurityElementBase Represents a base class with members common to an element that is used to configure security settings. ServiceBuilderExtensions ServiceConfigurationBuilder ServiceElement Represents an XML element that contains the settings for a Windows Communication Foundation (WCF) service, as well as endpoints that expose the service. This class cannot be inherited. ServiceElementCollection Represents a collection of instances. This class cannot be inherited. ServiceEndpoint Represents the endpoint for a service that allows clients of the service to find and communicate with the service. ServiceEndpointElement Represents a configuration element that provides settings for binding, contract, and address properties for a service endpoint, which is used to expose services. This class cannot be inherited. ServiceEndpointElementCollection Represents a collection of instances. This class cannot be inherited. ServiceModelApplicationBuilderExtensions ServiceModelConfigurationElement Binding-related Configuration elements use this base class for WCF-wide commonalities ServiceModelConfigurationElementCollection<TConfigurationElementType> Represents an abstract base class for a used within the namespace. ServiceModelEnhancedConfigurationElementCollection<TConfigurationElement> An abstract base class for a looking for a merge semantic similar to an that allows duplicates, but throws an exception when duplicates are found in the same configuration scope (e.g. same configuration file). ServiceModelExtensionCollectionElement<TServiceModelExtensionElement> An abstract base class for a collection of objects. ServiceModelExtensionElement An abstract base class for a configuration element that contains a dynamic collection of heterogeneous child elements. ServiceModelOptions ServiceModelSectionGroup Represents the main configuration section for Windows Communication Foundation (WCF). This class cannot be inherited. ServiceModelServiceCollectionExtensions ServiceModelWebHostBuilderExtensions ServiceModelWebServiceBuilderExtensions ServiceModelWebServiceCollectionExtensions ServiceNameElement The class represents a configuration element for a service name used in a . ServiceNameElementCollection The class is a collection of service principal names that represent a configuration element for an . ServiceOptions ServicesSection Represents the configuration section that contains services. SslStreamSecurityElement Represents the configuration element that specifies the security settings for a SSL stream binding. This class cannot be inherited. StandardBindingCollectionElement<TStandardBinding, TBindingConfiguration> Provides a base class for the configuration sections that specify predefined bindings provided by Windows Communication Foundation (WCF). StandardBindingElement Provides a base class for the configuration elements that specify predefined bindings provided by Windows Communication Foundation (WCF). StandardBindingElementCollection<TBindingConfiguration> Represents a collection of objects. This class cannot be inherited. TcpConnectionPoolSettingsElement Represents a configuration element that specifies additional connection pool settings for a TCP transport. This class cannot be inherited. TcpTransportElement Specifies a configuration element that causes a channel to transfer messages on the TCP transport when it is included in a custom binding. This class cannot be inherited. TcpTransportSecurityElement An XML element that defines the security settings for a TcpTransport binding. This class cannot be inherited. TextMessageEncodingElement Represents a configuration element that specifies the character encoding and message versioning used for text-based XML messages. This class cannot be inherited. TransportElement Provides a base class to represent a transport binding configuration element. UseMiddlewareFramingConnectionHandshakeExtensions Extension methods for adding typed middleware to a IFramingConnectionHandshakeBuilder . WebHttpServiceBehavior WebSocketTransportSettingsElement Represents WebSocketTransportSettingsElement for WebSocketTransportSettings. WindowsStreamSecurityElement Represents a configuration element that is used to specify settings for Windows stream security for a binding. This class cannot be inherited. WSHttpBindingBaseElement Provides the base class with members common to the and the . WSHttpBindingCollectionElement Represents a configuration element that contains sub-elements that specify settings for using the wsHttpBinding binding. WSHttpBindingElement Represents an interoperable binding that supports distributed transactions and secure, reliable sessions. WSHttpSecurityElement An XML element that defines the security settings for a wsHttpBinding binding. WSHttpTransportSecurityElement Represents a configuration element that defines authentication settings for the HTTP transport. This class cannot be inherited. XmlDictionaryReaderQuotasElement Represents the configuration element that defines the constraints on the complexity of SOAP messages that can be processed by endpoints configured with a binding. This class cannot be inherited. XmlElementElement Represents the configuration settings for an XML element. This class cannot be inherited. XmlElementElementCollection Represents a collection of instances. This class cannot be inherited. Interfaces IBindingFactory IConfigurationHolder IDispatcherBuilder IFramingConnectionHandshakeBuilder Defines a class that provides the mechanisms to configure a connection handshake pipeline. IServiceBuilder IServiceChannelDispatcher IServiceDispatcher IStandardBindingElement ITransportServiceBuilder IXmlConfigEndpoint"
  },
  "api-corewcf/CoreWCF.Configuration.HttpBindingBaseElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.HttpBindingBaseElement.html",
    "title": "Class HttpBindingBaseElement",
    "keywords": "Class HttpBindingBaseElement Represents HttpBindingBaseElement for HttpBindingBase. Inheritance Object ServiceModelConfigurationElement StandardBindingElement HttpBindingBaseElement BasicHttpBindingElement NetHttpBindingElement Implements IDefaultCommunicationTimeouts IStandardBindingElement Inherited Members StandardBindingElement.CreateBinding() StandardBindingElement.Name StandardBindingElement.CloseTimeout StandardBindingElement.OpenTimeout StandardBindingElement.ReceiveTimeout StandardBindingElement.SendTimeout ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public abstract class HttpBindingBaseElement : StandardBindingElement, IDefaultCommunicationTimeouts, IStandardBindingElement Remarks To be added. Constructors HttpBindingBaseElement(String) Declaration protected HttpBindingBaseElement(string name) Parameters Type Name Description String name Properties AllowCookies Declaration public bool AllowCookies { get; } Property Value Type Description Boolean BypassProxyOnLocal Declaration public bool BypassProxyOnLocal { get; } Property Value Type Description Boolean HostNameComparisonMode Declaration public HostNameComparisonMode HostNameComparisonMode { get; set; } Property Value Type Description HostNameComparisonMode MaxBufferPoolSize Declaration public long MaxBufferPoolSize { get; set; } Property Value Type Description Int64 MaxBufferSize Declaration public int MaxBufferSize { get; set; } Property Value Type Description Int32 MaxReceivedMessageSize Declaration public long MaxReceivedMessageSize { get; set; } Property Value Type Description Int64 ProxyAddress Declaration public Uri ProxyAddress { get; set; } Property Value Type Description Uri ReaderQuotas Declaration public XmlDictionaryReaderQuotasElement ReaderQuotas { get; } Property Value Type Description XmlDictionaryReaderQuotasElement TextEncoding Declaration public Encoding TextEncoding { get; set; } Property Value Type Description Encoding TransferMode Declaration public TransferMode TransferMode { get; set; } Property Value Type Description TransferMode UseDefaultWebProxy Declaration public bool UseDefaultWebProxy { get; set; } Property Value Type Description Boolean Implements IDefaultCommunicationTimeouts IStandardBindingElement"
  },
  "api-corewcf/CoreWCF.Configuration.HttpsTransportElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.HttpsTransportElement.html",
    "title": "Class HttpsTransportElement",
    "keywords": "Class HttpsTransportElement Represents the configuration element that specifies an HTTPS transport for transmitting SOAP messages. Inheritance Object ServiceModelConfigurationElement ServiceModelExtensionElement BindingElementExtensionElement TransportElement HttpTransportElement HttpsTransportElement Inherited Members HttpTransportElement.AuthenticationScheme HttpTransportElement.KeepAliveEnabled HttpTransportElement.MaxBufferSize HttpTransportElement.Realm HttpTransportElement.TransferMode HttpTransportElement.ExtendedProtectionPolicy HttpTransportElement.WebSocketSettings TransportElement.CreateBindingElement() TransportElement.ManualAddressing TransportElement.MaxBufferPoolSize TransportElement.MaxReceivedMessageSize ServiceModelExtensionElement.ExtensionCollectionName ServiceModelExtensionElement.ConfigurationElementName ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class HttpsTransportElement : HttpTransportElement Remarks To be added. Constructors HttpsTransportElement() Declaration public HttpsTransportElement() Properties BindingElementType Declaration public override Type BindingElementType { get; } Property Value Type Description Type Overrides HttpTransportElement.BindingElementType RequireClientCertificate Declaration public bool RequireClientCertificate { get; set; } Property Value Type Description Boolean Methods ApplyConfiguration(BindingElement) Declaration public override void ApplyConfiguration(BindingElement bindingElement) Parameters Type Name Description BindingElement bindingElement Overrides HttpTransportElement.ApplyConfiguration(BindingElement) CopyFrom(ServiceModelExtensionElement) Declaration public override void CopyFrom(ServiceModelExtensionElement from) Parameters Type Name Description ServiceModelExtensionElement from Overrides HttpTransportElement.CopyFrom(ServiceModelExtensionElement) CreateDefaultBindingElement() Declaration protected override TransportBindingElement CreateDefaultBindingElement() Returns Type Description TransportBindingElement Overrides HttpTransportElement.CreateDefaultBindingElement() InitializeFrom(BindingElement) Declaration protected override void InitializeFrom(BindingElement bindingElement) Parameters Type Name Description BindingElement bindingElement Overrides HttpTransportElement.InitializeFrom(BindingElement)"
  },
  "api-corewcf/CoreWCF.Configuration.HttpTransportElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.HttpTransportElement.html",
    "title": "Class HttpTransportElement",
    "keywords": "Class HttpTransportElement Represents the configuration element that specifies an HTTP transport for transmitting SOAP messages. Inheritance Object ServiceModelConfigurationElement ServiceModelExtensionElement BindingElementExtensionElement TransportElement HttpTransportElement HttpsTransportElement Inherited Members TransportElement.CreateBindingElement() TransportElement.ManualAddressing TransportElement.MaxBufferPoolSize TransportElement.MaxReceivedMessageSize ServiceModelExtensionElement.ExtensionCollectionName ServiceModelExtensionElement.ConfigurationElementName ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class HttpTransportElement : TransportElement Remarks To be added. Constructors HttpTransportElement() Declaration public HttpTransportElement() Properties AuthenticationScheme Declaration public AuthenticationSchemes AuthenticationScheme { get; set; } Property Value Type Description AuthenticationSchemes BindingElementType Declaration public override Type BindingElementType { get; } Property Value Type Description Type Overrides BindingElementExtensionElement.BindingElementType ExtendedProtectionPolicy Declaration public ExtendedProtectionPolicyElement ExtendedProtectionPolicy { get; } Property Value Type Description ExtendedProtectionPolicyElement KeepAliveEnabled Declaration public bool KeepAliveEnabled { get; set; } Property Value Type Description Boolean MaxBufferSize Declaration public int MaxBufferSize { get; set; } Property Value Type Description Int32 Realm Declaration public string Realm { get; set; } Property Value Type Description String TransferMode Declaration public TransferMode TransferMode { get; set; } Property Value Type Description TransferMode WebSocketSettings Declaration public WebSocketTransportSettingsElement WebSocketSettings { get; set; } Property Value Type Description WebSocketTransportSettingsElement Methods ApplyConfiguration(BindingElement) Declaration public override void ApplyConfiguration(BindingElement bindingElement) Parameters Type Name Description BindingElement bindingElement Overrides TransportElement.ApplyConfiguration(BindingElement) CopyFrom(ServiceModelExtensionElement) Declaration public override void CopyFrom(ServiceModelExtensionElement from) Parameters Type Name Description ServiceModelExtensionElement from Overrides TransportElement.CopyFrom(ServiceModelExtensionElement) CreateDefaultBindingElement() Declaration protected override TransportBindingElement CreateDefaultBindingElement() Returns Type Description TransportBindingElement Overrides TransportElement.CreateDefaultBindingElement() InitializeFrom(BindingElement) Declaration protected override void InitializeFrom(BindingElement bindingElement) Parameters Type Name Description BindingElement bindingElement Overrides TransportElement.InitializeFrom(BindingElement)"
  },
  "api-corewcf/CoreWCF.Configuration.HttpTransportSecurityElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.HttpTransportSecurityElement.html",
    "title": "Class HttpTransportSecurityElement",
    "keywords": "Class HttpTransportSecurityElement Represents a configuration element that controls authentication parameters for the HTTP transport. This class cannot be inherited. Inheritance Object ServiceModelConfigurationElement HttpTransportSecurityElement Inherited Members ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class HttpTransportSecurityElement : ServiceModelConfigurationElement Remarks To be added. Constructors HttpTransportSecurityElement() Declaration public HttpTransportSecurityElement() Properties ClientCredentialType Declaration public HttpClientCredentialType ClientCredentialType { get; set; } Property Value Type Description HttpClientCredentialType Realm Declaration public string Realm { get; set; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.Configuration.IBindingFactory.html": {
    "href": "api-corewcf/CoreWCF.Configuration.IBindingFactory.html",
    "title": "Interface IBindingFactory",
    "keywords": "Interface IBindingFactory Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public interface IBindingFactory Methods Create(String) Declaration Binding Create(string bindingType) Parameters Type Name Description String bindingType Returns Type Description Binding"
  },
  "api-corewcf/CoreWCF.Configuration.IConfigurationHolder.html": {
    "href": "api-corewcf/CoreWCF.Configuration.IConfigurationHolder.html",
    "title": "Interface IConfigurationHolder",
    "keywords": "Interface IConfigurationHolder Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public interface IConfigurationHolder Properties Endpoints Declaration ISet<ServiceEndpoint> Endpoints { get; } Property Value Type Description ISet < ServiceEndpoint > Methods AddBinding(Binding) Declaration void AddBinding(Binding binding) Parameters Type Name Description Binding binding AddServiceEndpoint(String, String, Uri, String, String, String) Declaration void AddServiceEndpoint(string name, string serviceName, Uri address, string contract, string bindingType, string bindingName) Parameters Type Name Description String name String serviceName Uri address String contract String bindingType String bindingName GetXmlConfigEndpoint(ServiceEndpoint) Declaration IXmlConfigEndpoint GetXmlConfigEndpoint(ServiceEndpoint endPoint) Parameters Type Name Description ServiceEndpoint endPoint Returns Type Description IXmlConfigEndpoint ResolveBinding(String, String) Declaration Binding ResolveBinding(string bindingType, string name) Parameters Type Name Description String bindingType String name Returns Type Description Binding"
  },
  "api-corewcf/CoreWCF.Configuration.IDispatcherBuilder.html": {
    "href": "api-corewcf/CoreWCF.Configuration.IDispatcherBuilder.html",
    "title": "Interface IDispatcherBuilder",
    "keywords": "Interface IDispatcherBuilder Namespace : CoreWCF.Configuration Assembly : CoreWCF.Primitives.dll Syntax public interface IDispatcherBuilder Methods BuildDispatchers(Type) Declaration List<IServiceDispatcher> BuildDispatchers(Type serviceType) Parameters Type Name Description Type serviceType Returns Type Description List < IServiceDispatcher >"
  },
  "api-corewcf/CoreWCF.Configuration.IFramingConnectionHandshakeBuilder.html": {
    "href": "api-corewcf/CoreWCF.Configuration.IFramingConnectionHandshakeBuilder.html",
    "title": "Interface IFramingConnectionHandshakeBuilder",
    "keywords": "Interface IFramingConnectionHandshakeBuilder Defines a class that provides the mechanisms to configure a connection handshake pipeline. Namespace : CoreWCF.Configuration Assembly : CoreWCF.NetTcp.dll Syntax public interface IFramingConnectionHandshakeBuilder Properties HandshakeServices Gets or sets the IServiceProvider that provides access to the application's service container. Declaration IServiceProvider HandshakeServices { get; set; } Property Value Type Description IServiceProvider Properties Gets a key/value collection that can be used to share data between middleware. Declaration IDictionary<string, object> Properties { get; } Property Value Type Description IDictionary < String , Object > Methods Build() Builds the delegate used by this application to process ServiceModel Framed requests. Declaration HandshakeDelegate Build() Returns Type Description HandshakeDelegate The request handling delegate. New() Creates a new IFramingConnectionHandshakeBuilder that shares the Properties of this IFramingConnectionHandshakeBuilder . Declaration IFramingConnectionHandshakeBuilder New() Returns Type Description IFramingConnectionHandshakeBuilder The new IFramingConnectionHandshakeBuilder . Use(Func<HandshakeDelegate, HandshakeDelegate>) Adds a middleware delegate to the connection handshake pipeline. Declaration IFramingConnectionHandshakeBuilder Use(Func<HandshakeDelegate, HandshakeDelegate> middleware) Parameters Type Name Description Func < HandshakeDelegate , HandshakeDelegate > middleware Returns Type Description IFramingConnectionHandshakeBuilder The IFramingConnectionHandshakeBuilder . Extension Methods MapExtensions.Map(IFramingConnectionHandshakeBuilder, Func<FramingConnection, Boolean>, Action<IFramingConnectionHandshakeBuilder>) UseMiddlewareFramingConnectionHandshakeExtensions.UseMiddleware<TMiddleware>(IFramingConnectionHandshakeBuilder, Object[]) UseMiddlewareFramingConnectionHandshakeExtensions.UseMiddleware(IFramingConnectionHandshakeBuilder, Type, Object[])"
  },
  "api-corewcf/CoreWCF.Configuration.IServiceBuilder.html": {
    "href": "api-corewcf/CoreWCF.Configuration.IServiceBuilder.html",
    "title": "Interface IServiceBuilder",
    "keywords": "Interface IServiceBuilder Inherited Members ICommunicationObject.Abort() ICommunicationObject.CloseAsync() ICommunicationObject.CloseAsync(CancellationToken) ICommunicationObject.OpenAsync() ICommunicationObject.OpenAsync(CancellationToken) ICommunicationObject.State ICommunicationObject.Closed ICommunicationObject.Closing ICommunicationObject.Faulted ICommunicationObject.Opened ICommunicationObject.Opening Namespace : CoreWCF.Configuration Assembly : CoreWCF.Primitives.dll Syntax public interface IServiceBuilder : ICommunicationObject Properties BaseAddresses Declaration ICollection<Uri> BaseAddresses { get; } Property Value Type Description ICollection < Uri > Services Declaration ICollection<Type> Services { get; } Property Value Type Description ICollection < Type > Methods AddService(Type) Declaration IServiceBuilder AddService(Type service) Parameters Type Name Description Type service Returns Type Description IServiceBuilder AddService(Type, Action<ServiceOptions>) Declaration IServiceBuilder AddService(Type service, Action<ServiceOptions> options) Parameters Type Name Description Type service Action < ServiceOptions > options Returns Type Description IServiceBuilder AddService<TService>() Declaration IServiceBuilder AddService<TService>() where TService : class Returns Type Description IServiceBuilder Type Parameters Name Description TService AddService<TService>(Action<ServiceOptions>) Declaration IServiceBuilder AddService<TService>(Action<ServiceOptions> options) where TService : class Parameters Type Name Description Action < ServiceOptions > options Returns Type Description IServiceBuilder Type Parameters Name Description TService AddServiceEndpoint(Type, Type, Binding, Uri, Uri) Declaration IServiceBuilder AddServiceEndpoint(Type service, Type implementedContract, Binding binding, Uri address, Uri listenUri) Parameters Type Name Description Type service Type implementedContract Binding binding Uri address Uri listenUri Returns Type Description IServiceBuilder AddServiceEndpoint(Type, Type, Binding, Uri, Uri, Action<ServiceEndpoint>) Declaration IServiceBuilder AddServiceEndpoint(Type service, Type implementedContract, Binding binding, Uri address, Uri listenUri, Action<ServiceEndpoint> configureEndpoint) Parameters Type Name Description Type service Type implementedContract Binding binding Uri address Uri listenUri Action < ServiceEndpoint > configureEndpoint Returns Type Description IServiceBuilder AddServiceEndpoint<TService>(Type, Binding, String) Declaration IServiceBuilder AddServiceEndpoint<TService>(Type implementedContract, Binding binding, string address) Parameters Type Name Description Type implementedContract Binding binding String address Returns Type Description IServiceBuilder Type Parameters Name Description TService AddServiceEndpoint<TService>(Type, Binding, String, Action<ServiceEndpoint>) Declaration IServiceBuilder AddServiceEndpoint<TService>(Type implementedContract, Binding binding, string address, Action<ServiceEndpoint> configureEndpoint) Parameters Type Name Description Type implementedContract Binding binding String address Action < ServiceEndpoint > configureEndpoint Returns Type Description IServiceBuilder Type Parameters Name Description TService AddServiceEndpoint<TService>(Type, Binding, String, Uri) Declaration IServiceBuilder AddServiceEndpoint<TService>(Type implementedContract, Binding binding, string address, Uri listenUri) Parameters Type Name Description Type implementedContract Binding binding String address Uri listenUri Returns Type Description IServiceBuilder Type Parameters Name Description TService AddServiceEndpoint<TService>(Type, Binding, String, Uri, Action<ServiceEndpoint>) Declaration IServiceBuilder AddServiceEndpoint<TService>(Type implementedContract, Binding binding, string address, Uri listenUri, Action<ServiceEndpoint> configureEndpoint) Parameters Type Name Description Type implementedContract Binding binding String address Uri listenUri Action < ServiceEndpoint > configureEndpoint Returns Type Description IServiceBuilder Type Parameters Name Description TService AddServiceEndpoint<TService>(Type, Binding, Uri) Declaration IServiceBuilder AddServiceEndpoint<TService>(Type implementedContract, Binding binding, Uri address) Parameters Type Name Description Type implementedContract Binding binding Uri address Returns Type Description IServiceBuilder Type Parameters Name Description TService AddServiceEndpoint<TService>(Type, Binding, Uri, Action<ServiceEndpoint>) Declaration IServiceBuilder AddServiceEndpoint<TService>(Type implementedContract, Binding binding, Uri address, Action<ServiceEndpoint> configureEndpoint) Parameters Type Name Description Type implementedContract Binding binding Uri address Action < ServiceEndpoint > configureEndpoint Returns Type Description IServiceBuilder Type Parameters Name Description TService AddServiceEndpoint<TService>(Type, Binding, Uri, Uri) Declaration IServiceBuilder AddServiceEndpoint<TService>(Type implementedContract, Binding binding, Uri address, Uri listenUri) Parameters Type Name Description Type implementedContract Binding binding Uri address Uri listenUri Returns Type Description IServiceBuilder Type Parameters Name Description TService AddServiceEndpoint<TService>(Type, Binding, Uri, Uri, Action<ServiceEndpoint>) Declaration IServiceBuilder AddServiceEndpoint<TService>(Type implementedContract, Binding binding, Uri address, Uri listenUri, Action<ServiceEndpoint> configureEndpoint) Parameters Type Name Description Type implementedContract Binding binding Uri address Uri listenUri Action < ServiceEndpoint > configureEndpoint Returns Type Description IServiceBuilder Type Parameters Name Description TService AddServiceEndpoint<TService, TContract>(Binding, String) Declaration IServiceBuilder AddServiceEndpoint<TService, TContract>(Binding binding, string address) Parameters Type Name Description Binding binding String address Returns Type Description IServiceBuilder Type Parameters Name Description TService TContract AddServiceEndpoint<TService, TContract>(Binding, String, Action<ServiceEndpoint>) Declaration IServiceBuilder AddServiceEndpoint<TService, TContract>(Binding binding, string address, Action<ServiceEndpoint> configureEndpoint) Parameters Type Name Description Binding binding String address Action < ServiceEndpoint > configureEndpoint Returns Type Description IServiceBuilder Type Parameters Name Description TService TContract AddServiceEndpoint<TService, TContract>(Binding, String, Uri) Declaration IServiceBuilder AddServiceEndpoint<TService, TContract>(Binding binding, string address, Uri listenUri) Parameters Type Name Description Binding binding String address Uri listenUri Returns Type Description IServiceBuilder Type Parameters Name Description TService TContract AddServiceEndpoint<TService, TContract>(Binding, String, Uri, Action<ServiceEndpoint>) Declaration IServiceBuilder AddServiceEndpoint<TService, TContract>(Binding binding, string address, Uri listenUri, Action<ServiceEndpoint> configureEndpoint) Parameters Type Name Description Binding binding String address Uri listenUri Action < ServiceEndpoint > configureEndpoint Returns Type Description IServiceBuilder Type Parameters Name Description TService TContract AddServiceEndpoint<TService, TContract>(Binding, Uri) Declaration IServiceBuilder AddServiceEndpoint<TService, TContract>(Binding binding, Uri address) Parameters Type Name Description Binding binding Uri address Returns Type Description IServiceBuilder Type Parameters Name Description TService TContract AddServiceEndpoint<TService, TContract>(Binding, Uri, Action<ServiceEndpoint>) Declaration IServiceBuilder AddServiceEndpoint<TService, TContract>(Binding binding, Uri address, Action<ServiceEndpoint> configureEndpoint) Parameters Type Name Description Binding binding Uri address Action < ServiceEndpoint > configureEndpoint Returns Type Description IServiceBuilder Type Parameters Name Description TService TContract AddServiceEndpoint<TService, TContract>(Binding, Uri, Uri) Declaration IServiceBuilder AddServiceEndpoint<TService, TContract>(Binding binding, Uri address, Uri listenUri) Parameters Type Name Description Binding binding Uri address Uri listenUri Returns Type Description IServiceBuilder Type Parameters Name Description TService TContract AddServiceEndpoint<TService, TContract>(Binding, Uri, Uri, Action<ServiceEndpoint>) Declaration IServiceBuilder AddServiceEndpoint<TService, TContract>(Binding binding, Uri address, Uri listenUri, Action<ServiceEndpoint> configureEndpoint) Parameters Type Name Description Binding binding Uri address Uri listenUri Action < ServiceEndpoint > configureEndpoint Returns Type Description IServiceBuilder Type Parameters Name Description TService TContract Extension Methods ServiceBuilderExtensions.ConfigureServiceHostBase<TService>(IServiceBuilder, Action<ServiceHostBase>) ServiceBuilderExtensions.ConfigureServiceHostBase(IServiceBuilder, Type, Action<ServiceHostBase>) ServiceBuilderExtensions.ConfigureAllServiceHostBase(IServiceBuilder, Action<ServiceHostBase>) ServiceModelWebServiceBuilderExtensions.AddServiceWebEndpoint<TService, TContract>(IServiceBuilder, String, Action<WebHttpBehavior>) ServiceModelWebServiceBuilderExtensions.AddServiceWebEndpoint<TService, TContract>(IServiceBuilder, WebHttpBinding, String, Action<WebHttpBehavior>) ServiceModelWebServiceBuilderExtensions.AddServiceWebEndpoint<TService, TContract>(IServiceBuilder, Uri, Action<WebHttpBehavior>) ServiceModelWebServiceBuilderExtensions.AddServiceWebEndpoint<TService, TContract>(IServiceBuilder, WebHttpBinding, Uri, Action<WebHttpBehavior>) ServiceModelWebServiceBuilderExtensions.AddServiceWebEndpoint<TService, TContract>(IServiceBuilder, String, Uri, Action<WebHttpBehavior>) ServiceModelWebServiceBuilderExtensions.AddServiceWebEndpoint<TService, TContract>(IServiceBuilder, WebHttpBinding, String, Uri, Action<WebHttpBehavior>) ServiceModelWebServiceBuilderExtensions.AddServiceWebEndpoint<TService, TContract>(IServiceBuilder, Uri, Uri, Action<WebHttpBehavior>) ServiceModelWebServiceBuilderExtensions.AddServiceWebEndpoint<TService, TContract>(IServiceBuilder, WebHttpBinding, Uri, Uri, Action<WebHttpBehavior>) ServiceModelWebServiceBuilderExtensions.AddServiceWebEndpoint<TService>(IServiceBuilder, Type, String, Action<WebHttpBehavior>) ServiceModelWebServiceBuilderExtensions.AddServiceWebEndpoint<TService>(IServiceBuilder, Type, WebHttpBinding, String, Action<WebHttpBehavior>) ServiceModelWebServiceBuilderExtensions.AddServiceWebEndpoint<TService>(IServiceBuilder, Type, Uri, Action<WebHttpBehavior>) ServiceModelWebServiceBuilderExtensions.AddServiceWebEndpoint<TService>(IServiceBuilder, Type, WebHttpBinding, Uri, Action<WebHttpBehavior>) ServiceModelWebServiceBuilderExtensions.AddServiceWebEndpoint<TService>(IServiceBuilder, Type, String, Uri, Action<WebHttpBehavior>) ServiceModelWebServiceBuilderExtensions.AddServiceWebEndpoint<TService>(IServiceBuilder, Type, WebHttpBinding, String, Uri, Action<WebHttpBehavior>) ServiceModelWebServiceBuilderExtensions.AddServiceWebEndpoint<TService>(IServiceBuilder, Type, Uri, Uri, Action<WebHttpBehavior>) ServiceModelWebServiceBuilderExtensions.AddServiceWebEndpoint<TService>(IServiceBuilder, Type, WebHttpBinding, Uri, Uri, Action<WebHttpBehavior>) ServiceModelWebServiceBuilderExtensions.AddServiceWebEndpoint(IServiceBuilder, Type, Type, Uri, Uri, Action<WebHttpBehavior>) ServiceModelWebServiceBuilderExtensions.AddServiceWebEndpoint(IServiceBuilder, Type, Type, WebHttpBinding, Uri, Uri, Action<WebHttpBehavior>)"
  },
  "api-corewcf/CoreWCF.Configuration.IServiceChannelDispatcher.html": {
    "href": "api-corewcf/CoreWCF.Configuration.IServiceChannelDispatcher.html",
    "title": "Interface IServiceChannelDispatcher",
    "keywords": "Interface IServiceChannelDispatcher Namespace : CoreWCF.Configuration Assembly : CoreWCF.Primitives.dll Syntax public interface IServiceChannelDispatcher Methods DispatchAsync(Message) Declaration Task DispatchAsync(Message message) Parameters Type Name Description Message message Returns Type Description Task DispatchAsync(RequestContext) Declaration Task DispatchAsync(RequestContext context) Parameters Type Name Description RequestContext context Returns Type Description Task"
  },
  "api-corewcf/CoreWCF.Configuration.IServiceDispatcher.html": {
    "href": "api-corewcf/CoreWCF.Configuration.IServiceDispatcher.html",
    "title": "Interface IServiceDispatcher",
    "keywords": "Interface IServiceDispatcher Namespace : CoreWCF.Configuration Assembly : CoreWCF.Primitives.dll Syntax public interface IServiceDispatcher Properties BaseAddress Declaration Uri BaseAddress { get; } Property Value Type Description Uri Binding Declaration Binding Binding { get; } Property Value Type Description Binding Host Declaration ServiceHostBase Host { get; } Property Value Type Description ServiceHostBase SupportedChannelTypes Declaration IList<Type> SupportedChannelTypes { get; } Property Value Type Description IList < Type > Methods CreateServiceChannelDispatcherAsync(IChannel) Declaration Task<IServiceChannelDispatcher> CreateServiceChannelDispatcherAsync(IChannel channel) Parameters Type Name Description IChannel channel Returns Type Description Task < IServiceChannelDispatcher >"
  },
  "api-corewcf/CoreWCF.Configuration.IssuedTokenParametersElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.IssuedTokenParametersElement.html",
    "title": "Class IssuedTokenParametersElement",
    "keywords": "Class IssuedTokenParametersElement Represents a configuration element that specifies additional settings for an issued token. This class cannot be inherited. Inheritance Object ServiceModelConfigurationElement IssuedTokenParametersElement Inherited Members ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public sealed class IssuedTokenParametersElement : ServiceModelConfigurationElement Remarks To be added. Constructors IssuedTokenParametersElement() Declaration public IssuedTokenParametersElement() Properties AdditionalRequestParameters Declaration public XmlElementElementCollection AdditionalRequestParameters { get; } Property Value Type Description XmlElementElementCollection ClaimTypeRequirements Declaration public ClaimTypeElementCollection ClaimTypeRequirements { get; } Property Value Type Description ClaimTypeElementCollection DefaultMessageSecurityVersion Declaration public MessageSecurityVersion DefaultMessageSecurityVersion { get; set; } Property Value Type Description MessageSecurityVersion Issuer Declaration public IssuedTokenParametersEndpointAddressElement Issuer { get; } Property Value Type Description IssuedTokenParametersEndpointAddressElement IssuerMetadata Declaration public EndpointAddressElementBase IssuerMetadata { get; } Property Value Type Description EndpointAddressElementBase KeySize Declaration public int KeySize { get; set; } Property Value Type Description Int32 KeyType Declaration public SecurityKeyType KeyType { get; set; } Property Value Type Description SecurityKeyType TokenType Declaration public string TokenType { get; set; } Property Value Type Description String UseStrTransform Declaration public bool UseStrTransform { get; set; } Property Value Type Description Boolean Methods SerializeToXmlElement(XmlWriter, String) Declaration protected override bool SerializeToXmlElement(XmlWriter writer, string elementName) Parameters Type Name Description XmlWriter writer String elementName Returns Type Description Boolean Unmerge(ConfigurationElement, ConfigurationElement, ConfigurationSaveMode) Declaration protected override void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode) Parameters Type Name Description ConfigurationElement sourceElement ConfigurationElement parentElement ConfigurationSaveMode saveMode"
  },
  "api-corewcf/CoreWCF.Configuration.IssuedTokenParametersEndpointAddressElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.IssuedTokenParametersEndpointAddressElement.html",
    "title": "Class IssuedTokenParametersEndpointAddressElement",
    "keywords": "Class IssuedTokenParametersEndpointAddressElement Represents a configuration element that specifies an endpoint that issues a security token. This class cannot be inherited. Inheritance Object ServiceModelConfigurationElement EndpointAddressElementBase IssuedTokenParametersEndpointAddressElement Inherited Members EndpointAddressElementBase.Copy(EndpointAddressElementBase) EndpointAddressElementBase.InitializeFrom(EndpointAddress) EndpointAddressElementBase.Address EndpointAddressElementBase.Headers ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public sealed class IssuedTokenParametersEndpointAddressElement : EndpointAddressElementBase Remarks To be added. Constructors IssuedTokenParametersEndpointAddressElement() Declaration public IssuedTokenParametersEndpointAddressElement() Properties Binding Declaration public string Binding { get; set; } Property Value Type Description String BindingConfiguration Declaration public string BindingConfiguration { get; set; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.Configuration.IStandardBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.IStandardBindingElement.html",
    "title": "Interface IStandardBindingElement",
    "keywords": "Interface IStandardBindingElement Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public interface IStandardBindingElement Properties Name Declaration string Name { get; set; } Property Value Type Description String Methods CreateBinding() Declaration Binding CreateBinding() Returns Type Description Binding"
  },
  "api-corewcf/CoreWCF.Configuration.ITransportServiceBuilder.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ITransportServiceBuilder.html",
    "title": "Interface ITransportServiceBuilder",
    "keywords": "Interface ITransportServiceBuilder Namespace : CoreWCF.Configuration Assembly : CoreWCF.Primitives.dll Syntax public interface ITransportServiceBuilder Methods Configure(IApplicationBuilder) Declaration void Configure(IApplicationBuilder app) Parameters Type Name Description IApplicationBuilder app"
  },
  "api-corewcf/CoreWCF.Configuration.IXmlConfigEndpoint.html": {
    "href": "api-corewcf/CoreWCF.Configuration.IXmlConfigEndpoint.html",
    "title": "Interface IXmlConfigEndpoint",
    "keywords": "Interface IXmlConfigEndpoint Namespace : CoreWCF.Configuration Assembly : CoreWCF.Primitives.dll Syntax public interface IXmlConfigEndpoint Properties Address Declaration Uri Address { get; } Property Value Type Description Uri Binding Declaration Binding Binding { get; } Property Value Type Description Binding Contract Declaration Type Contract { get; } Property Value Type Description Type Service Declaration Type Service { get; } Property Value Type Description Type"
  },
  "api-corewcf/CoreWCF.Configuration.LocalServiceSecuritySettingsElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.LocalServiceSecuritySettingsElement.html",
    "title": "Class LocalServiceSecuritySettingsElement",
    "keywords": "Class LocalServiceSecuritySettingsElement Configures the security settings of a local service. This class cannot be inherited. Inheritance Object ServiceModelConfigurationElement LocalServiceSecuritySettingsElement Inherited Members ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public sealed class LocalServiceSecuritySettingsElement : ServiceModelConfigurationElement Remarks To be added. Constructors LocalServiceSecuritySettingsElement() Declaration public LocalServiceSecuritySettingsElement() Properties DetectReplays Declaration public bool DetectReplays { get; set; } Property Value Type Description Boolean InactivityTimeout Declaration public TimeSpan InactivityTimeout { get; set; } Property Value Type Description TimeSpan IssuedCookieLifetime Declaration public TimeSpan IssuedCookieLifetime { get; set; } Property Value Type Description TimeSpan MaxCachedCookies Declaration public int MaxCachedCookies { get; set; } Property Value Type Description Int32 MaxClockSkew Declaration public TimeSpan MaxClockSkew { get; set; } Property Value Type Description TimeSpan MaxPendingSessions Declaration public int MaxPendingSessions { get; set; } Property Value Type Description Int32 MaxStatefulNegotiations Declaration public int MaxStatefulNegotiations { get; set; } Property Value Type Description Int32 NegotiationTimeout Declaration public TimeSpan NegotiationTimeout { get; set; } Property Value Type Description TimeSpan ReconnectTransportOnFailure Declaration public bool ReconnectTransportOnFailure { get; set; } Property Value Type Description Boolean ReplayCacheSize Declaration public int ReplayCacheSize { get; set; } Property Value Type Description Int32 ReplayWindow Declaration public TimeSpan ReplayWindow { get; set; } Property Value Type Description TimeSpan SessionKeyRenewalInterval Declaration public TimeSpan SessionKeyRenewalInterval { get; set; } Property Value Type Description TimeSpan SessionKeyRolloverInterval Declaration public TimeSpan SessionKeyRolloverInterval { get; set; } Property Value Type Description TimeSpan TimestampValidityDuration Declaration public TimeSpan TimestampValidityDuration { get; set; } Property Value Type Description TimeSpan"
  },
  "api-corewcf/CoreWCF.Configuration.MapExtensions.html": {
    "href": "api-corewcf/CoreWCF.Configuration.MapExtensions.html",
    "title": "Class MapExtensions",
    "keywords": "Class MapExtensions Extension methods for the MapMiddleware . Inheritance Object MapExtensions Namespace : CoreWCF.Configuration Assembly : CoreWCF.NetTcp.dll Syntax public static class MapExtensions : Object Methods Map(IFramingConnectionHandshakeBuilder, Func<FramingConnection, Boolean>, Action<IFramingConnectionHandshakeBuilder>) Branches the handshake pipeline based on the result of a predicate. If the predicate returns true the branch is executed. Declaration public static IFramingConnectionHandshakeBuilder Map(this IFramingConnectionHandshakeBuilder handshakeBuilder, Func<FramingConnection, bool> predicate, Action<IFramingConnectionHandshakeBuilder> configuration) Parameters Type Name Description IFramingConnectionHandshakeBuilder handshakeBuilder The IFramingConnectionHandshakeBuilder instance. Func < FramingConnection , Boolean > predicate The request path to match. Action < IFramingConnectionHandshakeBuilder > configuration The branch to take for positive path matches. Returns Type Description IFramingConnectionHandshakeBuilder The IFramingConnectionHandshakeBuilder instance."
  },
  "api-corewcf/CoreWCF.Configuration.MapMiddleware.html": {
    "href": "api-corewcf/CoreWCF.Configuration.MapMiddleware.html",
    "title": "Class MapMiddleware",
    "keywords": "Class MapMiddleware Represents a middleware that maps a request path to a sub-request pipeline. Inheritance Object MapMiddleware Namespace : CoreWCF.Configuration Assembly : CoreWCF.NetTcp.dll Syntax public class MapMiddleware : Object Constructors MapMiddleware(HandshakeDelegate, MapOptions) Creates a new instance of MapMiddleware . Declaration public MapMiddleware(HandshakeDelegate next, MapOptions options) Parameters Type Name Description HandshakeDelegate next The delegate representing the next middleware in the request pipeline. MapOptions options The middleware options. Methods Invoke(FramingConnection) Executes the middleware. Declaration public Task Invoke(FramingConnection connection) Parameters Type Name Description FramingConnection connection Returns Type Description Task A task that represents the execution of this middleware."
  },
  "api-corewcf/CoreWCF.Configuration.MapOptions.html": {
    "href": "api-corewcf/CoreWCF.Configuration.MapOptions.html",
    "title": "Class MapOptions",
    "keywords": "Class MapOptions Options for the MapMiddleware . Inheritance Object MapOptions Namespace : CoreWCF.Configuration Assembly : CoreWCF.NetTcp.dll Syntax public class MapOptions : Object Constructors MapOptions() Declaration public MapOptions() Properties Branch The branch taken for a positive match. Declaration public HandshakeDelegate Branch { get; set; } Property Value Type Description HandshakeDelegate Predicate The path to match. Declaration public Func<FramingConnection, bool> Predicate { get; set; } Property Value Type Description Func < FramingConnection , Boolean >"
  },
  "api-corewcf/CoreWCF.Configuration.MessageSecurityOverHttpElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.MessageSecurityOverHttpElement.html",
    "title": "Class MessageSecurityOverHttpElement",
    "keywords": "Class MessageSecurityOverHttpElement Defines the security configuration settings for message sent using HTTP. Inheritance Object ServiceModelConfigurationElement MessageSecurityOverHttpElement NonDualMessageSecurityOverHttpElement Inherited Members ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class MessageSecurityOverHttpElement : ServiceModelConfigurationElement Remarks To be added. Constructors MessageSecurityOverHttpElement() Declaration public MessageSecurityOverHttpElement() Properties AlgorithmSuite Declaration public SecurityAlgorithmSuite AlgorithmSuite { get; set; } Property Value Type Description SecurityAlgorithmSuite ClientCredentialType Declaration public MessageCredentialType ClientCredentialType { get; set; } Property Value Type Description MessageCredentialType NegotiateServiceCredential Declaration public bool NegotiateServiceCredential { get; set; } Property Value Type Description Boolean"
  },
  "api-corewcf/CoreWCF.Configuration.MessageSecurityOverTcpElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.MessageSecurityOverTcpElement.html",
    "title": "Class MessageSecurityOverTcpElement",
    "keywords": "Class MessageSecurityOverTcpElement Defines the configuration settings for the security of a message sent using TCP. This class cannot be inherited. Inheritance Object ServiceModelConfigurationElement MessageSecurityOverTcpElement Inherited Members ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class MessageSecurityOverTcpElement : ServiceModelConfigurationElement Remarks To be added. Constructors MessageSecurityOverTcpElement() Declaration public MessageSecurityOverTcpElement() Properties AlgorithmSuite Declaration public SecurityAlgorithmSuite AlgorithmSuite { get; set; } Property Value Type Description SecurityAlgorithmSuite ClientCredentialType Declaration public MessageCredentialType ClientCredentialType { get; set; } Property Value Type Description MessageCredentialType"
  },
  "api-corewcf/CoreWCF.Configuration.MetadataServiceCollectionExtensions.html": {
    "href": "api-corewcf/CoreWCF.Configuration.MetadataServiceCollectionExtensions.html",
    "title": "Class MetadataServiceCollectionExtensions",
    "keywords": "Class MetadataServiceCollectionExtensions Inheritance Object MetadataServiceCollectionExtensions Namespace : CoreWCF.Configuration Assembly : CoreWCF.Primitives.dll Syntax public static class MetadataServiceCollectionExtensions : Object Methods AddServiceModelMetadata(IServiceCollection) Declaration public static IServiceCollection AddServiceModelMetadata(this IServiceCollection services) Parameters Type Name Description IServiceCollection services Returns Type Description IServiceCollection"
  },
  "api-corewcf/CoreWCF.Configuration.MtomMessageEncodingElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.MtomMessageEncodingElement.html",
    "title": "Class MtomMessageEncodingElement",
    "keywords": "Class MtomMessageEncodingElement Represents the configuration section that specifies the encoding and message versioning used for SOAP Message Transmission Optimization Mechanism (MTOM) based messages. This class cannot be inherited. Inheritance Object ServiceModelConfigurationElement ServiceModelExtensionElement BindingElementExtensionElement MtomMessageEncodingElement Inherited Members ServiceModelExtensionElement.ExtensionCollectionName ServiceModelExtensionElement.ConfigurationElementName ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public sealed class MtomMessageEncodingElement : BindingElementExtensionElement Remarks Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. The <xref:CoreWCF.Configuration.MtomMessageEncodingElement> class represents the configuration element that specifies the character encoding and message versioning used for a message using a Message Transmission Optimization Mechanism (MTOM) encoding. MTOM is an efficient technology for transmitting binary data in Windows Communication Foundation (WCF) messages. The MTOM encoder attempts balance between efficiency and interoperability. The MTOM encoding transmits most XML in textual form, but optimizes large blocks of binary data by transmitting them as-is, without conversion to text. The <xref:CoreWCF.Configuration.TextMessageEncodingElement> class represents a configuration element that specifies a text encoder used to create text-based messages on the wire. Messages produced by this encoder are suitable for WS-* based interoperability. Web service or Web service client can generally understand textual XML. However, transmitting large blocks of binary data as text is the least efficient method for encoding XML messages. The <xref:CoreWCF.Configuration.BinaryMessageEncodingElement> class represents the configuration element that specifies the character encoding and message versioning used for binary-based XML messages. This is most efficient but least interoperable of the encoding options. Constructors MtomMessageEncodingElement() Declaration public MtomMessageEncodingElement() Properties BindingElementType Declaration public override Type BindingElementType { get; } Property Value Type Description Type Overrides BindingElementExtensionElement.BindingElementType MaxBufferSize Declaration public int MaxBufferSize { get; set; } Property Value Type Description Int32 MaxReadPoolSize Declaration public int MaxReadPoolSize { get; set; } Property Value Type Description Int32 MaxWritePoolSize Declaration public int MaxWritePoolSize { get; set; } Property Value Type Description Int32 MessageVersion Declaration public MessageVersion MessageVersion { get; set; } Property Value Type Description MessageVersion ReaderQuotas Declaration public XmlDictionaryReaderQuotasElement ReaderQuotas { get; } Property Value Type Description XmlDictionaryReaderQuotasElement WriteEncoding Declaration public Encoding WriteEncoding { get; set; } Property Value Type Description Encoding Methods ApplyConfiguration(BindingElement) Declaration public override void ApplyConfiguration(BindingElement bindingElement) Parameters Type Name Description BindingElement bindingElement Overrides BindingElementExtensionElement.ApplyConfiguration(BindingElement) CopyFrom(ServiceModelExtensionElement) Declaration public override void CopyFrom(ServiceModelExtensionElement from) Parameters Type Name Description ServiceModelExtensionElement from Overrides ServiceModelExtensionElement.CopyFrom(ServiceModelExtensionElement) CreateBindingElement() Declaration protected override BindingElement CreateBindingElement() Returns Type Description BindingElement Overrides BindingElementExtensionElement.CreateBindingElement() InitializeFrom(BindingElement) Declaration protected override void InitializeFrom(BindingElement bindingElement) Parameters Type Name Description BindingElement bindingElement Overrides BindingElementExtensionElement.InitializeFrom(BindingElement)"
  },
  "api-corewcf/CoreWCF.Configuration.NamedServiceModelExtensionCollectionElement-1.html": {
    "href": "api-corewcf/CoreWCF.Configuration.NamedServiceModelExtensionCollectionElement-1.html",
    "title": "Class NamedServiceModelExtensionCollectionElement<TServiceModelExtensionElement>",
    "keywords": "Class NamedServiceModelExtensionCollectionElement<TServiceModelExtensionElement> Contains a collection of instances. Inheritance Object ServiceModelConfigurationElement ServiceModelExtensionCollectionElement <TServiceModelExtensionElement> NamedServiceModelExtensionCollectionElement<TServiceModelExtensionElement> CustomBindingElement Implements ICollection <TServiceModelExtensionElement> IEnumerable <TServiceModelExtensionElement> IEnumerable Inherited Members ServiceModelExtensionCollectionElement<TServiceModelExtensionElement>.Add(TServiceModelExtensionElement) ServiceModelExtensionCollectionElement<TServiceModelExtensionElement>.CanAdd(TServiceModelExtensionElement) ServiceModelExtensionCollectionElement<TServiceModelExtensionElement>.Clear() ServiceModelExtensionCollectionElement<TServiceModelExtensionElement>.Contains(TServiceModelExtensionElement) ServiceModelExtensionCollectionElement<TServiceModelExtensionElement>.ContainsKey(Type) ServiceModelExtensionCollectionElement<TServiceModelExtensionElement>.ContainsKey(String) ServiceModelExtensionCollectionElement<TServiceModelExtensionElement>.CopyTo(TServiceModelExtensionElement[], Int32) ServiceModelExtensionCollectionElement<TServiceModelExtensionElement>.DeserializeElement(XmlReader, Boolean) ServiceModelExtensionCollectionElement<TServiceModelExtensionElement>.GetEnumerator() ServiceModelExtensionCollectionElement<TServiceModelExtensionElement>.IsModified() ServiceModelExtensionCollectionElement<TServiceModelExtensionElement>.OnDeserializeUnrecognizedElement(String, XmlReader) ServiceModelExtensionCollectionElement<TServiceModelExtensionElement>.Remove(TServiceModelExtensionElement) ServiceModelExtensionCollectionElement<TServiceModelExtensionElement>.Reset(ConfigurationElement) ServiceModelExtensionCollectionElement<TServiceModelExtensionElement>.ResetModified() ServiceModelExtensionCollectionElement<TServiceModelExtensionElement>.SetIsModified() ServiceModelExtensionCollectionElement<TServiceModelExtensionElement>.SetReadOnly() ServiceModelExtensionCollectionElement<TServiceModelExtensionElement>.Unmerge(ConfigurationElement, ConfigurationElement, ConfigurationSaveMode) ServiceModelExtensionCollectionElement<TServiceModelExtensionElement>.Item[Int32] ServiceModelExtensionCollectionElement<TServiceModelExtensionElement>.Item[Type] ServiceModelExtensionCollectionElement<TServiceModelExtensionElement>.Count ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public abstract class NamedServiceModelExtensionCollectionElement<TServiceModelExtensionElement> : ServiceModelExtensionCollectionElement<TServiceModelExtensionElement> where TServiceModelExtensionElement : ServiceModelExtensionElement Type Parameters Name Description TServiceModelExtensionElement Remarks To be added. Constructors NamedServiceModelExtensionCollectionElement(String, String) Declaration protected NamedServiceModelExtensionCollectionElement(string extensionCollectionName, string name) Parameters Type Name Description String extensionCollectionName String name Properties Name Declaration public string Name { get; set; } Property Value Type Description String Properties Declaration protected override ConfigurationPropertyCollection Properties { get; } Property Value Type Description ConfigurationPropertyCollection Implements System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api-corewcf/CoreWCF.Configuration.NetHttpBindingCollectionElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.NetHttpBindingCollectionElement.html",
    "title": "Class NetHttpBindingCollectionElement",
    "keywords": "Class NetHttpBindingCollectionElement Represents a net http binding collection element. Inheritance Object BindingCollectionElement StandardBindingCollectionElement < NetHttpBinding , NetHttpBindingElement > NetHttpBindingCollectionElement Inherited Members StandardBindingCollectionElement<NetHttpBinding, NetHttpBindingElement>.Bindings Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class NetHttpBindingCollectionElement : StandardBindingCollectionElement<NetHttpBinding, NetHttpBindingElement> Remarks To be added. Constructors NetHttpBindingCollectionElement() Declaration public NetHttpBindingCollectionElement()"
  },
  "api-corewcf/CoreWCF.Configuration.NetHttpBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.NetHttpBindingElement.html",
    "title": "Class NetHttpBindingElement",
    "keywords": "Class NetHttpBindingElement Represents a net http binding element. Inheritance Object ServiceModelConfigurationElement StandardBindingElement HttpBindingBaseElement NetHttpBindingElement Implements IDefaultCommunicationTimeouts IStandardBindingElement Inherited Members HttpBindingBaseElement.AllowCookies HttpBindingBaseElement.BypassProxyOnLocal HttpBindingBaseElement.HostNameComparisonMode HttpBindingBaseElement.MaxBufferPoolSize HttpBindingBaseElement.MaxBufferSize HttpBindingBaseElement.MaxReceivedMessageSize HttpBindingBaseElement.ProxyAddress HttpBindingBaseElement.TextEncoding HttpBindingBaseElement.TransferMode HttpBindingBaseElement.UseDefaultWebProxy HttpBindingBaseElement.ReaderQuotas StandardBindingElement.Name StandardBindingElement.CloseTimeout StandardBindingElement.OpenTimeout StandardBindingElement.ReceiveTimeout StandardBindingElement.SendTimeout ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class NetHttpBindingElement : HttpBindingBaseElement, IDefaultCommunicationTimeouts, IStandardBindingElement Remarks To be added. Constructors NetHttpBindingElement() Declaration public NetHttpBindingElement() NetHttpBindingElement(String) Declaration public NetHttpBindingElement(string name) Parameters Type Name Description String name Properties MessageEncoding Declaration public NetHttpMessageEncoding MessageEncoding { get; set; } Property Value Type Description NetHttpMessageEncoding ReliableSession Declaration public string ReliableSession { get; } Property Value Type Description String Security Declaration public BasicHttpSecurityElement Security { get; } Property Value Type Description BasicHttpSecurityElement WebSocketSettings Declaration public NetHttpWebSocketTransportSettingsElement WebSocketSettings { get; set; } Property Value Type Description NetHttpWebSocketTransportSettingsElement Methods CreateBinding() Declaration public override Binding CreateBinding() Returns Type Description Binding Overrides StandardBindingElement.CreateBinding() Implements IDefaultCommunicationTimeouts IStandardBindingElement"
  },
  "api-corewcf/CoreWCF.Configuration.NetHttpWebSocketTransportSettingsElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.NetHttpWebSocketTransportSettingsElement.html",
    "title": "Class NetHttpWebSocketTransportSettingsElement",
    "keywords": "Class NetHttpWebSocketTransportSettingsElement Represents NetHttpWebSocketTransportSettingsElement for WebSocketTransportSettings. Inheritance Object NetHttpWebSocketTransportSettingsElement Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class NetHttpWebSocketTransportSettingsElement : Object Remarks To be added. Constructors NetHttpWebSocketTransportSettingsElement() Declaration public NetHttpWebSocketTransportSettingsElement()"
  },
  "api-corewcf/CoreWCF.Configuration.NetTcpBindingCollectionElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.NetTcpBindingCollectionElement.html",
    "title": "Class NetTcpBindingCollectionElement",
    "keywords": "Class NetTcpBindingCollectionElement Represents a configuration element that contains a collection of instances. Inheritance Object BindingCollectionElement StandardBindingCollectionElement < NetTcpBinding , NetTcpBindingElement > NetTcpBindingCollectionElement Inherited Members StandardBindingCollectionElement<NetTcpBinding, NetTcpBindingElement>.Bindings Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class NetTcpBindingCollectionElement : StandardBindingCollectionElement<NetTcpBinding, NetTcpBindingElement> Remarks To be added. Constructors NetTcpBindingCollectionElement() Declaration public NetTcpBindingCollectionElement()"
  },
  "api-corewcf/CoreWCF.Configuration.NetTcpBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.NetTcpBindingElement.html",
    "title": "Class NetTcpBindingElement",
    "keywords": "Class NetTcpBindingElement Represents an XML element that specifies a binding for peer channel-specific TCP messaging. Inheritance Object ServiceModelConfigurationElement StandardBindingElement NetTcpBindingElement Implements IDefaultCommunicationTimeouts IStandardBindingElement Inherited Members StandardBindingElement.Name StandardBindingElement.CloseTimeout StandardBindingElement.OpenTimeout StandardBindingElement.ReceiveTimeout StandardBindingElement.SendTimeout ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class NetTcpBindingElement : StandardBindingElement, IDefaultCommunicationTimeouts, IStandardBindingElement Remarks The netTcpBinding is a secure, reliable, optimized binding suitable for cross-machine communication. By default, it generates a run-time communication stack with WS-ReliableMessaging for reliability, Windows Security for message security and authentication, TCP for message delivery, and binary message encoding. Constructors NetTcpBindingElement() Declaration public NetTcpBindingElement() NetTcpBindingElement(String) Declaration public NetTcpBindingElement(string name) Parameters Type Name Description String name Properties HostNameComparisonMode Declaration public HostNameComparisonMode HostNameComparisonMode { get; set; } Property Value Type Description HostNameComparisonMode ListenBacklog Declaration public int ListenBacklog { get; } Property Value Type Description Int32 MaxBufferPoolSize Declaration public long MaxBufferPoolSize { get; set; } Property Value Type Description Int64 MaxBufferSize Declaration public int MaxBufferSize { get; set; } Property Value Type Description Int32 MaxConnections Declaration public int MaxConnections { get; set; } Property Value Type Description Int32 MaxReceivedMessageSize Declaration public long MaxReceivedMessageSize { get; set; } Property Value Type Description Int64 PortSharingEnabled Declaration public bool PortSharingEnabled { get; } Property Value Type Description Boolean ReaderQuotas Declaration public XmlDictionaryReaderQuotasElement ReaderQuotas { get; } Property Value Type Description XmlDictionaryReaderQuotasElement ReliableSession Declaration public string ReliableSession { get; } Property Value Type Description String Security Declaration public NetTcpSecurityElement Security { get; } Property Value Type Description NetTcpSecurityElement TransactionFlow Declaration public bool TransactionFlow { get; } Property Value Type Description Boolean TransactionProtocol Declaration public string TransactionProtocol { get; } Property Value Type Description String TransferMode Declaration public TransferMode TransferMode { get; set; } Property Value Type Description TransferMode Methods CreateBinding() Declaration public override Binding CreateBinding() Returns Type Description Binding Overrides StandardBindingElement.CreateBinding() Implements IDefaultCommunicationTimeouts IStandardBindingElement"
  },
  "api-corewcf/CoreWCF.Configuration.NetTcpSecurityElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.NetTcpSecurityElement.html",
    "title": "Class NetTcpSecurityElement",
    "keywords": "Class NetTcpSecurityElement Defines the security settings for the netTcpBinding binding. This class cannot be inherited. Inheritance Object ServiceModelConfigurationElement NetTcpSecurityElement Inherited Members ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class NetTcpSecurityElement : ServiceModelConfigurationElement Remarks To be added. Constructors NetTcpSecurityElement() Declaration public NetTcpSecurityElement() Properties Message Declaration public MessageSecurityOverTcpElement Message { get; } Property Value Type Description MessageSecurityOverTcpElement Mode Declaration public SecurityMode Mode { get; set; } Property Value Type Description SecurityMode Transport Declaration public TcpTransportSecurityElement Transport { get; } Property Value Type Description TcpTransportSecurityElement"
  },
  "api-corewcf/CoreWCF.Configuration.NonDualMessageSecurityOverHttpElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.NonDualMessageSecurityOverHttpElement.html",
    "title": "Class NonDualMessageSecurityOverHttpElement",
    "keywords": "Class NonDualMessageSecurityOverHttpElement Represents the configuration settings for the security of a message sent using HTTP for non-duplex service contracts. This class cannot be inherited. Inheritance Object ServiceModelConfigurationElement MessageSecurityOverHttpElement NonDualMessageSecurityOverHttpElement Inherited Members MessageSecurityOverHttpElement.ClientCredentialType MessageSecurityOverHttpElement.NegotiateServiceCredential MessageSecurityOverHttpElement.AlgorithmSuite ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class NonDualMessageSecurityOverHttpElement : MessageSecurityOverHttpElement Remarks To be added. Constructors NonDualMessageSecurityOverHttpElement() Declaration public NonDualMessageSecurityOverHttpElement() Properties EstablishSecurityContext Declaration public bool EstablishSecurityContext { get; set; } Property Value Type Description Boolean"
  },
  "api-corewcf/CoreWCF.Configuration.SecurityElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.SecurityElement.html",
    "title": "Class SecurityElement",
    "keywords": "Class SecurityElement Represents the XML object model for encoding security objects. This class cannot be inherited. Inheritance Object ServiceModelConfigurationElement ServiceModelExtensionElement BindingElementExtensionElement SecurityElementBase SecurityElement Inherited Members SecurityElementBase.ApplyConfiguration(BindingElement) SecurityElementBase.CreateBindingElement() SecurityElementBase.AddBindingTemplate(Dictionary<AuthenticationMode, SecurityBindingElement>, AuthenticationMode) SecurityElementBase.InitializeFrom(BindingElement) SecurityElementBase.SerializeToXmlElement(XmlWriter, String) SecurityElementBase.SerializeElement(XmlWriter, Boolean) SecurityElementBase.Unmerge(ConfigurationElement, ConfigurationElement, ConfigurationSaveMode) SecurityElementBase.DefaultAlgorithmSuite SecurityElementBase.EnableUnsecuredResponse SecurityElementBase.AuthenticationMode SecurityElementBase.BindingElementType SecurityElementBase.RequireDerivedKeys SecurityElementBase.SecurityHeaderLayout SecurityElementBase.IncludeTimestamp SecurityElementBase.AllowInsecureTransport SecurityElementBase.KeyEntropyMode SecurityElementBase.IssuedTokenParameters SecurityElementBase.LocalServiceSettings SecurityElementBase.MessageProtectionOrder SecurityElementBase.ProtectTokens SecurityElementBase.MessageSecurityVersion SecurityElementBase.RequireSecurityContextCancellation SecurityElementBase.RequireSignatureConfirmation SecurityElementBase.CanRenewSecurityContextToken ServiceModelExtensionElement.ExtensionCollectionName ServiceModelExtensionElement.ConfigurationElementName ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public sealed class SecurityElement : SecurityElementBase Remarks This class is intended to be a lightweight implementation of a simple XML object model for use within the security system, and not for use as a general XML object model. This documentation assumes a basic knowledge of XML. The simple XML object model for an element consists of the following parts: The tag is the element name. The attributes are zero or more name/value attribute pairs on the element. The children are zero or more elements nested within &lt;tag> and &lt;/tag> . It is strongly suggested that attribute based XML representation is used to express security elements and their values. This means properties of an element are expressed as attributes and property values are expressed as attribute values. Avoid nesting text within tags. For any &lt;tag>text&lt;/tag> representation a representation of type &lt;tag value=&quot;text&quot;/> is usually available. Using this attribute-based XML representation increases readability and allows easy WMI portability of the resulting XML serialization. An attribute name must be one character or longer, and cannot be null . If element-based value representation is used, elements with a text string that is null are represented in the &lt;tag/> form; otherwise, text is delimited by the &lt;tag> and &lt;/tag> tokens. Both forms can be combined with attributes, which are shown if present. The tags, attributes, and text of elements, if present, are always case-sensitive. The XML form contains quotations and escapes where necessary. String values that include characters invalid for use in XML result in an <xref:System.ArgumentException>. These rules apply to all properties and methods. Note For performance reasons, character validity is only checked when the element is encoded into XML text form, and not on every set of a property or method. Static methods allow explicit checking where needed. Constructors SecurityElement() Declaration public SecurityElement() Properties SecureConversationBootstrap Declaration public SecurityElementBase SecureConversationBootstrap { get; } Property Value Type Description SecurityElementBase Methods AddBindingTemplates(Dictionary<AuthenticationMode, SecurityBindingElement>) Declaration protected override void AddBindingTemplates(Dictionary<AuthenticationMode, SecurityBindingElement> bindingTemplates) Parameters Type Name Description Dictionary < AuthenticationMode , SecurityBindingElement > bindingTemplates Overrides SecurityElementBase.AddBindingTemplates(Dictionary<AuthenticationMode, SecurityBindingElement>) CopyFrom(ServiceModelExtensionElement) Declaration public override void CopyFrom(ServiceModelExtensionElement from) Parameters Type Name Description ServiceModelExtensionElement from Overrides SecurityElementBase.CopyFrom(ServiceModelExtensionElement) CreateBindingElement(Boolean) Declaration protected override BindingElement CreateBindingElement(bool createTemplateOnly) Parameters Type Name Description Boolean createTemplateOnly Returns Type Description BindingElement Overrides SecurityElementBase.CreateBindingElement(Boolean) InitializeNestedTokenParameterSettings(SecurityTokenParameters, Boolean) Declaration protected override void InitializeNestedTokenParameterSettings(SecurityTokenParameters sp, bool initializeNestedBindings) Parameters Type Name Description SecurityTokenParameters sp Boolean initializeNestedBindings Overrides SecurityElementBase.InitializeNestedTokenParameterSettings(SecurityTokenParameters, Boolean)"
  },
  "api-corewcf/CoreWCF.Configuration.SecurityElementBase.html": {
    "href": "api-corewcf/CoreWCF.Configuration.SecurityElementBase.html",
    "title": "Class SecurityElementBase",
    "keywords": "Class SecurityElementBase Represents a base class with members common to an element that is used to configure security settings. Inheritance Object ServiceModelConfigurationElement ServiceModelExtensionElement BindingElementExtensionElement SecurityElementBase SecurityElement Inherited Members ServiceModelExtensionElement.ExtensionCollectionName ServiceModelExtensionElement.ConfigurationElementName ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class SecurityElementBase : BindingElementExtensionElement Remarks To be added. Properties AllowInsecureTransport Declaration public bool AllowInsecureTransport { get; set; } Property Value Type Description Boolean AuthenticationMode Declaration public AuthenticationMode AuthenticationMode { get; set; } Property Value Type Description AuthenticationMode BindingElementType Declaration public override Type BindingElementType { get; } Property Value Type Description Type Overrides BindingElementExtensionElement.BindingElementType CanRenewSecurityContextToken Declaration public bool CanRenewSecurityContextToken { get; set; } Property Value Type Description Boolean DefaultAlgorithmSuite Declaration public SecurityAlgorithmSuite DefaultAlgorithmSuite { get; set; } Property Value Type Description SecurityAlgorithmSuite EnableUnsecuredResponse Declaration public bool EnableUnsecuredResponse { get; set; } Property Value Type Description Boolean IncludeTimestamp Declaration public bool IncludeTimestamp { get; set; } Property Value Type Description Boolean IssuedTokenParameters Declaration public IssuedTokenParametersElement IssuedTokenParameters { get; } Property Value Type Description IssuedTokenParametersElement KeyEntropyMode Declaration public SecurityKeyEntropyMode KeyEntropyMode { get; set; } Property Value Type Description SecurityKeyEntropyMode LocalServiceSettings Declaration public LocalServiceSecuritySettingsElement LocalServiceSettings { get; } Property Value Type Description LocalServiceSecuritySettingsElement MessageProtectionOrder Declaration public MessageProtectionOrder MessageProtectionOrder { get; set; } Property Value Type Description MessageProtectionOrder MessageSecurityVersion Declaration public MessageSecurityVersion MessageSecurityVersion { get; set; } Property Value Type Description MessageSecurityVersion ProtectTokens Declaration public bool ProtectTokens { get; set; } Property Value Type Description Boolean RequireDerivedKeys Declaration public bool RequireDerivedKeys { get; set; } Property Value Type Description Boolean RequireSecurityContextCancellation Declaration public bool RequireSecurityContextCancellation { get; set; } Property Value Type Description Boolean RequireSignatureConfirmation Declaration public bool RequireSignatureConfirmation { get; set; } Property Value Type Description Boolean SecurityHeaderLayout Declaration public SecurityHeaderLayout SecurityHeaderLayout { get; set; } Property Value Type Description SecurityHeaderLayout Methods AddBindingTemplate(Dictionary<AuthenticationMode, SecurityBindingElement>, AuthenticationMode) Declaration protected void AddBindingTemplate(Dictionary<AuthenticationMode, SecurityBindingElement> bindingTemplates, AuthenticationMode mode) Parameters Type Name Description Dictionary < AuthenticationMode , SecurityBindingElement > bindingTemplates AuthenticationMode mode AddBindingTemplates(Dictionary<AuthenticationMode, SecurityBindingElement>) Declaration protected virtual void AddBindingTemplates(Dictionary<AuthenticationMode, SecurityBindingElement> bindingTemplates) Parameters Type Name Description Dictionary < AuthenticationMode , SecurityBindingElement > bindingTemplates ApplyConfiguration(BindingElement) Declaration public override void ApplyConfiguration(BindingElement bindingElement) Parameters Type Name Description BindingElement bindingElement Overrides BindingElementExtensionElement.ApplyConfiguration(BindingElement) CopyFrom(ServiceModelExtensionElement) Declaration public override void CopyFrom(ServiceModelExtensionElement from) Parameters Type Name Description ServiceModelExtensionElement from Overrides ServiceModelExtensionElement.CopyFrom(ServiceModelExtensionElement) CreateBindingElement() Declaration protected override BindingElement CreateBindingElement() Returns Type Description BindingElement Overrides BindingElementExtensionElement.CreateBindingElement() CreateBindingElement(Boolean) Declaration protected virtual BindingElement CreateBindingElement(bool createTemplateOnly) Parameters Type Name Description Boolean createTemplateOnly Returns Type Description BindingElement InitializeFrom(BindingElement) Declaration protected override void InitializeFrom(BindingElement bindingElement) Parameters Type Name Description BindingElement bindingElement Overrides BindingElementExtensionElement.InitializeFrom(BindingElement) InitializeNestedTokenParameterSettings(SecurityTokenParameters, Boolean) Declaration protected virtual void InitializeNestedTokenParameterSettings(SecurityTokenParameters sp, bool initializeNestedBindings) Parameters Type Name Description SecurityTokenParameters sp Boolean initializeNestedBindings SerializeElement(XmlWriter, Boolean) Declaration protected override bool SerializeElement(XmlWriter writer, bool serializeCollectionKey) Parameters Type Name Description XmlWriter writer Boolean serializeCollectionKey Returns Type Description Boolean SerializeToXmlElement(XmlWriter, String) Declaration protected override bool SerializeToXmlElement(XmlWriter writer, string elementName) Parameters Type Name Description XmlWriter writer String elementName Returns Type Description Boolean Unmerge(ConfigurationElement, ConfigurationElement, ConfigurationSaveMode) Declaration protected override void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode) Parameters Type Name Description ConfigurationElement sourceElement ConfigurationElement parentElement ConfigurationSaveMode saveMode"
  },
  "api-corewcf/CoreWCF.Configuration.ServiceBuilderExtensions.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ServiceBuilderExtensions.html",
    "title": "Class ServiceBuilderExtensions",
    "keywords": "Class ServiceBuilderExtensions Inheritance Object ServiceBuilderExtensions Namespace : CoreWCF.Configuration Assembly : CoreWCF.Primitives.dll Syntax public static class ServiceBuilderExtensions : Object Methods ConfigureAllServiceHostBase(IServiceBuilder, Action<ServiceHostBase>) Declaration public static void ConfigureAllServiceHostBase(this IServiceBuilder builder, Action<ServiceHostBase> func) Parameters Type Name Description IServiceBuilder builder Action < ServiceHostBase > func ConfigureServiceHostBase(IServiceBuilder, Type, Action<ServiceHostBase>) Declaration public static void ConfigureServiceHostBase(this IServiceBuilder builder, Type serviceType, Action<ServiceHostBase> func) Parameters Type Name Description IServiceBuilder builder Type serviceType Action < ServiceHostBase > func ConfigureServiceHostBase<TService>(IServiceBuilder, Action<ServiceHostBase>) Declaration public static void ConfigureServiceHostBase<TService>(this IServiceBuilder builder, Action<ServiceHostBase> func) where TService : class Parameters Type Name Description IServiceBuilder builder Action < ServiceHostBase > func Type Parameters Name Description TService"
  },
  "api-corewcf/CoreWCF.Configuration.ServiceConfigurationBuilder.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ServiceConfigurationBuilder.html",
    "title": "Class ServiceConfigurationBuilder",
    "keywords": "Class ServiceConfigurationBuilder Inheritance Object ServiceConfigurationBuilder Namespace : CoreWCF.Configuration Assembly : CoreWCF.Primitives.dll Syntax public class ServiceConfigurationBuilder : Object Constructors ServiceConfigurationBuilder(Type) Declaration public ServiceConfigurationBuilder(Type serviceType) Parameters Type Name Description Type serviceType Methods AddServiceEndpoint(Type, Binding, Uri, Uri) Declaration public void AddServiceEndpoint(Type implementedContract, Binding binding, Uri address, Uri listenUri) Parameters Type Name Description Type implementedContract Binding binding Uri address Uri listenUri Configure(Action<ServiceConfigurationBuilder>) Declaration public void Configure(Action<ServiceConfigurationBuilder> configDelegate) Parameters Type Name Description Action < ServiceConfigurationBuilder > configDelegate"
  },
  "api-corewcf/CoreWCF.Configuration.ServiceElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ServiceElement.html",
    "title": "Class ServiceElement",
    "keywords": "Class ServiceElement Represents an XML element that contains the settings for a Windows Communication Foundation (WCF) service, as well as endpoints that expose the service. This class cannot be inherited. Inheritance Object ServiceElement Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class ServiceElement : ConfigurationElement Remarks To be added. Constructors ServiceElement() Declaration public ServiceElement() Properties BehaviorConfiguration Declaration public string BehaviorConfiguration { get; set; } Property Value Type Description String Endpoints Declaration public ServiceEndpointElementCollection Endpoints { get; } Property Value Type Description ServiceEndpointElementCollection Name Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.Configuration.ServiceElementCollection.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ServiceElementCollection.html",
    "title": "Class ServiceElementCollection",
    "keywords": "Class ServiceElementCollection Represents a collection of instances. This class cannot be inherited. Inheritance Object ServiceElementCollection Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class ServiceElementCollection : ConfigurationElementCollection Remarks To be added. Constructors ServiceElementCollection() Declaration public ServiceElementCollection() Methods CreateNewElement() Declaration protected override ConfigurationElement CreateNewElement() Returns Type Description ConfigurationElement GetElementKey(ConfigurationElement) Declaration protected override object GetElementKey(ConfigurationElement element) Parameters Type Name Description ConfigurationElement element Returns Type Description Object"
  },
  "api-corewcf/CoreWCF.Configuration.ServiceEndpoint.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ServiceEndpoint.html",
    "title": "Class ServiceEndpoint",
    "keywords": "Class ServiceEndpoint Represents the endpoint for a service that allows clients of the service to find and communicate with the service. Inheritance Object ServiceEndpoint Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class ServiceEndpoint : Object Remarks The service endpoint contains the information about the address, binding, contract, and behavior required by a client to find and interact with the service at this endpoint. Constructors ServiceEndpoint() Declaration public ServiceEndpoint() Properties Address Declaration public Uri Address { get; set; } Property Value Type Description Uri Binding Declaration public string Binding { get; set; } Property Value Type Description String BindingConfiguration Declaration public string BindingConfiguration { get; set; } Property Value Type Description String Contract Declaration public string Contract { get; set; } Property Value Type Description String Name Declaration public string Name { get; set; } Property Value Type Description String ServiceName Declaration public string ServiceName { get; set; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.Configuration.ServiceEndpointElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ServiceEndpointElement.html",
    "title": "Class ServiceEndpointElement",
    "keywords": "Class ServiceEndpointElement Represents a configuration element that provides settings for binding, contract, and address properties for a service endpoint, which is used to expose services. This class cannot be inherited. Inheritance Object ServiceEndpointElement Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class ServiceEndpointElement : ConfigurationElement Remarks To be added. Constructors ServiceEndpointElement() Declaration public ServiceEndpointElement() Properties Address Declaration public Uri Address { get; set; } Property Value Type Description Uri BehaviorConfiguration Declaration public string BehaviorConfiguration { get; set; } Property Value Type Description String Binding Declaration public string Binding { get; set; } Property Value Type Description String BindingConfiguration Declaration public string BindingConfiguration { get; set; } Property Value Type Description String BindingName Declaration public string BindingName { get; set; } Property Value Type Description String BindingNamespace Declaration public string BindingNamespace { get; set; } Property Value Type Description String Contract Declaration public string Contract { get; set; } Property Value Type Description String EndpointConfiguration Declaration public string EndpointConfiguration { get; set; } Property Value Type Description String IsSystemEndpoint Declaration public bool IsSystemEndpoint { get; set; } Property Value Type Description Boolean Kind Declaration public string Kind { get; set; } Property Value Type Description String ListenUri Declaration public Uri ListenUri { get; set; } Property Value Type Description Uri Name Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.Configuration.ServiceEndpointElementCollection.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ServiceEndpointElementCollection.html",
    "title": "Class ServiceEndpointElementCollection",
    "keywords": "Class ServiceEndpointElementCollection Represents a collection of instances. This class cannot be inherited. Inheritance Object ServiceEndpointElementCollection Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class ServiceEndpointElementCollection : ConfigurationElementCollection Remarks To be added. Constructors ServiceEndpointElementCollection() Declaration public ServiceEndpointElementCollection() Methods CreateNewElement() Declaration protected override ConfigurationElement CreateNewElement() Returns Type Description ConfigurationElement GetElementKey(ConfigurationElement) Declaration protected override object GetElementKey(ConfigurationElement element) Parameters Type Name Description ConfigurationElement element Returns Type Description Object"
  },
  "api-corewcf/CoreWCF.Configuration.ServiceModelApplicationBuilderExtensions.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ServiceModelApplicationBuilderExtensions.html",
    "title": "Class ServiceModelApplicationBuilderExtensions",
    "keywords": "Class ServiceModelApplicationBuilderExtensions Inheritance Object ServiceModelApplicationBuilderExtensions Namespace : CoreWCF.Configuration Assembly : CoreWCF.Primitives.dll Syntax public static class ServiceModelApplicationBuilderExtensions : Object Methods UseServiceModel(IApplicationBuilder) Declaration public static IApplicationBuilder UseServiceModel(this IApplicationBuilder app) Parameters Type Name Description IApplicationBuilder app Returns Type Description IApplicationBuilder UseServiceModel(IApplicationBuilder, Action<IServiceBuilder>) Declaration public static IApplicationBuilder UseServiceModel(this IApplicationBuilder app, Action<IServiceBuilder> configureServices) Parameters Type Name Description IApplicationBuilder app Action < IServiceBuilder > configureServices Returns Type Description IApplicationBuilder"
  },
  "api-corewcf/CoreWCF.Configuration.ServiceModelConfigurationElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ServiceModelConfigurationElement.html",
    "title": "Class ServiceModelConfigurationElement",
    "keywords": "Class ServiceModelConfigurationElement Binding-related Configuration elements use this base class for WCF-wide commonalities Inheritance Object ServiceModelConfigurationElement AddressHeaderCollectionElement BasicHttpMessageSecurityElement BasicHttpSecurityElement EndpointAddressElementBase HttpTransportSecurityElement IssuedTokenParametersElement LocalServiceSecuritySettingsElement MessageSecurityOverHttpElement MessageSecurityOverTcpElement NetTcpSecurityElement ServiceModelExtensionCollectionElement<TServiceModelExtensionElement> ServiceModelExtensionElement StandardBindingElement TcpConnectionPoolSettingsElement TcpTransportSecurityElement WebSocketTransportSettingsElement WSHttpSecurityElement WSHttpTransportSecurityElement XmlDictionaryReaderQuotasElement Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public abstract class ServiceModelConfigurationElement : ConfigurationElement Constructors ServiceModelConfigurationElement() Declaration protected ServiceModelConfigurationElement() Methods SetPropertyValueIfNotDefaultValue<T>(String, T) Used by InitializeFrom() pattern to avoid writing default values to generated .config files. Declaration protected void SetPropertyValueIfNotDefaultValue<T>(string propertyName, T value) Parameters Type Name Description String propertyName ConfigurationProperty.Name for the configuration property to set T value Value to set Type Parameters Name Description T"
  },
  "api-corewcf/CoreWCF.Configuration.ServiceModelConfigurationElementCollection-1.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ServiceModelConfigurationElementCollection-1.html",
    "title": "Class ServiceModelConfigurationElementCollection<TConfigurationElementType>",
    "keywords": "Class ServiceModelConfigurationElementCollection<TConfigurationElementType> Represents an abstract base class for a used within the namespace. Inheritance Object ServiceModelConfigurationElementCollection<TConfigurationElementType> ClaimTypeElementCollection ServiceModelEnhancedConfigurationElementCollection<TConfigurationElement> XmlElementElementCollection Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public abstract class ServiceModelConfigurationElementCollection<TConfigurationElementType> : ConfigurationElementCollection where TConfigurationElementType : ConfigurationElement, new() Type Parameters Name Description TConfigurationElementType Remarks To be added. Methods CreateNewElement() Declaration protected override ConfigurationElement CreateNewElement() Returns Type Description ConfigurationElement"
  },
  "api-corewcf/CoreWCF.Configuration.ServiceModelEnhancedConfigurationElementCollection-1.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ServiceModelEnhancedConfigurationElementCollection-1.html",
    "title": "Class ServiceModelEnhancedConfigurationElementCollection<TConfigurationElement>",
    "keywords": "Class ServiceModelEnhancedConfigurationElementCollection<TConfigurationElement> An abstract base class for a looking for a merge semantic similar to an that allows duplicates, but throws an exception when duplicates are found in the same configuration scope (e.g. same configuration file). Inheritance Object ServiceModelConfigurationElementCollection <TConfigurationElement> ServiceModelEnhancedConfigurationElementCollection<TConfigurationElement> StandardBindingElementCollection<TBindingConfiguration> Inherited Members ServiceModelConfigurationElementCollection<TConfigurationElement>.CreateNewElement() Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public abstract class ServiceModelEnhancedConfigurationElementCollection<TConfigurationElement> : ServiceModelConfigurationElementCollection<TConfigurationElement> where TConfigurationElement : ConfigurationElement, new() Type Parameters Name Description TConfigurationElement Remarks To be added."
  },
  "api-corewcf/CoreWCF.Configuration.ServiceModelExtensionCollectionElement-1.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ServiceModelExtensionCollectionElement-1.html",
    "title": "Class ServiceModelExtensionCollectionElement<TServiceModelExtensionElement>",
    "keywords": "Class ServiceModelExtensionCollectionElement<TServiceModelExtensionElement> An abstract base class for a collection of objects. Inheritance Object ServiceModelConfigurationElement ServiceModelExtensionCollectionElement<TServiceModelExtensionElement> NamedServiceModelExtensionCollectionElement<TServiceModelExtensionElement> Implements ICollection <TServiceModelExtensionElement> IEnumerable <TServiceModelExtensionElement> IEnumerable Inherited Members ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public abstract class ServiceModelExtensionCollectionElement<TServiceModelExtensionElement> : ServiceModelConfigurationElement where TServiceModelExtensionElement : ServiceModelExtensionElement Type Parameters Name Description TServiceModelExtensionElement Remarks To be added. Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Item[Int32] Declaration public TServiceModelExtensionElement this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description TServiceModelExtensionElement Item[Type] Declaration public TServiceModelExtensionElement this[Type extensionType] { get; } Parameters Type Name Description Type extensionType Property Value Type Description TServiceModelExtensionElement Methods Add(TServiceModelExtensionElement) Declaration public virtual void Add(TServiceModelExtensionElement element) Parameters Type Name Description TServiceModelExtensionElement element CanAdd(TServiceModelExtensionElement) Declaration public virtual bool CanAdd(TServiceModelExtensionElement element) Parameters Type Name Description TServiceModelExtensionElement element Returns Type Description Boolean Clear() Declaration public void Clear() Contains(TServiceModelExtensionElement) Declaration public bool Contains(TServiceModelExtensionElement element) Parameters Type Name Description TServiceModelExtensionElement element Returns Type Description Boolean ContainsKey(String) Declaration public bool ContainsKey(string elementName) Parameters Type Name Description String elementName Returns Type Description Boolean ContainsKey(Type) Declaration public bool ContainsKey(Type elementType) Parameters Type Name Description Type elementType Returns Type Description Boolean CopyTo(TServiceModelExtensionElement[], Int32) Declaration public void CopyTo(TServiceModelExtensionElement[] elements, int start) Parameters Type Name Description TServiceModelExtensionElement[] elements Int32 start DeserializeElement(XmlReader, Boolean) Declaration protected override void DeserializeElement(XmlReader reader, bool serializeCollectionKey) Parameters Type Name Description XmlReader reader Boolean serializeCollectionKey GetEnumerator() Declaration public IEnumerator<TServiceModelExtensionElement> GetEnumerator() Returns Type Description IEnumerator <TServiceModelExtensionElement> IsModified() Declaration protected override bool IsModified() Returns Type Description Boolean OnDeserializeUnrecognizedElement(String, XmlReader) Declaration protected override bool OnDeserializeUnrecognizedElement(string elementName, XmlReader reader) Parameters Type Name Description String elementName XmlReader reader Returns Type Description Boolean Remove(TServiceModelExtensionElement) Declaration public bool Remove(TServiceModelExtensionElement element) Parameters Type Name Description TServiceModelExtensionElement element Returns Type Description Boolean Reset(ConfigurationElement) Declaration protected override void Reset(ConfigurationElement parentElement) Parameters Type Name Description ConfigurationElement parentElement ResetModified() Declaration protected override void ResetModified() SetIsModified() Declaration protected void SetIsModified() SetReadOnly() Declaration protected override void SetReadOnly() Unmerge(ConfigurationElement, ConfigurationElement, ConfigurationSaveMode) Declaration protected override void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode) Parameters Type Name Description ConfigurationElement sourceElement ConfigurationElement parentElement ConfigurationSaveMode saveMode Implements System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api-corewcf/CoreWCF.Configuration.ServiceModelExtensionElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ServiceModelExtensionElement.html",
    "title": "Class ServiceModelExtensionElement",
    "keywords": "Class ServiceModelExtensionElement An abstract base class for a configuration element that contains a dynamic collection of heterogeneous child elements. Inheritance Object ServiceModelConfigurationElement ServiceModelExtensionElement BindingElementExtensionElement Inherited Members ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public abstract class ServiceModelExtensionElement : ServiceModelConfigurationElement Remarks To be added. Constructors ServiceModelExtensionElement() Declaration protected ServiceModelExtensionElement() Properties ConfigurationElementName Declaration public string ConfigurationElementName { get; protected set; } Property Value Type Description String ExtensionCollectionName Declaration public string ExtensionCollectionName { get; protected set; } Property Value Type Description String Methods CopyFrom(ServiceModelExtensionElement) Declaration public virtual void CopyFrom(ServiceModelExtensionElement from) Parameters Type Name Description ServiceModelExtensionElement from"
  },
  "api-corewcf/CoreWCF.Configuration.ServiceModelOptions.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ServiceModelOptions.html",
    "title": "Class ServiceModelOptions",
    "keywords": "Class ServiceModelOptions Inheritance Object ServiceModelOptions Namespace : CoreWCF.Configuration Assembly : CoreWCF.Primitives.dll Syntax public class ServiceModelOptions : Object Constructors ServiceModelOptions() Declaration public ServiceModelOptions() Methods ConfigureService(Type, Action<ServiceConfigurationBuilder>) Declaration public void ConfigureService(Type serviceType, Action<ServiceConfigurationBuilder> configure) Parameters Type Name Description Type serviceType Action < ServiceConfigurationBuilder > configure"
  },
  "api-corewcf/CoreWCF.Configuration.ServiceModelSectionGroup.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ServiceModelSectionGroup.html",
    "title": "Class ServiceModelSectionGroup",
    "keywords": "Class ServiceModelSectionGroup Represents the main configuration section for Windows Communication Foundation (WCF). This class cannot be inherited. Inheritance Object ServiceModelSectionGroup Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public sealed class ServiceModelSectionGroup : ConfigurationSectionGroup Remarks All WCF configuration elements are nested in the system.serviceModel element of the configuration file. WCF does not add elements to the configuration sections of other products. Constructors ServiceModelSectionGroup() Declaration public ServiceModelSectionGroup() Properties Bindings Declaration public BindingsSection Bindings { get; } Property Value Type Description BindingsSection Services Declaration public ServicesSection Services { get; } Property Value Type Description ServicesSection Methods GetSectionGroup(Configuration) Declaration public static ServiceModelSectionGroup GetSectionGroup(Configuration config) Parameters Type Name Description Configuration config Returns Type Description ServiceModelSectionGroup"
  },
  "api-corewcf/CoreWCF.Configuration.ServiceModelServiceCollectionExtensions.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ServiceModelServiceCollectionExtensions.html",
    "title": "Class ServiceModelServiceCollectionExtensions",
    "keywords": "Class ServiceModelServiceCollectionExtensions Inheritance Object ServiceModelServiceCollectionExtensions Namespace : CoreWCF.Configuration Assembly : CoreWCF.Primitives.dll Syntax public static class ServiceModelServiceCollectionExtensions : Object Methods AddServiceModelServices(IServiceCollection) Declaration public static IServiceCollection AddServiceModelServices(this IServiceCollection services) Parameters Type Name Description IServiceCollection services Returns Type Description IServiceCollection"
  },
  "api-corewcf/CoreWCF.Configuration.ServiceModelWebHostBuilderExtensions.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ServiceModelWebHostBuilderExtensions.html",
    "title": "Class ServiceModelWebHostBuilderExtensions",
    "keywords": "Class ServiceModelWebHostBuilderExtensions Inheritance Object ServiceModelWebHostBuilderExtensions Namespace : CoreWCF.Configuration Assembly : CoreWCF.NetTcp.dll Syntax public static class ServiceModelWebHostBuilderExtensions : Object Methods UseNetTcp(IWebHostBuilder) Declaration public static IWebHostBuilder UseNetTcp(this IWebHostBuilder webHostBuilder) Parameters Type Name Description IWebHostBuilder webHostBuilder Returns Type Description IWebHostBuilder UseNetTcp(IWebHostBuilder, Int32) Declaration public static IWebHostBuilder UseNetTcp(this IWebHostBuilder webHostBuilder, int port) Parameters Type Name Description IWebHostBuilder webHostBuilder Int32 port Returns Type Description IWebHostBuilder UseNetTcp(IWebHostBuilder, IPAddress) Declaration public static IWebHostBuilder UseNetTcp(this IWebHostBuilder webHostBuilder, IPAddress ipAddress) Parameters Type Name Description IWebHostBuilder webHostBuilder IPAddress ipAddress Returns Type Description IWebHostBuilder UseNetTcp(IWebHostBuilder, IPAddress, Int32) Declaration public static IWebHostBuilder UseNetTcp(this IWebHostBuilder webHostBuilder, IPAddress ipAddress, int port) Parameters Type Name Description IWebHostBuilder webHostBuilder IPAddress ipAddress Int32 port Returns Type Description IWebHostBuilder"
  },
  "api-corewcf/CoreWCF.Configuration.ServiceModelWebServiceBuilderExtensions.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ServiceModelWebServiceBuilderExtensions.html",
    "title": "Class ServiceModelWebServiceBuilderExtensions",
    "keywords": "Class ServiceModelWebServiceBuilderExtensions Inheritance Object ServiceModelWebServiceBuilderExtensions Namespace : CoreWCF.Configuration Assembly : CoreWCF.WebHttp.dll Syntax public static class ServiceModelWebServiceBuilderExtensions : Object Methods AddServiceWebEndpoint(IServiceBuilder, Type, Type, WebHttpBinding, Uri, Uri, Action<WebHttpBehavior>) Declaration public static IServiceBuilder AddServiceWebEndpoint(this IServiceBuilder builder, Type service, Type implementedContract, WebHttpBinding binding, Uri address, Uri listenUri, Action<WebHttpBehavior> configureWebBehavior = null) Parameters Type Name Description IServiceBuilder builder Type service Type implementedContract WebHttpBinding binding Uri address Uri listenUri Action < WebHttpBehavior > configureWebBehavior Returns Type Description IServiceBuilder AddServiceWebEndpoint(IServiceBuilder, Type, Type, Uri, Uri, Action<WebHttpBehavior>) Declaration public static IServiceBuilder AddServiceWebEndpoint(this IServiceBuilder builder, Type service, Type implementedContract, Uri address, Uri listenUri, Action<WebHttpBehavior> configureWebBehavior = null) Parameters Type Name Description IServiceBuilder builder Type service Type implementedContract Uri address Uri listenUri Action < WebHttpBehavior > configureWebBehavior Returns Type Description IServiceBuilder AddServiceWebEndpoint<TService>(IServiceBuilder, Type, WebHttpBinding, String, Action<WebHttpBehavior>) Declaration public static IServiceBuilder AddServiceWebEndpoint<TService>(this IServiceBuilder builder, Type implementedContract, WebHttpBinding binding, string address, Action<WebHttpBehavior> configureWebBehavior = null) Parameters Type Name Description IServiceBuilder builder Type implementedContract WebHttpBinding binding String address Action < WebHttpBehavior > configureWebBehavior Returns Type Description IServiceBuilder Type Parameters Name Description TService AddServiceWebEndpoint<TService>(IServiceBuilder, Type, WebHttpBinding, String, Uri, Action<WebHttpBehavior>) Declaration public static IServiceBuilder AddServiceWebEndpoint<TService>(this IServiceBuilder builder, Type implementedContract, WebHttpBinding binding, string address, Uri listenUri, Action<WebHttpBehavior> configureWebBehavior = null) Parameters Type Name Description IServiceBuilder builder Type implementedContract WebHttpBinding binding String address Uri listenUri Action < WebHttpBehavior > configureWebBehavior Returns Type Description IServiceBuilder Type Parameters Name Description TService AddServiceWebEndpoint<TService>(IServiceBuilder, Type, WebHttpBinding, Uri, Action<WebHttpBehavior>) Declaration public static IServiceBuilder AddServiceWebEndpoint<TService>(this IServiceBuilder builder, Type implementedContract, WebHttpBinding binding, Uri address, Action<WebHttpBehavior> configureWebBehavior = null) Parameters Type Name Description IServiceBuilder builder Type implementedContract WebHttpBinding binding Uri address Action < WebHttpBehavior > configureWebBehavior Returns Type Description IServiceBuilder Type Parameters Name Description TService AddServiceWebEndpoint<TService>(IServiceBuilder, Type, WebHttpBinding, Uri, Uri, Action<WebHttpBehavior>) Declaration public static IServiceBuilder AddServiceWebEndpoint<TService>(this IServiceBuilder builder, Type implementedContract, WebHttpBinding binding, Uri address, Uri listenUri, Action<WebHttpBehavior> configureWebBehavior = null) Parameters Type Name Description IServiceBuilder builder Type implementedContract WebHttpBinding binding Uri address Uri listenUri Action < WebHttpBehavior > configureWebBehavior Returns Type Description IServiceBuilder Type Parameters Name Description TService AddServiceWebEndpoint<TService>(IServiceBuilder, Type, String, Action<WebHttpBehavior>) Declaration public static IServiceBuilder AddServiceWebEndpoint<TService>(this IServiceBuilder builder, Type implementedContract, string address, Action<WebHttpBehavior> configureWebBehavior = null) Parameters Type Name Description IServiceBuilder builder Type implementedContract String address Action < WebHttpBehavior > configureWebBehavior Returns Type Description IServiceBuilder Type Parameters Name Description TService AddServiceWebEndpoint<TService>(IServiceBuilder, Type, String, Uri, Action<WebHttpBehavior>) Declaration public static IServiceBuilder AddServiceWebEndpoint<TService>(this IServiceBuilder builder, Type implementedContract, string address, Uri listenUri, Action<WebHttpBehavior> configureWebBehavior = null) Parameters Type Name Description IServiceBuilder builder Type implementedContract String address Uri listenUri Action < WebHttpBehavior > configureWebBehavior Returns Type Description IServiceBuilder Type Parameters Name Description TService AddServiceWebEndpoint<TService>(IServiceBuilder, Type, Uri, Action<WebHttpBehavior>) Declaration public static IServiceBuilder AddServiceWebEndpoint<TService>(this IServiceBuilder builder, Type implementedContract, Uri address, Action<WebHttpBehavior> configureWebBehavior = null) Parameters Type Name Description IServiceBuilder builder Type implementedContract Uri address Action < WebHttpBehavior > configureWebBehavior Returns Type Description IServiceBuilder Type Parameters Name Description TService AddServiceWebEndpoint<TService>(IServiceBuilder, Type, Uri, Uri, Action<WebHttpBehavior>) Declaration public static IServiceBuilder AddServiceWebEndpoint<TService>(this IServiceBuilder builder, Type implementedContract, Uri address, Uri listenUri, Action<WebHttpBehavior> configureWebBehavior = null) Parameters Type Name Description IServiceBuilder builder Type implementedContract Uri address Uri listenUri Action < WebHttpBehavior > configureWebBehavior Returns Type Description IServiceBuilder Type Parameters Name Description TService AddServiceWebEndpoint<TService, TContract>(IServiceBuilder, WebHttpBinding, String, Action<WebHttpBehavior>) Declaration public static IServiceBuilder AddServiceWebEndpoint<TService, TContract>(this IServiceBuilder builder, WebHttpBinding binding, string address, Action<WebHttpBehavior> configureWebBehavior = null) Parameters Type Name Description IServiceBuilder builder WebHttpBinding binding String address Action < WebHttpBehavior > configureWebBehavior Returns Type Description IServiceBuilder Type Parameters Name Description TService TContract AddServiceWebEndpoint<TService, TContract>(IServiceBuilder, WebHttpBinding, String, Uri, Action<WebHttpBehavior>) Declaration public static IServiceBuilder AddServiceWebEndpoint<TService, TContract>(this IServiceBuilder builder, WebHttpBinding binding, string address, Uri listenUri, Action<WebHttpBehavior> configureWebBehavior = null) Parameters Type Name Description IServiceBuilder builder WebHttpBinding binding String address Uri listenUri Action < WebHttpBehavior > configureWebBehavior Returns Type Description IServiceBuilder Type Parameters Name Description TService TContract AddServiceWebEndpoint<TService, TContract>(IServiceBuilder, WebHttpBinding, Uri, Action<WebHttpBehavior>) Declaration public static IServiceBuilder AddServiceWebEndpoint<TService, TContract>(this IServiceBuilder builder, WebHttpBinding binding, Uri address, Action<WebHttpBehavior> configureWebBehavior = null) Parameters Type Name Description IServiceBuilder builder WebHttpBinding binding Uri address Action < WebHttpBehavior > configureWebBehavior Returns Type Description IServiceBuilder Type Parameters Name Description TService TContract AddServiceWebEndpoint<TService, TContract>(IServiceBuilder, WebHttpBinding, Uri, Uri, Action<WebHttpBehavior>) Declaration public static IServiceBuilder AddServiceWebEndpoint<TService, TContract>(this IServiceBuilder builder, WebHttpBinding binding, Uri address, Uri listenUri, Action<WebHttpBehavior> configureWebBehavior = null) Parameters Type Name Description IServiceBuilder builder WebHttpBinding binding Uri address Uri listenUri Action < WebHttpBehavior > configureWebBehavior Returns Type Description IServiceBuilder Type Parameters Name Description TService TContract AddServiceWebEndpoint<TService, TContract>(IServiceBuilder, String, Action<WebHttpBehavior>) Declaration public static IServiceBuilder AddServiceWebEndpoint<TService, TContract>(this IServiceBuilder builder, string address, Action<WebHttpBehavior> configureWebBehavior = null) Parameters Type Name Description IServiceBuilder builder String address Action < WebHttpBehavior > configureWebBehavior Returns Type Description IServiceBuilder Type Parameters Name Description TService TContract AddServiceWebEndpoint<TService, TContract>(IServiceBuilder, String, Uri, Action<WebHttpBehavior>) Declaration public static IServiceBuilder AddServiceWebEndpoint<TService, TContract>(this IServiceBuilder builder, string address, Uri listenUri, Action<WebHttpBehavior> configureWebBehavior = null) Parameters Type Name Description IServiceBuilder builder String address Uri listenUri Action < WebHttpBehavior > configureWebBehavior Returns Type Description IServiceBuilder Type Parameters Name Description TService TContract AddServiceWebEndpoint<TService, TContract>(IServiceBuilder, Uri, Action<WebHttpBehavior>) Declaration public static IServiceBuilder AddServiceWebEndpoint<TService, TContract>(this IServiceBuilder builder, Uri address, Action<WebHttpBehavior> configureWebBehavior = null) Parameters Type Name Description IServiceBuilder builder Uri address Action < WebHttpBehavior > configureWebBehavior Returns Type Description IServiceBuilder Type Parameters Name Description TService TContract AddServiceWebEndpoint<TService, TContract>(IServiceBuilder, Uri, Uri, Action<WebHttpBehavior>) Declaration public static IServiceBuilder AddServiceWebEndpoint<TService, TContract>(this IServiceBuilder builder, Uri address, Uri listenUri, Action<WebHttpBehavior> configureWebBehavior = null) Parameters Type Name Description IServiceBuilder builder Uri address Uri listenUri Action < WebHttpBehavior > configureWebBehavior Returns Type Description IServiceBuilder Type Parameters Name Description TService TContract"
  },
  "api-corewcf/CoreWCF.Configuration.ServiceModelWebServiceCollectionExtensions.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ServiceModelWebServiceCollectionExtensions.html",
    "title": "Class ServiceModelWebServiceCollectionExtensions",
    "keywords": "Class ServiceModelWebServiceCollectionExtensions Inheritance Object ServiceModelWebServiceCollectionExtensions Namespace : CoreWCF.Configuration Assembly : CoreWCF.WebHttp.dll Syntax public static class ServiceModelWebServiceCollectionExtensions : Object Methods AddServiceModelWebServices(IServiceCollection, Action<OpenApiOptions>) Declaration public static IServiceCollection AddServiceModelWebServices(this IServiceCollection services, Action<OpenApiOptions> configure = null) Parameters Type Name Description IServiceCollection services Action < OpenApiOptions > configure Returns Type Description IServiceCollection"
  },
  "api-corewcf/CoreWCF.Configuration.ServiceNameElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ServiceNameElement.html",
    "title": "Class ServiceNameElement",
    "keywords": "Class ServiceNameElement The class represents a configuration element for a service name used in a . Inheritance Object ServiceNameElement Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public sealed class ServiceNameElement : ConfigurationElement Remarks To be added. Constructors ServiceNameElement() Declaration public ServiceNameElement() Properties Name Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.Configuration.ServiceNameElementCollection.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ServiceNameElementCollection.html",
    "title": "Class ServiceNameElementCollection",
    "keywords": "Class ServiceNameElementCollection The class is a collection of service principal names that represent a configuration element for an . Inheritance Object ServiceNameElementCollection Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public sealed class ServiceNameElementCollection : ConfigurationElementCollection Remarks To be added. Constructors ServiceNameElementCollection() Declaration public ServiceNameElementCollection() Properties Item[Int32] Declaration public ServiceNameElement this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description ServiceNameElement Item[String] Declaration public ServiceNameElement this[string name] { get; set; } Parameters Type Name Description String name Property Value Type Description ServiceNameElement Methods Add(ServiceNameElement) Declaration public void Add(ServiceNameElement element) Parameters Type Name Description ServiceNameElement element Clear() Declaration public void Clear() CreateNewElement() Declaration protected override ConfigurationElement CreateNewElement() Returns Type Description ConfigurationElement GetElementKey(ConfigurationElement) Declaration protected override object GetElementKey(ConfigurationElement element) Parameters Type Name Description ConfigurationElement element Returns Type Description Object IndexOf(ServiceNameElement) Declaration public int IndexOf(ServiceNameElement element) Parameters Type Name Description ServiceNameElement element Returns Type Description Int32 Remove(ServiceNameElement) Declaration public void Remove(ServiceNameElement element) Parameters Type Name Description ServiceNameElement element Remove(String) Declaration public void Remove(string name) Parameters Type Name Description String name RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index"
  },
  "api-corewcf/CoreWCF.Configuration.ServiceOptions.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ServiceOptions.html",
    "title": "Class ServiceOptions",
    "keywords": "Class ServiceOptions Inheritance Object ServiceOptions Namespace : CoreWCF.Configuration Assembly : CoreWCF.Primitives.dll Syntax public class ServiceOptions : Object Properties BaseAddresses Declaration public ICollection<Uri> BaseAddresses { get; } Property Value Type Description ICollection < Uri > DebugBehavior Declaration public ServiceDebugBehavior DebugBehavior { get; } Property Value Type Description ServiceDebugBehavior"
  },
  "api-corewcf/CoreWCF.Configuration.ServicesSection.html": {
    "href": "api-corewcf/CoreWCF.Configuration.ServicesSection.html",
    "title": "Class ServicesSection",
    "keywords": "Class ServicesSection Represents the configuration section that contains services. Inheritance Object ServicesSection Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class ServicesSection : ConfigurationSection Remarks Services are defined in the services section of the configuration file. Each service has its own service configuration section. Constructors ServicesSection() Declaration public ServicesSection() Properties Services Declaration public ServiceElementCollection Services { get; } Property Value Type Description ServiceElementCollection"
  },
  "api-corewcf/CoreWCF.Configuration.SslStreamSecurityElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.SslStreamSecurityElement.html",
    "title": "Class SslStreamSecurityElement",
    "keywords": "Class SslStreamSecurityElement Represents the configuration element that specifies the security settings for a SSL stream binding. This class cannot be inherited. Inheritance Object ServiceModelConfigurationElement ServiceModelExtensionElement BindingElementExtensionElement SslStreamSecurityElement Inherited Members ServiceModelExtensionElement.ExtensionCollectionName ServiceModelExtensionElement.ConfigurationElementName ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public sealed class SslStreamSecurityElement : BindingElementExtensionElement Remarks To be added. Constructors SslStreamSecurityElement() Declaration public SslStreamSecurityElement() Properties BindingElementType Declaration public override Type BindingElementType { get; } Property Value Type Description Type Overrides BindingElementExtensionElement.BindingElementType RequireClientCertificate Declaration public bool RequireClientCertificate { get; set; } Property Value Type Description Boolean SslProtocols Declaration public SslProtocols SslProtocols { get; } Property Value Type Description SslProtocols Methods ApplyConfiguration(BindingElement) Declaration public override void ApplyConfiguration(BindingElement bindingElement) Parameters Type Name Description BindingElement bindingElement Overrides BindingElementExtensionElement.ApplyConfiguration(BindingElement) CopyFrom(ServiceModelExtensionElement) Declaration public override void CopyFrom(ServiceModelExtensionElement from) Parameters Type Name Description ServiceModelExtensionElement from Overrides ServiceModelExtensionElement.CopyFrom(ServiceModelExtensionElement) CreateBindingElement() Declaration protected override BindingElement CreateBindingElement() Returns Type Description BindingElement Overrides BindingElementExtensionElement.CreateBindingElement() InitializeFrom(BindingElement) Declaration protected override void InitializeFrom(BindingElement bindingElement) Parameters Type Name Description BindingElement bindingElement Overrides BindingElementExtensionElement.InitializeFrom(BindingElement)"
  },
  "api-corewcf/CoreWCF.Configuration.StandardBindingCollectionElement-2.html": {
    "href": "api-corewcf/CoreWCF.Configuration.StandardBindingCollectionElement-2.html",
    "title": "Class StandardBindingCollectionElement<TStandardBinding, TBindingConfiguration>",
    "keywords": "Class StandardBindingCollectionElement<TStandardBinding, TBindingConfiguration> Provides a base class for the configuration sections that specify predefined bindings provided by Windows Communication Foundation (WCF). Inheritance Object BindingCollectionElement StandardBindingCollectionElement<TStandardBinding, TBindingConfiguration> BasicHttpBindingCollectionElement CustomBindingCollectionElement NetHttpBindingCollectionElement NetTcpBindingCollectionElement WSHttpBindingCollectionElement Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class StandardBindingCollectionElement<TStandardBinding, TBindingConfiguration> : BindingCollectionElement where TStandardBinding : Binding where TBindingConfiguration : ConfigurationElement, IDefaultCommunicationTimeouts, IStandardBindingElement, new() Type Parameters Name Description TStandardBinding TBindingConfiguration Remarks To be added. Constructors StandardBindingCollectionElement() Declaration public StandardBindingCollectionElement() Properties Bindings Declaration public StandardBindingElementCollection<TBindingConfiguration> Bindings { get; } Property Value Type Description StandardBindingElementCollection <TBindingConfiguration>"
  },
  "api-corewcf/CoreWCF.Configuration.StandardBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.StandardBindingElement.html",
    "title": "Class StandardBindingElement",
    "keywords": "Class StandardBindingElement Provides a base class for the configuration elements that specify predefined bindings provided by Windows Communication Foundation (WCF). Inheritance Object ServiceModelConfigurationElement StandardBindingElement HttpBindingBaseElement NetTcpBindingElement WSHttpBindingBaseElement Implements IDefaultCommunicationTimeouts IStandardBindingElement Inherited Members ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public abstract class StandardBindingElement : ServiceModelConfigurationElement, IDefaultCommunicationTimeouts, IStandardBindingElement Remarks This class defines a binding configuration element that can be used to describe an aspect of how an endpoint communicates with others in the network. Constructors StandardBindingElement() Declaration protected StandardBindingElement() StandardBindingElement(String) Declaration protected StandardBindingElement(string name) Parameters Type Name Description String name Properties CloseTimeout Declaration public TimeSpan CloseTimeout { get; set; } Property Value Type Description TimeSpan Name Declaration public string Name { get; set; } Property Value Type Description String OpenTimeout Declaration public TimeSpan OpenTimeout { get; set; } Property Value Type Description TimeSpan ReceiveTimeout Declaration public TimeSpan ReceiveTimeout { get; set; } Property Value Type Description TimeSpan SendTimeout Declaration public TimeSpan SendTimeout { get; set; } Property Value Type Description TimeSpan Methods CreateBinding() Declaration public abstract Binding CreateBinding() Returns Type Description Binding Implements IDefaultCommunicationTimeouts IStandardBindingElement"
  },
  "api-corewcf/CoreWCF.Configuration.StandardBindingElementCollection-1.html": {
    "href": "api-corewcf/CoreWCF.Configuration.StandardBindingElementCollection-1.html",
    "title": "Class StandardBindingElementCollection<TBindingConfiguration>",
    "keywords": "Class StandardBindingElementCollection<TBindingConfiguration> Represents a collection of objects. This class cannot be inherited. Inheritance Object ServiceModelConfigurationElementCollection <TBindingConfiguration> ServiceModelEnhancedConfigurationElementCollection <TBindingConfiguration> StandardBindingElementCollection<TBindingConfiguration> Inherited Members ServiceModelConfigurationElementCollection<TBindingConfiguration>.CreateNewElement() Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class StandardBindingElementCollection<TBindingConfiguration> : ServiceModelEnhancedConfigurationElementCollection<TBindingConfiguration> where TBindingConfiguration : ConfigurationElement, IDefaultCommunicationTimeouts, IStandardBindingElement, new() Type Parameters Name Description TBindingConfiguration Remarks To be added. Constructors StandardBindingElementCollection() Declaration public StandardBindingElementCollection() Methods GetElementKey(ConfigurationElement) Declaration protected override object GetElementKey(ConfigurationElement element) Parameters Type Name Description ConfigurationElement element Returns Type Description Object"
  },
  "api-corewcf/CoreWCF.Configuration.TcpConnectionPoolSettingsElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.TcpConnectionPoolSettingsElement.html",
    "title": "Class TcpConnectionPoolSettingsElement",
    "keywords": "Class TcpConnectionPoolSettingsElement Represents a configuration element that specifies additional connection pool settings for a TCP transport. This class cannot be inherited. Inheritance Object ServiceModelConfigurationElement TcpConnectionPoolSettingsElement Inherited Members ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public sealed class TcpConnectionPoolSettingsElement : ServiceModelConfigurationElement Remarks To be added. Constructors TcpConnectionPoolSettingsElement() Declaration public TcpConnectionPoolSettingsElement() Properties IdleTimeout Declaration public TimeSpan IdleTimeout { get; set; } Property Value Type Description TimeSpan MaxOutboundConnectionsPerEndpoint Declaration public int MaxOutboundConnectionsPerEndpoint { get; set; } Property Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.Configuration.TcpTransportElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.TcpTransportElement.html",
    "title": "Class TcpTransportElement",
    "keywords": "Class TcpTransportElement Specifies a configuration element that causes a channel to transfer messages on the TCP transport when it is included in a custom binding. This class cannot be inherited. Inheritance Object ServiceModelConfigurationElement ServiceModelExtensionElement BindingElementExtensionElement TransportElement ConnectionOrientedTransportElement TcpTransportElement Inherited Members ConnectionOrientedTransportElement.ConnectionBufferSize ConnectionOrientedTransportElement.HostNameComparisonMode ConnectionOrientedTransportElement.ChannelInitializationTimeout ConnectionOrientedTransportElement.MaxBufferSize ConnectionOrientedTransportElement.MaxPendingConnections ConnectionOrientedTransportElement.MaxOutputDelay ConnectionOrientedTransportElement.MaxPendingAccepts ConnectionOrientedTransportElement.TransferMode TransportElement.CreateBindingElement() TransportElement.ManualAddressing TransportElement.MaxBufferPoolSize TransportElement.MaxReceivedMessageSize ServiceModelExtensionElement.ExtensionCollectionName ServiceModelExtensionElement.ConfigurationElementName ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public sealed class TcpTransportElement : ConnectionOrientedTransportElement Remarks This configuration element allows you to create a custom binding that implements the TCP transport protocol. Constructors TcpTransportElement() Declaration public TcpTransportElement() Properties BindingElementType Declaration public override Type BindingElementType { get; } Property Value Type Description Type Overrides BindingElementExtensionElement.BindingElementType ConnectionPoolSettings Declaration public TcpConnectionPoolSettingsElement ConnectionPoolSettings { get; set; } Property Value Type Description TcpConnectionPoolSettingsElement ExtendedProtectionPolicy Declaration public ExtendedProtectionPolicyElement ExtendedProtectionPolicy { get; } Property Value Type Description ExtendedProtectionPolicyElement ListenBacklog Declaration public int ListenBacklog { get; set; } Property Value Type Description Int32 Methods ApplyConfiguration(BindingElement) Declaration public override void ApplyConfiguration(BindingElement bindingElement) Parameters Type Name Description BindingElement bindingElement Overrides ConnectionOrientedTransportElement.ApplyConfiguration(BindingElement) CopyFrom(ServiceModelExtensionElement) Declaration public override void CopyFrom(ServiceModelExtensionElement from) Parameters Type Name Description ServiceModelExtensionElement from Overrides ConnectionOrientedTransportElement.CopyFrom(ServiceModelExtensionElement) CreateDefaultBindingElement() Declaration protected override TransportBindingElement CreateDefaultBindingElement() Returns Type Description TransportBindingElement Overrides TransportElement.CreateDefaultBindingElement() InitializeFrom(BindingElement) Declaration protected override void InitializeFrom(BindingElement bindingElement) Parameters Type Name Description BindingElement bindingElement Overrides ConnectionOrientedTransportElement.InitializeFrom(BindingElement)"
  },
  "api-corewcf/CoreWCF.Configuration.TcpTransportSecurityElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.TcpTransportSecurityElement.html",
    "title": "Class TcpTransportSecurityElement",
    "keywords": "Class TcpTransportSecurityElement An XML element that defines the security settings for a TcpTransport binding. This class cannot be inherited. Inheritance Object ServiceModelConfigurationElement TcpTransportSecurityElement Inherited Members ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class TcpTransportSecurityElement : ServiceModelConfigurationElement Remarks To be added. Constructors TcpTransportSecurityElement() Declaration public TcpTransportSecurityElement() Properties ClientCredentialType Declaration public TcpClientCredentialType ClientCredentialType { get; set; } Property Value Type Description TcpClientCredentialType SslProtocols Declaration public SslProtocols SslProtocols { get; } Property Value Type Description SslProtocols"
  },
  "api-corewcf/CoreWCF.Configuration.TextMessageEncodingElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.TextMessageEncodingElement.html",
    "title": "Class TextMessageEncodingElement",
    "keywords": "Class TextMessageEncodingElement Represents a configuration element that specifies the character encoding and message versioning used for text-based XML messages. This class cannot be inherited. Inheritance Object ServiceModelConfigurationElement ServiceModelExtensionElement BindingElementExtensionElement TextMessageEncodingElement Inherited Members ServiceModelExtensionElement.ExtensionCollectionName ServiceModelExtensionElement.ConfigurationElementName ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public sealed class TextMessageEncodingElement : BindingElementExtensionElement Remarks The text encoder creates text-based messages on the wire. Messages produced by this encoder are suitable for WS-* based interoperability. Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. The text encoder specified by this configuration section creates text-based messages on the wire. Messages produced by this encoder are suitable for WS-* based interoperability. Web service or Web service client can generally understand textual XML. However, transmitting large blocks of binary data as text is the least efficient method for encoding XML messages. The <xref:CoreWCF.Configuration.BinaryMessageEncodingElement> class represents the configuration element that specifies the character encoding and message versioning used for binary-based XML messages. This is most efficient but least interoperable of the encoding options. The <xref:CoreWCF.Configuration.MtomMessageEncodingElement> class represents the configuration element that specifies the character encoding and message versioning used for a message using a Message Transmission Optimization Mechanism (MTOM) encoding. MTOM is an efficient technology for transmitting binary data in Windows Communication Foundation (WCF) messages. The MTOM encoder attempts to strike a balance between efficiency and interoperability. The MTOM encoding transmits most XML in textual form, but optimizes large blocks of binary data by transmitting them as-is, without conversion to text. Constructors TextMessageEncodingElement() Declaration public TextMessageEncodingElement() Properties BindingElementType Declaration public override Type BindingElementType { get; } Property Value Type Description Type Overrides BindingElementExtensionElement.BindingElementType MaxReadPoolSize Declaration public int MaxReadPoolSize { get; set; } Property Value Type Description Int32 MaxWritePoolSize Declaration public int MaxWritePoolSize { get; set; } Property Value Type Description Int32 MessageVersion Declaration public MessageVersion MessageVersion { get; set; } Property Value Type Description MessageVersion ReaderQuotas Declaration public XmlDictionaryReaderQuotasElement ReaderQuotas { get; } Property Value Type Description XmlDictionaryReaderQuotasElement WriteEncoding Declaration public Encoding WriteEncoding { get; set; } Property Value Type Description Encoding Methods ApplyConfiguration(BindingElement) Declaration public override void ApplyConfiguration(BindingElement bindingElement) Parameters Type Name Description BindingElement bindingElement Overrides BindingElementExtensionElement.ApplyConfiguration(BindingElement) CopyFrom(ServiceModelExtensionElement) Declaration public override void CopyFrom(ServiceModelExtensionElement from) Parameters Type Name Description ServiceModelExtensionElement from Overrides ServiceModelExtensionElement.CopyFrom(ServiceModelExtensionElement) CreateBindingElement() Declaration protected override BindingElement CreateBindingElement() Returns Type Description BindingElement Overrides BindingElementExtensionElement.CreateBindingElement() InitializeFrom(BindingElement) Declaration protected override void InitializeFrom(BindingElement bindingElement) Parameters Type Name Description BindingElement bindingElement Overrides BindingElementExtensionElement.InitializeFrom(BindingElement)"
  },
  "api-corewcf/CoreWCF.Configuration.TransportElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.TransportElement.html",
    "title": "Class TransportElement",
    "keywords": "Class TransportElement Provides a base class to represent a transport binding configuration element. Inheritance Object ServiceModelConfigurationElement ServiceModelExtensionElement BindingElementExtensionElement TransportElement ConnectionOrientedTransportElement HttpTransportElement Inherited Members BindingElementExtensionElement.BindingElementType ServiceModelExtensionElement.ExtensionCollectionName ServiceModelExtensionElement.ConfigurationElementName ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public abstract class TransportElement : BindingElementExtensionElement Remarks This class contains properties that are common to all of the transport binding configuration elements provided by Windows Communication Foundation (WCF). It handles the translation of the message encoder settings and base transport settings into their run-time manifestations. It delegates the translation of transport-specific settings (for example, HttpProxySettings for HTTP) logic in its concrete derived class transport bindings. Constructors TransportElement() Declaration protected TransportElement() Properties ManualAddressing Declaration public bool ManualAddressing { get; set; } Property Value Type Description Boolean MaxBufferPoolSize Declaration public long MaxBufferPoolSize { get; set; } Property Value Type Description Int64 MaxReceivedMessageSize Declaration public long MaxReceivedMessageSize { get; set; } Property Value Type Description Int64 Methods ApplyConfiguration(BindingElement) Declaration public override void ApplyConfiguration(BindingElement bindingElement) Parameters Type Name Description BindingElement bindingElement Overrides BindingElementExtensionElement.ApplyConfiguration(BindingElement) CopyFrom(ServiceModelExtensionElement) Declaration public override void CopyFrom(ServiceModelExtensionElement from) Parameters Type Name Description ServiceModelExtensionElement from Overrides ServiceModelExtensionElement.CopyFrom(ServiceModelExtensionElement) CreateBindingElement() Declaration protected override BindingElement CreateBindingElement() Returns Type Description BindingElement Overrides BindingElementExtensionElement.CreateBindingElement() CreateDefaultBindingElement() Declaration protected abstract TransportBindingElement CreateDefaultBindingElement() Returns Type Description TransportBindingElement InitializeFrom(BindingElement) Declaration protected override void InitializeFrom(BindingElement bindingElement) Parameters Type Name Description BindingElement bindingElement Overrides BindingElementExtensionElement.InitializeFrom(BindingElement)"
  },
  "api-corewcf/CoreWCF.Configuration.UseMiddlewareFramingConnectionHandshakeExtensions.html": {
    "href": "api-corewcf/CoreWCF.Configuration.UseMiddlewareFramingConnectionHandshakeExtensions.html",
    "title": "Class UseMiddlewareFramingConnectionHandshakeExtensions",
    "keywords": "Class UseMiddlewareFramingConnectionHandshakeExtensions Extension methods for adding typed middleware to a IFramingConnectionHandshakeBuilder . Inheritance Object UseMiddlewareFramingConnectionHandshakeExtensions Namespace : CoreWCF.Configuration Assembly : CoreWCF.NetTcp.dll Syntax public static class UseMiddlewareFramingConnectionHandshakeExtensions : Object Methods UseMiddleware(IFramingConnectionHandshakeBuilder, Type, Object[]) Adds a middleware type to the connection handshake pipeline. Declaration public static IFramingConnectionHandshakeBuilder UseMiddleware(this IFramingConnectionHandshakeBuilder app, Type middleware, params object[] args) Parameters Type Name Description IFramingConnectionHandshakeBuilder app The IFramingConnectionHandshakeBuilder instance. Type middleware The middleware type. Object [] args The arguments to pass to the middleware type instance's constructor. Returns Type Description IFramingConnectionHandshakeBuilder The IFramingConnectionHandshakeBuilder instance. UseMiddleware<TMiddleware>(IFramingConnectionHandshakeBuilder, Object[]) Adds a middleware type to the connection handshake pipeline. Declaration public static IFramingConnectionHandshakeBuilder UseMiddleware<TMiddleware>(this IFramingConnectionHandshakeBuilder app, params object[] args) Parameters Type Name Description IFramingConnectionHandshakeBuilder app The IFramingConnectionHandshakeBuilder instance. Object [] args The arguments to pass to the middleware type instance's constructor. Returns Type Description IFramingConnectionHandshakeBuilder The IFramingConnectionHandshakeBuilder instance. Type Parameters Name Description TMiddleware The middleware type."
  },
  "api-corewcf/CoreWCF.Configuration.WebHttpServiceBehavior.html": {
    "href": "api-corewcf/CoreWCF.Configuration.WebHttpServiceBehavior.html",
    "title": "Class WebHttpServiceBehavior",
    "keywords": "Class WebHttpServiceBehavior Inheritance Object WebHttpServiceBehavior Implements IServiceBehavior Namespace : CoreWCF.Configuration Assembly : CoreWCF.WebHttp.dll Syntax public class WebHttpServiceBehavior : Object, IServiceBehavior Constructors WebHttpServiceBehavior(IServiceProvider) Declaration public WebHttpServiceBehavior(IServiceProvider serviceProvider) Parameters Type Name Description IServiceProvider serviceProvider Methods AddBindingParameters(ServiceDescription, ServiceHostBase, Collection<ServiceEndpoint>, BindingParameterCollection) Declaration public void AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters) Parameters Type Name Description ServiceDescription serviceDescription ServiceHostBase serviceHostBase Collection < ServiceEndpoint > endpoints BindingParameterCollection bindingParameters ApplyDispatchBehavior(ServiceDescription, ServiceHostBase) Declaration public void ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase) Parameters Type Name Description ServiceDescription serviceDescription ServiceHostBase serviceHostBase Validate(ServiceDescription, ServiceHostBase) Declaration public void Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase) Parameters Type Name Description ServiceDescription serviceDescription ServiceHostBase serviceHostBase Implements IServiceBehavior"
  },
  "api-corewcf/CoreWCF.Configuration.WebSocketTransportSettingsElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.WebSocketTransportSettingsElement.html",
    "title": "Class WebSocketTransportSettingsElement",
    "keywords": "Class WebSocketTransportSettingsElement Represents WebSocketTransportSettingsElement for WebSocketTransportSettings. Inheritance Object ServiceModelConfigurationElement WebSocketTransportSettingsElement Inherited Members ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class WebSocketTransportSettingsElement : ServiceModelConfigurationElement Remarks To be added. Constructors WebSocketTransportSettingsElement() Declaration public WebSocketTransportSettingsElement() Properties CreateNotificationOnConnection Declaration public bool CreateNotificationOnConnection { get; set; } Property Value Type Description Boolean DisablePayloadMasking Declaration public bool DisablePayloadMasking { get; set; } Property Value Type Description Boolean KeepAliveInterval Declaration public TimeSpan KeepAliveInterval { get; set; } Property Value Type Description TimeSpan MaxPendingConnections Declaration public int MaxPendingConnections { get; set; } Property Value Type Description Int32 SubProtocol Declaration public virtual string SubProtocol { get; set; } Property Value Type Description String TransportUsage Declaration public virtual WebSocketTransportUsage TransportUsage { get; set; } Property Value Type Description WebSocketTransportUsage Methods ApplyConfiguration(WebSocketTransportSettings) Declaration public void ApplyConfiguration(WebSocketTransportSettings settings) Parameters Type Name Description WebSocketTransportSettings settings InitializeFrom(WebSocketTransportSettings) Declaration public void InitializeFrom(WebSocketTransportSettings settings) Parameters Type Name Description WebSocketTransportSettings settings"
  },
  "api-corewcf/CoreWCF.Configuration.WindowsStreamSecurityElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.WindowsStreamSecurityElement.html",
    "title": "Class WindowsStreamSecurityElement",
    "keywords": "Class WindowsStreamSecurityElement Represents a configuration element that is used to specify settings for Windows stream security for a binding. This class cannot be inherited. Inheritance Object ServiceModelConfigurationElement ServiceModelExtensionElement BindingElementExtensionElement WindowsStreamSecurityElement Inherited Members ServiceModelExtensionElement.ExtensionCollectionName ServiceModelExtensionElement.ConfigurationElementName ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public sealed class WindowsStreamSecurityElement : BindingElementExtensionElement Remarks To be added. Constructors WindowsStreamSecurityElement() Declaration public WindowsStreamSecurityElement() Properties BindingElementType Declaration public override Type BindingElementType { get; } Property Value Type Description Type Overrides BindingElementExtensionElement.BindingElementType ProtectionLevel Declaration public ProtectionLevel ProtectionLevel { get; set; } Property Value Type Description ProtectionLevel Methods ApplyConfiguration(BindingElement) Declaration public override void ApplyConfiguration(BindingElement bindingElement) Parameters Type Name Description BindingElement bindingElement Overrides BindingElementExtensionElement.ApplyConfiguration(BindingElement) CopyFrom(ServiceModelExtensionElement) Declaration public override void CopyFrom(ServiceModelExtensionElement from) Parameters Type Name Description ServiceModelExtensionElement from Overrides ServiceModelExtensionElement.CopyFrom(ServiceModelExtensionElement) CreateBindingElement() Declaration protected override BindingElement CreateBindingElement() Returns Type Description BindingElement Overrides BindingElementExtensionElement.CreateBindingElement() InitializeFrom(BindingElement) Declaration protected override void InitializeFrom(BindingElement bindingElement) Parameters Type Name Description BindingElement bindingElement Overrides BindingElementExtensionElement.InitializeFrom(BindingElement)"
  },
  "api-corewcf/CoreWCF.Configuration.WSHttpBindingBaseElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.WSHttpBindingBaseElement.html",
    "title": "Class WSHttpBindingBaseElement",
    "keywords": "Class WSHttpBindingBaseElement Provides the base class with members common to the and the . Inheritance Object ServiceModelConfigurationElement StandardBindingElement WSHttpBindingBaseElement WSHttpBindingElement Implements IDefaultCommunicationTimeouts IStandardBindingElement Inherited Members StandardBindingElement.CreateBinding() StandardBindingElement.Name StandardBindingElement.CloseTimeout StandardBindingElement.OpenTimeout StandardBindingElement.ReceiveTimeout StandardBindingElement.SendTimeout ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public abstract class WSHttpBindingBaseElement : StandardBindingElement, IDefaultCommunicationTimeouts, IStandardBindingElement Remarks To be added. Constructors WSHttpBindingBaseElement() Declaration protected WSHttpBindingBaseElement() WSHttpBindingBaseElement(String) Declaration protected WSHttpBindingBaseElement(string name) Parameters Type Name Description String name Properties BypassProxyOnLocal Declaration public bool BypassProxyOnLocal { get; set; } Property Value Type Description Boolean HostNameComparisonMode Declaration public HostNameComparisonMode HostNameComparisonMode { get; set; } Property Value Type Description HostNameComparisonMode MaxBufferPoolSize Declaration public long MaxBufferPoolSize { get; set; } Property Value Type Description Int64 MaxReceivedMessageSize Declaration public long MaxReceivedMessageSize { get; set; } Property Value Type Description Int64 MessageEncoding Declaration public WSMessageEncoding MessageEncoding { get; set; } Property Value Type Description WSMessageEncoding ProxyAddress Declaration public Uri ProxyAddress { get; set; } Property Value Type Description Uri ReaderQuotas Declaration public XmlDictionaryReaderQuotasElement ReaderQuotas { get; } Property Value Type Description XmlDictionaryReaderQuotasElement ReliableSession Declaration public string ReliableSession { get; } Property Value Type Description String TextEncoding Declaration public Encoding TextEncoding { get; set; } Property Value Type Description Encoding TransactionFlow Declaration public bool TransactionFlow { get; set; } Property Value Type Description Boolean UseDefaultWebProxy Declaration public bool UseDefaultWebProxy { get; set; } Property Value Type Description Boolean Implements IDefaultCommunicationTimeouts IStandardBindingElement"
  },
  "api-corewcf/CoreWCF.Configuration.WSHttpBindingCollectionElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.WSHttpBindingCollectionElement.html",
    "title": "Class WSHttpBindingCollectionElement",
    "keywords": "Class WSHttpBindingCollectionElement Represents a configuration element that contains sub-elements that specify settings for using the wsHttpBinding binding. Inheritance Object BindingCollectionElement StandardBindingCollectionElement < WSHttpBinding , WSHttpBindingElement > WSHttpBindingCollectionElement Inherited Members StandardBindingCollectionElement<WSHttpBinding, WSHttpBindingElement>.Bindings Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class WSHttpBindingCollectionElement : StandardBindingCollectionElement<WSHttpBinding, WSHttpBindingElement> Remarks To be added. Constructors WSHttpBindingCollectionElement() Declaration public WSHttpBindingCollectionElement()"
  },
  "api-corewcf/CoreWCF.Configuration.WSHttpBindingElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.WSHttpBindingElement.html",
    "title": "Class WSHttpBindingElement",
    "keywords": "Class WSHttpBindingElement Represents an interoperable binding that supports distributed transactions and secure, reliable sessions. Inheritance Object ServiceModelConfigurationElement StandardBindingElement WSHttpBindingBaseElement WSHttpBindingElement Implements IDefaultCommunicationTimeouts IStandardBindingElement Inherited Members WSHttpBindingBaseElement.BypassProxyOnLocal WSHttpBindingBaseElement.TransactionFlow WSHttpBindingBaseElement.HostNameComparisonMode WSHttpBindingBaseElement.MaxBufferPoolSize WSHttpBindingBaseElement.MaxReceivedMessageSize WSHttpBindingBaseElement.MessageEncoding WSHttpBindingBaseElement.ProxyAddress WSHttpBindingBaseElement.ReaderQuotas WSHttpBindingBaseElement.ReliableSession WSHttpBindingBaseElement.TextEncoding WSHttpBindingBaseElement.UseDefaultWebProxy StandardBindingElement.Name StandardBindingElement.CloseTimeout StandardBindingElement.OpenTimeout StandardBindingElement.ReceiveTimeout StandardBindingElement.SendTimeout ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class WSHttpBindingElement : WSHttpBindingBaseElement, IDefaultCommunicationTimeouts, IStandardBindingElement Remarks The wsHttpBinding is a secure, reliable, interoperable binding suitable for non-duplex service contracts. The binding implements the following specifications: WS-ReliableMessaging for reliability and WS-Security for message security and authentication. The transport is HTTP and message encoding is Text/XML encoding. Constructors WSHttpBindingElement() Declaration public WSHttpBindingElement() WSHttpBindingElement(String) Declaration public WSHttpBindingElement(string name) Parameters Type Name Description String name Properties AllowCookies Declaration public bool AllowCookies { get; set; } Property Value Type Description Boolean Security Declaration public WSHttpSecurityElement Security { get; } Property Value Type Description WSHttpSecurityElement Methods CreateBinding() Declaration public override Binding CreateBinding() Returns Type Description Binding Overrides StandardBindingElement.CreateBinding() Implements IDefaultCommunicationTimeouts IStandardBindingElement"
  },
  "api-corewcf/CoreWCF.Configuration.WSHttpSecurityElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.WSHttpSecurityElement.html",
    "title": "Class WSHttpSecurityElement",
    "keywords": "Class WSHttpSecurityElement An XML element that defines the security settings for a wsHttpBinding binding. Inheritance Object ServiceModelConfigurationElement WSHttpSecurityElement Inherited Members ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class WSHttpSecurityElement : ServiceModelConfigurationElement Remarks To be added. Constructors WSHttpSecurityElement() Declaration public WSHttpSecurityElement() Properties Message Declaration public NonDualMessageSecurityOverHttpElement Message { get; } Property Value Type Description NonDualMessageSecurityOverHttpElement Mode Declaration public SecurityMode Mode { get; set; } Property Value Type Description SecurityMode Transport Declaration public WSHttpTransportSecurityElement Transport { get; } Property Value Type Description WSHttpTransportSecurityElement"
  },
  "api-corewcf/CoreWCF.Configuration.WSHttpTransportSecurityElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.WSHttpTransportSecurityElement.html",
    "title": "Class WSHttpTransportSecurityElement",
    "keywords": "Class WSHttpTransportSecurityElement Represents a configuration element that defines authentication settings for the HTTP transport. This class cannot be inherited. Inheritance Object ServiceModelConfigurationElement WSHttpTransportSecurityElement Inherited Members ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class WSHttpTransportSecurityElement : ServiceModelConfigurationElement Remarks To be added. Constructors WSHttpTransportSecurityElement() Declaration public WSHttpTransportSecurityElement() Properties ClientCredentialType Declaration public HttpClientCredentialType ClientCredentialType { get; set; } Property Value Type Description HttpClientCredentialType Realm Declaration public string Realm { get; set; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.Configuration.XmlDictionaryReaderQuotasElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.XmlDictionaryReaderQuotasElement.html",
    "title": "Class XmlDictionaryReaderQuotasElement",
    "keywords": "Class XmlDictionaryReaderQuotasElement Represents the configuration element that defines the constraints on the complexity of SOAP messages that can be processed by endpoints configured with a binding. This class cannot be inherited. Inheritance Object ServiceModelConfigurationElement XmlDictionaryReaderQuotasElement Inherited Members ServiceModelConfigurationElement.SetPropertyValueIfNotDefaultValue<T>(String, T) Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public class XmlDictionaryReaderQuotasElement : ServiceModelConfigurationElement Remarks Warning Properties set on this class must be set on both the client and service sides. &lt;readerQuotas&gt; Constructors XmlDictionaryReaderQuotasElement() Declaration public XmlDictionaryReaderQuotasElement() Properties MaxArrayLength Declaration public int MaxArrayLength { get; set; } Property Value Type Description Int32 MaxBytesPerRead Declaration public int MaxBytesPerRead { get; set; } Property Value Type Description Int32 MaxDepth Declaration public int MaxDepth { get; set; } Property Value Type Description Int32 MaxNameTableCharCount Declaration public int MaxNameTableCharCount { get; set; } Property Value Type Description Int32 MaxStringContentLength Declaration public int MaxStringContentLength { get; set; } Property Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.Configuration.XmlElementElement.html": {
    "href": "api-corewcf/CoreWCF.Configuration.XmlElementElement.html",
    "title": "Class XmlElementElement",
    "keywords": "Class XmlElementElement Represents the configuration settings for an XML element. This class cannot be inherited. Inheritance Object XmlElementElement Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public sealed class XmlElementElement : ConfigurationElement Remarks To be added. Constructors XmlElementElement() Declaration public XmlElementElement() XmlElementElement(XmlElement) Declaration public XmlElementElement(XmlElement element) Parameters Type Name Description XmlElement element Properties XmlElement Declaration public XmlElement XmlElement { get; set; } Property Value Type Description XmlElement Methods Copy(XmlElementElement) Declaration public void Copy(XmlElementElement source) Parameters Type Name Description XmlElementElement source DeserializeElement(XmlReader, Boolean) Declaration protected override void DeserializeElement(XmlReader reader, bool serializeCollectionKey) Parameters Type Name Description XmlReader reader Boolean serializeCollectionKey PostDeserialize() Declaration protected override void PostDeserialize() SerializeToXmlElement(XmlWriter, String) Declaration protected override bool SerializeToXmlElement(XmlWriter writer, string elementName) Parameters Type Name Description XmlWriter writer String elementName Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.Configuration.XmlElementElementCollection.html": {
    "href": "api-corewcf/CoreWCF.Configuration.XmlElementElementCollection.html",
    "title": "Class XmlElementElementCollection",
    "keywords": "Class XmlElementElementCollection Represents a collection of instances. This class cannot be inherited. Inheritance Object ServiceModelConfigurationElementCollection < XmlElementElement > XmlElementElementCollection Inherited Members ServiceModelConfigurationElementCollection<XmlElementElement>.CreateNewElement() Namespace : CoreWCF.Configuration Assembly : CoreWCF.ConfigurationManager.dll Syntax public sealed class XmlElementElementCollection : ServiceModelConfigurationElementCollection<XmlElementElement> Remarks To be added. Constructors XmlElementElementCollection() Declaration public XmlElementElementCollection() Methods GetElementKey(ConfigurationElement) Declaration protected override object GetElementKey(ConfigurationElement element) Parameters Type Name Description ConfigurationElement element Returns Type Description Object OnDeserializeUnrecognizedElement(String, XmlReader) Declaration protected override bool OnDeserializeUnrecognizedElement(string elementName, XmlReader reader) Parameters Type Name Description String elementName XmlReader reader Returns Type Description Boolean Unmerge(ConfigurationElement, ConfigurationElement, ConfigurationSaveMode) Declaration protected override void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode) Parameters Type Name Description ConfigurationElement sourceElement ConfigurationElement parentElement ConfigurationSaveMode saveMode"
  },
  "api-corewcf/CoreWCF.DataContractFormatAttribute.html": {
    "href": "api-corewcf/CoreWCF.DataContractFormatAttribute.html",
    "title": "Class DataContractFormatAttribute",
    "keywords": "Class DataContractFormatAttribute Instructs the Windows Communication Foundation (WCF) infrastructure to use the . Inheritance Object DataContractFormatAttribute Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class DataContractFormatAttribute : Attribute Remarks This attribute is similar to the <xref:CoreWCF.XmlSerializerFormatAttribute> attribute. Both attributes can be applied to either a method or a class. A method can have either of the two attributes applied, but not both. Any operation that has neither applied will use the attribute applied to the containing class. If the containing class does not have either attribute applied, the <xref:System.Runtime.Serialization.DataContractSerializer> is used. Applying the attribute also causes a <xref:CoreWCF.Description.DataContractSerializerOperationBehavior> to be created at run time. The behavior allows customization at run time of the serializer behavior. Constructors DataContractFormatAttribute() Declaration public DataContractFormatAttribute() Properties Style Declaration public OperationFormatStyle Style { get; set; } Property Value Type Description OperationFormatStyle"
  },
  "api-corewcf/CoreWCF.DBNull.html": {
    "href": "api-corewcf/CoreWCF.DBNull.html",
    "title": "Class DBNull",
    "keywords": "Class DBNull Represents a nonexistent value. This class cannot be inherited. Inheritance Object DBNull Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class DBNull : Object Remarks The <xref:System.DBNull> class represents a nonexistent value. In a database, for example, a column in a row of a table might not contain any data whatsoever. That is, the column is considered to not exist at all instead of merely not having a value. A <xref:System.DBNull> object represents the nonexistent column. Additionally, COM interop uses the <xref:System.DBNull> class to distinguish between a VT_NULL variant, which indicates a nonexistent value, and a VT_EMPTY variant, which indicates an unspecified value. The <xref:System.DBNull> type is a singleton class, which means only one <xref:System.DBNull> object exists. The <xref:System.DBNull.Value?displayProperty=nameWithType> member represents the sole <xref:System.DBNull> object. <xref:System.DBNull.Value?displayProperty=nameWithType> can be used to explicitly assign a nonexistent value to a database field, although most ADO.NET data providers automatically assign values of <xref:System.DBNull> when a field does not have a valid value. You can determine whether a value retrieved from a database field is a <xref:System.DBNull> value by passing the value of that field to the DBNull.Value.Equals method. However, some languages and database objects supply methods that make it easier to determine whether the value of a database field is <xref:System.DBNull.Value?displayProperty=nameWithType>. These include the Visual Basic IsDBNull function, the <xref:System.Convert.IsDBNull%2A?displayProperty=nameWithType> method, the <xref:System.Data.DataTableReader.IsDBNull%2A?displayProperty=nameWithType> method, and the <xref:System.Data.IDataRecord.IsDBNull%2A?displayProperty=nameWithType> method. Do not confuse the notion of null in an object-oriented programming language with a <xref:System.DBNull> object. In an object-oriented programming language, null means the absence of a reference to an object. <xref:System.DBNull> represents an uninitialized variant or nonexistent database column. Fields Value Declaration public static readonly DBNull Value Field Value Type Description DBNull"
  },
  "api-corewcf/CoreWCF.Description.ContractDescription.html": {
    "href": "api-corewcf/CoreWCF.Description.ContractDescription.html",
    "title": "Class ContractDescription",
    "keywords": "Class ContractDescription Describes a Windows Communication Foundation (WCF) contract that specifies what an endpoint communicates to the outside world. Inheritance Object ContractDescription Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class ContractDescription : Object Remarks A WCF contract is a collection of operations that specifies what the endpoint communicates to the outside world. Each operation is a message exchange. For example, a request message and an associated reply message form a request/reply message exchange. A ContractDescription object is used to describe WCF contracts and their operations. Within a ContractDescription , each contract operation has a corresponding OperationDescription that describes aspects of the each operation that is part of the contract, such as whether the operation is one-way or request/reply. Each OperationDescription also describes the messages that make up the operation using a MessageDescriptionCollection . ContractDescription contains a reference to an interface that defines the contract using the programming model. This interface is marked with ServiceContractAttribute and its methods that correspond to endpoint operations are marked with the OperationContractAttribute . A duplex contract defines the following logical sets of operations: A set that the service exposes for the client to call. A set that the client exposes for the service to call. The programming model for defining a duplex contract is to split each set in a separate interface and apply attributes to each interface. In this case, ContractDescription contains a reference to each of the interfaces that groups them into one duplex contract. Similar to bindings, each contract has a Name and Namespace that uniquely identify it in the metadata of the service. Constructors ContractDescription(String) Initializes a new instance of the ContractDescription class with a specified name Declaration public ContractDescription(string name) Parameters Type Name Description String name The name of the contract ContractDescription(String, String) Initializes a new instance of the ContractDescription class with a namespace-qualified name specified Declaration public ContractDescription(string name, string ns) Parameters Type Name Description String name The name of the contract String ns The namespace that contains the name of the contract Remarks The namespace can be an empty string (\"\") Properties CallbackContractType Gets or sets the type of callback contract that the contract description specifies. Declaration public Type CallbackContractType { get; set; } Property Value Type Description Type The Type of callback contract that the contract description specifies Remarks The CallbackContractType property is not serializable, so it is only available when the description is bound to runtime. It cannot be imported or exported as part of the metadata. ConfigurationName Gets or sets the configuration name for the contract description Declaration public string ConfigurationName { get; set; } Property Value Type Description String The configuration name for the contract. ContractBehaviors Gets the collection of behavior for the contract. Declaration public KeyedCollection<Type, IContractBehavior> ContractBehaviors { get; } Property Value Type Description KeyedCollection < Type , IContractBehavior > The collection of behavior for the contract ContractType Gets or sets the contract type that the contract description specifies. Declaration public Type ContractType { get; set; } Property Value Type Description Type The Type of contract that the contract description specifies. Remarks The ContractType property is not serializable, so it is only available when the description is bound to runtime. It cannot be imported or exported as part of the metadata. Name Gets or sets the name of the contract Declaration public string Name { get; set; } Property Value Type Description String The name of the contract description Namespace Gets or sets the namespace for the contract Declaration public string Namespace { get; set; } Property Value Type Description String The namespace of the contract Remarks The namespace can be an empty string (\"\"). Operations Gets the collection of operation descriptions associated with the contract Declaration public OperationDescriptionCollection Operations { get; } Property Value Type Description OperationDescriptionCollection The OperationDescriptionCollection that contains the operation descriptions associated with the contract description. SessionMode Declaration public SessionMode SessionMode { get; set; } Property Value Type Description SessionMode Methods GetContract<TService>(Type) Returns the contract description for a specified type of contract. Declaration public static ContractDescription GetContract<TService>(Type contractType) where TService : class Parameters Type Name Description Type contractType The Type of contract. Returns Type Description ContractDescription The ContractDescription for the specified type of contract Type Parameters Name Description TService Remarks The difference between the GetContract overloads is that the ones with two arguments allow you to find attributes from the service (for example, OperationBehaviorAttribute ). GetContract<TService>(Type, Object) Declaration public static ContractDescription GetContract<TService>(Type contractType, object serviceImplementation) where TService : class Parameters Type Name Description Type contractType Object serviceImplementation Returns Type Description ContractDescription Type Parameters Name Description TService GetInheritedContracts() Declaration public Collection<ContractDescription> GetInheritedContracts() Returns Type Description Collection < ContractDescription > IsDuplex() Declaration public bool IsDuplex() Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.Description.DataContractSerializerOperationBehavior.html": {
    "href": "api-corewcf/CoreWCF.Description.DataContractSerializerOperationBehavior.html",
    "title": "Class DataContractSerializerOperationBehavior",
    "keywords": "Class DataContractSerializerOperationBehavior Represents the run-time behavior of the . Inheritance Object DataContractSerializerOperationBehavior Implements IOperationBehavior IWsdlExportExtension Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class DataContractSerializerOperationBehavior : Object, IOperationBehavior, IWsdlExportExtension Remarks The <xref:CoreWCF.Description.DataContractSerializerOperationBehavior> enables the control of <xref:System.Runtime.Serialization.DataContractSerializer> options, such as the <xref:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph%2A> and <xref:System.Runtime.Serialization.DataContractSerializer.IgnoreExtensionDataObject%2A> properties. Some of these properties can be set only using the constructor of the class. In that case, the <xref:System.Runtime.Serialization.DataContractSerializer> can be replaced using the <xref:CoreWCF.Description.DataContractSerializerOperationBehavior.CreateSerializer%2A> method. For more information about data contracts, see Using Data Contracts . For more information about using the <xref:CoreWCF.Description.DataContractSerializerOperationBehavior> to replace the <xref:System.Runtime.Serialization.IDataContractSurrogate> returned by the <xref:CoreWCF.Description.DataContractSerializerOperationBehavior.DataContractSurrogate%2A> property, see Data Contract Surrogates . Constructors DataContractSerializerOperationBehavior(OperationDescription) Declaration public DataContractSerializerOperationBehavior(OperationDescription operation) Parameters Type Name Description OperationDescription operation DataContractSerializerOperationBehavior(OperationDescription, DataContractFormatAttribute) Declaration public DataContractSerializerOperationBehavior(OperationDescription operation, DataContractFormatAttribute dataContractFormatAttribute) Parameters Type Name Description OperationDescription operation DataContractFormatAttribute dataContractFormatAttribute DataContractSerializerOperationBehavior(OperationDescription, DataContractFormatAttribute, Boolean) Declaration public DataContractSerializerOperationBehavior(OperationDescription operation, DataContractFormatAttribute dataContractFormatAttribute, bool builtInOperationBehavior) Parameters Type Name Description OperationDescription operation DataContractFormatAttribute dataContractFormatAttribute Boolean builtInOperationBehavior Properties DataContractFormatAttribute Declaration public DataContractFormatAttribute DataContractFormatAttribute { get; } Property Value Type Description DataContractFormatAttribute DataContractResolver Declaration public DataContractResolver DataContractResolver { get; set; } Property Value Type Description DataContractResolver IgnoreExtensionDataObject Declaration public bool IgnoreExtensionDataObject { get; set; } Property Value Type Description Boolean MaxItemsInObjectGraph Declaration public int MaxItemsInObjectGraph { get; set; } Property Value Type Description Int32 Methods CreateSerializer(Type, String, String, IList<Type>) Declaration public virtual XmlObjectSerializer CreateSerializer(Type type, string name, string ns, IList<Type> knownTypes) Parameters Type Name Description Type type String name String ns IList < Type > knownTypes Returns Type Description XmlObjectSerializer CreateSerializer(Type, XmlDictionaryString, XmlDictionaryString, IList<Type>) Declaration public virtual XmlObjectSerializer CreateSerializer(Type type, XmlDictionaryString name, XmlDictionaryString ns, IList<Type> knownTypes) Parameters Type Name Description Type type XmlDictionaryString name XmlDictionaryString ns IList < Type > knownTypes Returns Type Description XmlObjectSerializer Explicit Interface Implementations IOperationBehavior.AddBindingParameters(OperationDescription, BindingParameterCollection) Declaration void IOperationBehavior.AddBindingParameters(OperationDescription description, BindingParameterCollection parameters) Parameters Type Name Description OperationDescription description BindingParameterCollection parameters IOperationBehavior.ApplyClientBehavior(OperationDescription, ClientOperation) Declaration void IOperationBehavior.ApplyClientBehavior(OperationDescription description, ClientOperation proxy) Parameters Type Name Description OperationDescription description ClientOperation proxy IOperationBehavior.ApplyDispatchBehavior(OperationDescription, DispatchOperation) Declaration void IOperationBehavior.ApplyDispatchBehavior(OperationDescription description, DispatchOperation dispatch) Parameters Type Name Description OperationDescription description DispatchOperation dispatch IOperationBehavior.Validate(OperationDescription) Declaration void IOperationBehavior.Validate(OperationDescription description) Parameters Type Name Description OperationDescription description IWsdlExportExtension.ExportContract(WsdlExporter, WsdlContractConversionContext) Declaration void IWsdlExportExtension.ExportContract(WsdlExporter exporter, WsdlContractConversionContext contractContext) Parameters Type Name Description WsdlExporter exporter WsdlContractConversionContext contractContext IWsdlExportExtension.ExportEndpoint(WsdlExporter, WsdlEndpointConversionContext) Declaration void IWsdlExportExtension.ExportEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext endpointContext) Parameters Type Name Description WsdlExporter exporter WsdlEndpointConversionContext endpointContext Implements IOperationBehavior IWsdlExportExtension"
  },
  "api-corewcf/CoreWCF.Description.FaultDescription.html": {
    "href": "api-corewcf/CoreWCF.Description.FaultDescription.html",
    "title": "Class FaultDescription",
    "keywords": "Class FaultDescription Represents a SOAP fault. Inheritance Object FaultDescription Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class FaultDescription : Object Remarks The <xref:CoreWCF.Description.FaultDescription> class represents a SOAP fault in a service contract and is used to create a runtime when a Windows Communication Foundation (WCF) service or client application is started. Constructors FaultDescription(String) Declaration public FaultDescription(string action) Parameters Type Name Description String action Properties Action Declaration public string Action { get; } Property Value Type Description String DetailType Declaration public Type DetailType { get; set; } Property Value Type Description Type Name Declaration public string Name { get; set; } Property Value Type Description String Namespace Declaration public string Namespace { get; set; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.Description.FaultDescriptionCollection.html": {
    "href": "api-corewcf/CoreWCF.Description.FaultDescriptionCollection.html",
    "title": "Class FaultDescriptionCollection",
    "keywords": "Class FaultDescriptionCollection Represents a collection of objects that you can use to obtain information about SOAP faults in a contract. Inheritance Object FaultDescriptionCollection Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class FaultDescriptionCollection : Collection<FaultDescription> Remarks Use the <xref:CoreWCF.Description.FaultDescriptionCollection.Find%2A> and <xref:CoreWCF.Description.FaultDescriptionCollection.FindAll%2A> methods to retrieve a <xref:CoreWCF.Description.FaultDescription> or group of <xref:CoreWCF.Description.FaultDescription> objects. Methods Find(String) Declaration public FaultDescription Find(string action) Parameters Type Name Description String action Returns Type Description FaultDescription FindAll(String) Declaration public Collection<FaultDescription> FindAll(string action) Parameters Type Name Description String action Returns Type Description Collection < FaultDescription >"
  },
  "api-corewcf/CoreWCF.Description.html": {
    "href": "api-corewcf/CoreWCF.Description.html",
    "title": "Namespace CoreWCF.Description",
    "keywords": "Namespace CoreWCF.Description Classes ContractDescription Describes a Windows Communication Foundation (WCF) contract that specifies what an endpoint communicates to the outside world. DataContractSerializerOperationBehavior Represents the run-time behavior of the . FaultDescription Represents a SOAP fault. FaultDescriptionCollection Represents a collection of objects that you can use to obtain information about SOAP faults in a contract. ListenUriMode Indicates whether the transport must ensure that the URI provided for the service to listen on is unique or can be used exactly as provided. MessageBodyDescription Represents the body of a SOAP message. MessageDescription Represents the description of a message. MessageDescriptionCollection Provides a collection that is used to store descriptions of the messages that make up an operation that belongs to a contract. MessageDirection Specifies the direction of the message. MessageHeaderDescription Represents a SOAP message header. MessageHeaderDescriptionCollection Represents a collection of objects. MessagePartDescription Represents a description of a SOAP message part. MessagePartDescriptionCollection Represents a collection of objects. MessagePropertyAttribute Represents data that is passed locally with a custom message type but not serialized into a SOAP message. MessagePropertyDescription Represents a message property specified by the . MessagePropertyDescriptionCollection Represents a collection of objects. MetadataConversionError Represents an error or warning event that occurred during the use of a or . MetadataEndpointAddressServiceBehavior MetadataExporter Exports service description information into metadata. MetadataLocation Represents the address of metadata documents. MetadataReference Represents a reference to a metadata document returned from a metadata exchange endpoint. MetadataSection Represents XML metadata or references to XML metadata. MetadataSet Represents a serializable collection of service metadata in XML form. OperationDescription Represents the description of a contract operation that provides a description of the messages that make up the operation. OperationDescriptionCollection Represents a collection that contains operation descriptions. PolicyAssertionCollection Contains policy assertions. PolicyConversionContext Defines a class used to retrieve binding assertions in metadata and to attach implementing binding elements at the appropriate scope. PolicyVersion A class used to specify the version of the WS-Policy specification being used. PrincipalPermissionMode ServiceAuthorizationBehavior Provides properties related to service authorization behavior. ServiceCredentials Configures a service credential. Use this class to specify the credential for the service such as an X.509 certificate. Also, use this class to specify the authentication model for various client credentials such as user name and password validation. ServiceDebugBehavior Enables debugging and help information features for a Windows Communication Foundation (WCF) service. ServiceDescription Represents a complete, in-memory description of the service, including all the endpoints for the service and specifications for their respective addresses, bindings, contracts and behaviors. ServiceEndpoint Represents the endpoint for a service that allows clients of the service to find and communicate with the service. ServiceEndpointCollection A collection that contains the endpoints for a service. ServiceMetadataBehavior Controls the publication of service metadata and associated information. ServiceMetadataContractBehavior A contract behavior that enables you to specify whether or not to publish metadata for a given endpoint. ServiceMetadataExtension Provides the implementation for the metadata publishing protocols. TypedMessageConverter Converts a typed message to an untyped message, or an untyped message to a typed message. UseRequestHeadersForMetadataAddressBehavior Enables the retrieval of metadata address information from request message headers for a Windows Communication Foundation (WCF) service. WebHttpBehavior Enables the Web programming model for a Windows Communication Foundation (WCF) service. WsdlContractConversionContext Passed to custom WSDL exporters and importers to enable customization of the metadata export and import processes for a contract. WsdlEndpointConversionContext Passed to custom WSDL exporters and importers to enable customization of the metadata export and import processes for a WSDL endpoint. WsdlExporter Converts service, contract, and endpoint information into metadata documents. XmlSerializerOperationBehavior Controls run-time behavior of the associated with an operation. Interfaces IContractBehavior Implements methods that can be used to extend run-time behavior for a contract in either a service or client application. IContractBehaviorAttribute Specifies the contract for which an attribute that implements the interface is active. IEndpointBehavior Implements methods that can be used to extend run-time behavior for an endpoint in either a service or client application. IMetadataEndpointAddressProvider IMetadataExchange Exposes methods used to return metadata about a service. IOperationBehavior Implements methods that can be used to extend run-time behavior for an operation in either a service or client application. IPolicyExportExtension Implement to insert custom binding policy assertions in the Web Services Description Language (WSDL) information. IServiceBehavior Provides a mechanism to modify or insert custom extensions across an entire service, including the . IWsdlExportExtension Defines endpoint or contract behaviors that can export custom metadata."
  },
  "api-corewcf/CoreWCF.Description.IContractBehavior.html": {
    "href": "api-corewcf/CoreWCF.Description.IContractBehavior.html",
    "title": "Interface IContractBehavior",
    "keywords": "Interface IContractBehavior Implements methods that can be used to extend run-time behavior for a contract in either a service or client application. Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public interface IContractBehavior Remarks Implement the <xref:CoreWCF.Description.IContractBehavior> interface to modify, examine, or extend some aspect of contract-wide execution at the application level. Unlike <xref:CoreWCF.Description.IServiceBehavior> and <xref:CoreWCF.Description.IEndpointBehavior> objects, <xref:CoreWCF.Description.IContractBehavior> objects cannot be added to the runtime using an application configuration file; they can only be added programmatically or using an attribute. For more information about choosing between service, endpoint, and contract behaviors, see Configuring and Extending the Runtime with Behaviors . Use the <xref:CoreWCF.Description.IContractBehavior.AddBindingParameters%2A> method to provide binding elements with custom data to support the behavior. Use the <xref:CoreWCF.Description.IContractBehavior.ApplyClientBehavior%2A> method to modify, examine, or insert extensions to a contract in a client application. Use the <xref:CoreWCF.Description.IContractBehavior.ApplyDispatchBehavior%2A> method to modify, examine, or insert extensions to a contract in a service application. Use the <xref:CoreWCF.Description.IContractBehavior.Validate%2A> method to ensure that a contract can support a particular feature. <xref:CoreWCF.Description.IContractBehavior> objects can make use of any of these methods, but often only one is important; in such cases, the unused methods can return without any value. Note All of the <xref:CoreWCF.Description.IContractBehavior> methods pass <xref:CoreWCF.Description.ContractDescription?displayProperty=nameWithType> and <xref:CoreWCF.Description.ServiceEndpoint?displayProperty=nameWithType> as parameters. These parameters are for examination; if you modify the objects the execution behavior is undefined. <xref:CoreWCF.Description.IContractBehavior> types can be used on either the service or the client, or both. To perform a customization task on the service, the <xref:CoreWCF.Description.IContractBehavior> object must be added to the <xref:CoreWCF.Description.ContractDescription.Behaviors%2A> property prior to the construction of the service runtime, which occurs when the <xref:CoreWCF.ICommunicationObject.Open%2A?displayProperty=nameWithType> method is called on the <xref:CoreWCF.ServiceHost?displayProperty=nameWithType> object. There are two ways to do this. The first method is to programmatically add the custom contract behavior to the <xref:CoreWCF.Description.ContractDescription.Behaviors%2A> property prior to the point when the <xref:CoreWCF.ICommunicationObject.Open%2A?displayProperty=nameWithType> method is called on the <xref:CoreWCF.ServiceHost?displayProperty=nameWithType> object. When applied this way, the behavior is applied for all messages flowing through that contract on any endpoint. Note The behavior is applied to all contracts of the same type. For example, if you programmatically add the same contract type to more than one endpoint, the behavior modifies all endpoints that refer to the same contract object. The second method is to create a custom attribute that implements <xref:CoreWCF.Description.IContractBehavior> and apply that to: A contract interface. In this case, the behavior is applied to all contracts of that type in any endpoint. A service class. In this case, the behavior is applied to all endpoints regardless of contract. A callback class. In this case, the behavior is applied to the duplex client's endpoint. The behavior of the second approach varies slightly if the custom attribute also implements <xref:CoreWCF.Description.IContractBehaviorAttribute?displayProperty=nameWithType>. In this case, the behavior is as follows: A contract interface. In this case, the behavior is applied to all contracts of that type in any endpoint and Windows Communication Foundation (WCF) ignores the value of the <xref:CoreWCF.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> property. A service class. In this case, the behavior is applied only to endpoints the contract of which is the value of the <xref:CoreWCF.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> property. A callback class. In this case, the behavior is applied to the duplex client's endpoint and WCF ignores the value of the <xref:CoreWCF.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> property. To perform the customization task on the client for which it is intended, the <xref:CoreWCF.Description.IContractBehavior> object must be added to the <xref:CoreWCF.Description.ContractDescription.Behaviors%2A> property prior to the construction of the client runtime, which occurs when <xref:CoreWCF.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> is called. There are two ways to do this: Programmatically add the custom contract behavior to the <xref:CoreWCF.Description.ContractDescription.Behaviors%2A> property prior to the point when the <xref:CoreWCF.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> is called. Create a custom attribute that also implements <xref:CoreWCF.Description.IContractBehavior>. For more information on programmatically adding <xref:CoreWCF.Description.IContractBehavior> types to either the client or service application, see Configuring and Extending the Runtime with Behaviors . Methods AddBindingParameters(ContractDescription, ServiceEndpoint, BindingParameterCollection) Declaration void AddBindingParameters(ContractDescription contractDescription, ServiceEndpoint endpoint, BindingParameterCollection bindingParameters) Parameters Type Name Description ContractDescription contractDescription ServiceEndpoint endpoint BindingParameterCollection bindingParameters ApplyClientBehavior(ContractDescription, ServiceEndpoint, ClientRuntime) Declaration void ApplyClientBehavior(ContractDescription contractDescription, ServiceEndpoint endpoint, ClientRuntime clientRuntime) Parameters Type Name Description ContractDescription contractDescription ServiceEndpoint endpoint ClientRuntime clientRuntime ApplyDispatchBehavior(ContractDescription, ServiceEndpoint, DispatchRuntime) Declaration void ApplyDispatchBehavior(ContractDescription contractDescription, ServiceEndpoint endpoint, DispatchRuntime dispatchRuntime) Parameters Type Name Description ContractDescription contractDescription ServiceEndpoint endpoint DispatchRuntime dispatchRuntime Validate(ContractDescription, ServiceEndpoint) Declaration void Validate(ContractDescription contractDescription, ServiceEndpoint endpoint) Parameters Type Name Description ContractDescription contractDescription ServiceEndpoint endpoint"
  },
  "api-corewcf/CoreWCF.Description.IContractBehaviorAttribute.html": {
    "href": "api-corewcf/CoreWCF.Description.IContractBehaviorAttribute.html",
    "title": "Interface IContractBehaviorAttribute",
    "keywords": "Interface IContractBehaviorAttribute Specifies the contract for which an attribute that implements the interface is active. Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public interface IContractBehaviorAttribute Remarks Implement the <xref:CoreWCF.Description.IContractBehaviorAttribute> interface on an attribute that is also an <xref:CoreWCF.Description.IContractBehavior?displayProperty=nameWithType> object to enable the use of that contract behavior attribute on a service type but restrict its application to the contract specified in the <xref:CoreWCF.Description.IContractBehaviorAttribute.TargetContract%2A> property. There is no requirement to implement <xref:CoreWCF.Description.IContractBehaviorAttribute> on custom contract behavior attributes, and if the attribute is applied either to a contract interface or to a duplex callback class the value of the <xref:CoreWCF.Description.IContractBehaviorAttribute.TargetContract%2A> property is ignored. For more information, see <xref:CoreWCF.Description.IContractBehavior?displayProperty=nameWithType>. Properties TargetContract Declaration Type TargetContract { get; } Property Value Type Description Type"
  },
  "api-corewcf/CoreWCF.Description.IEndpointBehavior.html": {
    "href": "api-corewcf/CoreWCF.Description.IEndpointBehavior.html",
    "title": "Interface IEndpointBehavior",
    "keywords": "Interface IEndpointBehavior Implements methods that can be used to extend run-time behavior for an endpoint in either a service or client application. Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public interface IEndpointBehavior Remarks Implement the <xref:CoreWCF.Description.IEndpointBehavior> interface to modify, examine, or extend some aspect of endpoint-wide execution at the application level for either client or service applications. Use the <xref:CoreWCF.Description.IEndpointBehavior.AddBindingParameters%2A> method to pass custom data at runtime to enable bindings to support custom behavior. Use the <xref:CoreWCF.Description.IEndpointBehavior.ApplyClientBehavior%2A> method to modify, examine, or insert extensions to an endpoint in a client application. Use the <xref:CoreWCF.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> method to modify, examine, or insert extensions to endpoint-wide execution in a service application. Use the <xref:CoreWCF.Description.IEndpointBehavior.Validate%2A> method to confirm that a <xref:CoreWCF.Description.ServiceEndpoint> meets specific requirements. This can be used to ensure that an endpoint has a certain configuration setting enabled, supports a particular feature and other requirements. <xref:CoreWCF.Description.IEndpointBehavior> objects can make use of any of these methods, but often only one is important; in such cases, the unused methods can return, performing no action. Note All of the <xref:CoreWCF.Description.IEndpointBehavior> methods pass a <xref:CoreWCF.Description.ServiceEndpoint> object as a parameter. This parameter is for examination only; if you modify the <xref:CoreWCF.Description.ServiceEndpoint> object the execution behavior is undefined. <xref:CoreWCF.Description.IEndpointBehavior> objects are typically used to access the various properties of the <xref:CoreWCF.Dispatcher.DispatchRuntime?displayProperty=nameWithType>, <xref:CoreWCF.Dispatcher.DispatchOperation?displayProperty=nameWithType>, <xref:CoreWCF.Dispatcher.EndpointDispatcher?displayProperty=nameWithType>, and <xref:CoreWCF.Dispatcher.ChannelDispatcher?displayProperty=nameWithType> objects in a service application and the <xref:CoreWCF.Dispatcher.ClientRuntime?displayProperty=nameWithType> and <xref:CoreWCF.Dispatcher.ClientOperation?displayProperty=nameWithType> in a client application. In addition, you can access the properties of duplex clients and services using the <xref:CoreWCF.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A?displayProperty=nameWithType> and <xref:CoreWCF.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType> properties, respectively. For a description of the various properties and customizations available, see Extending ServiceHost and the Service Model Layer . Once a customization has been decided upon (and the customization interface implemented if necessary) and the <xref:CoreWCF.Description.IEndpointBehavior> has been decided is the appropriate scope of customization, the customization must be inserted into the Windows Communication Foundation (WCF) runtime by implementing <xref:CoreWCF.Description.IEndpointBehavior> and adding the endpoint behavior to the runtime. There are two ways to add the behavior to the runtime: Programmatically add the custom endpoint behavior to the <xref:CoreWCF.Description.ServiceEndpoint.Behaviors%2A> property prior to the opening of the service host (in a service application) or the channel factory (in a client application). Configure the behavior using an application configuration file. For details, see &lt;behaviorExtensions&gt; . To perform the service customization task for which it is intended, the <xref:CoreWCF.Description.IEndpointBehavior> object must be added to the <xref:CoreWCF.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> property prior to the construction of the service runtime, which occurs when <xref:CoreWCF.ICommunicationObject.Open%2A?displayProperty=nameWithType> method is called on <xref:CoreWCF.ServiceHost?displayProperty=nameWithType>. To perform a client customization task, the <xref:CoreWCF.Description.IEndpointBehavior> object must be added to the <xref:CoreWCF.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> property before calling the <xref:CoreWCF.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> method or the <xref:CoreWCF.ICommunicationObject.Open%2A?displayProperty=nameWithType> method on <xref:CoreWCF.ChannelFactory%601>. Methods AddBindingParameters(ServiceEndpoint, BindingParameterCollection) Declaration void AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters) Parameters Type Name Description ServiceEndpoint endpoint BindingParameterCollection bindingParameters ApplyClientBehavior(ServiceEndpoint, ClientRuntime) Declaration void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime) Parameters Type Name Description ServiceEndpoint endpoint ClientRuntime clientRuntime ApplyDispatchBehavior(ServiceEndpoint, EndpointDispatcher) Declaration void ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher) Parameters Type Name Description ServiceEndpoint endpoint EndpointDispatcher endpointDispatcher Validate(ServiceEndpoint) Declaration void Validate(ServiceEndpoint endpoint) Parameters Type Name Description ServiceEndpoint endpoint"
  },
  "api-corewcf/CoreWCF.Description.IMetadataEndpointAddressProvider.html": {
    "href": "api-corewcf/CoreWCF.Description.IMetadataEndpointAddressProvider.html",
    "title": "Interface IMetadataEndpointAddressProvider",
    "keywords": "Interface IMetadataEndpointAddressProvider Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public interface IMetadataEndpointAddressProvider Methods GetEndpointAddress(HttpRequest) Declaration Uri GetEndpointAddress(HttpRequest httpRequest) Parameters Type Name Description HttpRequest httpRequest Returns Type Description Uri"
  },
  "api-corewcf/CoreWCF.Description.IMetadataExchange.html": {
    "href": "api-corewcf/CoreWCF.Description.IMetadataExchange.html",
    "title": "Interface IMetadataExchange",
    "keywords": "Interface IMetadataExchange Exposes methods used to return metadata about a service. Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax [ServiceContract(ConfigurationName = \"IMetadataExchange\", Name = \"IMetadataExchange\", Namespace = \"http://schemas.microsoft.com/2006/04/mex\")] public interface IMetadataExchange Remarks When programming Windows Communication Foundation (WCF) services, it is useful to publish metadata about the service. For example, metadata can be a Web Services Description Language (WSDL) document that describes all of the methods and data types employed by a service. Returning metadata about an WCF service allows consumers of a service to easily create clients for the service. For more information about WCF metadata endpoints, see Metadata . Services implemented using WCF publish metadata by exposing one or more metadata endpoints. Metadata endpoints in WCF have an address, a binding and a contract like any other endpoint. The <xref:CoreWCF.Description.MetadataReference> interface specifies the service contract implemented by all metadata endpoints in WCF. There is no need to implement the <xref:CoreWCF.Description.MetadataReference> contract in your service implementation. Instead, add the <xref:CoreWCF.Description.ServiceMetadataBehavior> to the service description. Or, when using configuration, set the contract attribute of the endpoint element to IMetadataExchange . For an example, see How to: Publish Metadata for a Service Using a Configuration File . For details on publishing metadata in WCF see Publishing Metadata . Methods Get(Message) Declaration [OperationContract(Action = \"http://schemas.xmlsoap.org/ws/2004/09/transfer/Get\", ReplyAction = \"http://schemas.xmlsoap.org/ws/2004/09/transfer/GetResponse\")] Message Get(Message request) Parameters Type Name Description Message request Returns Type Description Message GetAsync(Message) Declaration [OperationContract(Action = \"http://schemas.xmlsoap.org/ws/2004/09/transfer/Get\", ReplyAction = \"http://schemas.xmlsoap.org/ws/2004/09/transfer/GetResponse\")] Task<Message> GetAsync(Message request) Parameters Type Name Description Message request Returns Type Description Task < Message >"
  },
  "api-corewcf/CoreWCF.Description.IOperationBehavior.html": {
    "href": "api-corewcf/CoreWCF.Description.IOperationBehavior.html",
    "title": "Interface IOperationBehavior",
    "keywords": "Interface IOperationBehavior Implements methods that can be used to extend run-time behavior for an operation in either a service or client application. Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public interface IOperationBehavior Remarks Implement the <xref:CoreWCF.Description.IOperationBehavior> interface to modify, examine, or extend some aspect of operation-wide execution at the application level for either client or service applications. Use the <xref:CoreWCF.Description.IOperationBehavior.AddBindingParameters%2A> method to pass custom data at runtime to enable bindings to support custom behavior. Use the <xref:CoreWCF.Description.IOperationBehavior.ApplyClientBehavior%2A> method to modify, examine, or insert extensions to a client dispatcher in a client application. Use the <xref:CoreWCF.Description.IOperationBehavior.ApplyDispatchBehavior%2A> method to modify, examine, or insert extensions to operation-wide execution in a service application. Use the <xref:CoreWCF.Description.IOperationBehavior.Validate%2A> method to confirm that a <xref:CoreWCF.Description.OperationDescription> meets specific requirements. This can be used to ensure that an operation has a certain configuration setting enabled, supports a particular feature and other requirements. <xref:CoreWCF.Description.IOperationBehavior> objects can make use of any of these methods, but often only one is important; in such cases, the unused methods can return, performing no action. Note All of the <xref:CoreWCF.Description.IOperationBehavior> methods pass an <xref:CoreWCF.Description.OperationDescription> object as a parameter. This parameter is for examination only; if you modify the <xref:CoreWCF.Description.OperationDescription> object the execution behavior is undefined. <xref:CoreWCF.Description.IOperationBehavior> objects are typically used to access the various properties of the <xref:CoreWCF.Dispatcher.DispatchOperation?displayProperty=nameWithType> object in a service application and the <xref:CoreWCF.Dispatcher.ClientOperation?displayProperty=nameWithType> object in a client application. Typically, the developer first reviews the extensibility points to determine which customization option suits the application scenario and then implements the customization at the appropriate scope. For example, <xref:CoreWCF.Description.IServiceBehavior?displayProperty=nameWithType> objects can insert customizations for all messages in an entire service and <xref:CoreWCF.Description.IContractBehavior?displayProperty=nameWithType> objects can insert customizations for all messages across a specific contract, and so on. For a description of the various properties and customizations available, see Extending ServiceHost and the Service Model Layer . Once a customization has been decided upon (and the customization interface implemented if necessary) and the <xref:CoreWCF.Description.IOperationBehavior> is the appropriate scope of customization, the customization must be inserted into the Windows Communication Foundation (WCF) runtime by implementing <xref:CoreWCF.Description.IOperationBehavior> and adding the operation behavior to the runtime. There are two ways to add the <xref:CoreWCF.Description.IOperationBehavior> to the runtime: Programmatically add the custom operation behavior to the <xref:CoreWCF.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> property prior to the opening of the service host (in a service application) or the channel factory (in a client application). Add the behavior using a custom attribute. To perform the service customization task for which it is intended, the <xref:CoreWCF.Description.IOperationBehavior> object must be added to the <xref:CoreWCF.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> property prior to the construction of the service runtime, which occurs when <xref:CoreWCF.ICommunicationObject.Open%2A?displayProperty=nameWithType> method is called on <xref:CoreWCF.ServiceHost?displayProperty=nameWithType>. To perform a client customization task, the <xref:CoreWCF.Description.IOperationBehavior> object must be added to the <xref:CoreWCF.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> property before calling the <xref:CoreWCF.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> method or the <xref:CoreWCF.ICommunicationObject.Open%2A?displayProperty=nameWithType> method on <xref:CoreWCF.ChannelFactory%601>. Although the operation behavior is designed for easy access to the runtime at the scope of an individual operation, you can access the runtime at a larger scope by accessing the parent runtime object. Methods AddBindingParameters(OperationDescription, BindingParameterCollection) Declaration void AddBindingParameters(OperationDescription operationDescription, BindingParameterCollection bindingParameters) Parameters Type Name Description OperationDescription operationDescription BindingParameterCollection bindingParameters ApplyClientBehavior(OperationDescription, ClientOperation) Declaration void ApplyClientBehavior(OperationDescription operationDescription, ClientOperation clientOperation) Parameters Type Name Description OperationDescription operationDescription ClientOperation clientOperation ApplyDispatchBehavior(OperationDescription, DispatchOperation) Declaration void ApplyDispatchBehavior(OperationDescription operationDescription, DispatchOperation dispatchOperation) Parameters Type Name Description OperationDescription operationDescription DispatchOperation dispatchOperation Validate(OperationDescription) Declaration void Validate(OperationDescription operationDescription) Parameters Type Name Description OperationDescription operationDescription"
  },
  "api-corewcf/CoreWCF.Description.IPolicyExportExtension.html": {
    "href": "api-corewcf/CoreWCF.Description.IPolicyExportExtension.html",
    "title": "Interface IPolicyExportExtension",
    "keywords": "Interface IPolicyExportExtension Implement to insert custom binding policy assertions in the Web Services Description Language (WSDL) information. Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public interface IPolicyExportExtension Remarks Implement the <xref:CoreWCF.Description.IPolicyExportExtension> interface on a <xref:CoreWCF.Channels.BindingElement?displayProperty=nameWithType> object to write statements about endpoint capabilities or requirements into the WSDL information exposed by a particular endpoint. Typically the binding element is one that implements some feature, but this is not required. To load your policy exporter from a configuration file, implement a <xref:CoreWCF.Configuration.BindingElementExtensionElement?displayProperty=nameWithType> that returns the policy exporter <xref:CoreWCF.Channels.BindingElement> object. The policy exporter is used by Windows Communication Foundation (WCF) to use policy assertions to communicate to clients the existence of that custom binding requirement or endpoint capability. The <xref:CoreWCF.Description.IPolicyExportExtension.ExportPolicy%2A> method takes the <xref:CoreWCF.Description.MetadataExporter> and <xref:CoreWCF.Description.PolicyConversionContext> objects. Use the <xref:CoreWCF.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:CoreWCF.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, and <xref:CoreWCF.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> methods to obtain collections of policy assertions that have already been exported at various scopes. Then add your custom policy assertion object to the appropriate collection. The <xref:CoreWCF.Description.PolicyConversionContext.Contract%2A> property exposes the <xref:CoreWCF.Description.ContractDescription> for the endpoint that is being exported. This allows the <xref:CoreWCF.Description.IPolicyExportExtension> extension to correctly scope their exported policy assertions. For example, security attributes in code may add behaviors to the <xref:CoreWCF.Description.ContractDescription> that indicate where security policy assertions should be added. The <xref:CoreWCF.Description.IPolicyExportExtension> mechanism only supports exporting policy assertions in WSDL. To export custom WSDL elements you must use the <xref:CoreWCF.Description.IWsdlExportExtension> mechanism to modify the WSDL directly. Once custom policy assertions have been attached to the WSDL information, clients can detect and import the custom binding assertions by using an <xref:CoreWCF.Description.IPolicyImportExtension> object. Methods ExportPolicy(MetadataExporter, PolicyConversionContext) Declaration void ExportPolicy(MetadataExporter exporter, PolicyConversionContext context) Parameters Type Name Description MetadataExporter exporter PolicyConversionContext context"
  },
  "api-corewcf/CoreWCF.Description.IServiceBehavior.html": {
    "href": "api-corewcf/CoreWCF.Description.IServiceBehavior.html",
    "title": "Interface IServiceBehavior",
    "keywords": "Interface IServiceBehavior Provides a mechanism to modify or insert custom extensions across an entire service, including the . Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public interface IServiceBehavior Remarks Implement <xref:CoreWCF.Description.IServiceBehavior> to modify, examine, or extend some aspect of service-wide execution at the application level: Use the <xref:CoreWCF.Description.IServiceBehavior.ApplyDispatchBehavior%2A> method to change run-time property values or insert custom extension objects such as error handlers, message or parameter interceptors, security extensions, and other custom extension objects. Use the <xref:CoreWCF.Description.IServiceBehavior.Validate%2A> method to examine the description before Windows Communication Foundation (WCF) constructs the executing service to confirm that it can execute properly. Use the <xref:CoreWCF.Description.IServiceBehavior.AddBindingParameters%2A> method to pass to a binding element the custom information for the service so that it can support the service correctly. <xref:CoreWCF.Description.IServiceBehavior> objects can make use of any of these methods, but often only one is important; in such cases the unused methods can return without a value. Note All of the <xref:CoreWCF.Description.IServiceBehavior> methods pass <xref:CoreWCF.Description.ServiceDescription?displayProperty=nameWithType> and <xref:CoreWCF.ServiceHostBase?displayProperty=nameWithType> objects as a parameters. The <xref:CoreWCF.Description.ServiceDescription> parameter is for examination only; if you modify these objects the execution behavior is undefined. To perform the customization task for which it is intended, the <xref:CoreWCF.Description.IServiceBehavior> object must be added to the <xref:CoreWCF.Description.ServiceDescription.Behaviors%2A> property prior to the construction of the service runtime. There are three ways to do this: Programmatically add the custom service behavior to the <xref:CoreWCF.Description.ServiceDescription.Behaviors%2A> property prior to the point where the <xref:CoreWCF.ICommunicationObject.Open%2A?displayProperty=nameWithType> method is called on the <xref:CoreWCF.ServiceHost?displayProperty=nameWithType> object. Create a custom attribute that implements <xref:CoreWCF.Description.IServiceBehavior> and use it to mark service classes that are to be modified. When a <xref:CoreWCF.ServiceHost> object is constructed, WCF uses reflection to discover the attributes on the service type. If any attributes implement <xref:CoreWCF.Description.IServiceBehavior>, they are added to the behaviors collection on <xref:CoreWCF.Description.ServiceDescription>. Extend the <xref:CoreWCF.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> class to support the specification of the behavior in an application or machine configuration file. See the Example section for more information. Examples of service behaviors in WCF include the <xref:CoreWCF.ServiceBehaviorAttribute> attribute, the <xref:CoreWCF.Description.ServiceThrottlingBehavior?displayProperty=nameWithType>, the <xref:CoreWCF.Description.ServiceDebugBehavior?displayProperty=nameWithType> and the <xref:CoreWCF.Description.ServiceMetadataBehavior?displayProperty=nameWithType> behavior. Methods AddBindingParameters(ServiceDescription, ServiceHostBase, Collection<ServiceEndpoint>, BindingParameterCollection) Declaration void AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters) Parameters Type Name Description ServiceDescription serviceDescription ServiceHostBase serviceHostBase Collection < ServiceEndpoint > endpoints BindingParameterCollection bindingParameters ApplyDispatchBehavior(ServiceDescription, ServiceHostBase) Declaration void ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase) Parameters Type Name Description ServiceDescription serviceDescription ServiceHostBase serviceHostBase Validate(ServiceDescription, ServiceHostBase) Declaration void Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase) Parameters Type Name Description ServiceDescription serviceDescription ServiceHostBase serviceHostBase"
  },
  "api-corewcf/CoreWCF.Description.IWsdlExportExtension.html": {
    "href": "api-corewcf/CoreWCF.Description.IWsdlExportExtension.html",
    "title": "Interface IWsdlExportExtension",
    "keywords": "Interface IWsdlExportExtension Defines endpoint or contract behaviors that can export custom metadata. Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public interface IWsdlExportExtension Remarks To modify and extend the Web Services Description Language (WSDL) exported by <xref:CoreWCF.Description.WsdlExporter> objects, implement the <xref:CoreWCF.Description.IWsdlExportExtension> interface on an endpoint, contract, or operation behavior (an object that implements either <xref:CoreWCF.Description.IContractBehavior>, <xref:CoreWCF.Description.IEndpointBehavior>, or <xref:CoreWCF.Description.IOperationBehavior>) and add the behavior to the <xref:CoreWCF.Description.ServiceEndpoint.Behaviors%2A>, <xref:CoreWCF.Description.ContractDescription.Behaviors%2A>, or <xref:CoreWCF.Description.OperationDescription.Behaviors%2A> property. In addition, you can also implement <xref:CoreWCF.Description.IWsdlExportExtension> on a <xref:CoreWCF.Channels.BindingElement>. Note <xref:CoreWCF.Description.IWsdlExportExtension> implementations are never invoked if they are implemented as an <xref:CoreWCF.Description.IServiceBehavior>. <xref:CoreWCF.Description.IWsdlExportExtension> does not export custom policy assertions even though Windows Communication Foundation (WCF) exports custom binding policy assertions to the appropriate element inside WSDL. If you want to export custom policy assertions, implement the <xref:CoreWCF.Description.IPolicyExportExtension> interface. The metadata publication process begins by calling <xref:CoreWCF.Description.WsdlExporter.ExportEndpoints%2A?displayProperty=nameWithType> which in turn calls <xref:CoreWCF.Description.WsdlExporter.ExportEndpoint%2A?displayProperty=nameWithType> for each endpoint. The endpoint is exported by first exporting its contract.When exporting a contract the <xref:CoreWCF.Description.WsdlExporter?displayProperty=nameWithType> calls the <xref:CoreWCF.Description.IWsdlExportExtension.ExportContract%2A?displayProperty=nameWithType> method on all <xref:CoreWCF.Description.IWsdlExportExtension> implementations on the contract, and operation behaviors for that contract. Operations that use wildcard actions are not exported in metadata, so <xref:CoreWCF.Description.IWsdlExportExtension> implementations on operation behaviors for these operations are not exported. After exporting the contract, the port and binding are exported and exported policy expressions are attached. Both the <xref:CoreWCF.Description.IWsdlExportExtension.ExportContract%2A> and the <xref:CoreWCF.Description.IWsdlExportExtension.ExportEndpoint%2A> methods provide access to the <xref:CoreWCF.Description.WsdlExporter> so that <xref:CoreWCF.Description.IWsdlExportExtension> implementations can report recoverable errors and warnings through the <xref:CoreWCF.Description.MetadataExporter.Errors%2A> property. The context objects passed into both methods provide convenient mappings from exported WSDL elements to properties of <xref:CoreWCF.Description.ContractDescription> and <xref:CoreWCF.Description.ServiceEndpoint> objects. If an <xref:CoreWCF.Description.IWsdlExportExtension> implementation throws an exception on export, the generated metadata is in an inconsistent state and the <xref:CoreWCF.Description.WsdlExporter> object should be discarded. Note Custom export extension must run after the built-in serializer populates the service description. Methods ExportContract(WsdlExporter, WsdlContractConversionContext) Declaration void ExportContract(WsdlExporter exporter, WsdlContractConversionContext context) Parameters Type Name Description WsdlExporter exporter WsdlContractConversionContext context ExportEndpoint(WsdlExporter, WsdlEndpointConversionContext) Declaration void ExportEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext context) Parameters Type Name Description WsdlExporter exporter WsdlEndpointConversionContext context"
  },
  "api-corewcf/CoreWCF.Description.ListenUriMode.html": {
    "href": "api-corewcf/CoreWCF.Description.ListenUriMode.html",
    "title": "Class ListenUriMode",
    "keywords": "Class ListenUriMode Indicates whether the transport must ensure that the URI provided for the service to listen on is unique or can be used exactly as provided. Inheritance Object ListenUriMode Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public sealed class ListenUriMode : Enum Remarks The URI for the endpoint on which a service listens can be set programmatically using the <xref:CoreWCF.Description.ServiceEndpoint.ListenUri%2A> property and the value of the <xref:CoreWCF.Description.ListenUriMode> for that endpoint is set using the <xref:CoreWCF.Description.ServiceEndpoint.ListenUriMode%2A> property. The default value for <xref:CoreWCF.Description.ServiceEndpoint.ListenUri%2A> is <xref:CoreWCF.Description.ServiceEndpoint.Address%2A>. The default value for <xref:CoreWCF.Description.ServiceEndpoint.ListenUriMode%2A> is Explicit. The value of these properties may also be set using the <xref:CoreWCF.Configuration.ServiceEndpointElement.ListenUri%2A> property and the <xref:CoreWCF.Configuration.ServiceEndpointElement.ListenUriMode%2A> property. When the value of the <xref:CoreWCF.Description.ListenUriMode> is set to Unique the transport is responsible for creating a unique URI. Different transports used by Windows Communication Foundation (WCF) generate this unique URI differently For TCP in exclusive mode (<xref:CoreWCF.Channels.TcpTransportBindingElement.PortSharingEnabled%2A> is false ) this means binding to a uniquely available port number. For TCP in port sharing mode (<xref:CoreWCF.Channels.TcpTransportBindingElement.PortSharingEnabled%2A> is true ) and for all of the other existing WCF transports, this means appending a unique path (a GUID) to the end of the <xref:CoreWCF.Description.ServiceEndpoint.ListenUri%2A>. When the value of the <xref:CoreWCF.Description.ServiceEndpoint.ListenUriMode%2A> is set to Explicit mode, the transport uses the <xref:CoreWCF.Description.ServiceEndpoint.ListenUri%2A> exactly as it is provided, without modifying it to make it unique. Fields Explicit Declaration public const ListenUriMode Explicit Field Value Type Description ListenUriMode Unique Declaration public const ListenUriMode Unique Field Value Type Description ListenUriMode value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.Description.MessageBodyDescription.html": {
    "href": "api-corewcf/CoreWCF.Description.MessageBodyDescription.html",
    "title": "Class MessageBodyDescription",
    "keywords": "Class MessageBodyDescription Represents the body of a SOAP message. Inheritance Object MessageBodyDescription Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class MessageBodyDescription : Object Remarks Use the <xref:CoreWCF.Description.MessageBodyDescription> class to construct or modify a SOAP message body when added to the description tree. Constructors MessageBodyDescription() Declaration public MessageBodyDescription() Properties Parts Declaration public MessagePartDescriptionCollection Parts { get; } Property Value Type Description MessagePartDescriptionCollection ReturnValue Declaration public MessagePartDescription ReturnValue { get; set; } Property Value Type Description MessagePartDescription WrapperName Declaration public string WrapperName { get; set; } Property Value Type Description String WrapperNamespace Declaration public string WrapperNamespace { get; set; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.Description.MessageDescription.html": {
    "href": "api-corewcf/CoreWCF.Description.MessageDescription.html",
    "title": "Class MessageDescription",
    "keywords": "Class MessageDescription Represents the description of a message. Inheritance Object MessageDescription Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class MessageDescription : Object Remarks The <xref:CoreWCF.Description.MessageDescription> contains the <xref:CoreWCF.Description.MessageDescription.Headers%2A> and <xref:CoreWCF.Description.MessageDescription.Body%2A> properties to provide get access to these parts of the message. Whether the message is incoming or outgoing is indicated by the <xref:CoreWCF.Description.MessageDescription.Direction%2A> property. It also provides an <xref:CoreWCF.Description.MessageDescription.Action%2A> property where the URI that indicates the intention of the message may be specified. Constructors MessageDescription(String, MessageDirection) Declaration public MessageDescription(string action, MessageDirection direction) Parameters Type Name Description String action MessageDirection direction Properties Action Declaration public string Action { get; } Property Value Type Description String Body Declaration public MessageBodyDescription Body { get; } Property Value Type Description MessageBodyDescription Direction Declaration public MessageDirection Direction { get; } Property Value Type Description MessageDirection Headers Declaration public MessageHeaderDescriptionCollection Headers { get; } Property Value Type Description MessageHeaderDescriptionCollection MessageType Declaration public Type MessageType { get; set; } Property Value Type Description Type Properties Declaration public MessagePropertyDescriptionCollection Properties { get; } Property Value Type Description MessagePropertyDescriptionCollection Methods Clone() Declaration public MessageDescription Clone() Returns Type Description MessageDescription"
  },
  "api-corewcf/CoreWCF.Description.MessageDescriptionCollection.html": {
    "href": "api-corewcf/CoreWCF.Description.MessageDescriptionCollection.html",
    "title": "Class MessageDescriptionCollection",
    "keywords": "Class MessageDescriptionCollection Provides a collection that is used to store descriptions of the messages that make up an operation that belongs to a contract. Inheritance Object MessageDescriptionCollection Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class MessageDescriptionCollection : Collection<MessageDescription> Remarks A <xref:CoreWCF.Description.ContractDescription> is used to describe contracts and their associated operations. Each contract operation has a corresponding <xref:CoreWCF.Description.OperationDescription> that describes aspects of the operation, such as whether the operation is one-way or request/reply. Each <xref:CoreWCF.Description.OperationDescription> in turn describes the messages that make up the operation using a collection of <xref:CoreWCF.Description.MessageDescription>. Methods Find(String) Declaration public MessageDescription Find(string action) Parameters Type Name Description String action Returns Type Description MessageDescription FindAll(String) Declaration public Collection<MessageDescription> FindAll(string action) Parameters Type Name Description String action Returns Type Description Collection < MessageDescription >"
  },
  "api-corewcf/CoreWCF.Description.MessageDirection.html": {
    "href": "api-corewcf/CoreWCF.Description.MessageDirection.html",
    "title": "Class MessageDirection",
    "keywords": "Class MessageDirection Specifies the direction of the message. Inheritance Object MessageDirection Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public sealed class MessageDirection : Enum Remarks The direction of a message indicates whether the message is coming into an endpoint or going out from an endpoint. Input is incoming to the server and Output is outgoing from the server. For a basic request/response message pattern, a request is incoming to the server and the response is outgoing from the server. On callbacks from the server to client, however, a request is outgoing from the server and a response is incoming to the server. Use the <xref:CoreWCF.Description.MessageDescription.%23ctor%28System.String%2CCoreWCF.Description.MessageDirection%29> constructor to specify the direction of a message. Retrieve the direction of a message using the <xref:CoreWCF.Description.MessageDescription.Direction%2A> property. Fields Input Declaration public const MessageDirection Input Field Value Type Description MessageDirection Output Declaration public const MessageDirection Output Field Value Type Description MessageDirection value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.Description.MessageHeaderDescription.html": {
    "href": "api-corewcf/CoreWCF.Description.MessageHeaderDescription.html",
    "title": "Class MessageHeaderDescription",
    "keywords": "Class MessageHeaderDescription Represents a SOAP message header. Inheritance Object MessagePartDescription MessageHeaderDescription Inherited Members MessagePartDescription.Name MessagePartDescription.Namespace MessagePartDescription.Type MessagePartDescription.Index MessagePartDescription.Multiple MessagePartDescription.ProtectionLevel MessagePartDescription.MemberInfo Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class MessageHeaderDescription : MessagePartDescription Remarks To be added. Constructors MessageHeaderDescription(String, String) Declaration public MessageHeaderDescription(string name, string ns) Parameters Type Name Description String name String ns Properties Actor Declaration public string Actor { get; set; } Property Value Type Description String MustUnderstand Declaration public bool MustUnderstand { get; set; } Property Value Type Description Boolean Relay Declaration public bool Relay { get; set; } Property Value Type Description Boolean TypedHeader Declaration public bool TypedHeader { get; set; } Property Value Type Description Boolean Methods Clone() Declaration public override MessagePartDescription Clone() Returns Type Description MessagePartDescription Overrides MessagePartDescription.Clone()"
  },
  "api-corewcf/CoreWCF.Description.MessageHeaderDescriptionCollection.html": {
    "href": "api-corewcf/CoreWCF.Description.MessageHeaderDescriptionCollection.html",
    "title": "Class MessageHeaderDescriptionCollection",
    "keywords": "Class MessageHeaderDescriptionCollection Represents a collection of objects. Inheritance Object MessageHeaderDescriptionCollection Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class MessageHeaderDescriptionCollection : KeyedCollection<XmlQualifiedName, MessageHeaderDescription> Remarks Typically this collection is returned from the <xref:CoreWCF.Description.MessageDescription.Headers%2A?displayProperty=nameWithType> property and enables you to find, insert, and remove various <xref:CoreWCF.Description.MessageHeaderDescription?displayProperty=nameWithType> objects. Methods GetKeyForItem(MessageHeaderDescription) Declaration protected override XmlQualifiedName GetKeyForItem(MessageHeaderDescription item) Parameters Type Name Description MessageHeaderDescription item Returns Type Description XmlQualifiedName"
  },
  "api-corewcf/CoreWCF.Description.MessagePartDescription.html": {
    "href": "api-corewcf/CoreWCF.Description.MessagePartDescription.html",
    "title": "Class MessagePartDescription",
    "keywords": "Class MessagePartDescription Represents a description of a SOAP message part. Inheritance Object MessagePartDescription MessageHeaderDescription MessagePropertyDescription Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class MessagePartDescription : Object Remarks The <xref:CoreWCF.Description.MessagePartDescription> class is the parent class of <xref:CoreWCF.Description.MessageHeaderDescription> and <xref:CoreWCF.Description.MessagePropertyDescription> and contains the basic functionality of both classes. Constructors MessagePartDescription(String, String) Declaration public MessagePartDescription(string name, string ns) Parameters Type Name Description String name String ns Properties Index Declaration public int Index { get; set; } Property Value Type Description Int32 MemberInfo Declaration public MemberInfo MemberInfo { get; set; } Property Value Type Description MemberInfo Multiple Declaration public bool Multiple { get; set; } Property Value Type Description Boolean Name Declaration public string Name { get; } Property Value Type Description String Namespace Declaration public string Namespace { get; } Property Value Type Description String ProtectionLevel Declaration public ProtectionLevel ProtectionLevel { get; set; } Property Value Type Description ProtectionLevel Type Declaration public Type Type { get; set; } Property Value Type Description Type Methods Clone() Declaration public virtual MessagePartDescription Clone() Returns Type Description MessagePartDescription"
  },
  "api-corewcf/CoreWCF.Description.MessagePartDescriptionCollection.html": {
    "href": "api-corewcf/CoreWCF.Description.MessagePartDescriptionCollection.html",
    "title": "Class MessagePartDescriptionCollection",
    "keywords": "Class MessagePartDescriptionCollection Represents a collection of objects. Inheritance Object MessagePartDescriptionCollection Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class MessagePartDescriptionCollection : KeyedCollection<XmlQualifiedName, MessagePartDescription> Remarks Enables you to find <xref:CoreWCF.Description.MessagePartDescription?displayProperty=nameWithType> objects by name and namespace. Methods GetKeyForItem(MessagePartDescription) Declaration protected override XmlQualifiedName GetKeyForItem(MessagePartDescription item) Parameters Type Name Description MessagePartDescription item Returns Type Description XmlQualifiedName"
  },
  "api-corewcf/CoreWCF.Description.MessagePropertyAttribute.html": {
    "href": "api-corewcf/CoreWCF.Description.MessagePropertyAttribute.html",
    "title": "Class MessagePropertyAttribute",
    "keywords": "Class MessagePropertyAttribute Represents data that is passed locally with a custom message type but not serialized into a SOAP message. Inheritance Object MessagePropertyAttribute Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public sealed class MessagePropertyAttribute : Attribute Remarks Use the <xref:CoreWCF.MessagePropertyAttribute> attribute to attach data to the custom message type as it passes through the Windows Communication Foundation (WCF) system without serializing the data into a SOAP message. Constructors MessagePropertyAttribute() Declaration public MessagePropertyAttribute() Properties Name Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.Description.MessagePropertyDescription.html": {
    "href": "api-corewcf/CoreWCF.Description.MessagePropertyDescription.html",
    "title": "Class MessagePropertyDescription",
    "keywords": "Class MessagePropertyDescription Represents a message property specified by the . Inheritance Object MessagePartDescription MessagePropertyDescription Inherited Members MessagePartDescription.Name MessagePartDescription.Namespace MessagePartDescription.Type MessagePartDescription.Index MessagePartDescription.Multiple MessagePartDescription.ProtectionLevel MessagePartDescription.MemberInfo Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class MessagePropertyDescription : MessagePartDescription Remarks The <xref:CoreWCF.Description.MessagePropertyDescription> class represents message properties specified in a message contract by the use of the <xref:CoreWCF.MessagePropertyAttribute?displayProperty=nameWithType>. Message properties are used to place information on the message that can be used by other objects further on in the message pipeline but that are not serialized with the message. Constructors MessagePropertyDescription(String) Declaration public MessagePropertyDescription(string name) Parameters Type Name Description String name Methods Clone() Declaration public override MessagePartDescription Clone() Returns Type Description MessagePartDescription Overrides MessagePartDescription.Clone()"
  },
  "api-corewcf/CoreWCF.Description.MessagePropertyDescriptionCollection.html": {
    "href": "api-corewcf/CoreWCF.Description.MessagePropertyDescriptionCollection.html",
    "title": "Class MessagePropertyDescriptionCollection",
    "keywords": "Class MessagePropertyDescriptionCollection Represents a collection of objects. Inheritance Object MessagePropertyDescriptionCollection Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class MessagePropertyDescriptionCollection : KeyedCollection<string, MessagePropertyDescription> Remarks Enables you to find <xref:CoreWCF.Description.MessagePropertyDescription?displayProperty=nameWithType> objects by name. Methods GetKeyForItem(MessagePropertyDescription) Declaration protected override string GetKeyForItem(MessagePropertyDescription item) Parameters Type Name Description MessagePropertyDescription item Returns Type Description String"
  },
  "api-corewcf/CoreWCF.Description.MetadataConversionError.html": {
    "href": "api-corewcf/CoreWCF.Description.MetadataConversionError.html",
    "title": "Class MetadataConversionError",
    "keywords": "Class MetadataConversionError Represents an error or warning event that occurred during the use of a or . Inheritance Object MetadataConversionError Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class MetadataConversionError : Object Remarks You typically use <xref:CoreWCF.Description.MetadataConversionError> objects to determine whether classes that extend <xref:CoreWCF.Description.MetadataExporter> and <xref:CoreWCF.Description.MetadataImporter> have encountered an error or warning condition by checking the <xref:CoreWCF.Description.MetadataExporter.Errors%2A> and <xref:CoreWCF.Description.MetadataImporter.Errors%2A> properties after importing or exporting the metadata. Tools can use these error and warning messages to report metadata import and export problems to the user. Constructors MetadataConversionError(String) Declaration public MetadataConversionError(string message) Parameters Type Name Description String message MetadataConversionError(String, Boolean) Declaration public MetadataConversionError(string message, bool isWarning) Parameters Type Name Description String message Boolean isWarning Properties IsWarning Declaration public bool IsWarning { get; } Property Value Type Description Boolean Message Declaration public string Message { get; } Property Value Type Description String Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32"
  },
  "api-corewcf/CoreWCF.Description.MetadataEndpointAddressServiceBehavior.html": {
    "href": "api-corewcf/CoreWCF.Description.MetadataEndpointAddressServiceBehavior.html",
    "title": "Class MetadataEndpointAddressServiceBehavior",
    "keywords": "Class MetadataEndpointAddressServiceBehavior Inheritance Object MetadataEndpointAddressServiceBehavior Implements IServiceBehavior Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class MetadataEndpointAddressServiceBehavior : Object, IServiceBehavior Constructors MetadataEndpointAddressServiceBehavior(IMetadataEndpointAddressProvider) Declaration public MetadataEndpointAddressServiceBehavior(IMetadataEndpointAddressProvider provider) Parameters Type Name Description IMetadataEndpointAddressProvider provider Explicit Interface Implementations IServiceBehavior.AddBindingParameters(ServiceDescription, ServiceHostBase, Collection<ServiceEndpoint>, BindingParameterCollection) Declaration void IServiceBehavior.AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters) Parameters Type Name Description ServiceDescription serviceDescription ServiceHostBase serviceHostBase Collection < ServiceEndpoint > endpoints BindingParameterCollection bindingParameters IServiceBehavior.ApplyDispatchBehavior(ServiceDescription, ServiceHostBase) Declaration void IServiceBehavior.ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase) Parameters Type Name Description ServiceDescription serviceDescription ServiceHostBase serviceHostBase IServiceBehavior.Validate(ServiceDescription, ServiceHostBase) Declaration void IServiceBehavior.Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase) Parameters Type Name Description ServiceDescription serviceDescription ServiceHostBase serviceHostBase Implements IServiceBehavior"
  },
  "api-corewcf/CoreWCF.Description.MetadataExporter.html": {
    "href": "api-corewcf/CoreWCF.Description.MetadataExporter.html",
    "title": "Class MetadataExporter",
    "keywords": "Class MetadataExporter Exports service description information into metadata. Inheritance Object MetadataExporter WsdlExporter Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public abstract class MetadataExporter : Object Remarks Metadata export is the process of describing service endpoints and projecting them into a parallel, standardized representation (typically, but not necessarily XML) that applications can access to implement a client that uses the service. To export metadata from <xref:CoreWCF.Description.ServiceEndpoint?displayProperty=nameWithType> objects, use an implementation of the <xref:CoreWCF.Description.MetadataExporter> abstract class. A <xref:CoreWCF.Description.MetadataExporter> implementation generates metadata that is encapsulated in a <xref:CoreWCF.Description.MetadataSet?displayProperty=nameWithType> instance. The <xref:CoreWCF.Description.MetadataExporter> class provides a framework for generating policy expressions that describe the capabilities and requirements of an endpoint binding and its associated operations, messages and faults. These policy expressions are captured in a <xref:CoreWCF.Description.PolicyConversionContext?displayProperty=nameWithType> instance. A <xref:CoreWCF.Description.MetadataExporter> implementation can then attach these policy expressions to the metadata it generates. The <xref:CoreWCF.Description.MetadataExporter> calls into each <xref:CoreWCF.Channels.BindingElement?displayProperty=nameWithType> that implements the <xref:CoreWCF.Description.IPolicyExportExtension?displayProperty=nameWithType> interface in the binding of a <xref:CoreWCF.Description.ServiceEndpoint> when generating a <xref:CoreWCF.Description.PolicyConversionContext> object for the <xref:CoreWCF.Description.MetadataExporter> implementation to use. You can export new policy assertions by implementing the <xref:CoreWCF.Description.IPolicyExportExtension> interface on your custom implementations of the <xref:CoreWCF.Channels.BindingElement?displayProperty=nameWithType> type. The <xref:CoreWCF.Description.WsdlExporter?displayProperty=nameWithType> type is the implementation of the <xref:CoreWCF.Description.MetadataExporter> class included with Windows Communication Foundation (WCF). The <xref:CoreWCF.Description.WsdlExporter> type generates WSDL metadata with attached policy expressions. To export custom WSDL metadata or WSDL extensions for endpoint behaviors, contract behaviors or binding elements in a service endpoint, you can implement the <xref:CoreWCF.Description.IWsdlExportExtension?displayProperty=nameWithType> interface. The <xref:CoreWCF.Description.WsdlExporter> type calls into parts of a service endpoint that implement this interface when generating the WSDL document from that endpoint. Properties Errors Declaration public Collection<MetadataConversionError> Errors { get; } Property Value Type Description Collection < MetadataConversionError > PolicyVersion Declaration public PolicyVersion PolicyVersion { get; set; } Property Value Type Description PolicyVersion State Declaration public Dictionary<object, object> State { get; } Property Value Type Description Dictionary < Object , Object > Methods ExportContract(ContractDescription) Declaration public abstract void ExportContract(ContractDescription contract) Parameters Type Name Description ContractDescription contract ExportEndpoint(ServiceEndpoint) Declaration public abstract void ExportEndpoint(ServiceEndpoint endpoint) Parameters Type Name Description ServiceEndpoint endpoint ExportPolicy(ServiceEndpoint) Declaration protected PolicyConversionContext ExportPolicy(ServiceEndpoint endpoint) Parameters Type Name Description ServiceEndpoint endpoint Returns Type Description PolicyConversionContext GetGeneratedMetadata() Declaration public abstract MetadataSet GetGeneratedMetadata() Returns Type Description MetadataSet"
  },
  "api-corewcf/CoreWCF.Description.MetadataLocation.html": {
    "href": "api-corewcf/CoreWCF.Description.MetadataLocation.html",
    "title": "Class MetadataLocation",
    "keywords": "Class MetadataLocation Represents the address of metadata documents. Inheritance Object MetadataLocation Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class MetadataLocation : Object Remarks Represents the location of metadata documents. Constructors MetadataLocation() Declaration public MetadataLocation() MetadataLocation(String) Declaration public MetadataLocation(string location) Parameters Type Name Description String location Properties Location Declaration public string Location { get; set; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.Description.MetadataReference.html": {
    "href": "api-corewcf/CoreWCF.Description.MetadataReference.html",
    "title": "Class MetadataReference",
    "keywords": "Class MetadataReference Represents a reference to a metadata document returned from a metadata exchange endpoint. Inheritance Object MetadataReference Implements IXmlSerializable Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class MetadataReference : Object Remarks When using Windows Communication Foundation (WCF), a metadata endpoint can be created for any service. The endpoint can be queried for metadata that allows a client to communicate with the endpoint. For example, a metadata endpoint can return a Web Services Description Language (WSDL) document that describes the methods and data types of a service. The <xref:CoreWCF.Description.MetadataReference> class is used with WS-MetadataExchange responses where references are directly encoded as &lt;mex:MetadataReference> or &lt;mex:MetadataLocation> . Metadata documents can reference many other documents that describe types and those documents can contain even more references. The <xref:CoreWCF.Description.MetadataReference> class represents a single endpoint that returns a document that can itself contain multiple WSDL or XSD items as well as other metadata references to other WS-MetadataExchange endpoints. Instances of the <xref:CoreWCF.Description.MetadataReference> class are commonly used when processing a <xref:CoreWCF.Description.MetadataSet>, which represents the total metadata exchange point. The <xref:CoreWCF.Description.MetadataResolver> class is designed to resolve all references used to return the metadata. If, however, you need to examine each reference, use the <xref:CoreWCF.Description.MetadataReference> class to represent each endpoint. Specifications WCF implements the Web Services Metadata Exchange (WS-MetadataExchange) specification for returning metadata. That specification further uses the Web Services Transfer (WS-Transfer) specification to define the mechanism for retrieving XML-based data. Constructors MetadataReference() Declaration public MetadataReference() MetadataReference(EndpointAddress, AddressingVersion) Declaration public MetadataReference(EndpointAddress address, AddressingVersion addressVersion) Parameters Type Name Description EndpointAddress address AddressingVersion addressVersion Properties Address Declaration public EndpointAddress Address { get; set; } Property Value Type Description EndpointAddress AddressVersion Declaration public AddressingVersion AddressVersion { get; set; } Property Value Type Description AddressingVersion Implements System.Xml.Serialization.IXmlSerializable"
  },
  "api-corewcf/CoreWCF.Description.MetadataSection.html": {
    "href": "api-corewcf/CoreWCF.Description.MetadataSection.html",
    "title": "Class MetadataSection",
    "keywords": "Class MetadataSection Represents XML metadata or references to XML metadata. Inheritance Object MetadataSection Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class MetadataSection : Object Remarks The <xref:CoreWCF.Description.MetadataSection> class conforms to the definition of the wsx:Metadata/wsx:MetadataSection element in the WS-Metadata Exchange specification and contains XML metadata or references to XML metadata. A <xref:CoreWCF.Description.MetadataSection> object contains one dialect of metadata in XML form (such as a Web Services Description Language or WSDL file). You can add a <xref:CoreWCF.Description.MetadataSection> to a collection of XML metadata represented by a <xref:CoreWCF.Description.MetadataSet> object. Much of the Windows Communication Foundation (WCF) metadata system, such as the <xref:CoreWCF.Description.MetadataExchangeClient> class, use the <xref:CoreWCF.Description.MetadataSet> class to import or export service metadata in XML form. For example, to export WCF contract or endpoint objects to a <xref:CoreWCF.Description.MetadataSet> object that contains the equivalent metadata in XML form, call the appropriate Export methods on the <xref:CoreWCF.Description.WsdlExporter> class, passing either <xref:CoreWCF.Description.ContractDescription> or <xref:CoreWCF.Description.ServiceEndpoint> objects, and then call the <xref:CoreWCF.Description.WsdlExporter.GetGeneratedMetadata%2A> method. To import XML-based metadata from a <xref:CoreWCF.Description.MetadataSet> object into WCF<xref:CoreWCF.Description.ContractDescription>, <xref:CoreWCF.Description.ServiceEndpoint>, and <xref:CoreWCF.Channels.Binding> objects, pass a <xref:CoreWCF.Description.MetadataSet> object to the constructor of the <xref:CoreWCF.Description.WsdlImporter> class and call one of the import methods. Constructors MetadataSection() Declaration public MetadataSection() MetadataSection(String, String, Object) Declaration public MetadataSection(string dialect, string identifier, object metadata) Parameters Type Name Description String dialect String identifier Object metadata Properties Attributes Declaration public Collection<XmlAttribute> Attributes { get; } Property Value Type Description Collection < XmlAttribute > Dialect Declaration public string Dialect { get; set; } Property Value Type Description String Identifier Declaration public string Identifier { get; set; } Property Value Type Description String Metadata Declaration public object Metadata { get; set; } Property Value Type Description Object MetadataExchangeDialect Declaration public static string MetadataExchangeDialect { get; } Property Value Type Description String PolicyDialect Declaration public static string PolicyDialect { get; } Property Value Type Description String ServiceDescriptionDialect Declaration public static string ServiceDescriptionDialect { get; } Property Value Type Description String XmlSchemaDialect Declaration public static string XmlSchemaDialect { get; } Property Value Type Description String Methods CreateFromPolicy(XmlElement, String) Declaration public static MetadataSection CreateFromPolicy(XmlElement policy, string identifier) Parameters Type Name Description XmlElement policy String identifier Returns Type Description MetadataSection CreateFromSchema(XmlSchema) Declaration public static MetadataSection CreateFromSchema(XmlSchema schema) Parameters Type Name Description XmlSchema schema Returns Type Description MetadataSection CreateFromServiceDescription(ServiceDescription) Declaration public static MetadataSection CreateFromServiceDescription(ServiceDescription serviceDescription) Parameters Type Name Description ServiceDescription serviceDescription Returns Type Description MetadataSection"
  },
  "api-corewcf/CoreWCF.Description.MetadataSet.html": {
    "href": "api-corewcf/CoreWCF.Description.MetadataSet.html",
    "title": "Class MetadataSet",
    "keywords": "Class MetadataSet Represents a serializable collection of service metadata in XML form. Inheritance Object MetadataSet Implements IXmlSerializable Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class MetadataSet : Object Remarks The <xref:CoreWCF.Description.MetadataSet> class contains a collection of <xref:CoreWCF.Description.MetadataSection> objects, each of which contains one dialect of metadata in XML form. Typically, the <xref:CoreWCF.Description.MetadataSet> class is used to pass a group of XML metadata documents to and from <xref:CoreWCF.Description.MetadataExporter> and <xref:CoreWCF.Description.MetadataImporter> objects, such as <xref:CoreWCF.Description.WsdlImporter> and <xref:CoreWCF.Description.WsdlExporter>. To create a <xref:CoreWCF.Description.MetadataSet> from a <xref:System.Collections.Generic.IEnumerable%601> object of type <xref:CoreWCF.Description.MetadataSection>, use the <xref:CoreWCF.Description.MetadataSet.%23ctor%2A> constructor. To obtain a <xref:System.Collections.Generic.IEnumerable%601> object of type <xref:CoreWCF.Description.MetadataSection>, use the <xref:CoreWCF.Description.MetadataSet.MetadataSections%2A> property. In addition, you can use the <xref:CoreWCF.Description.MetadataSet.ReadFrom%2A> method to load a <xref:CoreWCF.Description.MetadataSet> from XML data and the <xref:CoreWCF.Description.MetadataSet.WriteTo%2A> method to write the internal metadata to an XML format. This type implements the structure defined in the WS-MetadataExchange specification. Constructors MetadataSet() Declaration public MetadataSet() MetadataSet(IEnumerable<MetadataSection>) Declaration public MetadataSet(IEnumerable<MetadataSection> sections) Parameters Type Name Description IEnumerable < MetadataSection > sections Properties Attributes Declaration public Collection<XmlAttribute> Attributes { get; } Property Value Type Description Collection < XmlAttribute > MetadataSections Declaration public Collection<MetadataSection> MetadataSections { get; } Property Value Type Description Collection < MetadataSection > Methods ReadFrom(XmlReader) Declaration public static MetadataSet ReadFrom(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description MetadataSet WriteTo(XmlWriter) Declaration public void WriteTo(XmlWriter writer) Parameters Type Name Description XmlWriter writer Implements System.Xml.Serialization.IXmlSerializable"
  },
  "api-corewcf/CoreWCF.Description.OperationDescription.html": {
    "href": "api-corewcf/CoreWCF.Description.OperationDescription.html",
    "title": "Class OperationDescription",
    "keywords": "Class OperationDescription Represents the description of a contract operation that provides a description of the messages that make up the operation. Inheritance Object OperationDescription Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class OperationDescription : Object Remarks A Windows Communication Foundation (WCF) contract is a collection of operations that specifies what the endpoint communicates to the outside world. Each operation is a message exchange. For example, a request message and an associated reply message forming a request/reply message exchange. A <xref:CoreWCF.Description.ContractDescription> object is used to describe contracts and their operations. Within a <xref:CoreWCF.Description.ContractDescription>, each contract operation has a corresponding <xref:CoreWCF.Description.OperationDescription> that describes aspects of the operation, such as whether the operation is one-way or request/reply. Each <xref:CoreWCF.Description.OperationDescription> also describes the messages that make up the operation using a collection of <xref:CoreWCF.Description.MessageDescription> objects. <xref:CoreWCF.Description.ContractDescription> contains a reference to an interface that defines the contract using the programming model. This interface is marked with <xref:CoreWCF.ServiceContractAttribute>, and its methods that correspond to endpoint operations are marked with <xref:CoreWCF.OperationContractAttribute>. Many of the properties on <xref:CoreWCF.Description.OperationDescription> have corresponding properties in the WCF programming model on <xref:CoreWCF.OperationContractAttribute>, for example, <xref:CoreWCF.OperationContractAttribute.IsTerminating%2A>. Constructors OperationDescription(String, ContractDescription) Declaration public OperationDescription(string name, ContractDescription declaringContract) Parameters Type Name Description String name ContractDescription declaringContract Properties BeginMethod Declaration public MethodInfo BeginMethod { get; set; } Property Value Type Description MethodInfo DeclaringContract Declaration public ContractDescription DeclaringContract { get; set; } Property Value Type Description ContractDescription EndMethod Declaration public MethodInfo EndMethod { get; set; } Property Value Type Description MethodInfo Faults Declaration public FaultDescriptionCollection Faults { get; } Property Value Type Description FaultDescriptionCollection IsInitiating Declaration public bool IsInitiating { get; set; } Property Value Type Description Boolean IsOneWay Declaration public bool IsOneWay { get; } Property Value Type Description Boolean IsTerminating Declaration public bool IsTerminating { get; set; } Property Value Type Description Boolean KnownTypes Declaration public Collection<Type> KnownTypes { get; } Property Value Type Description Collection < Type > Messages Declaration public MessageDescriptionCollection Messages { get; } Property Value Type Description MessageDescriptionCollection Name Declaration public string Name { get; } Property Value Type Description String OperationBehaviors Declaration public KeyedCollection<Type, IOperationBehavior> OperationBehaviors { get; } Property Value Type Description KeyedCollection < Type , IOperationBehavior > SyncMethod Declaration public MethodInfo SyncMethod { get; set; } Property Value Type Description MethodInfo TaskMethod Declaration public MethodInfo TaskMethod { get; set; } Property Value Type Description MethodInfo"
  },
  "api-corewcf/CoreWCF.Description.OperationDescriptionCollection.html": {
    "href": "api-corewcf/CoreWCF.Description.OperationDescriptionCollection.html",
    "title": "Class OperationDescriptionCollection",
    "keywords": "Class OperationDescriptionCollection Represents a collection that contains operation descriptions. Inheritance Object OperationDescriptionCollection Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class OperationDescriptionCollection : Collection<OperationDescription> Remarks A <xref:CoreWCF.Description.ContractDescription> is used to describe the contract for a service, including the associated operations. The operations are accessed from the <xref:CoreWCF.Description.ContractDescription.Operations%2A> property which returns the <xref:CoreWCF.Description.OperationDescriptionCollection> for the contract. Each contract operation has a corresponding <xref:CoreWCF.Description.OperationDescription> that describes aspects of the operation, such as whether the operation is one-way or request/reply. Each <xref:CoreWCF.Description.OperationDescription> in turn describes the messages that make up the operation using a collection of <xref:CoreWCF.Description.MessageDescription>. Methods Find(String) Declaration public OperationDescription Find(string name) Parameters Type Name Description String name Returns Type Description OperationDescription FindAll(String) Declaration public Collection<OperationDescription> FindAll(string name) Parameters Type Name Description String name Returns Type Description Collection < OperationDescription > InsertItem(Int32, OperationDescription) Declaration protected override void InsertItem(int index, OperationDescription item) Parameters Type Name Description Int32 index OperationDescription item SetItem(Int32, OperationDescription) Declaration protected override void SetItem(int index, OperationDescription item) Parameters Type Name Description Int32 index OperationDescription item"
  },
  "api-corewcf/CoreWCF.Description.PolicyAssertionCollection.html": {
    "href": "api-corewcf/CoreWCF.Description.PolicyAssertionCollection.html",
    "title": "Class PolicyAssertionCollection",
    "keywords": "Class PolicyAssertionCollection Contains policy assertions. Inheritance Object PolicyAssertionCollection Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class PolicyAssertionCollection : Collection<XmlElement> Remarks Use the <xref:CoreWCF.Description.PolicyAssertionCollection> class to group together policy assertions and to enumerate or modify a group of assertions. The <xref:CoreWCF.Description.PolicyAssertionCollection> is used most frequently as a return value for the methods of the <xref:CoreWCF.Description.PolicyConversionContext> class. Constructors PolicyAssertionCollection() Declaration public PolicyAssertionCollection() PolicyAssertionCollection(IEnumerable<XmlElement>) Declaration public PolicyAssertionCollection(IEnumerable<XmlElement> elements) Parameters Type Name Description IEnumerable < XmlElement > elements Methods Contains(String, String) Declaration public bool Contains(string localName, string namespaceUri) Parameters Type Name Description String localName String namespaceUri Returns Type Description Boolean Find(String, String) Declaration public XmlElement Find(string localName, string namespaceUri) Parameters Type Name Description String localName String namespaceUri Returns Type Description XmlElement FindAll(String, String) Declaration public Collection<XmlElement> FindAll(string localName, string namespaceUri) Parameters Type Name Description String localName String namespaceUri Returns Type Description Collection < XmlElement > InsertItem(Int32, XmlElement) Declaration protected override void InsertItem(int index, XmlElement item) Parameters Type Name Description Int32 index XmlElement item Remove(String, String) Declaration public XmlElement Remove(string localName, string namespaceUri) Parameters Type Name Description String localName String namespaceUri Returns Type Description XmlElement RemoveAll(String, String) Declaration public Collection<XmlElement> RemoveAll(string localName, string namespaceUri) Parameters Type Name Description String localName String namespaceUri Returns Type Description Collection < XmlElement > SetItem(Int32, XmlElement) Declaration protected override void SetItem(int index, XmlElement item) Parameters Type Name Description Int32 index XmlElement item"
  },
  "api-corewcf/CoreWCF.Description.PolicyConversionContext.html": {
    "href": "api-corewcf/CoreWCF.Description.PolicyConversionContext.html",
    "title": "Class PolicyConversionContext",
    "keywords": "Class PolicyConversionContext Defines a class used to retrieve binding assertions in metadata and to attach implementing binding elements at the appropriate scope. Inheritance Object PolicyConversionContext Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public abstract class PolicyConversionContext : Object Remarks An implementation of the <xref:CoreWCF.Description.PolicyConversionContext> is passed to <xref:CoreWCF.Description.IPolicyExportExtension> and <xref:CoreWCF.Description.IPolicyImportExtension> objects to export and import, respectively, custom policy assertions to and from metadata. On export, a collection of policy assertions are retrieved in order to add custom assertions. On import, the assertions are retrieved in order to import specific ones and configure binding elements appropriately. The <xref:CoreWCF.Description.PolicyConversionContext.GetBindingAssertions%2A> method returns all policy assertions that are for the binding. The <xref:CoreWCF.Description.PolicyConversionContext.GetFaultBindingAssertions%2A> method returns all policy assertions for a specific fault message. The <xref:CoreWCF.Description.PolicyConversionContext.GetMessageBindingAssertions%2A> method returns all policy assertions for a specific message. The <xref:CoreWCF.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> method returns all policy assertions for a specific operation. The <xref:CoreWCF.Description.PolicyConversionContext.BindingElements%2A> property gets the binding elements for the binding being described or configured. The <xref:CoreWCF.Description.PolicyConversionContext.Contract%2A> property gets the contract description for which the binding is being described or configured. Constructors PolicyConversionContext(ServiceEndpoint) Declaration protected PolicyConversionContext(ServiceEndpoint endpoint) Parameters Type Name Description ServiceEndpoint endpoint Properties BindingElements Declaration public abstract BindingElementCollection BindingElements { get; } Property Value Type Description BindingElementCollection BindingParameters Declaration public virtual BindingParameterCollection BindingParameters { get; } Property Value Type Description BindingParameterCollection Contract Declaration public ContractDescription Contract { get; } Property Value Type Description ContractDescription Methods GetBindingAssertions() Declaration public abstract PolicyAssertionCollection GetBindingAssertions() Returns Type Description PolicyAssertionCollection GetFaultBindingAssertions(FaultDescription) Declaration public abstract PolicyAssertionCollection GetFaultBindingAssertions(FaultDescription fault) Parameters Type Name Description FaultDescription fault Returns Type Description PolicyAssertionCollection GetMessageBindingAssertions(MessageDescription) Declaration public abstract PolicyAssertionCollection GetMessageBindingAssertions(MessageDescription message) Parameters Type Name Description MessageDescription message Returns Type Description PolicyAssertionCollection GetOperationBindingAssertions(OperationDescription) Declaration public abstract PolicyAssertionCollection GetOperationBindingAssertions(OperationDescription operation) Parameters Type Name Description OperationDescription operation Returns Type Description PolicyAssertionCollection"
  },
  "api-corewcf/CoreWCF.Description.PolicyVersion.html": {
    "href": "api-corewcf/CoreWCF.Description.PolicyVersion.html",
    "title": "Class PolicyVersion",
    "keywords": "Class PolicyVersion A class used to specify the version of the WS-Policy specification being used. Inheritance Object PolicyVersion Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public sealed class PolicyVersion : Object Remarks WS-Policy 1.2 and 1.5 are currently supported. Properties Default Declaration public static PolicyVersion Default { get; } Property Value Type Description PolicyVersion Namespace Declaration public string Namespace { get; } Property Value Type Description String Policy12 Declaration public static PolicyVersion Policy12 { get; } Property Value Type Description PolicyVersion Policy15 Declaration public static PolicyVersion Policy15 { get; } Property Value Type Description PolicyVersion Methods ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api-corewcf/CoreWCF.Description.PrincipalPermissionMode.html": {
    "href": "api-corewcf/CoreWCF.Description.PrincipalPermissionMode.html",
    "title": "Class PrincipalPermissionMode",
    "keywords": "Class PrincipalPermissionMode Inheritance Object PrincipalPermissionMode Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public sealed class PrincipalPermissionMode : Enum Fields Always Declaration public const PrincipalPermissionMode Always Field Value Type Description PrincipalPermissionMode Custom Declaration public const PrincipalPermissionMode Custom Field Value Type Description PrincipalPermissionMode None Declaration public const PrincipalPermissionMode None Field Value Type Description PrincipalPermissionMode UseWindowsGroups Declaration public const PrincipalPermissionMode UseWindowsGroups Field Value Type Description PrincipalPermissionMode value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.Description.ServiceAuthorizationBehavior.html": {
    "href": "api-corewcf/CoreWCF.Description.ServiceAuthorizationBehavior.html",
    "title": "Class ServiceAuthorizationBehavior",
    "keywords": "Class ServiceAuthorizationBehavior Provides properties related to service authorization behavior. Inheritance Object ServiceAuthorizationBehavior Implements IServiceBehavior Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public sealed class ServiceAuthorizationBehavior : Object, IServiceBehavior Remarks Authorization occurs at the service level and at the operation level. This class contains properties related to authorization at the service level. Constructors ServiceAuthorizationBehavior() Declaration public ServiceAuthorizationBehavior() Properties ExternalAuthorizationPolicies Declaration public ReadOnlyCollection<IAuthorizationPolicy> ExternalAuthorizationPolicies { get; set; } Property Value Type Description ReadOnlyCollection < IAuthorizationPolicy > ImpersonateCallerForAllOperations Declaration public bool ImpersonateCallerForAllOperations { get; set; } Property Value Type Description Boolean ImpersonateOnSerializingReply Declaration public bool ImpersonateOnSerializingReply { get; set; } Property Value Type Description Boolean PrincipalPermissionMode Declaration public PrincipalPermissionMode PrincipalPermissionMode { get; set; } Property Value Type Description PrincipalPermissionMode ServiceAuthorizationManager Declaration public ServiceAuthorizationManager ServiceAuthorizationManager { get; set; } Property Value Type Description ServiceAuthorizationManager Methods ShouldSerializeExternalAuthorizationPolicies() Declaration public bool ShouldSerializeExternalAuthorizationPolicies() Returns Type Description Boolean ShouldSerializeServiceAuthorizationManager() Declaration public bool ShouldSerializeServiceAuthorizationManager() Returns Type Description Boolean Explicit Interface Implementations IServiceBehavior.AddBindingParameters(ServiceDescription, ServiceHostBase, Collection<ServiceEndpoint>, BindingParameterCollection) Declaration void IServiceBehavior.AddBindingParameters(ServiceDescription description, ServiceHostBase serviceHostBase, Collection<ServiceEndpoint> endpoints, BindingParameterCollection parameters) Parameters Type Name Description ServiceDescription description ServiceHostBase serviceHostBase Collection < ServiceEndpoint > endpoints BindingParameterCollection parameters IServiceBehavior.ApplyDispatchBehavior(ServiceDescription, ServiceHostBase) Declaration void IServiceBehavior.ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase) Parameters Type Name Description ServiceDescription description ServiceHostBase serviceHostBase IServiceBehavior.Validate(ServiceDescription, ServiceHostBase) Declaration void IServiceBehavior.Validate(ServiceDescription description, ServiceHostBase serviceHostBase) Parameters Type Name Description ServiceDescription description ServiceHostBase serviceHostBase Implements IServiceBehavior"
  },
  "api-corewcf/CoreWCF.Description.ServiceCredentials.html": {
    "href": "api-corewcf/CoreWCF.Description.ServiceCredentials.html",
    "title": "Class ServiceCredentials",
    "keywords": "Class ServiceCredentials Configures a service credential. Use this class to specify the credential for the service such as an X.509 certificate. Also, use this class to specify the authentication model for various client credentials such as user name and password validation. Inheritance Object SecurityCredentialsManager ServiceCredentials Implements IServiceBehavior Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class ServiceCredentials : SecurityCredentialsManager, IServiceBehavior Remarks This class is used as a parameter in the <xref:CoreWCF.Channels.SecurityBindingElement.BuildChannelListenerCore%2A> method, by methods of the <xref:CoreWCF.Security.ServiceCredentialsSecurityTokenManager>, and is returned by the <xref:CoreWCF.ServiceHostBase.Credentials%2A?displayProperty=nameWithType> property. Constructors ServiceCredentials() Declaration public ServiceCredentials() ServiceCredentials(ServiceCredentials) Declaration protected ServiceCredentials(ServiceCredentials other) Parameters Type Name Description ServiceCredentials other Properties ClientCertificate Declaration public X509CertificateInitiatorServiceCredential ClientCertificate { get; } Property Value Type Description X509CertificateInitiatorServiceCredential ExceptionMapper Gets or sets the ExceptionMapper to be used when throwing exceptions. Declaration public ExceptionMapper ExceptionMapper { get; set; } Property Value Type Description ExceptionMapper IdentityConfiguration Declaration public IdentityConfiguration IdentityConfiguration { get; set; } Property Value Type Description IdentityConfiguration IssuedTokenAuthentication Declaration public IssuedTokenServiceCredential IssuedTokenAuthentication { get; } Property Value Type Description IssuedTokenServiceCredential SecureConversationAuthentication Declaration public SecureConversationServiceCredential SecureConversationAuthentication { get; } Property Value Type Description SecureConversationServiceCredential ServiceCertificate Declaration public X509CertificateRecipientServiceCredential ServiceCertificate { get; } Property Value Type Description X509CertificateRecipientServiceCredential UseIdentityConfiguration Declaration public bool UseIdentityConfiguration { get; set; } Property Value Type Description Boolean UserNameAuthentication Declaration public UserNamePasswordServiceCredential UserNameAuthentication { get; } Property Value Type Description UserNamePasswordServiceCredential WindowsAuthentication Declaration public WindowsServiceCredential WindowsAuthentication { get; } Property Value Type Description WindowsServiceCredential Methods Clone() Declaration public ServiceCredentials Clone() Returns Type Description ServiceCredentials CloneCore() Declaration protected virtual ServiceCredentials CloneCore() Returns Type Description ServiceCredentials CreateSecurityTokenManager() Declaration public override SecurityTokenManager CreateSecurityTokenManager() Returns Type Description SecurityTokenManager Overrides SecurityCredentialsManager.CreateSecurityTokenManager() Explicit Interface Implementations IServiceBehavior.AddBindingParameters(ServiceDescription, ServiceHostBase, Collection<ServiceEndpoint>, BindingParameterCollection) Declaration void IServiceBehavior.AddBindingParameters(ServiceDescription description, ServiceHostBase serviceHostBase, Collection<ServiceEndpoint> endpoints, BindingParameterCollection parameters) Parameters Type Name Description ServiceDescription description ServiceHostBase serviceHostBase Collection < ServiceEndpoint > endpoints BindingParameterCollection parameters IServiceBehavior.ApplyDispatchBehavior(ServiceDescription, ServiceHostBase) Declaration void IServiceBehavior.ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase) Parameters Type Name Description ServiceDescription description ServiceHostBase serviceHostBase IServiceBehavior.Validate(ServiceDescription, ServiceHostBase) Declaration void IServiceBehavior.Validate(ServiceDescription description, ServiceHostBase serviceHostBase) Parameters Type Name Description ServiceDescription description ServiceHostBase serviceHostBase Implements IServiceBehavior"
  },
  "api-corewcf/CoreWCF.Description.ServiceDebugBehavior.html": {
    "href": "api-corewcf/CoreWCF.Description.ServiceDebugBehavior.html",
    "title": "Class ServiceDebugBehavior",
    "keywords": "Class ServiceDebugBehavior Enables debugging and help information features for a Windows Communication Foundation (WCF) service. Inheritance Object ServiceDebugBehavior Implements IServiceBehavior Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class ServiceDebugBehavior : Object, IServiceBehavior Remarks Use the <xref:CoreWCF.Description.ServiceDebugBehavior> properties from a configuration file or programmatically to enable the flow of managed exception information to the client for debugging purposes as well as the publication of HTML information files for users browsing the service in Web browsers. Set the <xref:CoreWCF.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A> property to true to instruct WCF to return managed exception information in SOAP faults to clients for debugging purposes. Caution Returning managed exception information to clients can be a security risk because exception details expose information about the internal service implementation that could be used by unauthorized clients. In addition, although the <xref:CoreWCF.Description.ServiceDebugBehavior> properties can also be set programmatically, it can be easy to forget to disable <xref:CoreWCF.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A> when deploying. Because of the security issues involved, it is strongly recommended that: You use an application configuration file to set the value of the <xref:CoreWCF.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A> property to true . You only do so only in controlled debugging scenarios. For more information about the security issues related to managed exception information, see Specifying and Handling Faults in Contracts and Services . The <xref:CoreWCF.Description.ServiceDebugBehavior.HttpHelpPageEnabled%2A> and <xref:CoreWCF.Description.ServiceDebugBehavior.HttpsHelpPageEnabled%2A> properties instruct the service to publish HTML help files when the service is viewed using an HTML browser. The <xref:CoreWCF.Description.ServiceDebugBehavior.HttpHelpPageUrl%2A> and <xref:CoreWCF.Description.ServiceDebugBehavior.HttpsHelpPageUrl%2A> properties control the location of the HTML help page that is viewed. To enable or disable one of the <xref:CoreWCF.Description.ServiceDebugBehavior> features using a configuration file: Add a behaviorConfiguration attribute to the &lt;service&gt; element for your WCF service. Endpoint behaviors are configured on &lt;endpoint> elements; service behaviors on &lt;service&gt; elements. Add to or create a &lt;serviceBehaviors&gt; section and add a &lt;behavior&gt; element to that with the name that matches the behaviorConfiguration attribute value from step 1. Endpoint behaviors are configured using an &lt;endpointBehaviors&gt; element; service behaviors are configured using a &lt;serviceBehaviors&gt; element. Add a &lt;serviceDebug&gt; element to the &lt;behavior&gt; element from step 2 and enable or disable the various properties appropriate to your scenario. For a specific example, see the Example section. Constructors ServiceDebugBehavior() Declaration public ServiceDebugBehavior() Properties HttpHelpPageEnabled Declaration public bool HttpHelpPageEnabled { get; set; } Property Value Type Description Boolean HttpHelpPageUrl Declaration public Uri HttpHelpPageUrl { get; set; } Property Value Type Description Uri HttpsHelpPageEnabled Declaration public bool HttpsHelpPageEnabled { get; set; } Property Value Type Description Boolean HttpsHelpPageUrl Declaration public Uri HttpsHelpPageUrl { get; set; } Property Value Type Description Uri IncludeExceptionDetailInFaults Declaration public bool IncludeExceptionDetailInFaults { get; set; } Property Value Type Description Boolean Explicit Interface Implementations IServiceBehavior.AddBindingParameters(ServiceDescription, ServiceHostBase, Collection<ServiceEndpoint>, BindingParameterCollection) Declaration void IServiceBehavior.AddBindingParameters(ServiceDescription description, ServiceHostBase serviceHostBase, Collection<ServiceEndpoint> endpoints, BindingParameterCollection parameters) Parameters Type Name Description ServiceDescription description ServiceHostBase serviceHostBase Collection < ServiceEndpoint > endpoints BindingParameterCollection parameters IServiceBehavior.ApplyDispatchBehavior(ServiceDescription, ServiceHostBase) Declaration void IServiceBehavior.ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase) Parameters Type Name Description ServiceDescription description ServiceHostBase serviceHostBase IServiceBehavior.Validate(ServiceDescription, ServiceHostBase) Declaration void IServiceBehavior.Validate(ServiceDescription description, ServiceHostBase serviceHostBase) Parameters Type Name Description ServiceDescription description ServiceHostBase serviceHostBase Implements IServiceBehavior"
  },
  "api-corewcf/CoreWCF.Description.ServiceDescription.html": {
    "href": "api-corewcf/CoreWCF.Description.ServiceDescription.html",
    "title": "Class ServiceDescription",
    "keywords": "Class ServiceDescription Represents a complete, in-memory description of the service, including all the endpoints for the service and specifications for their respective addresses, bindings, contracts and behaviors. Inheritance Object ServiceDescription Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class ServiceDescription : Object Remarks The information contained in the <xref:CoreWCF.Description.ServiceDescription> is used by the Windows Communication Foundation (WCF) system to building the run-time components for the service. Use this method when adding custom behaviors to extend <xref:CoreWCF.ServiceHost>. Programmatically, you must <xref:System.Collections.ObjectModel.Collection%601.Add%28%600%29> the custom service behavior to the <xref:CoreWCF.Description.ServiceDescription.Behaviors%2A> prior to when you call the <xref:CoreWCF.ICommunicationObject.Open%2A> method on the <xref:CoreWCF.ServiceHost> object. The <xref:CoreWCF.Description.ServiceDescription.GetService%28System.Object%29> and <xref:CoreWCF.Description.ServiceDescription.GetService%28System.Type%29> methods are available to reflect on behaviors using the Windows Communication Foundation (WCF) programming model when replacing <xref:CoreWCF.ServiceHostBase> with you own hosting mechanism. Export metadata about a service endpoint by passing <xref:CoreWCF.Description.ServiceEndpoint> as a parameter to <xref:CoreWCF.Description.WsdlExporter.ExportEndpoint%28CoreWCF.Description.ServiceEndpoint%29>. After calling this method, or one of the other export methods provided by <xref:CoreWCF.Description.WsdlExporter>, use the <xref:CoreWCF.Description.WsdlExporter.GeneratedWsdlDocuments%2A> property to return the collection of <xref:System.Web.Services.Description.ServiceDescription> objects. Constructors ServiceDescription() Declaration public ServiceDescription() ServiceDescription(IEnumerable<ServiceEndpoint>) Declaration public ServiceDescription(IEnumerable<ServiceEndpoint> endpoints) Parameters Type Name Description IEnumerable < ServiceEndpoint > endpoints Properties Behaviors Declaration public KeyedByTypeCollection<IServiceBehavior> Behaviors { get; } Property Value Type Description KeyedByTypeCollection < IServiceBehavior > ConfigurationName Declaration public string ConfigurationName { get; set; } Property Value Type Description String Endpoints Declaration public ServiceEndpointCollection Endpoints { get; } Property Value Type Description ServiceEndpointCollection Name Declaration public string Name { get; set; } Property Value Type Description String Namespace Declaration public string Namespace { get; set; } Property Value Type Description String ServiceType Declaration public Type ServiceType { get; set; } Property Value Type Description Type Methods GetService<TService>() Declaration public static ServiceDescription GetService<TService>() where TService : class Returns Type Description ServiceDescription Type Parameters Name Description TService GetService<TService>(TService) Declaration public static ServiceDescription GetService<TService>(TService serviceImplementation) where TService : class Parameters Type Name Description TService serviceImplementation Returns Type Description ServiceDescription Type Parameters Name Description TService"
  },
  "api-corewcf/CoreWCF.Description.ServiceEndpoint.html": {
    "href": "api-corewcf/CoreWCF.Description.ServiceEndpoint.html",
    "title": "Class ServiceEndpoint",
    "keywords": "Class ServiceEndpoint Represents the endpoint for a service that allows clients of the service to find and communicate with the service. Inheritance Object ServiceEndpoint Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class ServiceEndpoint : Object Remarks The service endpoint contains the information about the address, binding, contract, and behavior required by a client to find and interact with the service at this endpoint. Constructors ServiceEndpoint(ContractDescription) Declaration public ServiceEndpoint(ContractDescription contract) Parameters Type Name Description ContractDescription contract ServiceEndpoint(ContractDescription, Binding, EndpointAddress) Declaration public ServiceEndpoint(ContractDescription contract, Binding binding, EndpointAddress address) Parameters Type Name Description ContractDescription contract Binding binding EndpointAddress address Properties Address Declaration public EndpointAddress Address { get; set; } Property Value Type Description EndpointAddress Binding Declaration public Binding Binding { get; set; } Property Value Type Description Binding Contract Declaration public ContractDescription Contract { get; set; } Property Value Type Description ContractDescription EndpointBehaviors Declaration public KeyedCollection<Type, IEndpointBehavior> EndpointBehaviors { get; } Property Value Type Description KeyedCollection < Type , IEndpointBehavior > Id Declaration public string Id { get; } Property Value Type Description String IsSystemEndpoint Declaration public bool IsSystemEndpoint { get; set; } Property Value Type Description Boolean ListenUri Declaration public Uri ListenUri { get; set; } Property Value Type Description Uri Name Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.Description.ServiceEndpointCollection.html": {
    "href": "api-corewcf/CoreWCF.Description.ServiceEndpointCollection.html",
    "title": "Class ServiceEndpointCollection",
    "keywords": "Class ServiceEndpointCollection A collection that contains the endpoints for a service. Inheritance Object ServiceEndpointCollection Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class ServiceEndpointCollection : Collection<ServiceEndpoint> Remarks This collection of endpoints for a service is used by the metadata API to manage services with multiple endpoints. <xref:CoreWCF.Description.ServiceEndpointCollection> is returned, for example, by the <xref:CoreWCF.Description.ServiceDescription.Endpoints%2A> property and by the <xref:CoreWCF.Description.WsdlImporter.ImportAllEndpoints%2A> method when creating service endpoints from WSDL port types. The collection provides the functionality to <xref:CoreWCF.Description.ServiceEndpointCollection.Find%2A> the endpoints of a particular type, that have a specific name or address, or to <xref:CoreWCF.Description.ServiceEndpointCollection.FindAll%2A> of the endpoints for a service that meet a specified contract type or name criteria. Methods Find(Type) Declaration public ServiceEndpoint Find(Type contractType) Parameters Type Name Description Type contractType Returns Type Description ServiceEndpoint Find(Type, XmlQualifiedName) Declaration public ServiceEndpoint Find(Type contractType, XmlQualifiedName bindingName) Parameters Type Name Description Type contractType XmlQualifiedName bindingName Returns Type Description ServiceEndpoint Find(Uri) Declaration public ServiceEndpoint Find(Uri address) Parameters Type Name Description Uri address Returns Type Description ServiceEndpoint Find(XmlQualifiedName) Declaration public ServiceEndpoint Find(XmlQualifiedName contractName) Parameters Type Name Description XmlQualifiedName contractName Returns Type Description ServiceEndpoint Find(XmlQualifiedName, XmlQualifiedName) Declaration public ServiceEndpoint Find(XmlQualifiedName contractName, XmlQualifiedName bindingName) Parameters Type Name Description XmlQualifiedName contractName XmlQualifiedName bindingName Returns Type Description ServiceEndpoint FindAll(Type) Declaration public Collection<ServiceEndpoint> FindAll(Type contractType) Parameters Type Name Description Type contractType Returns Type Description Collection < ServiceEndpoint > FindAll(XmlQualifiedName) Declaration public Collection<ServiceEndpoint> FindAll(XmlQualifiedName contractName) Parameters Type Name Description XmlQualifiedName contractName Returns Type Description Collection < ServiceEndpoint > InsertItem(Int32, ServiceEndpoint) Declaration protected override void InsertItem(int index, ServiceEndpoint item) Parameters Type Name Description Int32 index ServiceEndpoint item SetItem(Int32, ServiceEndpoint) Declaration protected override void SetItem(int index, ServiceEndpoint item) Parameters Type Name Description Int32 index ServiceEndpoint item"
  },
  "api-corewcf/CoreWCF.Description.ServiceMetadataBehavior.html": {
    "href": "api-corewcf/CoreWCF.Description.ServiceMetadataBehavior.html",
    "title": "Class ServiceMetadataBehavior",
    "keywords": "Class ServiceMetadataBehavior Controls the publication of service metadata and associated information. Inheritance Object ServiceMetadataBehavior Implements IServiceBehavior Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class ServiceMetadataBehavior : Object, IServiceBehavior Remarks Add a <xref:CoreWCF.Description.ServiceMetadataBehavior> object to the <xref:CoreWCF.Description.ServiceDescription.Behaviors%2A?displayProperty=nameWithType> collection (or the &lt;serviceMetadata&gt; element in an application configuration file) to enable or disable the publication of service metadata. However, adding the behavior to a service is not sufficient to enable metadata publication: To enable WS-Transfer GET metadata retrieval, you must also add an endpoint to your service in which the contract is IMetadataExchange . For an example, see How to: Publish Metadata for a Service Using Code . The IMetadataExchange endpoint can be configured as can any other endpoint. To enable HTTP GET metadata retrieval, set the <xref:CoreWCF.Description.ServiceMetadataBehavior.HttpGetEnabled%2A> property to true . For more information about the address of HTTP GET metadata, see <xref:CoreWCF.Description.ServiceMetadataBehavior.HttpGetEnabled%2A>. The address of the IMetadataExchange endpoint follows the normal rules regarding the combination of base addresses and endpoint addresses. For more information, see Publishing Metadata . To enable the publication of metadata using a configuration file, add the &lt;serviceMetadata&gt; element to the &lt;serviceBehaviors&gt; element and associate the element with the &lt;service&gt; element for which you want to publish metadata. For an example, see How to: Publish Metadata for a Service Using a Configuration File . The class has the following members: The <xref:CoreWCF.Description.ServiceMetadataBehavior.HttpGetEnabled%2A> property specifies whether metadata is returned for HTTP/GET requests. The <xref:CoreWCF.Description.ServiceMetadataBehavior.HttpGetUrl%2A> property (in conjunction with the base addresses) specifies the HTTP/GET address. The <xref:CoreWCF.Description.ServiceMetadataBehavior.HttpsGetEnabled%2A> property specifies whether metadata is returned for an HTTPS/GET request. The <xref:CoreWCF.Description.ServiceMetadataBehavior.HttpsGetUrl%2A> property (in conjunction with the base addresses) specifies the HTTPS/GET address. The <xref:CoreWCF.Description.ServiceMetadataBehavior.MetadataExporter%2A> property returns the underlying exporter. Typically the <xref:CoreWCF.Description.ServiceMetadataBehavior> is used from an application configuration file. See the Example section for a code example. Constructors ServiceMetadataBehavior() Declaration public ServiceMetadataBehavior() Fields MexContractName Declaration public const string MexContractName = \"IMetadataExchange\" Field Value Type Description String Properties ExternalMetadataLocation Declaration public Uri ExternalMetadataLocation { get; set; } Property Value Type Description Uri HttpGetEnabled Declaration public bool HttpGetEnabled { get; set; } Property Value Type Description Boolean HttpGetUrl Declaration public Uri HttpGetUrl { get; set; } Property Value Type Description Uri HttpsGetEnabled Declaration public bool HttpsGetEnabled { get; set; } Property Value Type Description Boolean HttpsGetUrl Declaration public Uri HttpsGetUrl { get; set; } Property Value Type Description Uri MetadataExporter Declaration public MetadataExporter MetadataExporter { get; set; } Property Value Type Description MetadataExporter Explicit Interface Implementations IServiceBehavior.AddBindingParameters(ServiceDescription, ServiceHostBase, Collection<ServiceEndpoint>, BindingParameterCollection) Declaration void IServiceBehavior.AddBindingParameters(ServiceDescription description, ServiceHostBase serviceHostBase, Collection<ServiceEndpoint> endpoints, BindingParameterCollection parameters) Parameters Type Name Description ServiceDescription description ServiceHostBase serviceHostBase Collection < ServiceEndpoint > endpoints BindingParameterCollection parameters IServiceBehavior.ApplyDispatchBehavior(ServiceDescription, ServiceHostBase) Declaration void IServiceBehavior.ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase) Parameters Type Name Description ServiceDescription description ServiceHostBase serviceHostBase IServiceBehavior.Validate(ServiceDescription, ServiceHostBase) Declaration void IServiceBehavior.Validate(ServiceDescription description, ServiceHostBase serviceHostBase) Parameters Type Name Description ServiceDescription description ServiceHostBase serviceHostBase Implements IServiceBehavior"
  },
  "api-corewcf/CoreWCF.Description.ServiceMetadataContractBehavior.html": {
    "href": "api-corewcf/CoreWCF.Description.ServiceMetadataContractBehavior.html",
    "title": "Class ServiceMetadataContractBehavior",
    "keywords": "Class ServiceMetadataContractBehavior A contract behavior that enables you to specify whether or not to publish metadata for a given endpoint. Inheritance Object ServiceMetadataContractBehavior Implements IContractBehavior Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public sealed class ServiceMetadataContractBehavior : Object, IContractBehavior Remarks You can use this feature to disable the publishing of endpoint metadata in your service's WSDL. This is particularly useful for endpoints consisting only of operations which don't take SOAP messages. Constructors ServiceMetadataContractBehavior() Declaration public ServiceMetadataContractBehavior() ServiceMetadataContractBehavior(Boolean) Declaration public ServiceMetadataContractBehavior(bool metadataGenerationDisabled) Parameters Type Name Description Boolean metadataGenerationDisabled Properties MetadataGenerationDisabled Declaration public bool MetadataGenerationDisabled { get; set; } Property Value Type Description Boolean Explicit Interface Implementations IContractBehavior.AddBindingParameters(ContractDescription, ServiceEndpoint, BindingParameterCollection) Declaration void IContractBehavior.AddBindingParameters(ContractDescription description, ServiceEndpoint endpoint, BindingParameterCollection parameters) Parameters Type Name Description ContractDescription description ServiceEndpoint endpoint BindingParameterCollection parameters IContractBehavior.ApplyClientBehavior(ContractDescription, ServiceEndpoint, ClientRuntime) Declaration void IContractBehavior.ApplyClientBehavior(ContractDescription description, ServiceEndpoint endpoint, ClientRuntime proxy) Parameters Type Name Description ContractDescription description ServiceEndpoint endpoint ClientRuntime proxy IContractBehavior.ApplyDispatchBehavior(ContractDescription, ServiceEndpoint, DispatchRuntime) Declaration void IContractBehavior.ApplyDispatchBehavior(ContractDescription description, ServiceEndpoint endpoint, DispatchRuntime dispatch) Parameters Type Name Description ContractDescription description ServiceEndpoint endpoint DispatchRuntime dispatch IContractBehavior.Validate(ContractDescription, ServiceEndpoint) Declaration void IContractBehavior.Validate(ContractDescription description, ServiceEndpoint endpoint) Parameters Type Name Description ContractDescription description ServiceEndpoint endpoint Implements IContractBehavior"
  },
  "api-corewcf/CoreWCF.Description.ServiceMetadataExtension.html": {
    "href": "api-corewcf/CoreWCF.Description.ServiceMetadataExtension.html",
    "title": "Class ServiceMetadataExtension",
    "keywords": "Class ServiceMetadataExtension Provides the implementation for the metadata publishing protocols. Inheritance Object ServiceMetadataExtension Implements IExtension < ServiceHostBase > Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class ServiceMetadataExtension : Object, IExtension<ServiceHostBase> Remarks The <xref:CoreWCF.Description.ServiceMetadataExtension> is configured and used by configuring a service with the <xref:CoreWCF.Description.ServiceMetadataBehavior?displayProperty=nameWithType>. You can also use the <xref:CoreWCF.Description.ServiceMetadataExtension> class to get the service's metadata at runtime by accessing the <xref:CoreWCF.Description.ServiceMetadataExtension.Metadata%2A> property. Constructors ServiceMetadataExtension() Declaration public ServiceMetadataExtension() Properties DynamicMetadataEndpointAddressProvider Declaration public IMetadataEndpointAddressProvider DynamicMetadataEndpointAddressProvider { get; } Property Value Type Description IMetadataEndpointAddressProvider Metadata Declaration public MetadataSet Metadata { get; } Property Value Type Description MetadataSet SingleWsdl Declaration public ServiceDescription SingleWsdl { get; } Property Value Type Description ServiceDescription Explicit Interface Implementations IExtension<ServiceHostBase>.Attach(ServiceHostBase) Declaration void IExtension<ServiceHostBase>.Attach(ServiceHostBase owner) Parameters Type Name Description ServiceHostBase owner IExtension<ServiceHostBase>.Detach(ServiceHostBase) Declaration void IExtension<ServiceHostBase>.Detach(ServiceHostBase owner) Parameters Type Name Description ServiceHostBase owner Implements IExtension<T>"
  },
  "api-corewcf/CoreWCF.Description.TypedMessageConverter.html": {
    "href": "api-corewcf/CoreWCF.Description.TypedMessageConverter.html",
    "title": "Class TypedMessageConverter",
    "keywords": "Class TypedMessageConverter Converts a typed message to an untyped message, or an untyped message to a typed message. Inheritance Object TypedMessageConverter Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public abstract class TypedMessageConverter : Object Remarks This class provides functionalities to convert a typed message to an untyped message, or an untyped message to a typed message. A typed message is an instance of a type that has the <xref:CoreWCF.MessageContractAttribute> attribute annotated. An untyped message is one that is an instance of the <xref:CoreWCF.Channels.Message> class. You can annotate a type with the <xref:CoreWCF.MessageContractAttribute> to create a custom message type, and then use the methods provided by this class to convert it to an untyped <xref:CoreWCF.Channels.Message> instance. Constructors TypedMessageConverter() Declaration protected TypedMessageConverter() Methods Create(Type, String) Declaration public static TypedMessageConverter Create(Type messageContract, string action) Parameters Type Name Description Type messageContract String action Returns Type Description TypedMessageConverter Create(Type, String, DataContractFormatAttribute) Declaration public static TypedMessageConverter Create(Type messageContract, string action, DataContractFormatAttribute formatterAttribute) Parameters Type Name Description Type messageContract String action DataContractFormatAttribute formatterAttribute Returns Type Description TypedMessageConverter Create(Type, String, XmlSerializerFormatAttribute) Declaration public static TypedMessageConverter Create(Type messageContract, string action, XmlSerializerFormatAttribute formatterAttribute) Parameters Type Name Description Type messageContract String action XmlSerializerFormatAttribute formatterAttribute Returns Type Description TypedMessageConverter Create(Type, String, String) Declaration public static TypedMessageConverter Create(Type messageContract, string action, string defaultNamespace) Parameters Type Name Description Type messageContract String action String defaultNamespace Returns Type Description TypedMessageConverter Create(Type, String, String, DataContractFormatAttribute) Declaration public static TypedMessageConverter Create(Type messageContract, string action, string defaultNamespace, DataContractFormatAttribute formatterAttribute) Parameters Type Name Description Type messageContract String action String defaultNamespace DataContractFormatAttribute formatterAttribute Returns Type Description TypedMessageConverter Create(Type, String, String, XmlSerializerFormatAttribute) Declaration public static TypedMessageConverter Create(Type messageContract, string action, string defaultNamespace, XmlSerializerFormatAttribute formatterAttribute) Parameters Type Name Description Type messageContract String action String defaultNamespace XmlSerializerFormatAttribute formatterAttribute Returns Type Description TypedMessageConverter FromMessage(Message) Declaration public abstract object FromMessage(Message message) Parameters Type Name Description Message message Returns Type Description Object ToMessage(Object) Declaration public abstract Message ToMessage(object typedMessage) Parameters Type Name Description Object typedMessage Returns Type Description Message ToMessage(Object, MessageVersion) Declaration public abstract Message ToMessage(object typedMessage, MessageVersion version) Parameters Type Name Description Object typedMessage MessageVersion version Returns Type Description Message"
  },
  "api-corewcf/CoreWCF.Description.UseRequestHeadersForMetadataAddressBehavior.html": {
    "href": "api-corewcf/CoreWCF.Description.UseRequestHeadersForMetadataAddressBehavior.html",
    "title": "Class UseRequestHeadersForMetadataAddressBehavior",
    "keywords": "Class UseRequestHeadersForMetadataAddressBehavior Enables the retrieval of metadata address information from request message headers for a Windows Communication Foundation (WCF) service. Inheritance Object UseRequestHeadersForMetadataAddressBehavior Implements IServiceBehavior Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class UseRequestHeadersForMetadataAddressBehavior : Object, IServiceBehavior Remarks To be added. Constructors UseRequestHeadersForMetadataAddressBehavior() Declaration public UseRequestHeadersForMetadataAddressBehavior() Properties DefaultPortsByScheme Declaration public IDictionary<string, int> DefaultPortsByScheme { get; } Property Value Type Description IDictionary < String , Int32 > Explicit Interface Implementations IServiceBehavior.AddBindingParameters(ServiceDescription, ServiceHostBase, Collection<ServiceEndpoint>, BindingParameterCollection) Declaration void IServiceBehavior.AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters) Parameters Type Name Description ServiceDescription serviceDescription ServiceHostBase serviceHostBase Collection < ServiceEndpoint > endpoints BindingParameterCollection bindingParameters IServiceBehavior.ApplyDispatchBehavior(ServiceDescription, ServiceHostBase) Declaration void IServiceBehavior.ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase) Parameters Type Name Description ServiceDescription serviceDescription ServiceHostBase serviceHostBase IServiceBehavior.Validate(ServiceDescription, ServiceHostBase) Declaration void IServiceBehavior.Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase) Parameters Type Name Description ServiceDescription serviceDescription ServiceHostBase serviceHostBase Implements IServiceBehavior"
  },
  "api-corewcf/CoreWCF.Description.WebHttpBehavior.html": {
    "href": "api-corewcf/CoreWCF.Description.WebHttpBehavior.html",
    "title": "Class WebHttpBehavior",
    "keywords": "Class WebHttpBehavior Enables the Web programming model for a Windows Communication Foundation (WCF) service. Inheritance Object WebHttpBehavior Implements IEndpointBehavior Namespace : CoreWCF.Description Assembly : CoreWCF.WebHttp.dll Syntax public class WebHttpBehavior : Object, IEndpointBehavior Remarks The <xref:CoreWCF.Description.WebHttpBehavior> behavior, when used in conjunction with the <xref:CoreWCF.WebHttpBinding> binding, enables WCF to expose and access Web style services. <xref:CoreWCF.Web.WebServiceHost> automatically adds this behavior to endpoints that use the <xref:CoreWCF.WebHttpBinding>. Constructors WebHttpBehavior(IServiceProvider) Declaration public WebHttpBehavior(IServiceProvider serviceProvider) Parameters Type Name Description IServiceProvider serviceProvider Properties AutomaticFormatSelectionEnabled Declaration public virtual bool AutomaticFormatSelectionEnabled { get; set; } Property Value Type Description Boolean DefaultBodyStyle Declaration public virtual WebMessageBodyStyle DefaultBodyStyle { get; set; } Property Value Type Description WebMessageBodyStyle DefaultOutgoingRequestFormat Declaration public virtual WebMessageFormat DefaultOutgoingRequestFormat { get; set; } Property Value Type Description WebMessageFormat DefaultOutgoingResponseFormat Declaration public virtual WebMessageFormat DefaultOutgoingResponseFormat { get; set; } Property Value Type Description WebMessageFormat FaultExceptionEnabled Declaration public virtual bool FaultExceptionEnabled { get; set; } Property Value Type Description Boolean HelpEnabled Declaration public virtual bool HelpEnabled { get; set; } Property Value Type Description Boolean Methods AddBindingParameters(ServiceEndpoint, BindingParameterCollection) Declaration public virtual void AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters) Parameters Type Name Description ServiceEndpoint endpoint BindingParameterCollection bindingParameters AddServerErrorHandlers(ServiceEndpoint, EndpointDispatcher) Declaration protected virtual void AddServerErrorHandlers(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher) Parameters Type Name Description ServiceEndpoint endpoint EndpointDispatcher endpointDispatcher ApplyClientBehavior(ServiceEndpoint, ClientRuntime) Declaration public virtual void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime) Parameters Type Name Description ServiceEndpoint endpoint ClientRuntime clientRuntime ApplyDispatchBehavior(ServiceEndpoint, EndpointDispatcher) Declaration public virtual void ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher) Parameters Type Name Description ServiceEndpoint endpoint EndpointDispatcher endpointDispatcher GetOperationSelector(ServiceEndpoint) Declaration protected virtual WebHttpDispatchOperationSelector GetOperationSelector(ServiceEndpoint endpoint) Parameters Type Name Description ServiceEndpoint endpoint Returns Type Description WebHttpDispatchOperationSelector GetQueryStringConverter(OperationDescription) Declaration protected virtual QueryStringConverter GetQueryStringConverter(OperationDescription operationDescription) Parameters Type Name Description OperationDescription operationDescription Returns Type Description QueryStringConverter GetReplyDispatchFormatter(OperationDescription, ServiceEndpoint) Declaration protected virtual IDispatchMessageFormatter GetReplyDispatchFormatter(OperationDescription operationDescription, ServiceEndpoint endpoint) Parameters Type Name Description OperationDescription operationDescription ServiceEndpoint endpoint Returns Type Description IDispatchMessageFormatter GetRequestDispatchFormatter(OperationDescription, ServiceEndpoint) Declaration protected virtual IDispatchMessageFormatter GetRequestDispatchFormatter(OperationDescription operationDescription, ServiceEndpoint endpoint) Parameters Type Name Description OperationDescription operationDescription ServiceEndpoint endpoint Returns Type Description IDispatchMessageFormatter Validate(ServiceEndpoint) Declaration public virtual void Validate(ServiceEndpoint endpoint) Parameters Type Name Description ServiceEndpoint endpoint ValidateBinding(ServiceEndpoint) Declaration protected virtual void ValidateBinding(ServiceEndpoint endpoint) Parameters Type Name Description ServiceEndpoint endpoint Implements IEndpointBehavior"
  },
  "api-corewcf/CoreWCF.Description.WsdlContractConversionContext.html": {
    "href": "api-corewcf/CoreWCF.Description.WsdlContractConversionContext.html",
    "title": "Class WsdlContractConversionContext",
    "keywords": "Class WsdlContractConversionContext Passed to custom WSDL exporters and importers to enable customization of the metadata export and import processes for a contract. Inheritance Object WsdlContractConversionContext Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class WsdlContractConversionContext : Object Remarks Use the <xref:CoreWCF.Description.WsdlContractConversionContext> object to examine and modify items that are to be converted to or from WSDL. When exporting metadata a <xref:CoreWCF.Description.WsdlContractConversionContext> object is passed to the <xref:CoreWCF.Description.IWsdlExportExtension.ExportContract%2A> and <xref:CoreWCF.Description.IWsdlExportExtension.ExportEndpoint%2A> methods. Use the various methods and properties to obtain metadata objects that you can use to examine and modify to alter the published WSDL. When importing metadata a <xref:CoreWCF.Description.WsdlContractConversionContext> object is passed to the <xref:CoreWCF.Description.IWsdlImportExtension.ImportContract%2A> and <xref:CoreWCF.Description.IWsdlImportExtension.ImportEndpoint%2A> methods. Use the various methods and properties to obtain metadata objects that you can use to examine and modify the imported metadata. Properties Contract Declaration public ContractDescription Contract { get; } Property Value Type Description ContractDescription WsdlPortType Declaration public PortType WsdlPortType { get; } Property Value Type Description PortType Methods GetFaultDescription(OperationFault) Declaration public FaultDescription GetFaultDescription(OperationFault operationFault) Parameters Type Name Description OperationFault operationFault Returns Type Description FaultDescription GetMessageDescription(OperationMessage) Declaration public MessageDescription GetMessageDescription(OperationMessage operationMessage) Parameters Type Name Description OperationMessage operationMessage Returns Type Description MessageDescription GetOperation(OperationDescription) Declaration public Operation GetOperation(OperationDescription operation) Parameters Type Name Description OperationDescription operation Returns Type Description Operation GetOperationDescription(Operation) Declaration public OperationDescription GetOperationDescription(Operation operation) Parameters Type Name Description Operation operation Returns Type Description OperationDescription GetOperationFault(FaultDescription) Declaration public OperationFault GetOperationFault(FaultDescription fault) Parameters Type Name Description FaultDescription fault Returns Type Description OperationFault GetOperationMessage(MessageDescription) Declaration public OperationMessage GetOperationMessage(MessageDescription message) Parameters Type Name Description MessageDescription message Returns Type Description OperationMessage"
  },
  "api-corewcf/CoreWCF.Description.WsdlEndpointConversionContext.html": {
    "href": "api-corewcf/CoreWCF.Description.WsdlEndpointConversionContext.html",
    "title": "Class WsdlEndpointConversionContext",
    "keywords": "Class WsdlEndpointConversionContext Passed to custom WSDL exporters and importers to enable customization of the metadata export and import processes for a WSDL endpoint. Inheritance Object WsdlEndpointConversionContext Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class WsdlEndpointConversionContext : Object Remarks The <xref:CoreWCF.Description.WsdlEndpointConversionContext> class represents the context in which the custom WSDL for an endpoint is either exported using <xref:CoreWCF.Description.IWsdlExportExtension?displayProperty=nameWithType> or imported using <xref:CoreWCF.Description.IWsdlImportExtension?displayProperty=nameWithType>. The following properties enable you to retrieve the WSDL document object model for the current WSDL: The <xref:CoreWCF.Description.WsdlEndpointConversionContext.ContractConversionContext%2A> property gets the <xref:CoreWCF.Description.WsdlContractConversionContext?displayProperty=nameWithType> for the endpoint contract. The <xref:CoreWCF.Description.WsdlEndpointConversionContext.Endpoint%2A> property gets the <xref:CoreWCF.Description.ServiceEndpoint?displayProperty=nameWithType> for the current endpoint. The <xref:CoreWCF.Description.WsdlEndpointConversionContext.WsdlBinding%2A> property gets the binding for the current endpoint. The <xref:CoreWCF.Description.WsdlEndpointConversionContext.WsdlPort%2A> property gets the port for the current endpoint. The following methods enable you to add or remove custom WSDL elements to the appropriate scopes in the exported or imported WSDL: The <xref:CoreWCF.Description.WsdlEndpointConversionContext.GetFaultBinding%2A> method returns the fault binding for the specified fault. The <xref:CoreWCF.Description.WsdlEndpointConversionContext.GetFaultDescription%2A> method returns the fault for the specified fault binding. The <xref:CoreWCF.Description.WsdlEndpointConversionContext.GetMessageBinding%2A> method returns the message binding for the specified message. The <xref:CoreWCF.Description.WsdlEndpointConversionContext.GetMessageDescription%2A> method returns the message for the specified message binding. The <xref:CoreWCF.Description.WsdlEndpointConversionContext.GetOperationBinding%2A> method returns the operation binding for the specified operation. The <xref:CoreWCF.Description.WsdlEndpointConversionContext.GetOperationDescription%2A> method returns the operation for the specified operation binding. Properties ContractConversionContext Declaration public WsdlContractConversionContext ContractConversionContext { get; } Property Value Type Description WsdlContractConversionContext Endpoint Declaration public ServiceEndpoint Endpoint { get; } Property Value Type Description ServiceEndpoint WsdlBinding Declaration public Binding WsdlBinding { get; } Property Value Type Description Binding WsdlPort Declaration public Port WsdlPort { get; } Property Value Type Description Port Methods GetFaultBinding(FaultDescription) Declaration public FaultBinding GetFaultBinding(FaultDescription fault) Parameters Type Name Description FaultDescription fault Returns Type Description FaultBinding GetFaultDescription(FaultBinding) Declaration public FaultDescription GetFaultDescription(FaultBinding faultBinding) Parameters Type Name Description FaultBinding faultBinding Returns Type Description FaultDescription GetMessageBinding(MessageDescription) Declaration public MessageBinding GetMessageBinding(MessageDescription message) Parameters Type Name Description MessageDescription message Returns Type Description MessageBinding GetMessageDescription(MessageBinding) Declaration public MessageDescription GetMessageDescription(MessageBinding messageBinding) Parameters Type Name Description MessageBinding messageBinding Returns Type Description MessageDescription GetOperationBinding(OperationDescription) Declaration public OperationBinding GetOperationBinding(OperationDescription operation) Parameters Type Name Description OperationDescription operation Returns Type Description OperationBinding GetOperationDescription(OperationBinding) Declaration public OperationDescription GetOperationDescription(OperationBinding operationBinding) Parameters Type Name Description OperationBinding operationBinding Returns Type Description OperationDescription"
  },
  "api-corewcf/CoreWCF.Description.WsdlExporter.html": {
    "href": "api-corewcf/CoreWCF.Description.WsdlExporter.html",
    "title": "Class WsdlExporter",
    "keywords": "Class WsdlExporter Converts service, contract, and endpoint information into metadata documents. Inheritance Object MetadataExporter WsdlExporter Inherited Members MetadataExporter.ExportPolicy(ServiceEndpoint) MetadataExporter.PolicyVersion MetadataExporter.Errors MetadataExporter.State Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class WsdlExporter : MetadataExporter Remarks Use the <xref:CoreWCF.Description.WsdlExporter> class to transform <xref:CoreWCF.Description.ContractDescription> or <xref:CoreWCF.Description.ServiceEndpoint> objects into metadata represented by <xref:CoreWCF.Description.MetadataSection> objects. The <xref:CoreWCF.Description.WsdlExporter> is used in a three-step process. Call the <xref:CoreWCF.Description.WsdlExporter.ExportContract%2A>, <xref:CoreWCF.Description.WsdlExporter.ExportEndpoint%2A>, or <xref:CoreWCF.Description.WsdlExporter.ExportEndpoints%2A> method, passing the appropriate parameters. Determine whether there are any export errors by checking the base <xref:CoreWCF.Description.MetadataExporter.Errors%2A> property. If there are no errors, use the <xref:CoreWCF.Description.WsdlExporter.GetGeneratedMetadata%2A> to get a collection of <xref:CoreWCF.Description.MetadataSection> objects or get more specific versions of the metadata using the <xref:CoreWCF.Description.WsdlExporter.GeneratedWsdlDocuments%2A> or <xref:CoreWCF.Description.WsdlExporter.GeneratedXmlSchemas%2A> properties. You can support exporting custom WSDL extensions by implementing the <xref:CoreWCF.Description.IWsdlExportExtension> interface and custom policy assertions by implementing the <xref:CoreWCF.Description.IPolicyExportExtension> interface. For details, see the documentation for those interfaces. Note The WsdlExporter can only be used to export metadata from ContractDescription instances that contain Common Language Runtime (CLR) type information, such as a ContractDescription instance created using the ContractDescription.GetContract method or created as part of the ServiceDescription for a ServiceHost instance. You cannot use the WsdlExporter to export metadata from ContractDescription instances imported from service metadata or constructed without type information. Constructors WsdlExporter() Declaration public WsdlExporter() Properties GeneratedWsdlDocuments Declaration public ServiceDescriptionCollection GeneratedWsdlDocuments { get; } Property Value Type Description ServiceDescriptionCollection GeneratedXmlSchemas Declaration public XmlSchemaSet GeneratedXmlSchemas { get; } Property Value Type Description XmlSchemaSet Methods AddAddressToWsdlPort(Port, EndpointAddress, AddressingVersion) Declaration public static void AddAddressToWsdlPort(Port wsdlPort, EndpointAddress address, AddressingVersion addressingVersion) Parameters Type Name Description Port wsdlPort EndpointAddress address AddressingVersion addressingVersion AddWSAddressingAssertion(MetadataExporter, PolicyConversionContext, AddressingVersion) Declaration public static void AddWSAddressingAssertion(MetadataExporter exporter, PolicyConversionContext context, AddressingVersion addressing) Parameters Type Name Description MetadataExporter exporter PolicyConversionContext context AddressingVersion addressing ExportContract(ContractDescription) Declaration public override void ExportContract(ContractDescription contract) Parameters Type Name Description ContractDescription contract Overrides MetadataExporter.ExportContract(ContractDescription) ExportEndpoint(ServiceEndpoint) Declaration public override void ExportEndpoint(ServiceEndpoint endpoint) Parameters Type Name Description ServiceEndpoint endpoint Overrides MetadataExporter.ExportEndpoint(ServiceEndpoint) ExportEndpoints(IEnumerable<ServiceEndpoint>, XmlQualifiedName) Declaration public void ExportEndpoints(IEnumerable<ServiceEndpoint> endpoints, XmlQualifiedName wsdlServiceQName) Parameters Type Name Description IEnumerable < ServiceEndpoint > endpoints XmlQualifiedName wsdlServiceQName GetGeneratedMetadata() Declaration public override MetadataSet GetGeneratedMetadata() Returns Type Description MetadataSet Overrides MetadataExporter.GetGeneratedMetadata()"
  },
  "api-corewcf/CoreWCF.Description.XmlSerializerOperationBehavior.html": {
    "href": "api-corewcf/CoreWCF.Description.XmlSerializerOperationBehavior.html",
    "title": "Class XmlSerializerOperationBehavior",
    "keywords": "Class XmlSerializerOperationBehavior Controls run-time behavior of the associated with an operation. Inheritance Object XmlSerializerOperationBehavior Implements IOperationBehavior IWsdlExportExtension Namespace : CoreWCF.Description Assembly : CoreWCF.Primitives.dll Syntax public class XmlSerializerOperationBehavior : Object, IOperationBehavior, IWsdlExportExtension Remarks The <xref:CoreWCF.Description.XmlSerializerOperationBehavior> enables control of <xref:System.Xml.Serialization.XmlSerializer> options, such as the <xref:CoreWCF.XmlSerializerFormatAttribute.Style%2A> property of the <xref:CoreWCF.XmlSerializerFormatAttribute>. Constructors XmlSerializerOperationBehavior(OperationDescription) Declaration public XmlSerializerOperationBehavior(OperationDescription operation) Parameters Type Name Description OperationDescription operation XmlSerializerOperationBehavior(OperationDescription, XmlSerializerFormatAttribute) Declaration public XmlSerializerOperationBehavior(OperationDescription operation, XmlSerializerFormatAttribute attribute) Parameters Type Name Description OperationDescription operation XmlSerializerFormatAttribute attribute XmlSerializerOperationBehavior(OperationDescription, XmlSerializerFormatAttribute, String) Declaration public XmlSerializerOperationBehavior(OperationDescription operation, XmlSerializerFormatAttribute attribute, string contractType) Parameters Type Name Description OperationDescription operation XmlSerializerFormatAttribute attribute String contractType Properties XmlSerializerFormatAttribute Declaration public XmlSerializerFormatAttribute XmlSerializerFormatAttribute { get; } Property Value Type Description XmlSerializerFormatAttribute Methods GetXmlMappings() Declaration public Collection<XmlMapping> GetXmlMappings() Returns Type Description Collection < XmlMapping > Explicit Interface Implementations IOperationBehavior.AddBindingParameters(OperationDescription, BindingParameterCollection) Declaration void IOperationBehavior.AddBindingParameters(OperationDescription description, BindingParameterCollection parameters) Parameters Type Name Description OperationDescription description BindingParameterCollection parameters IOperationBehavior.ApplyClientBehavior(OperationDescription, ClientOperation) Declaration void IOperationBehavior.ApplyClientBehavior(OperationDescription description, ClientOperation proxy) Parameters Type Name Description OperationDescription description ClientOperation proxy IOperationBehavior.ApplyDispatchBehavior(OperationDescription, DispatchOperation) Declaration void IOperationBehavior.ApplyDispatchBehavior(OperationDescription description, DispatchOperation dispatch) Parameters Type Name Description OperationDescription description DispatchOperation dispatch IOperationBehavior.Validate(OperationDescription) Declaration void IOperationBehavior.Validate(OperationDescription description) Parameters Type Name Description OperationDescription description IWsdlExportExtension.ExportContract(WsdlExporter, WsdlContractConversionContext) Declaration void IWsdlExportExtension.ExportContract(WsdlExporter exporter, WsdlContractConversionContext contractContext) Parameters Type Name Description WsdlExporter exporter WsdlContractConversionContext contractContext IWsdlExportExtension.ExportEndpoint(WsdlExporter, WsdlEndpointConversionContext) Declaration void IWsdlExportExtension.ExportEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext endpointContext) Parameters Type Name Description WsdlExporter exporter WsdlEndpointConversionContext endpointContext Implements IOperationBehavior IWsdlExportExtension"
  },
  "api-corewcf/CoreWCF.Dispatcher.ChannelDispatcher.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.ChannelDispatcher.html",
    "title": "Class ChannelDispatcher",
    "keywords": "Class ChannelDispatcher A component that accepts channels and associates them with a service. Inheritance Object CommunicationObject ChannelDispatcherBase ChannelDispatcher Implements ICommunicationObject Inherited Members ChannelDispatcherBase.CloseInputAsync() CommunicationObject.Abort() CommunicationObject.CloseAsync() CommunicationObject.CloseAsync(CancellationToken) CommunicationObject.OpenAsync() CommunicationObject.OpenAsync(CancellationToken) CommunicationObject.Fault(Exception) CommunicationObject.Fault() CommunicationObject.GetCommunicationObjectType() CommunicationObject.OnClosed() CommunicationObject.OnClosing() CommunicationObject.OnFaulted() CommunicationObject.OnOpened() CommunicationObject.OnOpening() CommunicationObject.ThrowIfDisposed() CommunicationObject.ThrowIfDisposedOrImmutable() CommunicationObject.ThrowIfDisposedOrNotOpen() CommunicationObject.ThrowIfNotOpened() CommunicationObject.ThrowPending() CommunicationObject.IsDisposed CommunicationObject.State CommunicationObject.ThisLock CommunicationObject.Closed CommunicationObject.Closing CommunicationObject.Faulted CommunicationObject.Opened CommunicationObject.Opening Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public class ChannelDispatcher : ChannelDispatcherBase, ICommunicationObject Remarks A <xref:CoreWCF.Dispatcher.ChannelDispatcher> object associates an <xref:CoreWCF.Channels.IChannelListener> at a particular URI (called a listen URI) with an instance of a service. Each <xref:CoreWCF.ServiceHost> object can have many <xref:CoreWCF.Dispatcher.ChannelDispatcher> objects, each associated with a different listener and listen URI for that service. When a message arrives, the <xref:CoreWCF.Dispatcher.ChannelDispatcher> queries each of the associated <xref:CoreWCF.Dispatcher.EndpointDispatcher> objects whether the endpoint can accept the message, and passes the message to the one that can. The <xref:CoreWCF.Dispatcher.EndpointDispatcher> object is responsible for processing messages from a <xref:CoreWCF.Dispatcher.ChannelDispatcher> when the destination address of a message matches the <xref:CoreWCF.Dispatcher.EndpointDispatcher.AddressFilter%2A> property and the message action matches the <xref:CoreWCF.Dispatcher.EndpointDispatcher.ContractFilter%2A> property. All properties that control the lifetime and behavior of a channel session are available for inspection or modification on the <xref:CoreWCF.Dispatcher.ChannelDispatcher> object. In addition to the <xref:CoreWCF.Dispatcher.EndpointDispatcher>, these include custom <xref:CoreWCF.Dispatcher.IChannelInitializer> objects, the <xref:CoreWCF.Channels.IChannelListener>, the <xref:CoreWCF.ServiceHost>, the associated and <xref:CoreWCF.InstanceContext>. Properties BindingName Declaration public string BindingName { get; } Property Value Type Description String ChannelInitializers Declaration public SynchronizedCollection<IChannelInitializer> ChannelInitializers { get; } Property Value Type Description SynchronizedCollection < IChannelInitializer > DefaultCloseTimeout Declaration protected override TimeSpan DefaultCloseTimeout { get; } Property Value Type Description TimeSpan Overrides CommunicationObject.DefaultCloseTimeout DefaultOpenTimeout Declaration protected override TimeSpan DefaultOpenTimeout { get; } Property Value Type Description TimeSpan Overrides CommunicationObject.DefaultOpenTimeout Endpoints Declaration public SynchronizedCollection<EndpointDispatcher> Endpoints { get; } Property Value Type Description SynchronizedCollection < EndpointDispatcher > ErrorHandlers Declaration public Collection<IErrorHandler> ErrorHandlers { get; } Property Value Type Description Collection < IErrorHandler > Host Declaration public override ServiceHostBase Host { get; } Property Value Type Description ServiceHostBase Overrides ChannelDispatcherBase.Host IncludeExceptionDetailInFaults Declaration public bool IncludeExceptionDetailInFaults { get; set; } Property Value Type Description Boolean ManualAddressing Declaration public bool ManualAddressing { get; set; } Property Value Type Description Boolean MaxPendingReceives Declaration public int MaxPendingReceives { get; set; } Property Value Type Description Int32 MessageVersion Declaration public MessageVersion MessageVersion { get; set; } Property Value Type Description MessageVersion ReceiveSynchronously Declaration public bool ReceiveSynchronously { get; set; } Property Value Type Description Boolean SendAsynchronously Declaration public bool SendAsynchronously { get; set; } Property Value Type Description Boolean Methods Attach(ServiceHostBase) Declaration protected override void Attach(ServiceHostBase host) Parameters Type Name Description ServiceHostBase host Overrides ChannelDispatcherBase.Attach(ServiceHostBase) Detach(ServiceHostBase) Declaration protected override void Detach(ServiceHostBase host) Parameters Type Name Description ServiceHostBase host Overrides ChannelDispatcherBase.Detach(ServiceHostBase) OnAbort() Declaration protected override void OnAbort() Overrides CommunicationObject.OnAbort() OnCloseAsync(CancellationToken) Declaration protected override Task OnCloseAsync(CancellationToken token) Parameters Type Name Description CancellationToken token Returns Type Description Task Overrides CommunicationObject.OnCloseAsync(CancellationToken) OnOpenAsync(CancellationToken) Declaration protected override Task OnOpenAsync(CancellationToken token) Parameters Type Name Description CancellationToken token Returns Type Description Task Overrides CommunicationObject.OnOpenAsync(CancellationToken) Implements ICommunicationObject"
  },
  "api-corewcf/CoreWCF.Dispatcher.ChannelDispatcherBase.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.ChannelDispatcherBase.html",
    "title": "Class ChannelDispatcherBase",
    "keywords": "Class ChannelDispatcherBase Abstract base class for the channel dispatcher that accepts channels and associates them with a service. Inheritance Object CommunicationObject ChannelDispatcherBase ChannelDispatcher Implements ICommunicationObject Inherited Members CommunicationObject.Abort() CommunicationObject.CloseAsync() CommunicationObject.CloseAsync(CancellationToken) CommunicationObject.OpenAsync() CommunicationObject.OpenAsync(CancellationToken) CommunicationObject.Fault(Exception) CommunicationObject.Fault() CommunicationObject.GetCommunicationObjectType() CommunicationObject.OnAbort() CommunicationObject.OnCloseAsync(CancellationToken) CommunicationObject.OnOpenAsync(CancellationToken) CommunicationObject.OnClosed() CommunicationObject.OnClosing() CommunicationObject.OnFaulted() CommunicationObject.OnOpened() CommunicationObject.OnOpening() CommunicationObject.ThrowIfDisposed() CommunicationObject.ThrowIfDisposedOrImmutable() CommunicationObject.ThrowIfDisposedOrNotOpen() CommunicationObject.ThrowIfNotOpened() CommunicationObject.ThrowPending() CommunicationObject.IsDisposed CommunicationObject.State CommunicationObject.ThisLock CommunicationObject.DefaultCloseTimeout CommunicationObject.DefaultOpenTimeout CommunicationObject.Closed CommunicationObject.Closing CommunicationObject.Faulted CommunicationObject.Opened CommunicationObject.Opening Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public abstract class ChannelDispatcherBase : CommunicationObject, ICommunicationObject Remarks This is used by developers who want to keep the Windows Communication Foundation (WCF) programming model but replace the system-provided runtime. Such applications will pull messages out of channels and handle them directly with user-defined dispatchers. To use <xref:CoreWCF.Dispatcher.ChannelDispatcherBase> , create a class derived from it, extend <xref:CoreWCF.ServiceHost> and override <xref:CoreWCF.ServiceHostBase.InitializeRuntime%2A>, adding instances of your class derived from <xref:CoreWCF.Dispatcher.ChannelDispatcherBase> to <xref:CoreWCF.ServiceHostBase.ChannelDispatchers%2A>. The <xref:CoreWCF.Channels.IChannelListener> and the <xref:CoreWCF.ServiceHost>, associated with the <xref:CoreWCF.Dispatcher.ChannelDispatcherBase> object are available for inspection or modification through the <xref:CoreWCF.Dispatcher.ChannelDispatcherBase.Listener%2A> and <xref:CoreWCF.Dispatcher.ChannelDispatcherBase.Host%2A> respectively. <xref:CoreWCF.ServiceHost> calls the <xref:CoreWCF.Dispatcher.ChannelDispatcherBase.Attach%28CoreWCF.ServiceHostBase%29> or <xref:CoreWCF.Dispatcher.ChannelDispatcherBase.Detach%28CoreWCF.ServiceHostBase%29> methods when adding or removing a <xref:CoreWCF.Dispatcher.ChannelDispatcherBase> item from its <xref:CoreWCF.ServiceHostBase.ChannelDispatchers%2A> collection. <xref:CoreWCF.ServiceHost> calls the <xref:CoreWCF.Dispatcher.ChannelDispatcherBase.CloseInput%2A> during shutdown before closing InstanceContexts. Windows Communication Foundation (WCF) uses this call to close datagram channels and wait for all messages to get to an InstanceContext. Constructors ChannelDispatcherBase() Declaration protected ChannelDispatcherBase() Properties Host Declaration public abstract ServiceHostBase Host { get; } Property Value Type Description ServiceHostBase Methods Attach(ServiceHostBase) Declaration protected virtual void Attach(ServiceHostBase host) Parameters Type Name Description ServiceHostBase host CloseInputAsync() Declaration public virtual Task CloseInputAsync() Returns Type Description Task Detach(ServiceHostBase) Declaration protected virtual void Detach(ServiceHostBase host) Parameters Type Name Description ServiceHostBase host Implements ICommunicationObject"
  },
  "api-corewcf/CoreWCF.Dispatcher.ChannelDispatcherCollection.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.ChannelDispatcherCollection.html",
    "title": "Class ChannelDispatcherCollection",
    "keywords": "Class ChannelDispatcherCollection Provides a thread-safe collection that contains channel dispatchers. Inheritance Object SynchronizedCollection < ChannelDispatcherBase > ChannelDispatcherCollection Implements IList < ChannelDispatcherBase > ICollection < ChannelDispatcherBase > IEnumerable < ChannelDispatcherBase > IEnumerable IList ICollection Inherited Members SynchronizedCollection<ChannelDispatcherBase>.Add(ChannelDispatcherBase) SynchronizedCollection<ChannelDispatcherBase>.Clear() SynchronizedCollection<ChannelDispatcherBase>.CopyTo(ChannelDispatcherBase[], Int32) SynchronizedCollection<ChannelDispatcherBase>.Contains(ChannelDispatcherBase) SynchronizedCollection<ChannelDispatcherBase>.GetEnumerator() SynchronizedCollection<ChannelDispatcherBase>.IndexOf(ChannelDispatcherBase) SynchronizedCollection<ChannelDispatcherBase>.Insert(Int32, ChannelDispatcherBase) SynchronizedCollection<ChannelDispatcherBase>.Remove(ChannelDispatcherBase) SynchronizedCollection<ChannelDispatcherBase>.RemoveAt(Int32) SynchronizedCollection<ChannelDispatcherBase>.Count SynchronizedCollection<ChannelDispatcherBase>.Items SynchronizedCollection<ChannelDispatcherBase>.SyncRoot SynchronizedCollection<ChannelDispatcherBase>.Item[Int32] Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public class ChannelDispatcherCollection : SynchronizedCollection<ChannelDispatcherBase> Remarks This collection is used by <xref:CoreWCF.ServiceHostBase> to manage the channel dispatchers associated with the host. A <xref:CoreWCF.Dispatcher.ChannelDispatcherCollection> is created when <xref:CoreWCF.ServiceHostBase.%23ctor%2A> is called and the collection can be accessed using the <xref:CoreWCF.ServiceHostBase.ChannelDispatchers%2A> property. The collection contains <xref:CoreWCF.Dispatcher.ChannelDispatcherBase> objects (and not just instances of <xref:CoreWCF.Dispatcher.ChannelDispatcher>) because it is also used by developers who want to keep the Windows Communication Foundation (WCF)programming model but replace the system-provided runtime. They derive a class from <xref:CoreWCF.Dispatcher.ChannelDispatcherBase> and extend <xref:CoreWCF.ServiceHost> (which inherits from <xref:CoreWCF.ServiceHostBase>) by overriding <xref:CoreWCF.ServiceHostBase.InitializeRuntime%2A>, adding instances of the class derived from <xref:CoreWCF.Dispatcher.ChannelDispatcherBase> to <xref:CoreWCF.ServiceHostBase.ChannelDispatchers%2A>. This class has no public constructors and is not intended to be used outside of the <xref:CoreWCF.ServiceHost>. Methods ClearItems() Declaration protected override void ClearItems() Overrides CoreWCF.Collections.Generic.SynchronizedCollection<CoreWCF.Dispatcher.ChannelDispatcherBase>.ClearItems() InsertItem(Int32, ChannelDispatcherBase) Declaration protected override void InsertItem(int index, ChannelDispatcherBase item) Parameters Type Name Description Int32 index ChannelDispatcherBase item Overrides CoreWCF.Collections.Generic.SynchronizedCollection<CoreWCF.Dispatcher.ChannelDispatcherBase>.InsertItem(System.Int32, CoreWCF.Dispatcher.ChannelDispatcherBase) RemoveItem(Int32) Declaration protected override void RemoveItem(int index) Parameters Type Name Description Int32 index Overrides CoreWCF.Collections.Generic.SynchronizedCollection<CoreWCF.Dispatcher.ChannelDispatcherBase>.RemoveItem(System.Int32) SetItem(Int32, ChannelDispatcherBase) Declaration protected override void SetItem(int index, ChannelDispatcherBase item) Parameters Type Name Description Int32 index ChannelDispatcherBase item Overrides CoreWCF.Collections.Generic.SynchronizedCollection<CoreWCF.Dispatcher.ChannelDispatcherBase>.SetItem(System.Int32, CoreWCF.Dispatcher.ChannelDispatcherBase) Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable System.Collections.IList System.Collections.ICollection"
  },
  "api-corewcf/CoreWCF.Dispatcher.ClientOperation.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.ClientOperation.html",
    "title": "Class ClientOperation",
    "keywords": "Class ClientOperation Used to modify or extend the execution behavior of a specific contract operation in a client object or client channel object. This class cannot be inherited. Inheritance Object ClientOperation Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public sealed class ClientOperation : Object Remarks The <xref:CoreWCF.Dispatcher.ClientOperation> class is the location for client run-time modifications and insertion point for custom extensions that are scoped to only one service operation. (To modify client run-time behavior for all messages in a contract, use the <xref:CoreWCF.Dispatcher.ClientRuntime> class. ) Install <xref:CoreWCF.Dispatcher.ClientOperation> modifications using a custom client behavior object, either of type <xref:CoreWCF.Description.IContractBehavior> (to find a particular operation to modify) or of type <xref:CoreWCF.Description.IOperationBehavior> (which can then be applied by creating a custom attribute). Use the <xref:CoreWCF.Dispatcher.ClientRuntime.Operations%2A> property to locate the <xref:CoreWCF.Dispatcher.ClientOperation> object that represents a particular service operation. For more information about clients and the client architecture, see Accessing Services Using a WCF Client and WCF Client Architecture . For more information about customizing the client runtime, see Extending Clients . For more information about using behaviors, see Configuring and Extending the Runtime with Behaviors . The following properties enable you to insert custom objects or modify the client execution behavior: Use the <xref:CoreWCF.Dispatcher.ClientOperation.Formatter%2A> property to insert a custom <xref:CoreWCF.Dispatcher.IClientMessageFormatter> implementation for an operation or modify the current formatter. Use the <xref:CoreWCF.Dispatcher.ClientOperation.ParameterInspectors%2A> property to insert a custom <xref:CoreWCF.Dispatcher.IParameterInspector> implementation or to modify the current one. Use the <xref:CoreWCF.Dispatcher.ClientOperation.SerializeRequest%2A> property to control who serializes an outbound message. Use the <xref:CoreWCF.Dispatcher.ClientOperation.DeserializeReply%2A> property to control who deserializes an inbound message. Use the <xref:CoreWCF.Dispatcher.ClientOperation.Action%2A> property to access the WS-Addressing action of the request message and the <xref:CoreWCF.Dispatcher.ClientOperation.ReplyAction%2A> property to access the response message action. Use the <xref:CoreWCF.Dispatcher.ClientOperation.BeginMethod%2A> and <xref:CoreWCF.Dispatcher.ClientOperation.EndMethod%2A> to specify which client methods are associated with an asynchronous operation. Use the <xref:CoreWCF.Dispatcher.ClientOperation.FaultContractInfos%2A> property to get a collection of specified types that can appear in SOAP faults as the detail type. Use the <xref:CoreWCF.Dispatcher.ClientOperation.IsInitiating%2A> and <xref:CoreWCF.Dispatcher.ClientOperation.IsTerminating%2A> properties to control whether a session is initiated or is torn down, respectively, when the operation is called. Use the <xref:CoreWCF.Dispatcher.ClientOperation.IsOneWay%2A> property to control whether the client waits for a response before completing the invocation. Use the <xref:CoreWCF.Dispatcher.ClientOperation.Parent%2A> property to obtain the containing <xref:CoreWCF.Dispatcher.ClientRuntime> object. Use the <xref:CoreWCF.Dispatcher.ClientOperation.Name%2A> property to get the name of the operation. Use the <xref:CoreWCF.Dispatcher.ClientOperation.SyncMethod%2A> property to control which method is mapped to the operation. Constructors ClientOperation(ClientRuntime, String, String) Declaration public ClientOperation(ClientRuntime parent, string name, string action) Parameters Type Name Description ClientRuntime parent String name String action ClientOperation(ClientRuntime, String, String, String) Declaration public ClientOperation(ClientRuntime parent, string name, string action, string replyAction) Parameters Type Name Description ClientRuntime parent String name String action String replyAction Properties Action Declaration public string Action { get; } Property Value Type Description String BeginMethod Declaration public MethodInfo BeginMethod { get; set; } Property Value Type Description MethodInfo ClientParameterInspectors Declaration public ICollection<IParameterInspector> ClientParameterInspectors { get; } Property Value Type Description ICollection < IParameterInspector > DeserializeReply Declaration public bool DeserializeReply { get; set; } Property Value Type Description Boolean EndMethod Declaration public MethodInfo EndMethod { get; set; } Property Value Type Description MethodInfo Formatter Declaration public IClientMessageFormatter Formatter { get; set; } Property Value Type Description IClientMessageFormatter IsInitiating Declaration public bool IsInitiating { get; set; } Property Value Type Description Boolean IsOneWay Declaration public bool IsOneWay { get; set; } Property Value Type Description Boolean IsTerminating Declaration public bool IsTerminating { get; set; } Property Value Type Description Boolean Name Declaration public string Name { get; } Property Value Type Description String Parent Declaration public ClientRuntime Parent { get; } Property Value Type Description ClientRuntime ReplyAction Declaration public string ReplyAction { get; } Property Value Type Description String SerializeRequest Declaration public bool SerializeRequest { get; set; } Property Value Type Description Boolean SyncMethod Declaration public MethodInfo SyncMethod { get; set; } Property Value Type Description MethodInfo TaskMethod Declaration public MethodInfo TaskMethod { get; set; } Property Value Type Description MethodInfo TaskTResult Declaration public Type TaskTResult { get; set; } Property Value Type Description Type"
  },
  "api-corewcf/CoreWCF.Dispatcher.ClientRuntime.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.ClientRuntime.html",
    "title": "Class ClientRuntime",
    "keywords": "Class ClientRuntime Represents the insertion point for classes that extend the functionality of Windows Communication Foundation (WCF) client objects for all messages handled by a client application. Inheritance Object ClientRuntime Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public sealed class ClientRuntime : Object Remarks WCF client objects, whether an extension of <xref:CoreWCF.ClientBase%601> or of <xref:CoreWCF.IClientChannel>, are used by Windows Communication Foundation (WCF) client applications to convert method calls into outbound messages and convert incoming messages to objects and pass them to the results of client methods. The <xref:CoreWCF.Dispatcher.ClientRuntime> class is an extensibility point to which you can add extension objects that intercept messages and extend client behavior across all operations. Interception objects can process all messages in a particular contract, process only messages for particular operations, perform custom channel initialization, and implement other custom client application behavior. For an overview of client architecture, see WCF Client Architecture . For more information about client programming, see Accessing Services Using a WCF Client . For details about customizations and how to perform them, see Extending Clients . The <xref:CoreWCF.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A> property returns the dispatch run-time object for service-initiated callback operations. The <xref:CoreWCF.Dispatcher.ClientRuntime.OperationSelector%2A> property accepts a custom operation selector object to control the routing of client messages. The <xref:CoreWCF.Dispatcher.ClientRuntime.ChannelInitializers%2A> property enables the addition of a channel initializer that can inspect or modify the client channel. The <xref:CoreWCF.Dispatcher.ClientRuntime.InteractiveChannelInitializers%2A> property can be used to display a visual prompt to enable a user to select credentials prior to opening the channel. The <xref:CoreWCF.Dispatcher.ClientRuntime.Operations%2A> property gets a collection of <xref:CoreWCF.Dispatcher.ClientOperation> objects to which you can add custom message interceptors that provide functionality specific to the messages of that operation. The <xref:CoreWCF.Dispatcher.ClientRuntime.ManualAddressing%2A> property enables an application to turn off some automatic addressing headers to directly control addressing. The <xref:CoreWCF.Dispatcher.ClientRuntime.MaxFaultSize%2A> property enables the client to limit the size of fault messages that the client accepts. The <xref:CoreWCF.Dispatcher.ClientRuntime.MessageInspectors%2A> property gets a collection of <xref:CoreWCF.Dispatcher.IClientMessageInspector> objects to which you can add custom message interceptors for all messages traveling through a client. The <xref:CoreWCF.Dispatcher.ClientRuntime.UnhandledClientOperation%2A> property returns the operation to which unexpected messages are passed. The <xref:CoreWCF.Dispatcher.ClientRuntime.ValidateMustUnderstand%2A> property informs the system whether it should confirm that SOAP headers marked as MustUnderstand have, in fact, been understood. The <xref:CoreWCF.Dispatcher.ClientRuntime.Via%2A> property sets the value of the destination of the message at the transport level to support intermediaries and other scenarios. In addition, there are a number of other properties that retrieve the client contract information: <xref:CoreWCF.Dispatcher.ClientRuntime.ContractName%2A> <xref:CoreWCF.Dispatcher.ClientRuntime.ContractNamespace%2A> <xref:CoreWCF.Dispatcher.ClientRuntime.ContractClientType%2A> If the client is a duplex client, the following properties also retrieve the client callback type and runtime: <xref:CoreWCF.Dispatcher.ClientRuntime.CallbackClientType%2A> <xref:CoreWCF.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A> Properties CallbackClientType Declaration public Type CallbackClientType { get; set; } Property Value Type Description Type CallbackDispatchRuntime Declaration public DispatchRuntime CallbackDispatchRuntime { get; } Property Value Type Description DispatchRuntime ChannelInitializers Declaration public SynchronizedCollection<IChannelInitializer> ChannelInitializers { get; } Property Value Type Description SynchronizedCollection < IChannelInitializer > ClientMessageInspectors Declaration public ICollection<IClientMessageInspector> ClientMessageInspectors { get; } Property Value Type Description ICollection < IClientMessageInspector > ClientOperations Declaration public ICollection<ClientOperation> ClientOperations { get; } Property Value Type Description ICollection < ClientOperation > ContractClientType Declaration public Type ContractClientType { get; set; } Property Value Type Description Type ContractName Declaration public string ContractName { get; } Property Value Type Description String ContractNamespace Declaration public string ContractNamespace { get; } Property Value Type Description String ManualAddressing Declaration public bool ManualAddressing { get; set; } Property Value Type Description Boolean MaxFaultSize Declaration public int MaxFaultSize { get; set; } Property Value Type Description Int32 MessageVersionNoneFaultsEnabled Declaration public bool MessageVersionNoneFaultsEnabled { get; set; } Property Value Type Description Boolean UnhandledClientOperation Declaration public ClientOperation UnhandledClientOperation { get; } Property Value Type Description ClientOperation ValidateMustUnderstand Declaration public bool ValidateMustUnderstand { get; set; } Property Value Type Description Boolean Via Declaration public Uri Via { get; set; } Property Value Type Description Uri"
  },
  "api-corewcf/CoreWCF.Dispatcher.DataContractSerializerOperationFormatter.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.DataContractSerializerOperationFormatter.html",
    "title": "Class DataContractSerializerOperationFormatter",
    "keywords": "Class DataContractSerializerOperationFormatter Inheritance Object OperationFormatter DataContractSerializerOperationFormatter Implements IClientMessageFormatter IDispatchMessageFormatter Inherited Members OperationFormatter.WriteBodyAttributes(XmlDictionaryWriter, MessageVersion) OperationFormatter.AddToDictionary(String) OperationFormatter.DeserializeReply(Message, Object[]) OperationFormatter.DeserializeRequest(Message, Object[]) OperationFormatter.SerializeRequest(MessageVersion, Object[]) OperationFormatter.SerializeReply(MessageVersion, Object[], Object) OperationFormatter.Dictionary OperationFormatter.OperationName OperationFormatter.ReplyDescription OperationFormatter.RequestDescription Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public class DataContractSerializerOperationFormatter : OperationFormatter, IClientMessageFormatter, IDispatchMessageFormatter Constructors DataContractSerializerOperationFormatter(OperationDescription, DataContractFormatAttribute, DataContractSerializerOperationBehavior) Declaration public DataContractSerializerOperationFormatter(OperationDescription description, DataContractFormatAttribute dataContractFormatAttribute, DataContractSerializerOperationBehavior serializerFactory) Parameters Type Name Description OperationDescription description DataContractFormatAttribute dataContractFormatAttribute DataContractSerializerOperationBehavior serializerFactory Fields replyMessageInfo Declaration protected DataContractSerializerOperationFormatter.MessageInfo replyMessageInfo Field Value Type Description DataContractSerializerOperationFormatter.MessageInfo requestMessageInfo Declaration protected DataContractSerializerOperationFormatter.MessageInfo requestMessageInfo Field Value Type Description DataContractSerializerOperationFormatter.MessageInfo Methods AddHeadersToMessage(Message, MessageDescription, Object[], Boolean) Declaration protected override void AddHeadersToMessage(Message message, MessageDescription messageDescription, object[] parameters, bool isRequest) Parameters Type Name Description Message message MessageDescription messageDescription Object [] parameters Boolean isRequest Overrides OperationFormatter.AddHeadersToMessage(Message, MessageDescription, Object[], Boolean) DeserializeBody(XmlDictionaryReader, MessageVersion, String, MessageDescription, Object[], Boolean) Declaration protected override object DeserializeBody(XmlDictionaryReader reader, MessageVersion version, string action, MessageDescription messageDescription, object[] parameters, bool isRequest) Parameters Type Name Description XmlDictionaryReader reader MessageVersion version String action MessageDescription messageDescription Object [] parameters Boolean isRequest Returns Type Description Object Overrides OperationFormatter.DeserializeBody(XmlDictionaryReader, MessageVersion, String, MessageDescription, Object[], Boolean) GetHeadersFromMessage(Message, MessageDescription, Object[], Boolean) Declaration protected override void GetHeadersFromMessage(Message message, MessageDescription messageDescription, object[] parameters, bool isRequest) Parameters Type Name Description Message message MessageDescription messageDescription Object [] parameters Boolean isRequest Overrides OperationFormatter.GetHeadersFromMessage(Message, MessageDescription, Object[], Boolean) SerializeBody(XmlDictionaryWriter, MessageVersion, String, MessageDescription, Object, Object[], Boolean) Declaration protected override void SerializeBody(XmlDictionaryWriter writer, MessageVersion version, string action, MessageDescription messageDescription, object returnValue, object[] parameters, bool isRequest) Parameters Type Name Description XmlDictionaryWriter writer MessageVersion version String action MessageDescription messageDescription Object returnValue Object [] parameters Boolean isRequest Overrides OperationFormatter.SerializeBody(XmlDictionaryWriter, MessageVersion, String, MessageDescription, Object, Object[], Boolean) Implements IClientMessageFormatter IDispatchMessageFormatter"
  },
  "api-corewcf/CoreWCF.Dispatcher.DataContractSerializerOperationFormatter.MessageInfo.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.DataContractSerializerOperationFormatter.MessageInfo.html",
    "title": "Class DataContractSerializerOperationFormatter.MessageInfo",
    "keywords": "Class DataContractSerializerOperationFormatter.MessageInfo Inheritance Object DataContractSerializerOperationFormatter.MessageInfo Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax protected class MessageInfo : Object Constructors MessageInfo() Declaration public MessageInfo() Fields BodyParts Declaration public DataContractSerializerOperationFormatter.PartInfo[] BodyParts Field Value Type Description DataContractSerializerOperationFormatter.PartInfo [] ReturnPart Declaration public DataContractSerializerOperationFormatter.PartInfo ReturnPart Field Value Type Description DataContractSerializerOperationFormatter.PartInfo WrapperName Declaration public XmlDictionaryString WrapperName Field Value Type Description XmlDictionaryString WrapperNamespace Declaration public XmlDictionaryString WrapperNamespace Field Value Type Description XmlDictionaryString"
  },
  "api-corewcf/CoreWCF.Dispatcher.DataContractSerializerOperationFormatter.PartInfo.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.DataContractSerializerOperationFormatter.PartInfo.html",
    "title": "Class DataContractSerializerOperationFormatter.PartInfo",
    "keywords": "Class DataContractSerializerOperationFormatter.PartInfo Inheritance Object DataContractSerializerOperationFormatter.PartInfo Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax protected class PartInfo : Object Constructors PartInfo(MessagePartDescription, XmlDictionaryString, XmlDictionaryString, IList<Type>, DataContractSerializerOperationBehavior) Declaration public PartInfo(MessagePartDescription description, XmlDictionaryString dictionaryName, XmlDictionaryString dictionaryNamespace, IList<Type> knownTypes, DataContractSerializerOperationBehavior behavior) Parameters Type Name Description MessagePartDescription description XmlDictionaryString dictionaryName XmlDictionaryString dictionaryNamespace IList < Type > knownTypes DataContractSerializerOperationBehavior behavior Properties ContractType Declaration public Type ContractType { get; } Property Value Type Description Type Description Declaration public MessagePartDescription Description { get; } Property Value Type Description MessagePartDescription DictionaryName Declaration public XmlDictionaryString DictionaryName { get; } Property Value Type Description XmlDictionaryString DictionaryNamespace Declaration public XmlDictionaryString DictionaryNamespace { get; } Property Value Type Description XmlDictionaryString Serializer Declaration public XmlObjectSerializer Serializer { get; } Property Value Type Description XmlObjectSerializer Methods ReadObject(XmlDictionaryReader) Declaration public object ReadObject(XmlDictionaryReader reader) Parameters Type Name Description XmlDictionaryReader reader Returns Type Description Object ReadObject(XmlDictionaryReader, XmlObjectSerializer) Declaration public object ReadObject(XmlDictionaryReader reader, XmlObjectSerializer serializer) Parameters Type Name Description XmlDictionaryReader reader XmlObjectSerializer serializer Returns Type Description Object"
  },
  "api-corewcf/CoreWCF.Dispatcher.DispatchOperation.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.DispatchOperation.html",
    "title": "Class DispatchOperation",
    "keywords": "Class DispatchOperation Used to modify or extend the execution behavior of a specific service operation in a service endpoint. This class cannot be inherited. Inheritance Object DispatchOperation Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public sealed class DispatchOperation : Object Remarks The <xref:CoreWCF.Dispatcher.DispatchOperation> class is the location for run-time modifications and insertion point for custom extensions that are scoped to only one service operation. (To modify service run-time behavior for all messages in a contract, use the <xref:CoreWCF.Dispatcher.DispatchRuntime> class.) Install <xref:CoreWCF.Dispatcher.DispatchOperation> modifications using a custom operation behavior object or a behavior at a larger scope in order to modify operations across a contract. Use the <xref:CoreWCF.Dispatcher.DispatchRuntime.Operations%2A> property to locate the <xref:CoreWCF.Dispatcher.DispatchOperation> object that represents a particular service operation. The <xref:CoreWCF.Dispatcher.DispatchOperation.Action%2A>, <xref:CoreWCF.Dispatcher.DispatchOperation.ReplyAction%2A>, <xref:CoreWCF.Dispatcher.DispatchOperation.FaultContractInfos%2A>, <xref:CoreWCF.Dispatcher.DispatchOperation.IsOneWay%2A>, <xref:CoreWCF.Dispatcher.DispatchOperation.IsTerminating%2A>, and <xref:CoreWCF.Dispatcher.DispatchOperation.Name%2A> properties obtain the respective values for the operation. The <xref:CoreWCF.Dispatcher.DispatchOperation.TransactionAutoComplete%2A> and <xref:CoreWCF.Dispatcher.DispatchOperation.TransactionRequired%2A> properties specify transaction behavior. The <xref:CoreWCF.Dispatcher.DispatchOperation.ReleaseInstanceBeforeCall%2A> and <xref:CoreWCF.Dispatcher.DispatchOperation.ReleaseInstanceAfterCall%2A> properties control the lifetime of the user-defined service object relative to the <xref:CoreWCF.InstanceContext>. The <xref:CoreWCF.Dispatcher.DispatchOperation.DeserializeRequest%2A>, <xref:CoreWCF.Dispatcher.DispatchOperation.SerializeReply%2A>, and the <xref:CoreWCF.Dispatcher.DispatchOperation.Formatter%2A> properties enable explicit control over the conversion from messages to objects and vice versa. The <xref:CoreWCF.Dispatcher.DispatchOperation.Impersonation%2A> property specifies the operation impersonation level. The <xref:CoreWCF.Dispatcher.DispatchOperation.CallContextInitializers%2A> property inserts custom call context extensions for the operation. For more information, see <xref:CoreWCF.Dispatcher.ICallContextInitializer>. The <xref:CoreWCF.Dispatcher.DispatchOperation.AutoDisposeParameters%2A> property controls whether parameter objects are disposed when the service operation is completed. The <xref:CoreWCF.Dispatcher.DispatchOperation.Invoker%2A> property to insert a custom invoker object. The <xref:CoreWCF.Dispatcher.DispatchOperation.ParameterInspectors%2A> property enables you to insert a custom parameter inspector that you can use to inspect or modify parameters and return values. Constructors DispatchOperation(DispatchRuntime, String, String) Declaration public DispatchOperation(DispatchRuntime parent, string name, string action) Parameters Type Name Description DispatchRuntime parent String name String action DispatchOperation(DispatchRuntime, String, String, String) Declaration public DispatchOperation(DispatchRuntime parent, string name, string action, string replyAction) Parameters Type Name Description DispatchRuntime parent String name String action String replyAction Properties Action Declaration public string Action { get; } Property Value Type Description String AuthorizeClaims Declaration public ConcurrentDictionary<string, List<Claim>> AuthorizeClaims { get; set; } Property Value Type Description ConcurrentDictionary < String , List < Claim >> AutoDisposeParameters Declaration public bool AutoDisposeParameters { get; set; } Property Value Type Description Boolean CallContextInitializers Declaration public SynchronizedCollection<ICallContextInitializer> CallContextInitializers { get; } Property Value Type Description SynchronizedCollection < ICallContextInitializer > DeserializeRequest Declaration public bool DeserializeRequest { get; set; } Property Value Type Description Boolean FaultContractInfos Declaration public SynchronizedCollection<FaultContractInfo> FaultContractInfos { get; } Property Value Type Description SynchronizedCollection < FaultContractInfo > FaultFormatter Declaration public IDispatchFaultFormatter FaultFormatter { get; set; } Property Value Type Description IDispatchFaultFormatter Formatter Declaration public IDispatchMessageFormatter Formatter { get; set; } Property Value Type Description IDispatchMessageFormatter Impersonation Declaration public ImpersonationOption Impersonation { get; set; } Property Value Type Description ImpersonationOption Invoker Declaration public IOperationInvoker Invoker { get; set; } Property Value Type Description IOperationInvoker IsOneWay Declaration public bool IsOneWay { get; } Property Value Type Description Boolean Name Declaration public string Name { get; } Property Value Type Description String ParameterInspectors Declaration public ICollection<IParameterInspector> ParameterInspectors { get; } Property Value Type Description ICollection < IParameterInspector > Parent Declaration public DispatchRuntime Parent { get; } Property Value Type Description DispatchRuntime ReplyAction Declaration public string ReplyAction { get; } Property Value Type Description String SerializeReply Declaration public bool SerializeReply { get; set; } Property Value Type Description Boolean"
  },
  "api-corewcf/CoreWCF.Dispatcher.DispatchRuntime.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.DispatchRuntime.html",
    "title": "Class DispatchRuntime",
    "keywords": "Class DispatchRuntime Exposes properties that can be used to modify default service behavior as well as attach custom objects that can modify how incoming messages are transformed into objects and dispatched to operations. This class cannot be inherited. Inheritance Object DispatchRuntime Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public sealed class DispatchRuntime : Object Remarks Use the <xref:CoreWCF.Dispatcher.DispatchRuntime> class either to modify the default behavior of a service or individual endpoint, or to insert objects that implement custom modifications to one or both of the following service processes: The transformation of incoming messages into objects and releasing those objects as method invocations on a service object. The transformation of objects received from the response to a service operation invocation into outbound messages. In Windows Communication Foundation (WCF), the channel and endpoint dispatchers are the service components responsible for accepting new channels, receiving messages, method dispatch and invocation, and response processing. Each endpoint exposed by a <xref:CoreWCF.ServiceHost> object has one endpoint dispatcher and an associated channel dispatcher; in addition, each client that participates in duplex communication also has an endpoint dispatcher and channel dispatcher for each callback endpoint. The <xref:CoreWCF.Dispatcher.DispatchRuntime> enables you to intercept and extend the channel or endpoint dispatcher for all messages across a particular contract, even when a message is not recognized. When a message arrives that does not match any messages declared in the contract it is dispatched to the operation that was returned by the <xref:CoreWCF.Dispatcher.DispatchRuntime.UnhandledDispatchOperation%2A> property. To intercept or extend across all messages for a particular operation, see the <xref:CoreWCF.Dispatcher.DispatchOperation> class. There are four main areas of dispatcher extensibility exposed by the <xref:CoreWCF.Dispatcher.DispatchRuntime> class: Dispatch components use the properties of the <xref:CoreWCF.Dispatcher.DispatchRuntime> and those of the associated channel dispatcher returned by the <xref:CoreWCF.Dispatcher.DispatchRuntime.ChannelDispatcher%2A> property to customize how the channel dispatcher accepts and closes channels. This category includes the <xref:CoreWCF.Dispatcher.ChannelDispatcher.ChannelInitializers%2A> and <xref:CoreWCF.Dispatcher.DispatchRuntime.InputSessionShutdownHandlers%2A> properties. Message components are customized for each message processed. This category includes the <xref:CoreWCF.Dispatcher.DispatchRuntime.MessageInspectors%2A>, <xref:CoreWCF.Dispatcher.DispatchRuntime.OperationSelector%2A>, <xref:CoreWCF.Dispatcher.DispatchRuntime.Operations%2A>, and the <xref:CoreWCF.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> properties. Instance components customize the creation, lifetime, and disposal of instances of the service type. For more information about service object lifetimes, see the <xref:CoreWCF.ServiceBehaviorAttribute.InstanceContextMode%2A> property. This category includes the <xref:CoreWCF.Dispatcher.DispatchRuntime.InstanceContextInitializers%2A> and the <xref:CoreWCF.Dispatcher.DispatchRuntime.InstanceProvider%2A> properties. Security-related components can use the following properties: <xref:CoreWCF.Dispatcher.DispatchRuntime.SecurityAuditLogLocation%2A> indicates where audit events are written. <xref:CoreWCF.Dispatcher.DispatchRuntime.ImpersonateCallerForAllOperations%2A> controls whether the service attempts to impersonate using the credentials provided by the incoming message. <xref:CoreWCF.Dispatcher.DispatchRuntime.MessageAuthenticationAuditLevel%2A> controls whether successful message authentication events are written to the event log specified by <xref:CoreWCF.Dispatcher.DispatchRuntime.SecurityAuditLogLocation%2A>. <xref:CoreWCF.Dispatcher.DispatchRuntime.PrincipalPermissionMode%2A> controls how the <xref:System.Threading.Thread.CurrentPrincipal%2A> property is set. <xref:CoreWCF.Dispatcher.DispatchRuntime.ServiceAuthorizationAuditLevel%2A> specifies how the auditing of authorization events is performed. <xref:CoreWCF.Dispatcher.DispatchRuntime.SuppressAuditFailure%2A> specifies whether to suppress non-critical exceptions that occur during the logging process. Typically custom extension objects are assigned to a <xref:CoreWCF.Dispatcher.DispatchRuntime> property or inserted into a collection by a service behavior (an object that implements <xref:CoreWCF.Description.IServiceBehavior>), a contract behavior (an object that implements <xref:CoreWCF.Description.IContractBehavior>), or an endpoint behavior (an object that implements <xref:CoreWCF.Description.IEndpointBehavior>). Then the installing behavior object is added to the appropriate collection of behaviors either programmatically or by implementing a custom <xref:CoreWCF.Configuration.BehaviorExtensionElement> object to enable the behavior to be inserted using an application configuration file. Properties AutomaticInputSessionShutdown Declaration public bool AutomaticInputSessionShutdown { get; set; } Property Value Type Description Boolean CallbackClientRuntime Declaration public ClientRuntime CallbackClientRuntime { get; } Property Value Type Description ClientRuntime ChannelDispatcher Declaration public ChannelDispatcher ChannelDispatcher { get; } Property Value Type Description ChannelDispatcher ConcurrencyMode Declaration public ConcurrencyMode ConcurrencyMode { get; set; } Property Value Type Description ConcurrencyMode EndpointDispatcher Declaration public EndpointDispatcher EndpointDispatcher { get; } Property Value Type Description EndpointDispatcher EnsureOrderedDispatch Declaration public bool EnsureOrderedDispatch { get; set; } Property Value Type Description Boolean IgnoreTransactionMessageProperty Declaration public bool IgnoreTransactionMessageProperty { get; set; } Property Value Type Description Boolean ImpersonateCallerForAllOperations Declaration public bool ImpersonateCallerForAllOperations { get; set; } Property Value Type Description Boolean ImpersonateOnSerializingReply Declaration public bool ImpersonateOnSerializingReply { get; set; } Property Value Type Description Boolean InstanceContextProvider Declaration public IInstanceContextProvider InstanceContextProvider { get; set; } Property Value Type Description IInstanceContextProvider InstanceProvider Declaration public IInstanceProvider InstanceProvider { get; set; } Property Value Type Description IInstanceProvider MessageInspectors Declaration public SynchronizedCollection<IDispatchMessageInspector> MessageInspectors { get; } Property Value Type Description SynchronizedCollection < IDispatchMessageInspector > Operations Declaration public SynchronizedKeyedCollection<string, DispatchOperation> Operations { get; } Property Value Type Description SynchronizedKeyedCollection < String , DispatchOperation > OperationSelector Declaration public IDispatchOperationSelector OperationSelector { get; set; } Property Value Type Description IDispatchOperationSelector PrincipalPermissionMode Declaration public PrincipalPermissionMode PrincipalPermissionMode { get; set; } Property Value Type Description PrincipalPermissionMode ServiceAuthenticationManager Declaration public ServiceAuthenticationManager ServiceAuthenticationManager { get; set; } Property Value Type Description ServiceAuthenticationManager ServiceAuthorizationManager Declaration public ServiceAuthorizationManager ServiceAuthorizationManager { get; set; } Property Value Type Description ServiceAuthorizationManager SingletonInstanceContext Declaration public InstanceContext SingletonInstanceContext { get; set; } Property Value Type Description InstanceContext SynchronizationContext Declaration public SynchronizationContext SynchronizationContext { get; set; } Property Value Type Description SynchronizationContext Type Declaration public Type Type { get; set; } Property Value Type Description Type UnhandledDispatchOperation Declaration public DispatchOperation UnhandledDispatchOperation { get; set; } Property Value Type Description DispatchOperation ValidateMustUnderstand Declaration public bool ValidateMustUnderstand { get; set; } Property Value Type Description Boolean"
  },
  "api-corewcf/CoreWCF.Dispatcher.EndpointDispatcher.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.EndpointDispatcher.html",
    "title": "Class EndpointDispatcher",
    "keywords": "Class EndpointDispatcher Represents the run-time object that exposes properties that enable the insertion of run-time extensions or modifications for messages in service applications. Inheritance Object EndpointDispatcher Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public class EndpointDispatcher : Object Remarks The <xref:CoreWCF.Dispatcher.EndpointDispatcher> and the <xref:CoreWCF.Dispatcher.DispatchRuntime?displayProperty=nameWithType> classes expose the runtime customization points for endpoints in a service. The <xref:CoreWCF.Dispatcher.EndpointDispatcher> can be used to control which messages it can process and some endpoint-related information. The <xref:CoreWCF.Dispatcher.DispatchRuntime> has a large number of properties used to insert custom extensions into the endpoint-wide runtime. The <xref:CoreWCF.Dispatcher.EndpointDispatcher> object is responsible for processing messages from a <xref:CoreWCF.Dispatcher.ChannelDispatcher?displayProperty=nameWithType> when the destination address of a message matches the <xref:CoreWCF.Dispatcher.EndpointDispatcher.AddressFilter%2A> property and the message action matches the <xref:CoreWCF.Dispatcher.EndpointDispatcher.ContractFilter%2A> property. If two <xref:CoreWCF.Dispatcher.EndpointDispatcher> objects can accept a message, the <xref:CoreWCF.Dispatcher.EndpointDispatcher.FilterPriority%2A> property value determines the higher priority endpoint. Use the <xref:CoreWCF.Dispatcher.EndpointDispatcher> object to configure or extend the process of receiving messages from the associated <xref:CoreWCF.Dispatcher.ChannelDispatcher>, converting from message objects to objects used as parameters, and invoking an endpoint operation as well as the reverse process. Typically, the <xref:CoreWCF.Dispatcher.EndpointDispatcher> for an endpoint is obtained by implementing the <xref:CoreWCF.Description.IEndpointBehavior> interface, but you can access the <xref:CoreWCF.Dispatcher.EndpointDispatcher> from the other behavior interfaces. You can use the following <xref:CoreWCF.Dispatcher.EndpointDispatcher> properties: The <xref:CoreWCF.Dispatcher.EndpointDispatcher.AddressFilter%2A> property allows you to get or set a <xref:CoreWCF.Dispatcher.MessageFilter> object that the <xref:CoreWCF.Dispatcher.EndpointDispatcher.ChannelDispatcher%2A> uses to identify whether the endpoint can process a particular message. The <xref:CoreWCF.Dispatcher.EndpointDispatcher.ChannelDispatcher%2A> property gets the associated <xref:CoreWCF.Dispatcher.ChannelDispatcher> object, which sends and receives messages to and from the <xref:CoreWCF.Dispatcher.EndpointDispatcher> and which can be used to inspect or modify other channel-related values and behaviors. The <xref:CoreWCF.Dispatcher.EndpointDispatcher.ContractFilter%2A> gets the <xref:CoreWCF.Dispatcher.MessageFilter> object that is used to identify whether a message is destined for this contract. The <xref:CoreWCF.Dispatcher.EndpointDispatcher.ContractName%2A> and <xref:CoreWCF.Dispatcher.EndpointDispatcher.ContractNamespace%2A> properties return the name and namespace of the endpoint contract. The <xref:CoreWCF.Dispatcher.EndpointDispatcher.DispatchRuntime%2A> property returns the <xref:CoreWCF.Dispatcher.DispatchRuntime> object that you can use to modify run-time values or insert custom run-time extensions for the entire endpoint. The <xref:CoreWCF.Dispatcher.EndpointDispatcher.EndpointAddress%2A> property gets the address of the endpoint. The <xref:CoreWCF.Dispatcher.EndpointDispatcher.FilterPriority%2A> property returns the priority of the composite filter that the <xref:CoreWCF.Dispatcher.EndpointDispatcher.ChannelDispatcher%2A> uses to establish which endpoint is to handle the message. Constructors EndpointDispatcher(EndpointAddress, String, String) Declaration public EndpointDispatcher(EndpointAddress address, string contractName, string contractNamespace) Parameters Type Name Description EndpointAddress address String contractName String contractNamespace EndpointDispatcher(EndpointAddress, String, String, Boolean) Declaration public EndpointDispatcher(EndpointAddress address, string contractName, string contractNamespace, bool isSystemEndpoint) Parameters Type Name Description EndpointAddress address String contractName String contractNamespace Boolean isSystemEndpoint Properties AddressFilter Declaration public MessageFilter AddressFilter { get; set; } Property Value Type Description MessageFilter ChannelDispatcher Declaration public ChannelDispatcher ChannelDispatcher { get; } Property Value Type Description ChannelDispatcher ContractFilter Declaration public MessageFilter ContractFilter { get; set; } Property Value Type Description MessageFilter ContractName Declaration public string ContractName { get; } Property Value Type Description String ContractNamespace Declaration public string ContractNamespace { get; } Property Value Type Description String DispatchRuntime Declaration public DispatchRuntime DispatchRuntime { get; } Property Value Type Description DispatchRuntime EndpointAddress Declaration public EndpointAddress EndpointAddress { get; } Property Value Type Description EndpointAddress FilterPriority Declaration public int FilterPriority { get; set; } Property Value Type Description Int32 Id Declaration public string Id { get; set; } Property Value Type Description String IsSystemEndpoint Declaration public bool IsSystemEndpoint { get; } Property Value Type Description Boolean"
  },
  "api-corewcf/CoreWCF.Dispatcher.ExceptionHandler.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.ExceptionHandler.html",
    "title": "Class ExceptionHandler",
    "keywords": "Class ExceptionHandler Represents an exception handler in a byte array of IL to be passed to a method such as . Inheritance Object ExceptionHandler Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public abstract class ExceptionHandler : Object Remarks To be added. Constructors ExceptionHandler() Declaration protected ExceptionHandler() Properties AlwaysHandle Declaration public static ExceptionHandler AlwaysHandle { get; } Property Value Type Description ExceptionHandler AsynchronousThreadExceptionHandler Declaration public static ExceptionHandler AsynchronousThreadExceptionHandler { get; set; } Property Value Type Description ExceptionHandler TransportExceptionHandler Declaration public static ExceptionHandler TransportExceptionHandler { get; set; } Property Value Type Description ExceptionHandler Methods HandleException(Exception) Declaration public abstract bool HandleException(Exception exception) Parameters Type Name Description Exception exception Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.Dispatcher.FaultContractInfo.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.FaultContractInfo.html",
    "title": "Class FaultContractInfo",
    "keywords": "Class FaultContractInfo Represents information about a SOAP fault that is specified in a attribute. Inheritance Object FaultContractInfo Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public class FaultContractInfo : Object Remarks You can get a collection of <xref:CoreWCF.Dispatcher.FaultContractInfo> objects by accessing the <xref:CoreWCF.Dispatcher.ClientOperation.FaultContractInfos%2A?displayProperty=nameWithType> and <xref:CoreWCF.Dispatcher.DispatchOperation.FaultContractInfos%2A?displayProperty=nameWithType> properties. The <xref:CoreWCF.Dispatcher.FaultContractInfo> class exposes the action of the SOAP fault and the detail type that is serialized into the SOAP fault. Constructors FaultContractInfo(String, Type) Declaration public FaultContractInfo(string action, Type detail) Parameters Type Name Description String action Type detail Properties Action Declaration public string Action { get; } Property Value Type Description String Detail Declaration public Type Detail { get; } Property Value Type Description Type"
  },
  "api-corewcf/CoreWCF.Dispatcher.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.html",
    "title": "Namespace CoreWCF.Dispatcher",
    "keywords": "Namespace CoreWCF.Dispatcher Classes ChannelDispatcher A component that accepts channels and associates them with a service. ChannelDispatcherBase Abstract base class for the channel dispatcher that accepts channels and associates them with a service. ChannelDispatcherCollection Provides a thread-safe collection that contains channel dispatchers. ClientOperation Used to modify or extend the execution behavior of a specific contract operation in a client object or client channel object. This class cannot be inherited. ClientRuntime Represents the insertion point for classes that extend the functionality of Windows Communication Foundation (WCF) client objects for all messages handled by a client application. DataContractSerializerOperationFormatter DataContractSerializerOperationFormatter.MessageInfo DataContractSerializerOperationFormatter.PartInfo DispatchOperation Used to modify or extend the execution behavior of a specific service operation in a service endpoint. This class cannot be inherited. DispatchRuntime Exposes properties that can be used to modify default service behavior as well as attach custom objects that can modify how incoming messages are transformed into objects and dispatched to operations. This class cannot be inherited. EndpointDispatcher Represents the run-time object that exposes properties that enable the insertion of run-time extensions or modifications for messages in service applications. ExceptionHandler Represents an exception handler in a byte array of IL to be passed to a method such as . FaultContractInfo Represents information about a SOAP fault that is specified in a attribute. MatchAllMessageFilter Represents a query that is satisfied by every non- message that it tests. MessageBodyStream MessageFilter base class for different classes of filters used to query messages. NetDispatcherFaultException OperationFormatter OperationInvokerBehavior PrefixEndpointAddressMessageFilter Represents a query that tests whether a message matches an EndpointAddress using a Longest-Prefix Match for the URI component. QueryStringConverter This class converts a parameter in a query string to an object of the appropriate type. It can also convert a parameter from an object to its query string representation. ServiceThrottle Controls the throughput of a service to optimize availability and performance. WebHttpDispatchOperationSelector The operation selector that supports the Web programming model. Interfaces ICallContextInitializer Defines the methods that enable the initialization and recycling of thread-local storage with the thread that invokes user code. IChannelInitializer Defines the interface to notify a service or client when a channel is created. IClientMessageFormatter Defines methods that are used to control the conversion of messages into objects and objects into messages for client applications. IClientMessageInspector Defines a message inspector object that can be added to the collection to view or modify messages. IClientOperationSelector Defines the contract for an operation selector. IDispatchFaultFormatter IDispatchFaultFormatterWrapper IDispatchMessageFormatter Defines methods that deserialize request messages and serialize response messages in a service application. IDispatchMessageInspector Defines the methods that enable custom inspection or modification of inbound and outbound application messages in service applications. IDispatchOperationSelector Defines the contract that associates incoming messages with a local operation to customize service execution behavior. IErrorHandler Defines methods to handle errors that occur when code is being parsed. IInstanceContextProvider Implement to participate in the creation or choosing of a object, especially to enable shared sessions. IInstanceProvider Declares methods that provide a service object or recycle a service object for a Windows Communication Foundation (WCF) service. IMessageFilterTable<TFilterData> An that defines the contract that a filter table must implement to inspect messages with query criteria derived from one or more filters. IOperationInvoker Declares methods that take an object and an array of parameters extracted from a message, invoke a method on that object with those parameters, and return the method's return value and output parameters. IParameterInspector Defines the contract implemented by custom parameter inspectors that enables inspection or modification of information prior to and subsequent to calls on either the client or the service."
  },
  "api-corewcf/CoreWCF.Dispatcher.ICallContextInitializer.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.ICallContextInitializer.html",
    "title": "Interface ICallContextInitializer",
    "keywords": "Interface ICallContextInitializer Defines the methods that enable the initialization and recycling of thread-local storage with the thread that invokes user code. Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public interface ICallContextInitializer Remarks Implement the <xref:CoreWCF.Dispatcher.ICallContextInitializer> interface and add it to the <xref:CoreWCF.Dispatcher.DispatchOperation.CallContextInitializers%2A?displayProperty=nameWithType> property to initialize and clean up thread-local storage for the thread that invokes user code. Typical usage is to set some value, such as impersonation or changing the <xref:System.Globalization.CultureInfo?displayProperty=nameWithType>. If you wanted to establish some custom context, this is the extension point to initialize the static context property, which is then available for developers in the course of the operation. Methods AfterInvoke(Object) Declaration void AfterInvoke(object correlationState) Parameters Type Name Description Object correlationState BeforeInvoke(InstanceContext, IClientChannel, Message) Declaration object BeforeInvoke(InstanceContext instanceContext, IClientChannel channel, Message message) Parameters Type Name Description InstanceContext instanceContext IClientChannel channel Message message Returns Type Description Object"
  },
  "api-corewcf/CoreWCF.Dispatcher.IChannelInitializer.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.IChannelInitializer.html",
    "title": "Interface IChannelInitializer",
    "keywords": "Interface IChannelInitializer Defines the interface to notify a service or client when a channel is created. Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public interface IChannelInitializer Remarks Defines the interface used to inspect and add state to channels when they are first created. This can be used to track all outstanding sessions, for instance, so the service can send messages on them. Add service channel initializers to the <xref:CoreWCF.Dispatcher.ChannelDispatcher.ChannelInitializers%2A?displayProperty=nameWithType> collection. Add client channel initializers to the <xref:CoreWCF.Dispatcher.ClientRuntime.ChannelInitializers%2A?displayProperty=nameWithType> collection. Methods Initialize(IClientChannel) Declaration void Initialize(IClientChannel channel) Parameters Type Name Description IClientChannel channel"
  },
  "api-corewcf/CoreWCF.Dispatcher.IClientMessageFormatter.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.IClientMessageFormatter.html",
    "title": "Interface IClientMessageFormatter",
    "keywords": "Interface IClientMessageFormatter Defines methods that are used to control the conversion of messages into objects and objects into messages for client applications. Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public interface IClientMessageFormatter Remarks Implement the <xref:CoreWCF.Dispatcher.IClientMessageFormatter> interface to create a custom client formatter that serializes objects into messages and deserializes messages into objects for a particular operation. Attach custom Windows Communication Foundation (WCF) client formatters to the <xref:CoreWCF.Dispatcher.ClientOperation.Formatter%2A> property to handle this conversion explicitly. Methods DeserializeReply(Message, Object[]) Declaration object DeserializeReply(Message message, object[] parameters) Parameters Type Name Description Message message Object [] parameters Returns Type Description Object SerializeRequest(MessageVersion, Object[]) Declaration Message SerializeRequest(MessageVersion messageVersion, object[] parameters) Parameters Type Name Description MessageVersion messageVersion Object [] parameters Returns Type Description Message"
  },
  "api-corewcf/CoreWCF.Dispatcher.IClientMessageInspector.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.IClientMessageInspector.html",
    "title": "Interface IClientMessageInspector",
    "keywords": "Interface IClientMessageInspector Defines a message inspector object that can be added to the collection to view or modify messages. Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public interface IClientMessageInspector Remarks Implement the <xref:CoreWCF.Dispatcher.IClientMessageInspector> interface and add it to the <xref:CoreWCF.Dispatcher.ClientRuntime.MessageInspectors%2A> collection to inspect or modify messages as they pass through a WCF client object. For details, see <xref:CoreWCF.Dispatcher.ClientRuntime>. Methods AfterReceiveReply(ref Message, Object) Declaration void AfterReceiveReply(ref Message reply, object correlationState) Parameters Type Name Description Message reply Object correlationState BeforeSendRequest(ref Message, IClientChannel) Declaration object BeforeSendRequest(ref Message request, IClientChannel channel) Parameters Type Name Description Message request IClientChannel channel Returns Type Description Object"
  },
  "api-corewcf/CoreWCF.Dispatcher.IClientOperationSelector.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.IClientOperationSelector.html",
    "title": "Interface IClientOperationSelector",
    "keywords": "Interface IClientOperationSelector Defines the contract for an operation selector. Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public interface IClientOperationSelector Remarks Implement the <xref:CoreWCF.Dispatcher.IClientOperationSelector> interface to create a custom operation selector that can be attached to the <xref:CoreWCF.Dispatcher.ClientRuntime.OperationSelector%2A> property to choose contract operations to invoke based upon the proxy method called. Properties AreParametersRequiredForSelection Declaration bool AreParametersRequiredForSelection { get; } Property Value Type Description Boolean Methods SelectOperation(MethodBase, Object[]) Declaration string SelectOperation(MethodBase method, object[] parameters) Parameters Type Name Description MethodBase method Object [] parameters Returns Type Description String"
  },
  "api-corewcf/CoreWCF.Dispatcher.IDispatchFaultFormatter.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.IDispatchFaultFormatter.html",
    "title": "Interface IDispatchFaultFormatter",
    "keywords": "Interface IDispatchFaultFormatter Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public interface IDispatchFaultFormatter Methods Serialize(FaultException, out String) Declaration MessageFault Serialize(FaultException faultException, out string action) Parameters Type Name Description FaultException faultException String action Returns Type Description MessageFault"
  },
  "api-corewcf/CoreWCF.Dispatcher.IDispatchFaultFormatterWrapper.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.IDispatchFaultFormatterWrapper.html",
    "title": "Interface IDispatchFaultFormatterWrapper",
    "keywords": "Interface IDispatchFaultFormatterWrapper Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public interface IDispatchFaultFormatterWrapper Properties InnerFaultFormatter Declaration IDispatchFaultFormatter InnerFaultFormatter { get; set; } Property Value Type Description IDispatchFaultFormatter"
  },
  "api-corewcf/CoreWCF.Dispatcher.IDispatchMessageFormatter.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.IDispatchMessageFormatter.html",
    "title": "Interface IDispatchMessageFormatter",
    "keywords": "Interface IDispatchMessageFormatter Defines methods that deserialize request messages and serialize response messages in a service application. Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public interface IDispatchMessageFormatter Remarks Implement the <xref:CoreWCF.Dispatcher.IDispatchMessageFormatter> interface to create a formatter extension that controls the serialization of parameters into a message and the deserialization from a message into parameters in a service application. To insert the custom formatter into the service application, assign the <xref:CoreWCF.Dispatcher.IDispatchMessageFormatter> object to the <xref:CoreWCF.Dispatcher.DispatchOperation.Formatter%2A> property using a behavior. Methods DeserializeRequest(Message, Object[]) Declaration void DeserializeRequest(Message message, object[] parameters) Parameters Type Name Description Message message Object [] parameters SerializeReply(MessageVersion, Object[], Object) Declaration Message SerializeReply(MessageVersion messageVersion, object[] parameters, object result) Parameters Type Name Description MessageVersion messageVersion Object [] parameters Object result Returns Type Description Message"
  },
  "api-corewcf/CoreWCF.Dispatcher.IDispatchMessageInspector.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.IDispatchMessageInspector.html",
    "title": "Interface IDispatchMessageInspector",
    "keywords": "Interface IDispatchMessageInspector Defines the methods that enable custom inspection or modification of inbound and outbound application messages in service applications. Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public interface IDispatchMessageInspector Remarks Implement <xref:CoreWCF.Dispatcher.IDispatchMessageInspector> to inspect or modify inbound or outbound application messages either prior to dispatching a request message to an operation or before returning a reply message to a caller. There are a large number of scenarios that require intercepting messages prior to invoking the operation for which it is destined. For example, you can log incoming application messages or perform some feature based on a message header. Typically, message inspectors are inserted by a service behavior (<xref:CoreWCF.Description.IServiceBehavior?displayProperty=nameWithType>), an endpoint behavior (<xref:CoreWCF.Description.IEndpointBehavior?displayProperty=nameWithType>), or a contract behavior (<xref:CoreWCF.Description.IContractBehavior?displayProperty=nameWithType>). The behavior then adds the message inspector to the <xref:CoreWCF.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection. For more information about extending the runtime using behaviors, see Extending ServiceHost and the Service Model Layer . The <xref:CoreWCF.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method enables custom behavior after receiving the message but before dispatching it to the intended operation. The <xref:CoreWCF.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method enables custom behavior after the operation returns but before the reply is sent. Note <xref:CoreWCF.Dispatcher.IDispatchMessageInspector> objects are always called at the same point during message dispatch regardless of whether an operation is one-way or request-reply. Methods AfterReceiveRequest(ref Message, IClientChannel, InstanceContext) Declaration object AfterReceiveRequest(ref Message request, IClientChannel channel, InstanceContext instanceContext) Parameters Type Name Description Message request IClientChannel channel InstanceContext instanceContext Returns Type Description Object BeforeSendReply(ref Message, Object) Declaration void BeforeSendReply(ref Message reply, object correlationState) Parameters Type Name Description Message reply Object correlationState"
  },
  "api-corewcf/CoreWCF.Dispatcher.IDispatchOperationSelector.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.IDispatchOperationSelector.html",
    "title": "Interface IDispatchOperationSelector",
    "keywords": "Interface IDispatchOperationSelector Defines the contract that associates incoming messages with a local operation to customize service execution behavior. Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public interface IDispatchOperationSelector Remarks Implement and insert a custom operation selector to customize the selection of the operation to which an incoming message is dispatched in a service application. Assign the <xref:CoreWCF.Dispatcher.IDispatchOperationSelector> object to the <xref:CoreWCF.Dispatcher.DispatchRuntime.OperationSelector%2A> property to insert the custom selector. Methods SelectOperation(ref Message) Declaration string SelectOperation(ref Message message) Parameters Type Name Description Message message Returns Type Description String"
  },
  "api-corewcf/CoreWCF.Dispatcher.IErrorHandler.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.IErrorHandler.html",
    "title": "Interface IErrorHandler",
    "keywords": "Interface IErrorHandler Defines methods to handle errors that occur when code is being parsed. Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public interface IErrorHandler Remarks To be added. Methods HandleError(Exception) Declaration bool HandleError(Exception error) Parameters Type Name Description Exception error Returns Type Description Boolean ProvideFault(Exception, MessageVersion, ref Message) Declaration void ProvideFault(Exception error, MessageVersion version, ref Message fault) Parameters Type Name Description Exception error MessageVersion version Message fault"
  },
  "api-corewcf/CoreWCF.Dispatcher.IInstanceContextProvider.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.IInstanceContextProvider.html",
    "title": "Interface IInstanceContextProvider",
    "keywords": "Interface IInstanceContextProvider Implement to participate in the creation or choosing of a object, especially to enable shared sessions. Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public interface IInstanceContextProvider Remarks Implement the <xref:CoreWCF.Dispatcher.IInstanceContextProvider> interface to provide the appropriate <xref:CoreWCF.InstanceContext?displayProperty=nameWithType> object to the system. Typically, this interface is implemented to support shared sessions, enable service instance pooling, control lifetimes of service instances, or to group contexts among clients. For example, to implement sharing, insert a custom <xref:CoreWCF.Dispatcher.IInstanceContextProvider> to decide which session or call from a client is associated with which <xref:CoreWCF.InstanceContext> object. For an example that demonstrates the sharing of instance contexts, see InstanceContextSharing . Note When an <xref:CoreWCF.Dispatcher.IInstanceContextProvider> is inserted into Windows Communication Foundation (WCF), the normal property that controls the creation of <xref:CoreWCF.InstanceContext> objects (the <xref:CoreWCF.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> property) is no longer checked and has no effect. A more generic mechanism by which you can initialize <xref:CoreWCF.InstanceContext> objects when created (for example, to attach custom extensions to each <xref:CoreWCF.InstanceContext>) is the <xref:CoreWCF.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType>. Methods GetExistingInstanceContext(Message, IContextChannel) Declaration InstanceContext GetExistingInstanceContext(Message message, IContextChannel channel) Parameters Type Name Description Message message IContextChannel channel Returns Type Description InstanceContext InitializeInstanceContext(InstanceContext, Message, IContextChannel) Declaration void InitializeInstanceContext(InstanceContext instanceContext, Message message, IContextChannel channel) Parameters Type Name Description InstanceContext instanceContext Message message IContextChannel channel IsIdle(InstanceContext) Declaration bool IsIdle(InstanceContext instanceContext) Parameters Type Name Description InstanceContext instanceContext Returns Type Description Boolean NotifyIdle(Action<InstanceContext>, InstanceContext) Declaration void NotifyIdle(Action<InstanceContext> callback, InstanceContext instanceContext) Parameters Type Name Description Action < InstanceContext > callback InstanceContext instanceContext"
  },
  "api-corewcf/CoreWCF.Dispatcher.IInstanceProvider.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.IInstanceProvider.html",
    "title": "Interface IInstanceProvider",
    "keywords": "Interface IInstanceProvider Declares methods that provide a service object or recycle a service object for a Windows Communication Foundation (WCF) service. Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public interface IInstanceProvider Remarks Implement the <xref:CoreWCF.Dispatcher.IInstanceProvider> interface to control the creation and recycling of service objects when one is requested or disposed by an <xref:CoreWCF.InstanceContext> object. Once the <xref:CoreWCF.Dispatcher.IInstanceProvider> interface is implemented, you must assign your custom instance provider object to the <xref:CoreWCF.Dispatcher.DispatchRuntime.InstanceProvider%2A> property using either an endpoint behavior (a <xref:CoreWCF.Description.IEndpointBehavior> object) or a contract behavior (a <xref:CoreWCF.Description.IContractBehavior> object). If the insertion mechanism is an endpoint behavior you can also implement a <xref:CoreWCF.Configuration.BehaviorExtensionElement> object that can insert your custom behavior using a configuration file. If the insertion mechanism is a contract behavior, you can insert the behavior programmatically prior to the opening of the service host or you can implement a custom attribute. (For an example of the contract behavior approach, see the Example section.) <xref:CoreWCF.Dispatcher.IInstanceProvider> has two methods, <xref:CoreWCF.Dispatcher.IInstanceProvider.GetInstance%2A> and <xref:CoreWCF.Dispatcher.IInstanceProvider.ReleaseInstance%2A>. These methods are typically implemented to create service objects using a non-parameterless constructor or to initialize or dispose of some state related to the lifetime of the object. Service object pooling is one example of custom <xref:CoreWCF.Dispatcher.IInstanceProvider> functionality. Typically, the <xref:CoreWCF.InstanceContext> invokes the <xref:CoreWCF.Dispatcher.IInstanceProvider.GetInstance%2A> when the <xref:CoreWCF.InstanceContext> is first created and invokes the <xref:CoreWCF.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method when the <xref:CoreWCF.InstanceContext> is closed. There are two ways to cause an <xref:CoreWCF.InstanceContext> object to release a service object before the <xref:CoreWCF.InstanceContext> is closed. The first method is to set the <xref:CoreWCF.OperationBehaviorAttribute.ReleaseInstanceMode%2A> to <xref:CoreWCF.ReleaseInstanceMode.AfterCall> or <xref:CoreWCF.ReleaseInstanceMode.BeforeAndAfterCall>. The second method is to call the <xref:CoreWCF.InstanceContext.ReleaseServiceInstance%2A> method. If this is done, the <xref:CoreWCF.InstanceContext> calls the <xref:CoreWCF.Dispatcher.IInstanceProvider.ReleaseInstance%2A> method on the dispatcher's instance provider. If a new message arrives after the instance has been released, WCF creates a new instance using the <xref:CoreWCF.Dispatcher.IInstanceProvider.GetInstance%2A> method. Note If the <xref:CoreWCF.InstanceContextMode> of the service is <xref:CoreWCF.InstanceContextMode.Single>, the system does not call the <xref:CoreWCF.Dispatcher.IInstanceProvider.GetInstance%2A> or <xref:CoreWCF.Dispatcher.IInstanceProvider.ReleaseInstance%2A> methods even when the user did not provide a well-known service object unless the user directly calls <xref:CoreWCF.InstanceContext.ReleaseServiceInstance%2A> and then calls <xref:CoreWCF.InstanceContext.GetServiceInstance%2A>. Methods GetInstance(InstanceContext) Declaration object GetInstance(InstanceContext instanceContext) Parameters Type Name Description InstanceContext instanceContext Returns Type Description Object GetInstance(InstanceContext, Message) Declaration object GetInstance(InstanceContext instanceContext, Message message) Parameters Type Name Description InstanceContext instanceContext Message message Returns Type Description Object ReleaseInstance(InstanceContext, Object) Declaration void ReleaseInstance(InstanceContext instanceContext, object instance) Parameters Type Name Description InstanceContext instanceContext Object instance"
  },
  "api-corewcf/CoreWCF.Dispatcher.IMessageFilterTable-1.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.IMessageFilterTable-1.html",
    "title": "Interface IMessageFilterTable<TFilterData>",
    "keywords": "Interface IMessageFilterTable<TFilterData> An that defines the contract that a filter table must implement to inspect messages with query criteria derived from one or more filters. Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public interface IMessageFilterTable<TFilterData> Type Parameters Name Description TFilterData Remarks The filter table is a core component of the filter engine. The primary use of the filter engine in Windows Communication Foundation (WCF) is to match application logic to messages by finding all the filters that match a message. A filter table allows multiple filters to be matched against a single message more efficiently than they can be matched separately. A filter table associates filter data with filters. The table is a collection of key-value pairs, where the key is the <xref:CoreWCF.Dispatcher.MessageFilter>, and the value is the associated filter data. Filter data can be any data of the type specified in the generic parameter and can be used to specify what actions to take if a message is matched by a filter in the table. Filter table entries can be accessed using the <xref:System.Collections.Generic.IDictionary%602> functionality that <xref:CoreWCF.Dispatcher.IMessageFilterTable%601> inherits. Note that a filter instance can only be added to a given <xref:CoreWCF.Dispatcher.IMessageFilterTable%601> once. To add multiple instances of this filter to the same filter table, use a filter constructor to create additional instances. A filter matches a message when the message satisfies the query criteria of the filter. There are four overloaded matching methods. The data returned is either the filter data or the <xref:CoreWCF.Dispatcher.MessageFilter> objects themselves. This data is returned whether multiple matches are allowed or only a single match. The following table shows this information for each overload. Method Name Matches Data Returned <xref:CoreWCF.Dispatcher.IMessageFilterTable%601.GetMatchingValue%2A> Single FilterData <xref:CoreWCF.Dispatcher.IMessageFilterTable%601.GetMatchingFilter%2A> Single <xref:CoreWCF.Dispatcher.MessageFilter> <xref:CoreWCF.Dispatcher.IMessageFilterTable%601.GetMatchingValues%2A> Multiple FilterData <xref:CoreWCF.Dispatcher.IMessageFilterTable%601.GetMatchingFilters%2A> Multiple <xref:CoreWCF.Dispatcher.MessageFilter> objects Each method contains two overloads. The difference between the two overloads is that one takes a <xref:CoreWCF.Channels.Message> parameter and is not permitted to examine the contents of the body; the other takes a <xref:CoreWCF.Channels.MessageBuffer> parameter and can examine any part of the message. If you call a method with the message parameter, and the filter table contains a filter that examines the content of the message body, an exception is thrown. If you are unsure about the filters in a table, call the overload that takes a message buffer. Message headers are automatically buffered and can be inspected by a filter without being consumed. But if the body is to be inspected by a filter, then the entire message must be buffered because an unbuffered message body is consumed by a query and its contents destroyed. The following classes implement <xref:CoreWCF.Dispatcher.IMessageFilterTable%601>: <xref:CoreWCF.Dispatcher.MessageFilterTable%601> <xref:CoreWCF.Dispatcher.XPathMessageFilterTable%601> Methods GetMatchingFilter(Message, out MessageFilter) Declaration bool GetMatchingFilter(Message message, out MessageFilter filter) Parameters Type Name Description Message message MessageFilter filter Returns Type Description Boolean GetMatchingFilter(MessageBuffer, out MessageFilter) Declaration bool GetMatchingFilter(MessageBuffer messageBuffer, out MessageFilter filter) Parameters Type Name Description MessageBuffer messageBuffer MessageFilter filter Returns Type Description Boolean GetMatchingFilters(Message, ICollection<MessageFilter>) Declaration bool GetMatchingFilters(Message message, ICollection<MessageFilter> results) Parameters Type Name Description Message message ICollection < MessageFilter > results Returns Type Description Boolean GetMatchingFilters(MessageBuffer, ICollection<MessageFilter>) Declaration bool GetMatchingFilters(MessageBuffer messageBuffer, ICollection<MessageFilter> results) Parameters Type Name Description MessageBuffer messageBuffer ICollection < MessageFilter > results Returns Type Description Boolean GetMatchingValue(Message, out TFilterData) Declaration bool GetMatchingValue(Message message, out TFilterData value) Parameters Type Name Description Message message TFilterData value Returns Type Description Boolean GetMatchingValue(MessageBuffer, out TFilterData) Declaration bool GetMatchingValue(MessageBuffer messageBuffer, out TFilterData value) Parameters Type Name Description MessageBuffer messageBuffer TFilterData value Returns Type Description Boolean GetMatchingValues(Message, ICollection<TFilterData>) Declaration bool GetMatchingValues(Message message, ICollection<TFilterData> results) Parameters Type Name Description Message message ICollection <TFilterData> results Returns Type Description Boolean GetMatchingValues(MessageBuffer, ICollection<TFilterData>) Declaration bool GetMatchingValues(MessageBuffer messageBuffer, ICollection<TFilterData> results) Parameters Type Name Description MessageBuffer messageBuffer ICollection <TFilterData> results Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.Dispatcher.IOperationInvoker.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.IOperationInvoker.html",
    "title": "Interface IOperationInvoker",
    "keywords": "Interface IOperationInvoker Declares methods that take an object and an array of parameters extracted from a message, invoke a method on that object with those parameters, and return the method's return value and output parameters. Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public interface IOperationInvoker Remarks Implement the <xref:CoreWCF.Dispatcher.IOperationInvoker> interface to control the conversion from an untyped object and array of parameters to a strongly-typed method call on that object. It has a synchronous <xref:CoreWCF.Dispatcher.IOperationInvoker.Invoke%2A> method, which takes an instance and set of inputs of type object and returns an object and a set of outputs of type object. It also has a <xref:CoreWCF.Dispatcher.IOperationInvoker.InvokeBegin%2A> and <xref:CoreWCF.Dispatcher.IOperationInvoker.InvokeEnd%2A> variant. The <xref:CoreWCF.Dispatcher.IOperationInvoker.IsSynchronous%2A> property specifies whether the synchronous or asynchronous method should be used. Methods AllocateInputs() Declaration object[] AllocateInputs() Returns Type Description Object [] InvokeAsync(Object, Object[]) Declaration ValueTask<(object, object[])> InvokeAsync(object instance, object[] inputs) Parameters Type Name Description Object instance Object [] inputs Returns Type Description ValueTask < (, ) < Object , Object []>>"
  },
  "api-corewcf/CoreWCF.Dispatcher.IParameterInspector.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.IParameterInspector.html",
    "title": "Interface IParameterInspector",
    "keywords": "Interface IParameterInspector Defines the contract implemented by custom parameter inspectors that enables inspection or modification of information prior to and subsequent to calls on either the client or the service. Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public interface IParameterInspector Remarks Implement the <xref:CoreWCF.Dispatcher.IParameterInspector> interface to create a custom parameter inspector that can view and modify the contents of a call both before the call and after the call in either client or service applications. On outbound calls from a client, the inspector is invoked before the request contents are serialized and sent to the service. The inspector is also called after the response has been deserialized but before the return values have been dispatched to the proxy method. On inbound calls to a service, the inspector is invoked after parameters are deserialized but before they are dispatched to the service operation. Use the <xref:CoreWCF.Dispatcher.ClientOperation.ParameterInspectors%2A?displayProperty=nameWithType> or the <xref:CoreWCF.Dispatcher.DispatchOperation.ParameterInspectors%2A?displayProperty=nameWithType> properties to add an <xref:CoreWCF.Dispatcher.IParameterInspector> implementation to the inspectors collection for a particular operation. Note Developers and administrators must ensure that the interaction with other <xref:CoreWCF.Dispatcher.IParameterInspector> implementations is understood. Methods AfterCall(String, Object[], Object, Object) Declaration void AfterCall(string operationName, object[] outputs, object returnValue, object correlationState) Parameters Type Name Description String operationName Object [] outputs Object returnValue Object correlationState BeforeCall(String, Object[]) Declaration object BeforeCall(string operationName, object[] inputs) Parameters Type Name Description String operationName Object [] inputs Returns Type Description Object"
  },
  "api-corewcf/CoreWCF.Dispatcher.MatchAllMessageFilter.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.MatchAllMessageFilter.html",
    "title": "Class MatchAllMessageFilter",
    "keywords": "Class MatchAllMessageFilter Represents a query that is satisfied by every non- message that it tests. Inheritance Object MessageFilter MatchAllMessageFilter Inherited Members MessageFilter.CreateFilterTable<FilterData>() Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public class MatchAllMessageFilter : MessageFilter Remarks This class provides a filter that allows every message through. Specifically, the <xref:CoreWCF.Dispatcher.MatchAllMessageFilter.Match%2A> methods returns true for every message that is not null . Constructors MatchAllMessageFilter() Declaration public MatchAllMessageFilter() Methods Match(Message) Declaration public override bool Match(Message message) Parameters Type Name Description Message message Returns Type Description Boolean Overrides MessageFilter.Match(Message) Match(MessageBuffer) Declaration public override bool Match(MessageBuffer messageBuffer) Parameters Type Name Description MessageBuffer messageBuffer Returns Type Description Boolean Overrides MessageFilter.Match(MessageBuffer)"
  },
  "api-corewcf/CoreWCF.Dispatcher.MessageBodyStream.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.MessageBodyStream.html",
    "title": "Class MessageBodyStream",
    "keywords": "Class MessageBodyStream Inheritance Object MessageBodyStream Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public class MessageBodyStream : Stream Constructors MessageBodyStream(Message, String, String, String, String, Boolean) Declaration public MessageBodyStream(Message message, string wrapperName, string wrapperNs, string elementName, string elementNs, bool isRequest) Parameters Type Name Description Message message String wrapperName String wrapperNs String elementName String elementNs Boolean isRequest Properties CanRead Declaration public override bool CanRead { get; } Property Value Type Description Boolean CanSeek Declaration public override bool CanSeek { get; } Property Value Type Description Boolean CanWrite Declaration public override bool CanWrite { get; } Property Value Type Description Boolean Length Declaration public override long Length { get; } Property Value Type Description Int64 Position Declaration public override long Position { get; set; } Property Value Type Description Int64 Methods Dispose(Boolean) Declaration protected override void Dispose(bool isDisposing) Parameters Type Name Description Boolean isDisposing Flush() Declaration public override void Flush() Read(Byte[], Int32, Int32) Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count Returns Type Description Int32 Seek(Int64, SeekOrigin) Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description Int64 offset SeekOrigin origin Returns Type Description Int64 SetLength(Int64) Declaration public override void SetLength(long value) Parameters Type Name Description Int64 value Write(Byte[], Int32, Int32) Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer Int32 offset Int32 count"
  },
  "api-corewcf/CoreWCF.Dispatcher.MessageFilter.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.MessageFilter.html",
    "title": "Class MessageFilter",
    "keywords": "Class MessageFilter base class for different classes of filters used to query messages. Inheritance Object MessageFilter MatchAllMessageFilter PrefixEndpointAddressMessageFilter Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public abstract class MessageFilter : Object Remarks <xref:CoreWCF.Dispatcher.MessageFilter> is an abstract class that developers implement in order to specify the criteria to use for inspecting messages. Typically, filters are used by an endpoint application to determine what to do with a message based on an examination of some part of the message. A queuing process, for example, can use an XPath 1.0 query to check the priority element of a known header to determine whether to move a message to the front of the queue. Filters are stored in a filter table that implements <xref:CoreWCF.Dispatcher.IMessageFilterTable%601>. Each filter in the table is associated with specified filter data that can be used to indicate what actions to take if a message matches the filter. The <xref:CoreWCF.Dispatcher.MessageFilter.Match%2A> methods are used to determine if a message satisfies a filter. The criteria used by a filter cannot be changed once the filter is constructed because the filter tables have no way to detect a change. The only way to modify the criteria of a filter is to construct a new one and delete the existing filter. The following classes implement the abstract <xref:CoreWCF.Dispatcher.MessageFilter> class: <xref:CoreWCF.Dispatcher.XPathMessageFilter> uses an XPath 1.0 expression to specify the criteria for a match. <xref:CoreWCF.Dispatcher.MatchAllMessageFilter> matches all messages. <xref:CoreWCF.Dispatcher.MatchNoneMessageFilter> matches none of the messages. <xref:CoreWCF.Dispatcher.ActionMessageFilter> tests whether the action of a message is one of a specified set of actions. <xref:CoreWCF.Dispatcher.EndpointAddressMessageFilter> tests whether a message satisfies a specified endpoint address. <xref:CoreWCF.Channels.ChannelListenerBase%601> is an abstract base class that you can use for writing non-queuing listeners. Constructors MessageFilter() Declaration protected MessageFilter() Methods CreateFilterTable<FilterData>() Declaration protected virtual IMessageFilterTable<FilterData> CreateFilterTable<FilterData>() Returns Type Description IMessageFilterTable <FilterData> Type Parameters Name Description FilterData Match(Message) Tests whether the filter matches the given message without examining its body. Note: since this method never probes the message body, it should NOT close the message If the filter probes the message body, then the filter must THROW an Exception. The filter should not return false This is deliberate - we don't want to produce false positives. Declaration public abstract bool Match(Message message) Parameters Type Name Description Message message Returns Type Description Boolean Match(MessageBuffer) Tests whether the filter matches the given message. Declaration public abstract bool Match(MessageBuffer buffer) Parameters Type Name Description MessageBuffer buffer Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.Dispatcher.NetDispatcherFaultException.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.NetDispatcherFaultException.html",
    "title": "Class NetDispatcherFaultException",
    "keywords": "Class NetDispatcherFaultException Inheritance Object CommunicationException FaultException NetDispatcherFaultException Inherited Members FaultException.CreateFault(MessageFault, Type[]) FaultException.CreateFault(MessageFault, String, Type[]) FaultException.CreateMessageFault() FaultException.GetObjectData(SerializationInfo, StreamingContext) FaultException.Action FaultException.Code FaultException.Message FaultException.Reason Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public class NetDispatcherFaultException : FaultException Constructors NetDispatcherFaultException(FaultReason, FaultCode, Exception) Declaration public NetDispatcherFaultException(FaultReason reason, FaultCode code, Exception innerException) Parameters Type Name Description FaultReason reason FaultCode code Exception innerException NetDispatcherFaultException(String, FaultCode, Exception) Declaration public NetDispatcherFaultException(string reason, FaultCode code, Exception innerException) Parameters Type Name Description String reason FaultCode code Exception innerException Methods CreateDeserializationFailedFault(String, Exception) Declaration public static NetDispatcherFaultException CreateDeserializationFailedFault(string reason, Exception innerException) Parameters Type Name Description String reason Exception innerException Returns Type Description NetDispatcherFaultException"
  },
  "api-corewcf/CoreWCF.Dispatcher.OperationFormatter.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.OperationFormatter.html",
    "title": "Class OperationFormatter",
    "keywords": "Class OperationFormatter Inheritance Object OperationFormatter DataContractSerializerOperationFormatter Implements IClientMessageFormatter IDispatchMessageFormatter Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public abstract class OperationFormatter : Object, IClientMessageFormatter, IDispatchMessageFormatter Constructors OperationFormatter(OperationDescription, Boolean, Boolean) Declaration public OperationFormatter(OperationDescription description, bool isRpc, bool isEncoded) Parameters Type Name Description OperationDescription description Boolean isRpc Boolean isEncoded Properties Dictionary Declaration protected XmlDictionary Dictionary { get; } Property Value Type Description XmlDictionary OperationName Declaration protected string OperationName { get; } Property Value Type Description String ReplyDescription Declaration protected MessageDescription ReplyDescription { get; } Property Value Type Description MessageDescription RequestDescription Declaration protected MessageDescription RequestDescription { get; } Property Value Type Description MessageDescription Methods AddHeadersToMessage(Message, MessageDescription, Object[], Boolean) Declaration protected abstract void AddHeadersToMessage(Message message, MessageDescription messageDescription, object[] parameters, bool isRequest) Parameters Type Name Description Message message MessageDescription messageDescription Object [] parameters Boolean isRequest AddToDictionary(String) Declaration protected XmlDictionaryString AddToDictionary(string s) Parameters Type Name Description String s Returns Type Description XmlDictionaryString DeserializeBody(XmlDictionaryReader, MessageVersion, String, MessageDescription, Object[], Boolean) Declaration protected abstract object DeserializeBody(XmlDictionaryReader reader, MessageVersion version, string action, MessageDescription messageDescription, object[] parameters, bool isRequest) Parameters Type Name Description XmlDictionaryReader reader MessageVersion version String action MessageDescription messageDescription Object [] parameters Boolean isRequest Returns Type Description Object DeserializeReply(Message, Object[]) Declaration public object DeserializeReply(Message message, object[] parameters) Parameters Type Name Description Message message Object [] parameters Returns Type Description Object DeserializeRequest(Message, Object[]) Declaration public void DeserializeRequest(Message message, object[] parameters) Parameters Type Name Description Message message Object [] parameters GetHeadersFromMessage(Message, MessageDescription, Object[], Boolean) Declaration protected abstract void GetHeadersFromMessage(Message message, MessageDescription messageDescription, object[] parameters, bool isRequest) Parameters Type Name Description Message message MessageDescription messageDescription Object [] parameters Boolean isRequest SerializeBody(XmlDictionaryWriter, MessageVersion, String, MessageDescription, Object, Object[], Boolean) Declaration protected abstract void SerializeBody(XmlDictionaryWriter writer, MessageVersion version, string action, MessageDescription messageDescription, object returnValue, object[] parameters, bool isRequest) Parameters Type Name Description XmlDictionaryWriter writer MessageVersion version String action MessageDescription messageDescription Object returnValue Object [] parameters Boolean isRequest SerializeReply(MessageVersion, Object[], Object) Declaration public Message SerializeReply(MessageVersion messageVersion, object[] parameters, object result) Parameters Type Name Description MessageVersion messageVersion Object [] parameters Object result Returns Type Description Message SerializeRequest(MessageVersion, Object[]) Declaration public Message SerializeRequest(MessageVersion messageVersion, object[] parameters) Parameters Type Name Description MessageVersion messageVersion Object [] parameters Returns Type Description Message WriteBodyAttributes(XmlDictionaryWriter, MessageVersion) Declaration protected virtual void WriteBodyAttributes(XmlDictionaryWriter writer, MessageVersion messageVersion) Parameters Type Name Description XmlDictionaryWriter writer MessageVersion messageVersion Implements IClientMessageFormatter IDispatchMessageFormatter"
  },
  "api-corewcf/CoreWCF.Dispatcher.OperationInvokerBehavior.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.OperationInvokerBehavior.html",
    "title": "Class OperationInvokerBehavior",
    "keywords": "Class OperationInvokerBehavior Inheritance Object OperationInvokerBehavior Implements IOperationBehavior Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public class OperationInvokerBehavior : Object, IOperationBehavior Constructors OperationInvokerBehavior() Declaration public OperationInvokerBehavior() Explicit Interface Implementations IOperationBehavior.AddBindingParameters(OperationDescription, BindingParameterCollection) Declaration void IOperationBehavior.AddBindingParameters(OperationDescription description, BindingParameterCollection parameters) Parameters Type Name Description OperationDescription description BindingParameterCollection parameters IOperationBehavior.ApplyClientBehavior(OperationDescription, ClientOperation) Declaration void IOperationBehavior.ApplyClientBehavior(OperationDescription description, ClientOperation proxy) Parameters Type Name Description OperationDescription description ClientOperation proxy IOperationBehavior.ApplyDispatchBehavior(OperationDescription, DispatchOperation) Declaration void IOperationBehavior.ApplyDispatchBehavior(OperationDescription description, DispatchOperation dispatch) Parameters Type Name Description OperationDescription description DispatchOperation dispatch IOperationBehavior.Validate(OperationDescription) Declaration void IOperationBehavior.Validate(OperationDescription description) Parameters Type Name Description OperationDescription description Implements IOperationBehavior"
  },
  "api-corewcf/CoreWCF.Dispatcher.PrefixEndpointAddressMessageFilter.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.PrefixEndpointAddressMessageFilter.html",
    "title": "Class PrefixEndpointAddressMessageFilter",
    "keywords": "Class PrefixEndpointAddressMessageFilter Represents a query that tests whether a message matches an EndpointAddress using a Longest-Prefix Match for the URI component. Inheritance Object MessageFilter PrefixEndpointAddressMessageFilter Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public class PrefixEndpointAddressMessageFilter : MessageFilter Remarks An <xref:CoreWCF.EndpointAddress> object includes a URI and an optional collection of addressing headers. The addressing and message headers are canonicalized to be compared for equality. If a parameter appears more than once in an <xref:CoreWCF.EndpointAddress>, the corresponding header must appear in the message at least that many times. This filter performs the same query as <xref:CoreWCF.Dispatcher.EndpointAddressMessageFilter>, except that the test for whether a message matches an endpoint address is done by a Longest-Prefix Match . This means that the URI specified in the filter does not have to match the message's URI exactly, but must be contained in that URI as a prefix. For example, if a filter specifies the address \"www.foo.com\", and a message is addressed to \"www.foo.com/customerA\", then the URI part of the filter query condition will be met. However, the header portion of the filter query still has to be done. Internet Information Services (IIS) and the underlying file system (NTFS or FAT) are case-insensitive. URI comparisons done by this class are also case-insensitive. So, for example, http://www.microsoft.com is evaluated as equal to http://WWW.microsoft.com . Constructors PrefixEndpointAddressMessageFilter(EndpointAddress) Declaration public PrefixEndpointAddressMessageFilter(EndpointAddress address) Parameters Type Name Description EndpointAddress address PrefixEndpointAddressMessageFilter(EndpointAddress, Boolean) Declaration public PrefixEndpointAddressMessageFilter(EndpointAddress address, bool includeHostNameInComparison) Parameters Type Name Description EndpointAddress address Boolean includeHostNameInComparison Properties Address Declaration public EndpointAddress Address { get; } Property Value Type Description EndpointAddress IncludeHostNameInComparison Declaration public bool IncludeHostNameInComparison { get; } Property Value Type Description Boolean Methods CreateFilterTable<TFilterData>() Declaration protected override IMessageFilterTable<TFilterData> CreateFilterTable<TFilterData>() Returns Type Description IMessageFilterTable <TFilterData> Type Parameters Name Description TFilterData Overrides MessageFilter.CreateFilterTable<FilterData>() Match(Message) Declaration public override bool Match(Message message) Parameters Type Name Description Message message Returns Type Description Boolean Overrides MessageFilter.Match(Message) Match(MessageBuffer) Declaration public override bool Match(MessageBuffer messageBuffer) Parameters Type Name Description MessageBuffer messageBuffer Returns Type Description Boolean Overrides MessageFilter.Match(MessageBuffer)"
  },
  "api-corewcf/CoreWCF.Dispatcher.QueryStringConverter.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.QueryStringConverter.html",
    "title": "Class QueryStringConverter",
    "keywords": "Class QueryStringConverter This class converts a parameter in a query string to an object of the appropriate type. It can also convert a parameter from an object to its query string representation. Inheritance Object QueryStringConverter Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.WebHttp.dll Syntax public class QueryStringConverter : Object Remarks Parameters can be specified in a query string within a URL. This class takes those parameters specified in a string and converts them into objects. For example, the following contract is defined. [ServiceContract] interface Calculator { [WebGet(UriTemplate=&quot;Add?n1={n1}&amp;n2={n2}&quot;)] [OperationContract] long Add(long n1, long n2); } A Windows Communication Foundation (WCF) service implements this interface and exposes it on an endpoint with the <xref:CoreWCF.Description.WebHttpBehavior> at http://localhost:8000/MyCalcService . The Add service operation can be called by sending an HTTP GET to http://localhost:8000/MyCalcService/Add?n1=10&amp;n2=5 . The <xref:CoreWCF.Dispatcher.QueryStringConverter> receives this URL and converts the two parameters (n1 and n2) specified in the URL into two long objects with the appropriate values. You can derive a class from <xref:CoreWCF.Dispatcher.QueryStringConverter> to control how query string parameters are mapped into a service operation's parameters. The <xref:CoreWCF.Dispatcher.QueryStringConverter> supports the following types by default: <xref:System.Byte> <xref:System.SByte> <xref:System.Int16> <xref:System.Int32> <xref:System.Int64> <xref:System.UInt16> <xref:System.UInt32> <xref:System.UInt64> <xref:System.Single> <xref:System.Double> <xref:System.Char> <xref:System.Decimal> <xref:System.Boolean> <xref:System.String> <xref:System.DateTime> <xref:System.TimeSpan> <xref:System.Guid> <xref:System.Byte> array <xref:System.Uri> <xref:System.Object> <xref:System.DateTimeOffset> Enums Types that have a TypeConverterAttribute that can convert the type to and from a string representation. Constructors QueryStringConverter() Declaration public QueryStringConverter() Methods CanConvert(Type) Declaration public virtual bool CanConvert(Type type) Parameters Type Name Description Type type Returns Type Description Boolean ConvertStringToValue(String, Type) Declaration public virtual object ConvertStringToValue(string parameter, Type parameterType) Parameters Type Name Description String parameter Type parameterType Returns Type Description Object ConvertValueToString(Object, Type) Declaration public virtual string ConvertValueToString(object parameter, Type parameterType) Parameters Type Name Description Object parameter Type parameterType Returns Type Description String"
  },
  "api-corewcf/CoreWCF.Dispatcher.ServiceThrottle.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.ServiceThrottle.html",
    "title": "Class ServiceThrottle",
    "keywords": "Class ServiceThrottle Controls the throughput of a service to optimize availability and performance. Inheritance Object ServiceThrottle Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.Primitives.dll Syntax public sealed class ServiceThrottle : Object Remarks Use the <xref:CoreWCF.Dispatcher.ServiceThrottle> to tune the performance characteristics of a service. The easiest way to configure the <xref:CoreWCF.Dispatcher.ServiceThrottle> for a service is to use the <xref:CoreWCF.Description.ServiceThrottlingBehavior>, especially from an application configuration file. The <xref:CoreWCF.Dispatcher.ServiceThrottle.MaxConcurrentCalls%2A> property specifies the maximum number of messages actively processing across all the dispatcher objects in a <xref:CoreWCF.ServiceHost> object. The <xref:CoreWCF.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A> property specifies the maximum number of <xref:CoreWCF.InstanceContext> objects in the service. The <xref:CoreWCF.Dispatcher.ServiceThrottle.MaxConcurrentSessions%2A> property specifies the maximum number of sessions a <xref:CoreWCF.ServiceHost> can accept. Note A trace is written when the first call, <xref:CoreWCF.InstanceContext>, or session is queued on the waitlist. The first trace is written as a warning. Properties MaxConcurrentCalls Declaration public int MaxConcurrentCalls { get; set; } Property Value Type Description Int32 MaxConcurrentInstances Declaration public int MaxConcurrentInstances { get; set; } Property Value Type Description Int32 MaxConcurrentSessions Declaration public int MaxConcurrentSessions { get; set; } Property Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.Dispatcher.WebHttpDispatchOperationSelector.html": {
    "href": "api-corewcf/CoreWCF.Dispatcher.WebHttpDispatchOperationSelector.html",
    "title": "Class WebHttpDispatchOperationSelector",
    "keywords": "Class WebHttpDispatchOperationSelector The operation selector that supports the Web programming model. Inheritance Object WebHttpDispatchOperationSelector Implements IDispatchOperationSelector Namespace : CoreWCF.Dispatcher Assembly : CoreWCF.WebHttp.dll Syntax public class WebHttpDispatchOperationSelector : Object, IDispatchOperationSelector Remarks The <xref:CoreWCF.Dispatcher.WebHttpDispatchOperationSelector> dispatches method calls based on matching the Uniform Resource Identifier (URI) to a <xref:System.UriTemplateTable>. If multiple matches are found in the <xref:System.UriTemplateTable>, dispatch is done by the HTTP method. Constructors WebHttpDispatchOperationSelector() Declaration protected WebHttpDispatchOperationSelector() WebHttpDispatchOperationSelector(ServiceEndpoint) Declaration public WebHttpDispatchOperationSelector(ServiceEndpoint endpoint) Parameters Type Name Description ServiceEndpoint endpoint Fields HttpOperationNamePropertyName Declaration public const string HttpOperationNamePropertyName = \"HttpOperationName\" Field Value Type Description String HttpOperationSelectorUriMatchedPropertyName Declaration public const string HttpOperationSelectorUriMatchedPropertyName = \"UriMatched\" Field Value Type Description String Methods GetUriTemplate(String) Declaration public virtual UriTemplate GetUriTemplate(string operationName) Parameters Type Name Description String operationName Returns Type Description UriTemplate SelectOperation(ref Message) Declaration public string SelectOperation(ref Message message) Parameters Type Name Description Message message Returns Type Description String SelectOperation(ref Message, out Boolean) Declaration protected virtual string SelectOperation(ref Message message, out bool uriMatched) Parameters Type Name Description Message message Boolean uriMatched Returns Type Description String Implements IDispatchOperationSelector"
  },
  "api-corewcf/CoreWCF.EndpointAddress.html": {
    "href": "api-corewcf/CoreWCF.EndpointAddress.html",
    "title": "Class EndpointAddress",
    "keywords": "Class EndpointAddress Provides a unique network address that a client uses to communicate with a service endpoint. Inheritance Object EndpointAddress Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class EndpointAddress : Object Remarks An endpoint address uniquely identifies the endpoint for a service. The endpoint address belongs to the service endpoint, which also contains the binding, contract and behaviors for the endpoint. The <xref:CoreWCF.EndpointAddress> contains a URI and address properties that include an identity, WSDL elements, and a collection of optional headers. The optional headers are used to provide additional, more detailed addressing information to identify or interact with the endpoint. For example, they can be used to indicate which instance of a service is to be used to process an incoming message from a particular user when multiple instances are available. The endpoint address for a service can be specified either imperatively using code or declaratively through configuration. Defining endpoints in code is usually not practical because the bindings and addresses for a deployed service are typically different from those used while the service is being developed. It is more practical to define service endpoints using configuration. <xref:CoreWCF.EndpointAddress> does not implement the <xref:System.Runtime.Serialization.ISerializable> interface and so is not serializable. For an endpoint to be exposed as part of a service contract it must be serializable and it must also be compliant with the Web Service Addressing (WS-Addressing) protocol. Serializable endpoints that are compliant with version 1.0 and the August 2004 version of WS-Addressing are provided, respectively, by the <xref:CoreWCF.EndpointAddress10> and <xref:CoreWCF.EndpointAddressAugust2004> classes. Constructors EndpointAddress(String) Declaration public EndpointAddress(string uri) Parameters Type Name Description String uri EndpointAddress(Uri, AddressHeader[]) Declaration public EndpointAddress(Uri uri, params AddressHeader[] addressHeaders) Parameters Type Name Description Uri uri AddressHeader [] addressHeaders EndpointAddress(Uri, EndpointAddress) Declaration public EndpointAddress(Uri newUri, EndpointAddress oldEndpointAddress) Parameters Type Name Description Uri newUri EndpointAddress oldEndpointAddress EndpointAddress(Uri, EndpointIdentity, AddressHeader[]) Declaration public EndpointAddress(Uri uri, EndpointIdentity identity, params AddressHeader[] addressHeaders) Parameters Type Name Description Uri uri EndpointIdentity identity AddressHeader [] addressHeaders EndpointAddress(Uri, EndpointIdentity, AddressHeaderCollection, XmlDictionaryReader, XmlDictionaryReader) Declaration public EndpointAddress(Uri uri, EndpointIdentity identity, AddressHeaderCollection headers, XmlDictionaryReader metadataReader, XmlDictionaryReader extensionReader) Parameters Type Name Description Uri uri EndpointIdentity identity AddressHeaderCollection headers XmlDictionaryReader metadataReader XmlDictionaryReader extensionReader Properties AnonymousAddress Declaration public static EndpointAddress AnonymousAddress { get; } Property Value Type Description EndpointAddress AnonymousUri Declaration public static Uri AnonymousUri { get; } Property Value Type Description Uri Headers Declaration public AddressHeaderCollection Headers { get; } Property Value Type Description AddressHeaderCollection Identity Declaration public EndpointIdentity Identity { get; } Property Value Type Description EndpointIdentity IsAnonymous Declaration public bool IsAnonymous { get; } Property Value Type Description Boolean IsNone Declaration public bool IsNone { get; } Property Value Type Description Boolean NoneUri Declaration public static Uri NoneUri { get; } Property Value Type Description Uri Uri Declaration public Uri Uri { get; } Property Value Type Description Uri Methods ApplyTo(Message) Declaration public void ApplyTo(Message message) Parameters Type Name Description Message message Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 ReadFrom(AddressingVersion, XmlDictionaryReader) Declaration public static EndpointAddress ReadFrom(AddressingVersion addressingVersion, XmlDictionaryReader reader) Parameters Type Name Description AddressingVersion addressingVersion XmlDictionaryReader reader Returns Type Description EndpointAddress ReadFrom(XmlDictionaryReader) Declaration public static EndpointAddress ReadFrom(XmlDictionaryReader reader) Parameters Type Name Description XmlDictionaryReader reader Returns Type Description EndpointAddress ToString() Declaration public override string ToString() Returns Type Description String WriteContentsTo(AddressingVersion, XmlDictionaryWriter) Declaration public void WriteContentsTo(AddressingVersion addressingVersion, XmlDictionaryWriter writer) Parameters Type Name Description AddressingVersion addressingVersion XmlDictionaryWriter writer WriteContentsTo(AddressingVersion, XmlWriter) Declaration public void WriteContentsTo(AddressingVersion addressingVersion, XmlWriter writer) Parameters Type Name Description AddressingVersion addressingVersion XmlWriter writer WriteTo(AddressingVersion, XmlDictionaryWriter, XmlDictionaryString, XmlDictionaryString) Declaration public void WriteTo(AddressingVersion addressingVersion, XmlDictionaryWriter writer, XmlDictionaryString localName, XmlDictionaryString ns) Parameters Type Name Description AddressingVersion addressingVersion XmlDictionaryWriter writer XmlDictionaryString localName XmlDictionaryString ns WriteTo(AddressingVersion, XmlWriter) Declaration public void WriteTo(AddressingVersion addressingVersion, XmlWriter writer) Parameters Type Name Description AddressingVersion addressingVersion XmlWriter writer Operators Equality(EndpointAddress, EndpointAddress) Declaration public static bool operator ==(EndpointAddress address1, EndpointAddress address2) Parameters Type Name Description EndpointAddress address1 EndpointAddress address2 Returns Type Description Boolean Inequality(EndpointAddress, EndpointAddress) Declaration public static bool operator !=(EndpointAddress address1, EndpointAddress address2) Parameters Type Name Description EndpointAddress address1 EndpointAddress address2 Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.EndpointAddress10.html": {
    "href": "api-corewcf/CoreWCF.EndpointAddress10.html",
    "title": "Class EndpointAddress10",
    "keywords": "Class EndpointAddress10 Provides a serializable type of endpoint address that is WS-Addressing V1 compliant and that enables it to be exposed as part of the service contract. Inheritance Object EndpointAddress10 Implements IXmlSerializable Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class EndpointAddress10 : Object Remarks The <xref:CoreWCF.EndpointAddress> is not serializable nor is it tied to a particular version of the WS-Addressing specification. This class provides a WS-Addressing V1 compliant wrapper for the <xref:CoreWCF.EndpointAddress> that is serializable (implements the <xref:System.Runtime.Serialization.ISerializable> interface) and bound to the WS-Addressing V1 wire format. The <xref:CoreWCF.EndpointAddress10.FromEndpointAddress%28CoreWCF.EndpointAddress%29> method does the wrapping and the <xref:CoreWCF.EndpointAddress10.ToEndpointAddress%2A> method does the unwrapping, allowing the recovery of the endpoint address after it is serialized on the wire. Windows Communication Foundation (WCF) also supplies a class that provides a serializable type, <xref:CoreWCF.EndpointAddressAugust2004>, which is WS-Addressing August 2004 compliant for legacy purposes. Methods FromEndpointAddress(EndpointAddress) Declaration public static EndpointAddress10 FromEndpointAddress(EndpointAddress address) Parameters Type Name Description EndpointAddress address Returns Type Description EndpointAddress10 GetSchema(XmlSchemaSet) Declaration public static XmlQualifiedName GetSchema(XmlSchemaSet xmlSchemaSet) Parameters Type Name Description XmlSchemaSet xmlSchemaSet Returns Type Description XmlQualifiedName ToEndpointAddress() Declaration public EndpointAddress ToEndpointAddress() Returns Type Description EndpointAddress Implements System.Xml.Serialization.IXmlSerializable"
  },
  "api-corewcf/CoreWCF.EndpointAddressAugust2004.html": {
    "href": "api-corewcf/CoreWCF.EndpointAddressAugust2004.html",
    "title": "Class EndpointAddressAugust2004",
    "keywords": "Class EndpointAddressAugust2004 Provides a serializable type of endpoint address that is compliant with the version of WS-Addressing published in August 2004 and that enables it to be exposed as part of the service contract. Inheritance Object EndpointAddressAugust2004 Implements IXmlSerializable Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class EndpointAddressAugust2004 : Object Remarks The <xref:CoreWCF.EndpointAddress> is not serializable nor is it tied to a particular version of the WS-Addressing specification. Windows Communication Foundation (WCF) supplies a class that provides a serializable type, <xref:CoreWCF.EndpointAddress10>, which is WS-Addressing V1 compliant. This class provides a WS-Addressing August 2004 compliant wrapper for the <xref:CoreWCF.EndpointAddress> that is serializable and bound to a particular wire format for legacy purposes. The <xref:CoreWCF.EndpointAddressAugust2004.FromEndpointAddress%28CoreWCF.EndpointAddress%29> method does the wrapping and the <xref:CoreWCF.EndpointAddressAugust2004.ToEndpointAddress%2A> method does the unwrapping, allowing the recovery of the endpoint address after being serialized on the wire. Methods FromEndpointAddress(EndpointAddress) Declaration public static EndpointAddressAugust2004 FromEndpointAddress(EndpointAddress address) Parameters Type Name Description EndpointAddress address Returns Type Description EndpointAddressAugust2004 GetSchema(XmlSchemaSet) Declaration public static XmlQualifiedName GetSchema(XmlSchemaSet xmlSchemaSet) Parameters Type Name Description XmlSchemaSet xmlSchemaSet Returns Type Description XmlQualifiedName ToEndpointAddress() Declaration public EndpointAddress ToEndpointAddress() Returns Type Description EndpointAddress Implements System.Xml.Serialization.IXmlSerializable"
  },
  "api-corewcf/CoreWCF.EndpointAddressBuilder.html": {
    "href": "api-corewcf/CoreWCF.EndpointAddressBuilder.html",
    "title": "Class EndpointAddressBuilder",
    "keywords": "Class EndpointAddressBuilder A factory for producing new (immutable) endpoint addresses with specific property values. Inheritance Object EndpointAddressBuilder Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class EndpointAddressBuilder : Object Remarks The new endpoint address can have its property values initialized from the property values of an existing endpoint address using the <xref:CoreWCF.EndpointAddressBuilder.%23ctor%28CoreWCF.EndpointAddress%29> constructor. The endpoint addresses created can have their URI and identity values set using the <xref:CoreWCF.EndpointAddressBuilder.Uri%2A> and <xref:CoreWCF.EndpointAddressBuilder.Identity%2A> properties of the endpoint address builder. Note that <xref:CoreWCF.EndpointAddress> is an immutable class. Constructors EndpointAddressBuilder() Declaration public EndpointAddressBuilder() EndpointAddressBuilder(EndpointAddress) Declaration public EndpointAddressBuilder(EndpointAddress address) Parameters Type Name Description EndpointAddress address Properties Headers Declaration public Collection<AddressHeader> Headers { get; } Property Value Type Description Collection < AddressHeader > Identity Declaration public EndpointIdentity Identity { get; set; } Property Value Type Description EndpointIdentity Uri Declaration public Uri Uri { get; set; } Property Value Type Description Uri Methods GetReaderAtExtensions() Declaration public XmlDictionaryReader GetReaderAtExtensions() Returns Type Description XmlDictionaryReader GetReaderAtMetadata() Declaration public XmlDictionaryReader GetReaderAtMetadata() Returns Type Description XmlDictionaryReader SetExtensionReader(XmlDictionaryReader) Declaration public void SetExtensionReader(XmlDictionaryReader reader) Parameters Type Name Description XmlDictionaryReader reader SetMetadataReader(XmlDictionaryReader) Declaration public void SetMetadataReader(XmlDictionaryReader reader) Parameters Type Name Description XmlDictionaryReader reader ToEndpointAddress() Declaration public EndpointAddress ToEndpointAddress() Returns Type Description EndpointAddress"
  },
  "api-corewcf/CoreWCF.EndpointIdentity.html": {
    "href": "api-corewcf/CoreWCF.EndpointIdentity.html",
    "title": "Class EndpointIdentity",
    "keywords": "Class EndpointIdentity An abstract class that when implemented provides an identity that enables the authentication of an endpoint by clients that exchange messages with it. Inheritance Object EndpointIdentity SpnEndpointIdentity UpnEndpointIdentity X509CertificateEndpointIdentity Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public abstract class EndpointIdentity : Object Remarks The value of the identity for an endpoint can be set with constructors of <xref:CoreWCF.EndpointAddress>, where its value can also be accessed as a read-only <xref:CoreWCF.EndpointAddress.Identity%2A> property. Constructors EndpointIdentity() Declaration protected EndpointIdentity() Methods CreateIdentity(Claim) Declaration public static EndpointIdentity CreateIdentity(Claim identity) Parameters Type Name Description Claim identity Returns Type Description EndpointIdentity CreateX509CertificateIdentity(X509Certificate2) Declaration public static EndpointIdentity CreateX509CertificateIdentity(X509Certificate2 certificate) Parameters Type Name Description X509Certificate2 certificate Returns Type Description EndpointIdentity Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32"
  },
  "api-corewcf/CoreWCF.EndpointNotFoundException.html": {
    "href": "api-corewcf/CoreWCF.EndpointNotFoundException.html",
    "title": "Class EndpointNotFoundException",
    "keywords": "Class EndpointNotFoundException The exception that is thrown when a remote endpoint could not be found or reached. Inheritance Object CommunicationException EndpointNotFoundException Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class EndpointNotFoundException : CommunicationException Remarks The endpoint may not be found or reachable because the remote endpoint is down, the remote endpoint is unreachable, or because the remote network is unreachable. This exception derives from <xref:CoreWCF.CommunicationException> that represents a class of recoverable errors that may be thrown during communication between endpoints and that robust client and service Windows Communication Foundation (WCF) applications are expected to handle. To prevent a handler for the <xref:CoreWCF.CommunicationException> handler from catching the more specific <xref:CoreWCF.EndpointNotFoundException>, catch this exception prior to handling <xref:CoreWCF.CommunicationException>. Constructors EndpointNotFoundException() Declaration public EndpointNotFoundException() EndpointNotFoundException(String) Declaration public EndpointNotFoundException(string message) Parameters Type Name Description String message EndpointNotFoundException(String, Exception) Declaration public EndpointNotFoundException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException"
  },
  "api-corewcf/CoreWCF.EnvelopeVersion.html": {
    "href": "api-corewcf/CoreWCF.EnvelopeVersion.html",
    "title": "Class EnvelopeVersion",
    "keywords": "Class EnvelopeVersion Contains information related to the version of SOAP associated with a message and its exchange. Inheritance Object EnvelopeVersion Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class EnvelopeVersion : Object Remarks The SOAP versions currently available are SOAP 1.1 and SOAP 1.2. There is an <xref:CoreWCF.EnvelopeVersion> for each of these versions of SOAP that can be recovered using the <xref:CoreWCF.EnvelopeVersion.Soap11%2A> and <xref:CoreWCF.EnvelopeVersion.Soap12%2A> properties. There is also a <xref:CoreWCF.EnvelopeVersion.None%2A> message version that is used to sent and receive XML messages that do not use SOAP formatting. The processing roles associated with each message version can be recovered using the <xref:CoreWCF.EnvelopeVersion.NextDestinationActorValue%2A> property and the <xref:CoreWCF.EnvelopeVersion.GetUltimateDestinationActorValues%2A> method. Properties DictionaryNamespace Declaration public XmlDictionaryString DictionaryNamespace { get; } Property Value Type Description XmlDictionaryString Namespace Declaration public string Namespace { get; } Property Value Type Description String NextDestinationActorValue Declaration public string NextDestinationActorValue { get; } Property Value Type Description String None Declaration public static EnvelopeVersion None { get; } Property Value Type Description EnvelopeVersion Soap11 Declaration public static EnvelopeVersion Soap11 { get; } Property Value Type Description EnvelopeVersion Soap12 Declaration public static EnvelopeVersion Soap12 { get; } Property Value Type Description EnvelopeVersion Methods GetUltimateDestinationActorValues() Declaration public string[] GetUltimateDestinationActorValues() Returns Type Description String [] ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api-corewcf/CoreWCF.ExceptionDetail.html": {
    "href": "api-corewcf/CoreWCF.ExceptionDetail.html",
    "title": "Class ExceptionDetail",
    "keywords": "Class ExceptionDetail Represents fault detail information. Inheritance Object ExceptionDetail Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class ExceptionDetail : Object Remarks The <xref:CoreWCF.ExceptionDetail> class is the type parameter used as the fault detail object when a <xref:CoreWCF.FaultException?displayProperty=nameWithType> is sent by a service as a result of setting the <xref:CoreWCF.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> or the <xref:CoreWCF.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> property to true . To send a <xref:CoreWCF.ExceptionDetail> object the type must be serializable. For more information on serialization options, see Specifying Data Transfer in Service Contracts . Constructors ExceptionDetail(Exception) Declaration public ExceptionDetail(Exception exception) Parameters Type Name Description Exception exception Properties HelpLink Declaration public string HelpLink { get; set; } Property Value Type Description String InnerException Declaration public ExceptionDetail InnerException { get; set; } Property Value Type Description ExceptionDetail Message Declaration public string Message { get; set; } Property Value Type Description String StackTrace Declaration public string StackTrace { get; set; } Property Value Type Description String Type Declaration public string Type { get; set; } Property Value Type Description String Methods ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api-corewcf/CoreWCF.ExceptionMapper.html": {
    "href": "api-corewcf/CoreWCF.ExceptionMapper.html",
    "title": "Class ExceptionMapper",
    "keywords": "Class ExceptionMapper Defines the mapping to be used for translating exceptions to faults. Inheritance Object ExceptionMapper Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class ExceptionMapper : Object Constructors ExceptionMapper() ExceptionMapper constructor. Declaration public ExceptionMapper() Methods FromException(Exception) Translates the input exception to a fault using the mapping defined in ExceptionMap. Declaration public virtual FaultException FromException(Exception ex) Parameters Type Name Description Exception ex The exception to be mapped to a fault. Returns Type Description FaultException The fault corresponding to the input exception. FromException(Exception, String, String) Translates the input exception to a fault using the mapping defined in ExceptionMap. Declaration public virtual FaultException FromException(Exception ex, string soapNamespace, string trustNamespace) Parameters Type Name Description Exception ex The exception to be mapped to a fault. String soapNamespace The SOAP Namespace to be used when generating the mapped fault. String trustNamespace The WS-Trust Namespace to be used when generating the mapped fault. Returns Type Description FaultException The fault corresponding to the input exception. HandleSecurityTokenProcessingException(Exception) Determines whether an exception that occurred during the processing of a security token should be handled using the defined ExceptionMap. Declaration public virtual bool HandleSecurityTokenProcessingException(Exception ex) Parameters Type Name Description Exception ex The input exception. Returns Type Description Boolean A boolean value indicating whether the exception should be handled using the defined ExceptionMap."
  },
  "api-corewcf/CoreWCF.ExtensionCollection-1.html": {
    "href": "api-corewcf/CoreWCF.ExtensionCollection-1.html",
    "title": "Class ExtensionCollection<T>",
    "keywords": "Class ExtensionCollection<T> Represents a collection of extensions. Inheritance Object SynchronizedCollection < IExtension <T>> ExtensionCollection<T> Implements IList < IExtension <T>> IList ICollection IExtensionCollection <T> ICollection < IExtension <T>> IEnumerable < IExtension <T>> IEnumerable Inherited Members SynchronizedCollection<IExtension<T>>.Add(IExtension<T>) SynchronizedCollection<IExtension<T>>.Clear() SynchronizedCollection<IExtension<T>>.CopyTo(IExtension<T>[], Int32) SynchronizedCollection<IExtension<T>>.Contains(IExtension<T>) SynchronizedCollection<IExtension<T>>.GetEnumerator() SynchronizedCollection<IExtension<T>>.IndexOf(IExtension<T>) SynchronizedCollection<IExtension<T>>.Insert(Int32, IExtension<T>) SynchronizedCollection<IExtension<T>>.Remove(IExtension<T>) SynchronizedCollection<IExtension<T>>.RemoveAt(Int32) SynchronizedCollection<IExtension<T>>.Count SynchronizedCollection<IExtension<T>>.Items SynchronizedCollection<IExtension<T>>.SyncRoot SynchronizedCollection<IExtension<T>>.Item[Int32] Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class ExtensionCollection<T> : SynchronizedCollection<IExtension<T>>, IExtensionCollection<T> where T : IExtensibleObject<T> Type Parameters Name Description T Remarks Typically, implementations of <xref:CoreWCF.IExtensibleObject%601?displayProperty=nameWithType> return an <xref:CoreWCF.ExtensionCollection%601> from the <xref:CoreWCF.IExtensibleObject%601.Extensions%2A?displayProperty=nameWithType> property. Constructors ExtensionCollection(T) Declaration public ExtensionCollection(T owner) Parameters Type Name Description T owner ExtensionCollection(T, Object) Declaration public ExtensionCollection(T owner, object syncRoot) Parameters Type Name Description T owner Object syncRoot Methods ClearItems() Declaration protected override void ClearItems() Overrides CoreWCF.Collections.Generic.SynchronizedCollection<CoreWCF.IExtension<T>>.ClearItems() Find<TE>() Declaration public TE Find<TE>() Returns Type Description TE Type Parameters Name Description TE FindAll<TE>() Declaration public Collection<TE> FindAll<TE>() Returns Type Description Collection <TE> Type Parameters Name Description TE InsertItem(Int32, IExtension<T>) Declaration protected override void InsertItem(int index, IExtension<T> item) Parameters Type Name Description Int32 index IExtension <T> item Overrides CoreWCF.Collections.Generic.SynchronizedCollection<CoreWCF.IExtension<T>>.InsertItem(System.Int32, CoreWCF.IExtension<T>) RemoveItem(Int32) Declaration protected override void RemoveItem(int index) Parameters Type Name Description Int32 index Overrides CoreWCF.Collections.Generic.SynchronizedCollection<CoreWCF.IExtension<T>>.RemoveItem(System.Int32) SetItem(Int32, IExtension<T>) Declaration protected override void SetItem(int index, IExtension<T> item) Parameters Type Name Description Int32 index IExtension <T> item Overrides CoreWCF.Collections.Generic.SynchronizedCollection<CoreWCF.IExtension<T>>.SetItem(System.Int32, CoreWCF.IExtension<T>) Implements System.Collections.Generic.IList<T> System.Collections.IList System.Collections.ICollection IExtensionCollection<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api-corewcf/CoreWCF.FaultCode.html": {
    "href": "api-corewcf/CoreWCF.FaultCode.html",
    "title": "Class FaultCode",
    "keywords": "Class FaultCode Represents a SOAP fault code. Inheritance Object FaultCode Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class FaultCode : Object Remarks Fault code provides a machine-readable identifier that can be used to programmatically identify the error condition and respond as appropriate. The SOAP specifications define the following fault codes specific to SOAP 1.1 and 1.2. SOAP 1.1. VersionMismatch , MustUnderstand , Client , and Server . SOAP 1.2. VersionMismatch , MustUnderstand , DataEncodingUnknown , Sender , and Receiver . In addition to those fault codes defined by the SOAP specifications, Windows Communication Foundation (WCF) uses fault codes defined by each Web services specification that it implements. Constructors FaultCode(String) Declaration public FaultCode(string name) Parameters Type Name Description String name FaultCode(String, FaultCode) Declaration public FaultCode(string name, FaultCode subCode) Parameters Type Name Description String name FaultCode subCode FaultCode(String, String) Declaration public FaultCode(string name, string ns) Parameters Type Name Description String name String ns FaultCode(String, String, FaultCode) Declaration public FaultCode(string name, string ns, FaultCode subCode) Parameters Type Name Description String name String ns FaultCode subCode Properties IsPredefinedFault Declaration public bool IsPredefinedFault { get; } Property Value Type Description Boolean IsReceiverFault Declaration public bool IsReceiverFault { get; } Property Value Type Description Boolean IsSenderFault Declaration public bool IsSenderFault { get; } Property Value Type Description Boolean Name Declaration public string Name { get; } Property Value Type Description String Namespace Declaration public string Namespace { get; } Property Value Type Description String SubCode Declaration public FaultCode SubCode { get; } Property Value Type Description FaultCode Methods CreateReceiverFaultCode(FaultCode) Declaration public static FaultCode CreateReceiverFaultCode(FaultCode subCode) Parameters Type Name Description FaultCode subCode Returns Type Description FaultCode CreateReceiverFaultCode(String, String) Declaration public static FaultCode CreateReceiverFaultCode(string name, string ns) Parameters Type Name Description String name String ns Returns Type Description FaultCode CreateSenderFaultCode(FaultCode) Declaration public static FaultCode CreateSenderFaultCode(FaultCode subCode) Parameters Type Name Description FaultCode subCode Returns Type Description FaultCode CreateSenderFaultCode(String, String) Declaration public static FaultCode CreateSenderFaultCode(string name, string ns) Parameters Type Name Description String name String ns Returns Type Description FaultCode"
  },
  "api-corewcf/CoreWCF.FaultContractAttribute.html": {
    "href": "api-corewcf/CoreWCF.FaultContractAttribute.html",
    "title": "Class FaultContractAttribute",
    "keywords": "Class FaultContractAttribute Inheritance Object FaultContractAttribute Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class FaultContractAttribute : Attribute Constructors FaultContractAttribute(Type) Declaration public FaultContractAttribute(Type detailType) Parameters Type Name Description Type detailType Properties Action Declaration public string Action { get; set; } Property Value Type Description String DetailType Declaration public Type DetailType { get; } Property Value Type Description Type Name Declaration public string Name { get; set; } Property Value Type Description String Namespace Declaration public string Namespace { get; set; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.FaultException.html": {
    "href": "api-corewcf/CoreWCF.FaultException.html",
    "title": "Class FaultException",
    "keywords": "Class FaultException Represents a SOAP fault. Inheritance Object CommunicationException FaultException NetDispatcherFaultException FaultException<TDetail> WebFaultException Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class FaultException : CommunicationException Remarks In a service, use the <xref:CoreWCF.FaultException> class to create an untyped fault to return to the client for debugging purposes. In a client, catch <xref:CoreWCF.FaultException> objects to handle unknown or generic faults, such as those returned by a service with the <xref:CoreWCF.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A> property set to true . Because <xref:CoreWCF.FaultException> extends <xref:CoreWCF.CommunicationException>, remember to catch any <xref:CoreWCF.FaultException> objects prior to catching <xref:CoreWCF.CommunicationException> objects if you want to catch them separately. Note Duplex services can also catch <xref:CoreWCF.FaultException> objects returned from their interaction with a duplex client. In general, it is strongly recommended that you use the <xref:CoreWCF.FaultContractAttribute> to design your services to return strongly-typed SOAP faults (and not managed exception objects) for all fault cases in which you decide the client requires fault information. However, use the <xref:CoreWCF.FaultException> in the following situations: To send SOAP faults from a service for debugging purposes. To catch SOAP faults on a client when the faults are not part of the service contract. Throw <xref:CoreWCF.FaultException> objects when you want the string to be passed to the constructor and retrieved by the client by calling the <xref:CoreWCF.FaultException%601.ToString%2A?displayProperty=nameWithType> method. If you specify a fault contract of type <xref:CoreWCF.FaultException%601?displayProperty=nameWithType> where the type parameter is <xref:System.String?displayProperty=nameWithType>, the string value is available as the <xref:CoreWCF.FaultException%601.Detail%2A?displayProperty=nameWithType> property and not by calling <xref:CoreWCF.FaultException%601.ToString%2A?displayProperty=nameWithType>. For details, see Specifying and Handling Faults in Contracts and Services . Constructors FaultException() Declaration public FaultException() FaultException(MessageFault) Declaration public FaultException(MessageFault fault) Parameters Type Name Description MessageFault fault FaultException(MessageFault, String) Declaration public FaultException(MessageFault fault, string action) Parameters Type Name Description MessageFault fault String action FaultException(FaultReason) Declaration public FaultException(FaultReason reason) Parameters Type Name Description FaultReason reason FaultException(FaultReason, FaultCode) Declaration public FaultException(FaultReason reason, FaultCode code) Parameters Type Name Description FaultReason reason FaultCode code FaultException(FaultReason, FaultCode, String) Declaration public FaultException(FaultReason reason, FaultCode code, string action) Parameters Type Name Description FaultReason reason FaultCode code String action FaultException(SerializationInfo, StreamingContext) Declaration protected FaultException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context FaultException(String) Declaration public FaultException(string reason) Parameters Type Name Description String reason FaultException(String, FaultCode) Declaration public FaultException(string reason, FaultCode code) Parameters Type Name Description String reason FaultCode code FaultException(String, FaultCode, String) Declaration public FaultException(string reason, FaultCode code, string action) Parameters Type Name Description String reason FaultCode code String action Properties Action Declaration public string Action { get; } Property Value Type Description String Code Declaration public FaultCode Code { get; } Property Value Type Description FaultCode Message Declaration public override string Message { get; } Property Value Type Description String Reason Declaration public FaultReason Reason { get; } Property Value Type Description FaultReason Methods CreateFault(MessageFault, String, Type[]) Declaration public static FaultException CreateFault(MessageFault messageFault, string action, params Type[] faultDetailTypes) Parameters Type Name Description MessageFault messageFault String action Type [] faultDetailTypes Returns Type Description FaultException CreateFault(MessageFault, Type[]) Declaration public static FaultException CreateFault(MessageFault messageFault, params Type[] faultDetailTypes) Parameters Type Name Description MessageFault messageFault Type [] faultDetailTypes Returns Type Description FaultException CreateMessageFault() Declaration public virtual MessageFault CreateMessageFault() Returns Type Description MessageFault GetObjectData(SerializationInfo, StreamingContext) Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context"
  },
  "api-corewcf/CoreWCF.FaultException-1.html": {
    "href": "api-corewcf/CoreWCF.FaultException-1.html",
    "title": "Class FaultException<TDetail>",
    "keywords": "Class FaultException<TDetail> Used in a client application to catch contractually-specified SOAP faults. Inheritance Object CommunicationException FaultException FaultException<TDetail> WebFaultException<T> Inherited Members FaultException.CreateFault(MessageFault, Type[]) FaultException.CreateFault(MessageFault, String, Type[]) FaultException.Action FaultException.Code FaultException.Message FaultException.Reason Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class FaultException<TDetail> : FaultException Type Parameters Name Description TDetail Remarks Catch the <xref:CoreWCF.FaultException%601> object in a Windows Communication Foundation (WCF) client application to handle a SOAP fault that has been contractually specified in an operation contract. Typical deployed services use the <xref:CoreWCF.FaultContractAttribute> to formally specify all SOAP faults that a client can expect to receive in the normal course of an operation. Error information in a <xref:CoreWCF.FaultContractAttribute> appears as a <xref:CoreWCF.FaultException%601> (where the typeparameter is the serializable error object specified in the operation's <xref:CoreWCF.FaultContractAttribute>) when it arrives at a client application. The <xref:CoreWCF.FaultContractAttribute> can be used to specify SOAP faults for both two-way service methods and for asynchronous method pairs. Because <xref:CoreWCF.FaultException%601> is both a <xref:CoreWCF.FaultException> and therefore a <xref:CoreWCF.CommunicationException>, to catch specified SOAP faults make sure you catch the <xref:CoreWCF.FaultException%601> types prior to the <xref:CoreWCF.FaultException> and <xref:CoreWCF.CommunicationException> types or handle the specified exceptions in one of those exception handlers. Note If you use <xref:CoreWCF.FaultContractAttribute?displayProperty=nameWithType> to specify a <xref:CoreWCF.FaultException%601> where the type parameter is a <xref:System.String?displayProperty=nameWithType>, the string value is assigned to the <xref:CoreWCF.FaultException%601.Detail%2A> property in the client application; clients cannot retrieve that string by calling the <xref:CoreWCF.FaultException%601.ToString%2A?displayProperty=nameWithType> method. To have the string value returned when the client application calls <xref:System.Exception.ToString%2A?displayProperty=nameWithType>, throw a <xref:CoreWCF.FaultException?displayProperty=nameWithType> exception inside the operation and pass the string to the constructor. In general, it is recommended that detail types be custom serializable types appropriate to the fault and not a <xref:System.String?displayProperty=nameWithType>. Constructors FaultException(TDetail) Declaration public FaultException(TDetail detail) Parameters Type Name Description TDetail detail FaultException(TDetail, FaultReason) Declaration public FaultException(TDetail detail, FaultReason reason) Parameters Type Name Description TDetail detail FaultReason reason FaultException(TDetail, FaultReason, FaultCode) Declaration public FaultException(TDetail detail, FaultReason reason, FaultCode code) Parameters Type Name Description TDetail detail FaultReason reason FaultCode code FaultException(TDetail, FaultReason, FaultCode, String) Declaration public FaultException(TDetail detail, FaultReason reason, FaultCode code, string action) Parameters Type Name Description TDetail detail FaultReason reason FaultCode code String action FaultException(TDetail, String) Declaration public FaultException(TDetail detail, string reason) Parameters Type Name Description TDetail detail String reason FaultException(TDetail, String, FaultCode) Declaration public FaultException(TDetail detail, string reason, FaultCode code) Parameters Type Name Description TDetail detail String reason FaultCode code FaultException(TDetail, String, FaultCode, String) Declaration public FaultException(TDetail detail, string reason, FaultCode code, string action) Parameters Type Name Description TDetail detail String reason FaultCode code String action FaultException(SerializationInfo, StreamingContext) Declaration protected FaultException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context Properties Detail Declaration public TDetail Detail { get; } Property Value Type Description TDetail Methods CreateMessageFault() Declaration public override MessageFault CreateMessageFault() Returns Type Description MessageFault Overrides FaultException.CreateMessageFault() GetObjectData(SerializationInfo, StreamingContext) Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context Overrides FaultException.GetObjectData(SerializationInfo, StreamingContext) ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api-corewcf/CoreWCF.FaultReason.html": {
    "href": "api-corewcf/CoreWCF.FaultReason.html",
    "title": "Class FaultReason",
    "keywords": "Class FaultReason Provides a text description of a SOAP fault. Inheritance Object FaultReason Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class FaultReason : Object Remarks The <xref:CoreWCF.FaultReason> class contains a set of <xref:CoreWCF.FaultReasonText?displayProperty=nameWithType> objects, each of which contains a description of the fault in a specific language. Constructors FaultReason(FaultReasonText) Declaration public FaultReason(FaultReasonText translation) Parameters Type Name Description FaultReasonText translation FaultReason(IEnumerable<FaultReasonText>) Declaration public FaultReason(IEnumerable<FaultReasonText> translations) Parameters Type Name Description IEnumerable < FaultReasonText > translations FaultReason(String) Declaration public FaultReason(string text) Parameters Type Name Description String text Methods GetMatchingTranslation() Declaration public FaultReasonText GetMatchingTranslation() Returns Type Description FaultReasonText GetMatchingTranslation(CultureInfo) Declaration public FaultReasonText GetMatchingTranslation(CultureInfo cultureInfo) Parameters Type Name Description CultureInfo cultureInfo Returns Type Description FaultReasonText ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api-corewcf/CoreWCF.FaultReasonText.html": {
    "href": "api-corewcf/CoreWCF.FaultReasonText.html",
    "title": "Class FaultReasonText",
    "keywords": "Class FaultReasonText Represents the text of the reason of a SOAP fault. Inheritance Object FaultReasonText Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class FaultReasonText : Object Remarks Use the <xref:CoreWCF.FaultReasonText> class to specify the text of the SOAP fault reason. Constructors FaultReasonText(String) Declaration public FaultReasonText(string text) Parameters Type Name Description String text FaultReasonText(String, String) Declaration public FaultReasonText(string text, string xmlLang) Parameters Type Name Description String text String xmlLang Properties Text Declaration public string Text { get; } Property Value Type Description String XmlLang Declaration public string XmlLang { get; } Property Value Type Description String Methods Matches(CultureInfo) Declaration public bool Matches(CultureInfo cultureInfo) Parameters Type Name Description CultureInfo cultureInfo Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.HostNameComparisonMode.html": {
    "href": "api-corewcf/CoreWCF.HostNameComparisonMode.html",
    "title": "Class HostNameComparisonMode",
    "keywords": "Class HostNameComparisonMode Specifies how the host name should be used in URI comparisons when dispatching an incoming message to a service endpoint. Inheritance Object HostNameComparisonMode Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class HostNameComparisonMode : Enum Remarks The value is used to specify the URI matching rules used by transports such as HTTP, Net.Tcp, and Net.Pipe when dispatching incoming messages. Configure the value of the <xref:CoreWCF.HostNameComparisonMode> for a standard binding using one of the preceding transports, such as <xref:CoreWCF.BasicHttpBinding>, using the corresponding <xref:CoreWCF.HttpBindingBase.HostNameComparisonMode%2A> property. Configure the value of the <xref:CoreWCF.HostNameComparisonMode> for a binding element using one of the preceding transports, such as <xref:CoreWCF.Channels.HttpTransportBindingElement>, using the corresponding <xref:CoreWCF.Channels.HttpTransportBindingElement.HostNameComparisonMode%2A> property. Each value of the <xref:CoreWCF.HostNameComparisonMode> corresponds to a specific type of matching rule. The sequence of matching rules attempted is always ordered as follows: StrongWildcard Exact WeakWildcard The first value, StrongWildcard, ignores the host name when matching and it takes the highest precedence of the three different matching modes. It is the default value for a WCF system-provided binding or binding element. This indicates that a service endpoint can be reached using any valid host name. For example, if MyService is hosted using http://localhost/MyService , it is still reachable using http://www.adatum.com/MyService because the (presumably valid) host name, \"adatum.com\", is ignored. Note that the port is a wildcard here as well. The second value, Exact, requires that an exact match is found with the URI specified, including the hostname, if no strong match is found. This mode, for example, does not perform equivalence between short hostnames and fully-qualified domain names. This allows hostnames to be used as match criteria in the scenarios where multiple hosts are assigned a single IP address and it enables different services to be hosted on the same machine with distinct endpoints. Note that the port is a wildcard here as well. The third value, WeakWildcard, matches by ignoring the hostname if no strong or exact match was found. The behavior is the same as for StrongWildcard other than the order of matching: it runs after the strong and exact bindings have been tried. Note These values have no effect when used inside of the Internet Information Services (IIS) or Windows Process Activation Service (WAS) hosting environment. In those cases, WCF uses whatever hostname comparison mode is provided by the IIS Web Site hosting the WCF services. Fields Exact Declaration public const HostNameComparisonMode Exact Field Value Type Description HostNameComparisonMode StrongWildcard Declaration public const HostNameComparisonMode StrongWildcard Field Value Type Description HostNameComparisonMode value__ Declaration public int value__ Field Value Type Description Int32 WeakWildcard Declaration public const HostNameComparisonMode WeakWildcard Field Value Type Description HostNameComparisonMode"
  },
  "api-corewcf/CoreWCF.html": {
    "href": "api-corewcf/CoreWCF.html",
    "title": "Namespace CoreWCF",
    "keywords": "Namespace CoreWCF Classes ActionNotSupportedException This exception is typically thrown on the client when the action related to the operation invoked does not match any action of operations in the server. AddressAlreadyInUseException The exception that is thrown when an address is unavailable because it is already in use. AddressFilterMode Specifies the type of match semantics used by the dispatcher to route incoming messages to the correct endpoint. AuthorizeRoleAttribute BasicHttpBinding Represents a binding that a Windows Communication Foundation (WCF) service can use to configure and expose endpoints that are able to communicate with ASMX-based Web services and clients and other services that conform to the WS-I Basic Profile 1.1. BasicHttpMessageCredentialType Enumerates credential types the client can authenticate with when security is enabled in the BasicHttpBinding binding. BasicHttpMessageSecurity Configures message-level security settings for BasicHttpBinding . BasicHttpSecurity Configures the security settings of a basicHttpBinding binding. CallbackBehaviorAttribute Configures a callback service implementation in a client application. CommunicationException Represents a communication error in either the service or client application. CommunicationObjectAbortedException The exception that is thrown when the call is to an ICommunicationObject object that has aborted. CommunicationObjectFaultedException The exception that is thrown when a call is made to a communication object that has faulted. CommunicationState Defines the states in which an can exist. ConcurrencyMode Specifies the concurrency options for the properties in a conceptual model. DataContractFormatAttribute Instructs the Windows Communication Foundation (WCF) infrastructure to use the . DBNull Represents a nonexistent value. This class cannot be inherited. EndpointAddress Provides a unique network address that a client uses to communicate with a service endpoint. EndpointAddress10 Provides a serializable type of endpoint address that is WS-Addressing V1 compliant and that enables it to be exposed as part of the service contract. EndpointAddressAugust2004 Provides a serializable type of endpoint address that is compliant with the version of WS-Addressing published in August 2004 and that enables it to be exposed as part of the service contract. EndpointAddressBuilder A factory for producing new (immutable) endpoint addresses with specific property values. EndpointIdentity An abstract class that when implemented provides an identity that enables the authentication of an endpoint by clients that exchange messages with it. EndpointNotFoundException The exception that is thrown when a remote endpoint could not be found or reached. EnvelopeVersion Contains information related to the version of SOAP associated with a message and its exchange. ExceptionDetail Represents fault detail information. ExceptionMapper Defines the mapping to be used for translating exceptions to faults. ExtensionCollection<T> Represents a collection of extensions. FaultCode Represents a SOAP fault code. FaultContractAttribute FaultException Represents a SOAP fault. FaultException<TDetail> Used in a client application to catch contractually-specified SOAP faults. FaultReason Provides a text description of a SOAP fault. FaultReasonText Represents the text of the reason of a SOAP fault. HostNameComparisonMode Specifies how the host name should be used in URI comparisons when dispatching an incoming message to a service endpoint. HttpBindingBase Specifies the base HTTP binding HttpClientCredentialType Enumerates the valid credential types for HTTP clients. HttpTransportSecurity Represents the transport-level security settings for the . ImpersonationOption Specifies the impersonation behavior for a service operation on a service instance. InjectedAttribute InstanceContext Represents the context information for a service instance. InstanceContextMode Specifies the number of service instances available for handling calls that are contained in incoming messages. MessageBodyMemberAttribute Specifies that a member is serialized as an element inside the SOAP body. MessageContractAttribute Defines a strongly-typed class that corresponds to a SOAP message. MessageContractMemberAttribute Declares the base members for and . MessageCredentialType Enumerates the valid message credential types. MessageHeader<T> Represents the content of a SOAP header. MessageHeaderArrayAttribute Specifies that the default wrapper element in the SOAP message must not be written around array types in a header element. MessageHeaderAttribute Specifies that a data member is a SOAP message header. MessageHeaderException The exception that is thrown when the expectations regarding headers of a SOAP message are not satisfied when the message is processed. MessageParameterAttribute Controls the name of the request and response parameter names. Cannot be used with or message contracts. MessageSecurityOverHttp Enables setting message-level security properties on the wsDualHttpBinding binding. MessageSecurityVersion An abstract container class that, when implemented by several of its static properties, contains version information for security components. NetHttpBinding Specifies settings for . NetHttpMessageEncoding Specifies the Net Http message encoding. NetTcpBinding A secure, reliable binding suitable for cross-machine communication. NetTcpSecurity Specifies the types of transport-level and message-level security used by an endpoint configured with a . NonDualMessageSecurityOverHttp Represents the security settings of the wsHttpBinding binding. OperationBehaviorAttribute Specifies the local execution behavior of a service method. OperationContext Provides access to the execution context of a service method. OperationContractAttribute Indicates that a method defines an operation that is part of a service contract in a Windows Communication Foundation (WCF) application. OperationFormatStyle Represents the SOAP style that determines how the WSDL metadata for the service is formatted. OperationFormatUse Determines the format of the message. ProtocolException The exception seen on the client that is thrown when communication with the remote party is impossible due to mismatched data transfer protocols. QuotaExceededException The exception that is thrown when a message quota has been exceeded. ReleaseInstanceMode Specifies when the system recycles the service object in the operation invocation process. SecureConversationDec2005Dictionary SecureConversationDictionary SecurityMode Determines the security settings for a binding. ServerTooBusyException The exception that is thrown when a server is too busy to accept a message. ServiceActivationException The exception that is thrown when a service fails to activate. ServiceAuthenticationManager Represents a service authentication manager. ServiceAuthorizationManager Provides authorization access checking for service operations. ServiceBehaviorAttribute Specifies the internal execution behavior of a service contract implementation. ServiceContractAttribute Indicates that an interface or a class defines a service contract in a Windows Communication Foundation (WCF) application. ServiceHostBase Extends the class to implement hosts that expose custom programming models. ServiceKnownTypeAttribute Specifies known types to be used by a service when serializing or deserializing. ServiceRequestDelegate ServiceSecurityContext Represents the security context of a remote party. On the client, represents the service identity and, on the service, represents the client identity. SessionMode Specifies the values available to indicate the support for reliable sessions that a contract requires or supports. SpnEndpointIdentity Represents a service principal name (SPN) for an identity when the binding uses Kerberos. TcpClientCredentialType Enumerates the valid credential types for TCP clients. TcpTransportSecurity Provides properties that control authentication parameters and protection level for the TCP transport. TransferMode Indicates whether a channel uses streamed or buffered modes for the transfer of request and response messages. UnknownMessageReceivedEventArgs Contains the message received by a channel and cannot be associated with any callback operation or pending request. UpnEndpointIdentity Represents a user principal name (UPN) for an identity which is used when the binding utilizes the SSPINegotiate authentication mode. UriSchemeKeyedCollection Provides a thread-safe collection that contains URIs that are keyed by their transport scheme name. UriTemplate A class that represents a Uniform Resource Identifier (URI) template. UriTemplateEquivalenceComparer A class used to compare instances for structural (instead of reference) equivalence. UriTemplateMatch A class that represents the results of a match operation on a instance. UriTemplateMatchException Represents an error when matching a to a . UriTemplateTable A class that represents an associative set of objects. WebHttpBinding A binding used to configure endpoints for Windows Communication Foundation (WCF) Web services that are exposed through HTTP requests instead of SOAP messages. WebHttpSecurity Specifies the types of security available to a service endpoint configured to receive HTTP requests. WebHttpSecurityMode Defines the modes of security that can be used to configure a service endpoint to receive HTTP requests. WS2007FederationHttpBinding A secure and interoperable binding that derives from and supports federated security. WSFederationHttpBinding A secure and interoperable binding that supports federated security. WSFederationHttpSecurity Specifies the security settings for the . This class cannot be inherited. WSFederationHttpSecurityMode Specifies the different security modes for . WSHttpBinding Represents an interoperable binding that supports distributed transactions and secure, reliable sessions. WSHttpBindingBase Provides the base class with members common to the and the . WSHTTPSecurity Represents the security settings for the . WSMessageEncoding Specifies whether Message Transmission Optimization Mechanism (MTOM) or text is used to encode SOAP messages. X509CertificateEndpointIdentity Represents a certificate identity for the service endpoint. Clients that attempt to communicate with that service endpoint should authenticate the service based on the certificate provided in the endpoint identity. XmlSerializerFormatAttribute Instructs the Windows Communication Foundation (WCF) infrastructure to use the instead of the . Interfaces IAuthorizeOperation IClientChannel Defines the behavior of outbound request and request/reply channels used by client applications. ICommunicationObject Defines the contract for the basic state machine for all communication-oriented objects in the system, including channels, the channel managers, factories, listeners, and dispatchers, and service hosts. IContextChannel Defines the interface for the context control of a channel. IDefaultCommunicationTimeouts Defines the interface for specifying communication timeouts used by channels, channel managers such as channel listeners and channel factories, and service hosts IExtensibleObject<T> Enable an object to participate in custom behavior, such as registering for events, or watching state transitions. IExtension<T> Enables an object to extend another object through aggregation. IExtensionCollection<T> A collection of the objects that allow for retrieving the by its type. IOperationContractAttributeProvider"
  },
  "api-corewcf/CoreWCF.HttpBindingBase.html": {
    "href": "api-corewcf/CoreWCF.HttpBindingBase.html",
    "title": "Class HttpBindingBase",
    "keywords": "Class HttpBindingBase Specifies the base HTTP binding Inheritance Object Binding HttpBindingBase BasicHttpBinding NetHttpBinding Implements IDefaultCommunicationTimeouts Inherited Members Binding.CanBuildServiceDispatcher<TChannel>(BindingParameterCollection) Binding.BuildServiceDispatcher<TChannel>(BindingParameterCollection, IServiceDispatcher) Binding.BuildServiceDispatcher<TChannel>(Uri, BindingParameterCollection, IServiceDispatcher) Binding.BuildServiceDispatcher<TChannel>(Uri, String, BindingParameterCollection, IServiceDispatcher) Binding.CreateBindingElements() Binding.GetProperty<T>(BindingParameterCollection) Binding.CloseTimeout Binding.Name Binding.Namespace Binding.OpenTimeout Binding.ReceiveTimeout Binding.MessageVersion Binding.SendTimeout Namespace : CoreWCF Assembly : CoreWCF.Http.dll Syntax public abstract class HttpBindingBase : Binding, IDefaultCommunicationTimeouts Remarks To be added. Properties MaxBufferSize Gets or sets the maximum size, in bytes, for a buffer that receives messages from the channel Declaration public int MaxBufferSize { get; set; } Property Value Type Description Int32 The maximum size, in bytes, for a buffer that receives messages from the channel. MaxReceivedMessageSize Gets or sets the maximum size, in bytes, for a message that can be received on a channel configured with this binding. Declaration public long MaxReceivedMessageSize { get; set; } Property Value Type Description Int64 The maximum size, in bytes, for a message that can be received on a channel configured with this binding. ReaderQuotas Gets or sets the constraints on the complexity of SOAP messages that can be processed by endpoints configured with this binding. Declaration public XmlDictionaryReaderQuotas ReaderQuotas { get; set; } Property Value Type Description XmlDictionaryReaderQuotas The constraints on the complexity of SOAP messages that can be processed by endpoints configured with this binding. Scheme Gets the URI transport scheme for the channels and listeners that are configured with this binding Declaration public override string Scheme { get; } Property Value Type Description String The URI transport scheme for the channels and listeners that are configured with this binding Overrides Binding.Scheme TextEncoding Gets or sets the character encoding that is used for the message text. Declaration public Encoding TextEncoding { get; set; } Property Value Type Description Encoding The character encoding that is used for the message text TransferMode Gets or sets a value that indicates whether messages are sent buffered or streamed Declaration public TransferMode TransferMode { get; set; } Property Value Type Description TransferMode One of the enumeration values of TransferMode that indicates whether messages are sent buffered or streamed. Implements IDefaultCommunicationTimeouts"
  },
  "api-corewcf/CoreWCF.HttpClientCredentialType.html": {
    "href": "api-corewcf/CoreWCF.HttpClientCredentialType.html",
    "title": "Class HttpClientCredentialType",
    "keywords": "Class HttpClientCredentialType Enumerates the valid credential types for HTTP clients. Inheritance Object HttpClientCredentialType Namespace : CoreWCF Assembly : CoreWCF.Http.dll Syntax public sealed class HttpClientCredentialType : Enum Remarks This enumeration is used by <xref:CoreWCF.HttpTransportSecurity.ClientCredentialType%2A> to specify the type of client credential to be used for authentication. Note that if <xref:CoreWCF.SecurityMode> is set to <xref:CoreWCF.SecurityMode.TransportWithMessageCredential>, then the value of <xref:CoreWCF.HttpClientCredentialType> is ignored. Fields Basic Declaration public const HttpClientCredentialType Basic Field Value Type Description HttpClientCredentialType Certificate Declaration public const HttpClientCredentialType Certificate Field Value Type Description HttpClientCredentialType Digest Declaration public const HttpClientCredentialType Digest Field Value Type Description HttpClientCredentialType InheritedFromHost Declaration public const HttpClientCredentialType InheritedFromHost Field Value Type Description HttpClientCredentialType None Declaration public const HttpClientCredentialType None Field Value Type Description HttpClientCredentialType Ntlm Declaration public const HttpClientCredentialType Ntlm Field Value Type Description HttpClientCredentialType value__ Declaration public int value__ Field Value Type Description Int32 Windows Declaration public const HttpClientCredentialType Windows Field Value Type Description HttpClientCredentialType"
  },
  "api-corewcf/CoreWCF.HttpTransportSecurity.html": {
    "href": "api-corewcf/CoreWCF.HttpTransportSecurity.html",
    "title": "Class HttpTransportSecurity",
    "keywords": "Class HttpTransportSecurity Represents the transport-level security settings for the . Inheritance Object HttpTransportSecurity Namespace : CoreWCF Assembly : CoreWCF.Http.dll Syntax public sealed class HttpTransportSecurity : Object Remarks This class is used by <xref:CoreWCF.WSHttpSecurity.Transport%2A> to set the transport-level security settings for a binding. Constructors HttpTransportSecurity() Declaration public HttpTransportSecurity() Properties ClientCredentialType Declaration public HttpClientCredentialType ClientCredentialType { get; set; } Property Value Type Description HttpClientCredentialType ExtendedProtectionPolicy Declaration public ExtendedProtectionPolicy ExtendedProtectionPolicy { get; set; } Property Value Type Description ExtendedProtectionPolicy Realm Declaration public string Realm { get; set; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.IAuthorizeOperation.html": {
    "href": "api-corewcf/CoreWCF.IAuthorizeOperation.html",
    "title": "Interface IAuthorizeOperation",
    "keywords": "Interface IAuthorizeOperation Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public interface IAuthorizeOperation Methods BuildClaim(OperationDescription, DispatchOperation) Declaration void BuildClaim(OperationDescription operationDescription, DispatchOperation dispatchOperation) Parameters Type Name Description OperationDescription operationDescription DispatchOperation dispatchOperation"
  },
  "api-corewcf/CoreWCF.IClientChannel.html": {
    "href": "api-corewcf/CoreWCF.IClientChannel.html",
    "title": "Interface IClientChannel",
    "keywords": "Interface IClientChannel Defines the behavior of outbound request and request/reply channels used by client applications. Inherited Members IContextChannel.InputSession IContextChannel.LocalAddress IContextChannel.OperationTimeout IContextChannel.OutputSession IContextChannel.RemoteAddress IContextChannel.SessionId IChannel.GetProperty<T>() IChannel.ChannelDispatcher ICommunicationObject.Abort() ICommunicationObject.CloseAsync() ICommunicationObject.CloseAsync(CancellationToken) ICommunicationObject.OpenAsync() ICommunicationObject.OpenAsync(CancellationToken) ICommunicationObject.State ICommunicationObject.Closed ICommunicationObject.Closing ICommunicationObject.Faulted ICommunicationObject.Opened ICommunicationObject.Opening IExtensibleObject<IContextChannel>.Extensions Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public interface IClientChannel : IContextChannel, IChannel, ICommunicationObject, IExtensibleObject<IContextChannel> Remarks The <xref:CoreWCF.IClientChannel> interface defines the operations supported by all channels returned by a call to <xref:CoreWCF.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType>. Use the <xref:CoreWCF.IClientChannel> methods and properties to inspect and modify the outbound typed channel. The ServiceModel Metadata Utility Tool (Svcutil.exe) exports both a <xref:CoreWCF.ClientBase%601> class and a service contract interface by creating a contract interface that inherits from both the target service contract and <xref:CoreWCF.IClientChannel>, enabling you to use the extended contract as both the proxy to the service and to access the client channel. For more information, see WCF Client Architecture . For examples of its appearance in generated client code files, see Understanding Generated Client Code . Events UnknownMessageReceived Declaration event EventHandler<UnknownMessageReceivedEventArgs> UnknownMessageReceived Event Type Type Description EventHandler < UnknownMessageReceivedEventArgs >"
  },
  "api-corewcf/CoreWCF.ICommunicationObject.html": {
    "href": "api-corewcf/CoreWCF.ICommunicationObject.html",
    "title": "Interface ICommunicationObject",
    "keywords": "Interface ICommunicationObject Defines the contract for the basic state machine for all communication-oriented objects in the system, including channels, the channel managers, factories, listeners, and dispatchers, and service hosts. Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public interface ICommunicationObject Remarks The <xref:CoreWCF.ICommunicationObject> interface defines: A set of open, close and abort methods for initiating state transitions: <xref:CoreWCF.ICommunicationObject.Open%2A> <xref:CoreWCF.ICommunicationObject.Close%2A> <xref:CoreWCF.ICommunicationObject.Abort%2A> Asynchronous versions of the open and close methods: <xref:CoreWCF.ICommunicationObject.BeginOpen%2A> <xref:CoreWCF.ICommunicationObject.EndOpen%28System.IAsyncResult%29> <xref:CoreWCF.ICommunicationObject.BeginClose%2A> <xref:CoreWCF.ICommunicationObject.EndClose%2A> A set of events that provide notifications of state transitions: <xref:CoreWCF.ICommunicationObject.Opening> <xref:CoreWCF.ICommunicationObject.Opened> <xref:CoreWCF.ICommunicationObject.Closing> <xref:CoreWCF.ICommunicationObject.Closed> <xref:CoreWCF.ICommunicationObject.Faulted> A common <xref:CoreWCF.ICommunicationObject.State%2A> property for inspecting the state of an object Properties State Declaration CommunicationState State { get; } Property Value Type Description CommunicationState Methods Abort() Declaration void Abort() CloseAsync() Declaration Task CloseAsync() Returns Type Description Task CloseAsync(CancellationToken) Declaration Task CloseAsync(CancellationToken token) Parameters Type Name Description CancellationToken token Returns Type Description Task OpenAsync() Declaration Task OpenAsync() Returns Type Description Task OpenAsync(CancellationToken) Declaration Task OpenAsync(CancellationToken token) Parameters Type Name Description CancellationToken token Returns Type Description Task Events Closed Declaration event EventHandler Closed Event Type Type Description EventHandler Closing Declaration event EventHandler Closing Event Type Type Description EventHandler Faulted Declaration event EventHandler Faulted Event Type Type Description EventHandler Opened Declaration event EventHandler Opened Event Type Type Description EventHandler Opening Declaration event EventHandler Opening Event Type Type Description EventHandler"
  },
  "api-corewcf/CoreWCF.IContextChannel.html": {
    "href": "api-corewcf/CoreWCF.IContextChannel.html",
    "title": "Interface IContextChannel",
    "keywords": "Interface IContextChannel Defines the interface for the context control of a channel. Inherited Members IChannel.GetProperty<T>() IChannel.ChannelDispatcher ICommunicationObject.Abort() ICommunicationObject.CloseAsync() ICommunicationObject.CloseAsync(CancellationToken) ICommunicationObject.OpenAsync() ICommunicationObject.OpenAsync(CancellationToken) ICommunicationObject.State ICommunicationObject.Closed ICommunicationObject.Closing ICommunicationObject.Faulted ICommunicationObject.Opened ICommunicationObject.Opening IExtensibleObject<IContextChannel>.Extensions Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public interface IContextChannel : IChannel, ICommunicationObject, IExtensibleObject<IContextChannel> Remarks [!include[untrusted-data-interface-note](~/includes/untrusted-data-interface-note.md)] The <xref:CoreWCF.IContextChannel> defines the controls for the context of a channel. This includes the <xref:CoreWCF.IContextChannel.SessionId%2A>, <xref:CoreWCF.IContextChannel.InputSession%2A>, <xref:CoreWCF.IContextChannel.OutputSession%2A>, and <xref:CoreWCF.IContextChannel.AllowOutputBatching%2A> for the channel, and the <xref:CoreWCF.IContextChannel.LocalAddress%2A> and <xref:CoreWCF.IContextChannel.RemoteAddress%2A> for the endpoints participating in the session. The <xref:CoreWCF.IContextChannel> interface forms part of the <xref:CoreWCF.IServiceChannel> and <xref:CoreWCF.IClientChannel> interfaces and of the <xref:CoreWCF.IDuplexContextChannel> interface. Properties InputSession Declaration IInputSession InputSession { get; } Property Value Type Description IInputSession LocalAddress Declaration EndpointAddress LocalAddress { get; } Property Value Type Description EndpointAddress OperationTimeout Declaration TimeSpan OperationTimeout { get; set; } Property Value Type Description TimeSpan OutputSession Declaration IOutputSession OutputSession { get; } Property Value Type Description IOutputSession RemoteAddress Declaration EndpointAddress RemoteAddress { get; } Property Value Type Description EndpointAddress SessionId Declaration string SessionId { get; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.IDefaultCommunicationTimeouts.html": {
    "href": "api-corewcf/CoreWCF.IDefaultCommunicationTimeouts.html",
    "title": "Interface IDefaultCommunicationTimeouts",
    "keywords": "Interface IDefaultCommunicationTimeouts Defines the interface for specifying communication timeouts used by channels, channel managers such as channel listeners and channel factories, and service hosts Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public interface IDefaultCommunicationTimeouts Remarks This interface has four read-only properties that provide default timeout values for the open, send, receive, and close methods that can be called on a communication object. Each implementation is responsible for obtaining the default values in whatever manner is appropriate for the implementation. This interface is implemented by ChannelBase , the base implementation for writing custom channels, and the ChannelManagerBase , the base implementation for writing custom channel managers which derive from ChannelFactoryBase and ChannelListenerBase . The interface is also implemented by the Binding class and then inherited from there by CustomBinding and the system-provided bindings, such as BasicHttpBinding . When you use channels directly, you have the ability to explicitly specify timeouts on a per-channel or per-operation-basis, or on any other custom basis. When using the channel model, timeouts are quite accessible when you want to control them. When using the service model, on the other hand, you program against services and contracts, and timeouts are more in the background. They are controlled by the infrastructure machinery which flows timeouts from place to place on your behalf. IDefaultCommunicationTimeouts is one mechanism for providing that flow Properties CloseTimeout Gets the interval of time after which the close method, invoked by a communication object, times out Declaration TimeSpan CloseTimeout { get; } Property Value Type Description TimeSpan The TimeSpan that specifies the interval of time to wait for the close method to time out. Remarks All operations that are potentially lengthy must have a timeout. Methods that don't take explicit timeouts, must delegate to those that do with default timeouts or must not do any work that blocks. Timeouts are the total limit for high-level operations for which they are to complete, so any retries must be limited to the time not already consumed by earlier tries. OpenTimeout Gets the interval of time after which the open method, invoked by a communication object, times out. Declaration TimeSpan OpenTimeout { get; } Property Value Type Description TimeSpan The TimeSpan that specifies the interval of time to wait for the open method to time out. ReceiveTimeout Gets the interval of time after which the receive method, invoked by a communication object, times out Declaration TimeSpan ReceiveTimeout { get; } Property Value Type Description TimeSpan The TimeSpan that specifies the interval of time to wait for the receive method to time out SendTimeout Gets the interval of time after which the send method, invoked by a communication object, times out Declaration TimeSpan SendTimeout { get; } Property Value Type Description TimeSpan The TimeSpan that specifies the interval of time to wait for the send method to time out."
  },
  "api-corewcf/CoreWCF.IdentityModel.Claims.AuthenticationInformation.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Claims.AuthenticationInformation.html",
    "title": "Class AuthenticationInformation",
    "keywords": "Class AuthenticationInformation The authentication information that an authority asserted when creating a token for a subject. Inheritance Object AuthenticationInformation Namespace : CoreWCF.IdentityModel.Claims Assembly : CoreWCF.Primitives.dll Syntax public class AuthenticationInformation : Object Constructors AuthenticationInformation() Initializes a new instance of the AuthenticationInformation class. Declaration public AuthenticationInformation() Properties Address Gets or sets the address of the authority that created the token. Declaration public string Address { get; set; } Property Value Type Description String AuthorizationContexts Gets the used by the authenticating authority when issuing tokens. Declaration public Collection<AuthenticationContext> AuthorizationContexts { get; } Property Value Type Description Collection < AuthenticationContext > DnsName Gets or sets the DNS name of the authority that created the token. Declaration public string DnsName { get; set; } Property Value Type Description String NotOnOrAfter Gets or sets the time that the session referred to in the session index MUST be considered ended. Declaration public Nullable<DateTime> NotOnOrAfter { get; set; } Property Value Type Description Nullable < DateTime > Session Gets or sets the session index that describes the session between the authority and the client. Declaration public string Session { get; set; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.IdentityModel.Claims.Claim.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Claims.Claim.html",
    "title": "Class Claim",
    "keywords": "Class Claim Represents a claim that is associated with an entity. Inheritance Object Claim Namespace : CoreWCF.IdentityModel.Claims Assembly : CoreWCF.Primitives.dll Syntax public class Claim : Object Remarks The Identity Model is a claims-based authorization system. Claims describe the capabilities associated with some entity in the system, often a user of that system. The set of claims associated with a given entity can be thought of as a key. The particular claims define the shape of that key; much like a physical key is used to open a lock in a door. In this way, claims are used to gain access to resources. Access to a given protected resource is determined by comparing the claims required to access that resource with the claims associated with the entity that attempts access. A claim is the expression of a right with respect to a particular value. A right could be read, write, or possess. A value could be a database, a file, a mailbox, or a property. Claims also have a claim type. The combination of claim type and right provides the mechanism for capabilities being specified with respect to the value. For example, a claim of type file with the right read over the value biography.doc indicates that the entity with such a claim has read access to the file biography.doc. A claim of type name with the right <xref:System.IdentityModel.Claims.Rights.PossessProperty%2A> over the value Martin indicates that the entity with the claim possesses a Name property with the value Martin . Although various claim types and rights are defined as part of Identity Model, the system is extensible. The various systems building on top of the Identity Model infrastructure can define claim types and rights as required. Constructors Claim(String, Object, String) Declaration public Claim(string claimType, object resource, string right) Parameters Type Name Description String claimType Object resource String right Properties ClaimType Declaration public string ClaimType { get; } Property Value Type Description String DefaultComparer Declaration public static IEqualityComparer<Claim> DefaultComparer { get; } Property Value Type Description IEqualityComparer < Claim > Resource Declaration public object Resource { get; } Property Value Type Description Object Right Declaration public string Right { get; } Property Value Type Description String System Declaration public static Claim System { get; } Property Value Type Description Claim Methods CreateDnsClaim(String) Declaration public static Claim CreateDnsClaim(string dns) Parameters Type Name Description String dns Returns Type Description Claim CreateHashClaim(Byte[]) Declaration public static Claim CreateHashClaim(byte[] hash) Parameters Type Name Description Byte [] hash Returns Type Description Claim CreateMailAddressClaim(MailAddress) Declaration public static Claim CreateMailAddressClaim(MailAddress mailAddress) Parameters Type Name Description MailAddress mailAddress Returns Type Description Claim CreateNameClaim(String) Declaration public static Claim CreateNameClaim(string name) Parameters Type Name Description String name Returns Type Description Claim CreateRsaClaim(RSA) Declaration public static Claim CreateRsaClaim(RSA rsa) Parameters Type Name Description RSA rsa Returns Type Description Claim CreateSpnClaim(String) Declaration public static Claim CreateSpnClaim(string spn) Parameters Type Name Description String spn Returns Type Description Claim CreateThumbprintClaim(Byte[]) Declaration public static Claim CreateThumbprintClaim(byte[] thumbprint) Parameters Type Name Description Byte [] thumbprint Returns Type Description Claim CreateUpnClaim(String) Declaration public static Claim CreateUpnClaim(string upn) Parameters Type Name Description String upn Returns Type Description Claim CreateUriClaim(Uri) Declaration public static Claim CreateUriClaim(Uri uri) Parameters Type Name Description Uri uri Returns Type Description Claim CreateWindowsSidClaim(SecurityIdentifier) Declaration public static Claim CreateWindowsSidClaim(SecurityIdentifier sid) Parameters Type Name Description SecurityIdentifier sid Returns Type Description Claim CreateX500DistinguishedNameClaim(X500DistinguishedName) Declaration public static Claim CreateX500DistinguishedNameClaim(X500DistinguishedName x500DistinguishedName) Parameters Type Name Description X500DistinguishedName x500DistinguishedName Returns Type Description Claim Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api-corewcf/CoreWCF.IdentityModel.Claims.ClaimSet.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Claims.ClaimSet.html",
    "title": "Class ClaimSet",
    "keywords": "Class ClaimSet Represents the collection of claims that are associated with an entity. Inheritance Object ClaimSet DefaultClaimSet X509CertificateClaimSet Implements IEnumerable < Claim > IEnumerable Namespace : CoreWCF.IdentityModel.Claims Assembly : CoreWCF.Primitives.dll Syntax public abstract class ClaimSet : Object Remarks After the <xref:System.IdentityModel.Claims.ClaimSet> class has been created, it cannot be changed. Examining the content of a <xref:System.IdentityModel.Claims.ClaimSet> for particular types of claims is a common task when using claim-based authorization. To examine a <xref:System.IdentityModel.Claims.ClaimSet> for the presence of particular claims, use the <xref:System.IdentityModel.Claims.ClaimSet.FindClaims%2A> method. The method provides better performance than iterating directly over the <xref:System.IdentityModel.Claims.ClaimSet>. Constructors ClaimSet() Declaration protected ClaimSet() Properties Count Declaration public abstract int Count { get; } Property Value Type Description Int32 Issuer Declaration public abstract ClaimSet Issuer { get; } Property Value Type Description ClaimSet Item[Int32] Declaration public abstract Claim this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description Claim System Declaration public static ClaimSet System { get; } Property Value Type Description ClaimSet Windows Declaration public static ClaimSet Windows { get; } Property Value Type Description ClaimSet Methods ContainsClaim(Claim) Declaration public virtual bool ContainsClaim(Claim claim) Parameters Type Name Description Claim claim Returns Type Description Boolean ContainsClaim(Claim, IEqualityComparer<Claim>) Declaration public virtual bool ContainsClaim(Claim claim, IEqualityComparer<Claim> comparer) Parameters Type Name Description Claim claim IEqualityComparer < Claim > comparer Returns Type Description Boolean FindClaims(String, String) Declaration public abstract IEnumerable<Claim> FindClaims(string claimType, string right) Parameters Type Name Description String claimType String right Returns Type Description IEnumerable < Claim > GetEnumerator() Declaration public abstract IEnumerator<Claim> GetEnumerator() Returns Type Description IEnumerator < Claim > Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api-corewcf/CoreWCF.IdentityModel.Claims.ClaimTypes.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Claims.ClaimTypes.html",
    "title": "Class ClaimTypes",
    "keywords": "Class ClaimTypes Represents the pre-defined types of claims that an entity can claim. This class cannot be inherited. Inheritance Object ClaimTypes Namespace : CoreWCF.IdentityModel.Claims Assembly : CoreWCF.Primitives.dll Syntax public static class ClaimTypes : Object Remarks Use the <xref:System.IdentityModel.Claims.ClaimTypes> class to search for a particular type of claim in a <xref:System.IdentityModel.Claims.ClaimSet> or to create a claim. To search for a particular type of claim in a <xref:System.IdentityModel.Claims.ClaimSet>, use the <xref:System.IdentityModel.Claims.ClaimSet.FindClaims%28System.String%2CSystem.String%29> method and use the properties of this class to specify the claim type for the claimType parameter. When the constructor for the <xref:System.IdentityModel.Claims.Claim> class is used to create a new claim, use the properties of the <xref:System.IdentityModel.Claims.ClaimTypes> class to specify the claimType parameter. For many of the claim types, the <xref:System.IdentityModel.Claims.Claim> class has static properties that return a claim of a specific type. For instance, the <xref:System.IdentityModel.Claims.Claim.CreateHashClaim%28System.Byte%5B%5D%29> method returns a claim using the <xref:System.IdentityModel.Claims.ClaimTypes.Hash%2A> claim type. Properties Anonymous Declaration public static string Anonymous { get; } Property Value Type Description String Authentication Declaration public static string Authentication { get; } Property Value Type Description String AuthorizationDecision Declaration public static string AuthorizationDecision { get; } Property Value Type Description String Country Declaration public static string Country { get; } Property Value Type Description String DateOfBirth Declaration public static string DateOfBirth { get; } Property Value Type Description String DenyOnlySid Declaration public static string DenyOnlySid { get; } Property Value Type Description String Dns Declaration public static string Dns { get; } Property Value Type Description String Email Declaration public static string Email { get; } Property Value Type Description String Gender Declaration public static string Gender { get; } Property Value Type Description String GivenName Declaration public static string GivenName { get; } Property Value Type Description String Hash Declaration public static string Hash { get; } Property Value Type Description String HomePhone Declaration public static string HomePhone { get; } Property Value Type Description String Locality Declaration public static string Locality { get; } Property Value Type Description String MobilePhone Declaration public static string MobilePhone { get; } Property Value Type Description String Name Declaration public static string Name { get; } Property Value Type Description String NameIdentifier Declaration public static string NameIdentifier { get; } Property Value Type Description String OtherPhone Declaration public static string OtherPhone { get; } Property Value Type Description String PostalCode Declaration public static string PostalCode { get; } Property Value Type Description String PPID Declaration public static string PPID { get; } Property Value Type Description String Role Declaration public static string Role { get; } Property Value Type Description String Rsa Declaration public static string Rsa { get; } Property Value Type Description String Sid Declaration public static string Sid { get; } Property Value Type Description String Spn Declaration public static string Spn { get; } Property Value Type Description String StateOrProvince Declaration public static string StateOrProvince { get; } Property Value Type Description String StreetAddress Declaration public static string StreetAddress { get; } Property Value Type Description String Surname Declaration public static string Surname { get; } Property Value Type Description String System Declaration public static string System { get; } Property Value Type Description String Thumbprint Declaration public static string Thumbprint { get; } Property Value Type Description String Upn Declaration public static string Upn { get; } Property Value Type Description String Uri Declaration public static string Uri { get; } Property Value Type Description String Webpage Declaration public static string Webpage { get; } Property Value Type Description String X500DistinguishedName Declaration public static string X500DistinguishedName { get; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.IdentityModel.Claims.DefaultClaimSet.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Claims.DefaultClaimSet.html",
    "title": "Class DefaultClaimSet",
    "keywords": "Class DefaultClaimSet Provides a default implementation of the class. Inheritance Object ClaimSet DefaultClaimSet Implements IEnumerable < Claim > IEnumerable Inherited Members ClaimSet.ContainsClaim(Claim, IEqualityComparer<Claim>) ClaimSet.System ClaimSet.Windows Namespace : CoreWCF.IdentityModel.Claims Assembly : CoreWCF.Primitives.dll Syntax public class DefaultClaimSet : ClaimSet Remarks This is a concrete implementation of the <xref:System.IdentityModel.Claims.ClaimSet> abstract base class. Implementations of <xref:System.IdentityModel.Policy.IAuthorizationPolicy> can use an instance of this class to add a <xref:System.IdentityModel.Claims.ClaimSet> to an <xref:System.IdentityModel.Policy.EvaluationContext>. Constructors DefaultClaimSet(Claim[]) Declaration public DefaultClaimSet(params Claim[] claims) Parameters Type Name Description Claim [] claims DefaultClaimSet(ClaimSet, Claim[]) Declaration public DefaultClaimSet(ClaimSet issuer, params Claim[] claims) Parameters Type Name Description ClaimSet issuer Claim [] claims DefaultClaimSet(ClaimSet, IList<Claim>) Declaration public DefaultClaimSet(ClaimSet issuer, IList<Claim> claims) Parameters Type Name Description ClaimSet issuer IList < Claim > claims DefaultClaimSet(IList<Claim>) Declaration public DefaultClaimSet(IList<Claim> claims) Parameters Type Name Description IList < Claim > claims Properties Count Declaration public override int Count { get; } Property Value Type Description Int32 Overrides ClaimSet.Count Issuer Declaration public override ClaimSet Issuer { get; } Property Value Type Description ClaimSet Overrides ClaimSet.Issuer Item[Int32] Declaration public override Claim this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description Claim Overrides ClaimSet.Item[Int32] Methods ContainsClaim(Claim) Declaration public override bool ContainsClaim(Claim claim) Parameters Type Name Description Claim claim Returns Type Description Boolean Overrides ClaimSet.ContainsClaim(Claim) FindClaims(String, String) Declaration public override IEnumerable<Claim> FindClaims(string claimType, string right) Parameters Type Name Description String claimType String right Returns Type Description IEnumerable < Claim > Overrides ClaimSet.FindClaims(String, String) GetEnumerator() Declaration public override IEnumerator<Claim> GetEnumerator() Returns Type Description IEnumerator < Claim > Overrides ClaimSet.GetEnumerator() Initialize(ClaimSet, IList<Claim>) Declaration protected void Initialize(ClaimSet issuer, IList<Claim> claims) Parameters Type Name Description ClaimSet issuer IList < Claim > claims ToString() Declaration public override string ToString() Returns Type Description String Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api-corewcf/CoreWCF.IdentityModel.Claims.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Claims.html",
    "title": "Namespace CoreWCF.IdentityModel.Claims",
    "keywords": "Namespace CoreWCF.IdentityModel.Claims Classes AuthenticationInformation The authentication information that an authority asserted when creating a token for a subject. Claim Represents a claim that is associated with an entity. ClaimSet Represents the collection of claims that are associated with an entity. ClaimTypes Represents the pre-defined types of claims that an entity can claim. This class cannot be inherited. DefaultClaimSet Provides a default implementation of the class. Rights Defines the pre-defined types of rights that can be associated with a object. X509CertificateClaimSet Represents a collection of claims extracted from an X.509 certificate that are associated with an entity."
  },
  "api-corewcf/CoreWCF.IdentityModel.Claims.Rights.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Claims.Rights.html",
    "title": "Class Rights",
    "keywords": "Class Rights Defines the pre-defined types of rights that can be associated with a object. Inheritance Object Rights Namespace : CoreWCF.IdentityModel.Claims Assembly : CoreWCF.Primitives.dll Syntax public static class Rights : Object Remarks To be added. Properties Identity Declaration public static string Identity { get; } Property Value Type Description String PossessProperty Declaration public static string PossessProperty { get; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.IdentityModel.Claims.X509CertificateClaimSet.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Claims.X509CertificateClaimSet.html",
    "title": "Class X509CertificateClaimSet",
    "keywords": "Class X509CertificateClaimSet Represents a collection of claims extracted from an X.509 certificate that are associated with an entity. Inheritance Object ClaimSet X509CertificateClaimSet Implements IEnumerable < Claim > IEnumerable IDisposable Inherited Members ClaimSet.ContainsClaim(Claim, IEqualityComparer<Claim>) ClaimSet.ContainsClaim(Claim) ClaimSet.System ClaimSet.Windows Namespace : CoreWCF.IdentityModel.Claims Assembly : CoreWCF.Primitives.dll Syntax public class X509CertificateClaimSet : ClaimSet Remarks To be added. Constructors X509CertificateClaimSet(X509Certificate2) Declaration public X509CertificateClaimSet(X509Certificate2 certificate) Parameters Type Name Description X509Certificate2 certificate Properties Count Declaration public override int Count { get; } Property Value Type Description Int32 Overrides ClaimSet.Count ExpirationTime Declaration public DateTime ExpirationTime { get; } Property Value Type Description DateTime Issuer Declaration public override ClaimSet Issuer { get; } Property Value Type Description ClaimSet Overrides ClaimSet.Issuer Item[Int32] Declaration public override Claim this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description Claim Overrides ClaimSet.Item[Int32] X509Certificate Declaration public X509Certificate2 X509Certificate { get; } Property Value Type Description X509Certificate2 Methods Dispose() Declaration public void Dispose() FindClaims(String, String) Declaration public override IEnumerable<Claim> FindClaims(string claimType, string right) Parameters Type Name Description String claimType String right Returns Type Description IEnumerable < Claim > Overrides ClaimSet.FindClaims(String, String) GetEnumerator() Declaration public override IEnumerator<Claim> GetEnumerator() Returns Type Description IEnumerator < Claim > Overrides ClaimSet.GetEnumerator() ToString() Declaration public override string ToString() Returns Type Description String Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable System.IDisposable"
  },
  "api-corewcf/CoreWCF.IdentityModel.Configuration.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Configuration.html",
    "title": "Namespace CoreWCF.IdentityModel.Configuration",
    "keywords": "Namespace CoreWCF.IdentityModel.Configuration Classes IdentityConfiguration Defines the collection of configurable properties controlling the behavior of the Windows Identity Foundation. IdentityModelCaches Defines caches supported by IdentityModel for TokenReplay and SecuritySessionTokens"
  },
  "api-corewcf/CoreWCF.IdentityModel.Configuration.IdentityConfiguration.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Configuration.IdentityConfiguration.html",
    "title": "Class IdentityConfiguration",
    "keywords": "Class IdentityConfiguration Defines the collection of configurable properties controlling the behavior of the Windows Identity Foundation. Inheritance Object IdentityConfiguration Namespace : CoreWCF.IdentityModel.Configuration Assembly : CoreWCF.Primitives.dll Syntax public class IdentityConfiguration : Object Constructors IdentityConfiguration(IEnumerable<SecurityTokenHandler>) Declaration public IdentityConfiguration(IEnumerable<SecurityTokenHandler> securityTokenHandlers) Parameters Type Name Description IEnumerable < SecurityTokenHandler > securityTokenHandlers Fields DefaultCertificateValidationMode Declaration public static readonly X509CertificateValidationMode DefaultCertificateValidationMode Field Value Type Description X509CertificateValidationMode DefaultIssuerNameRegistryType Declaration public static readonly Type DefaultIssuerNameRegistryType Field Value Type Description Type DefaultMaxClockSkew Declaration public static readonly TimeSpan DefaultMaxClockSkew Field Value Type Description TimeSpan DefaultRevocationMode Declaration public static readonly X509RevocationMode DefaultRevocationMode Field Value Type Description X509RevocationMode DefaultServiceName Declaration public const string DefaultServiceName = \"\" Field Value Type Description String DefaultTrustedStoreLocation Declaration public static readonly StoreLocation DefaultTrustedStoreLocation Field Value Type Description StoreLocation Properties AudienceRestriction Gets or sets the AudienceRestriction. Declaration public AudienceRestriction AudienceRestriction { get; set; } Property Value Type Description AudienceRestriction Caches Gets the Caches configured. Declaration public IdentityModelCaches Caches { get; set; } Property Value Type Description IdentityModelCaches CertificateValidationMode Gets or sets the certificate validation mode used by handlers to validate issuer certificates Declaration public X509CertificateValidationMode CertificateValidationMode { get; set; } Property Value Type Description X509CertificateValidationMode CertificateValidator Gets or sets the certificate validator used by handlers to validate issuer certificates Declaration public X509CertificateValidator CertificateValidator { get; set; } Property Value Type Description X509CertificateValidator DetectReplayedTokens Gets or Sets detection of replaying of tokens by handlers in the default handler configuration. Declaration public bool DetectReplayedTokens { get; set; } Property Value Type Description Boolean IsInitialized Determines if Initialize() has been called. Declaration public virtual bool IsInitialized { get; set; } Property Value Type Description Boolean IssuerNameRegistry Gets or sets the IssuerNameRegistry used to resolve issuer names. Declaration public IssuerNameRegistry IssuerNameRegistry { get; set; } Property Value Type Description IssuerNameRegistry IssuerTokenResolver Gets or Sets the Issuer token resolver. Declaration public SecurityTokenResolver IssuerTokenResolver { get; set; } Property Value Type Description SecurityTokenResolver MaxClockSkew Gets or sets the maximum allowable time difference between the system clocks of the two parties that are communicating. Declaration public TimeSpan MaxClockSkew { get; set; } Property Value Type Description TimeSpan Name Gets or sets the service name of this configuration. Declaration public string Name { get; } Property Value Type Description String RevocationMode Gets or sets the revocation mode used by handlers to validate issuer certificates Declaration public X509RevocationMode RevocationMode { get; set; } Property Value Type Description X509RevocationMode SaveBootstrapContext Gets or sets if BootstrapContext is saved in the ClaimsIdentity and Sessions after token validation. Declaration public bool SaveBootstrapContext { get; set; } Property Value Type Description Boolean SecurityTokenHandlerCollectionManager The SecurityTokenHandlerCollectionManager containing the set of SecurityTokenHandler objects used for serializing and validating tokens found in WS-Trust messages. Declaration public SecurityTokenHandlerCollectionManager SecurityTokenHandlerCollectionManager { get; } Property Value Type Description SecurityTokenHandlerCollectionManager SecurityTokenHandlers The SecurityTokenHandlerCollection collection of SecurityTokenHandler objects used for serializing and validating tokens found in WS-Trust messages. If user wants to register their own token handler, they can simply add their own handler to this collection. Declaration public SecurityTokenHandlerCollection SecurityTokenHandlers { get; } Property Value Type Description SecurityTokenHandlerCollection ServiceCertificate The service certificate to initialize the ServiceTokenResolver and the SessionSecurityTokenHandler. Declaration public X509Certificate2 ServiceCertificate { get; set; } Property Value Type Description X509Certificate2 ServiceTokenResolver Gets or Sets the Service token resolver. Declaration public SecurityTokenResolver ServiceTokenResolver { get; set; } Property Value Type Description SecurityTokenResolver TokenReplayCacheExpirationPeriod Gets or Sets the expiration period for items placed in the TokenReplayCache. Declaration public TimeSpan TokenReplayCacheExpirationPeriod { get; set; } Property Value Type Description TimeSpan TrustedStoreLocation Gets or sets the trusted store location used by handlers to validate issuer certificates Declaration public StoreLocation TrustedStoreLocation { get; set; } Property Value Type Description StoreLocation Methods Initialize() Updates properties in the SecurityTokenHandlerConfiguration objects for the SecurityTokenHandlerCollection objects contained in SecurityTokenHandlerCollectionManager to be consistent with the property values on this IdentityConfiguration instance. Declaration public virtual void Initialize() Remarks This method should be invoked prior to using these token handlers for token processing. Exceptions Type Condition InvalidOperationException If this method is invoked more than once."
  },
  "api-corewcf/CoreWCF.IdentityModel.Configuration.IdentityModelCaches.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Configuration.IdentityModelCaches.html",
    "title": "Class IdentityModelCaches",
    "keywords": "Class IdentityModelCaches Defines caches supported by IdentityModel for TokenReplay and SecuritySessionTokens Inheritance Object IdentityModelCaches Namespace : CoreWCF.IdentityModel.Configuration Assembly : CoreWCF.Primitives.dll Syntax public sealed class IdentityModelCaches : Object Constructors IdentityModelCaches() Declaration public IdentityModelCaches() Properties SessionSecurityTokenCache Gets or sets the SessionSecurityTokenCache that is used to cache the SessionSecurityToken Declaration public SessionSecurityTokenCache SessionSecurityTokenCache { get; set; } Property Value Type Description SessionSecurityTokenCache TokenReplayCache Gets or sets the TokenReplayCache that is used to determine replayed token. Declaration public TokenReplayCache TokenReplayCache { get; set; } Property Value Type Description TokenReplayCache"
  },
  "api-corewcf/CoreWCF.IdentityModel.CookieTransform.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.CookieTransform.html",
    "title": "Class CookieTransform",
    "keywords": "Class CookieTransform The abstract base class for classes that apply a reversible data transform to cookie data. Inheritance Object CookieTransform DeflateCookieTransform ProtectedDataCookieTransform Namespace : CoreWCF.IdentityModel Assembly : CoreWCF.Primitives.dll Syntax public abstract class CookieTransform : Object Constructors CookieTransform() Called from constructors in derived classes to initialize the CookieTransform class. Declaration protected CookieTransform() Methods Decode(Byte[]) When overridden in a derived class, reverses the transform. Declaration public abstract byte[] Decode(byte[] encoded) Parameters Type Name Description Byte [] encoded The encoded form of the cookie. Returns Type Description Byte [] The decoded byte array. Encode(Byte[]) When overridden in a derived class, applies the transform. Declaration public abstract byte[] Encode(byte[] value) Parameters Type Name Description Byte [] value The byte array to be encoded. Returns Type Description Byte [] The encoded cookie."
  },
  "api-corewcf/CoreWCF.IdentityModel.DeflateCookieTransform.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.DeflateCookieTransform.html",
    "title": "Class DeflateCookieTransform",
    "keywords": "Class DeflateCookieTransform Provides cookie compression using DeflateStream . Inheritance Object CookieTransform DeflateCookieTransform Namespace : CoreWCF.IdentityModel Assembly : CoreWCF.Primitives.dll Syntax public sealed class DeflateCookieTransform : CookieTransform Constructors DeflateCookieTransform() Initializes a new instance of the DeflateCookieTransform class. Declaration public DeflateCookieTransform() Properties MaxDecompressedSize Gets or sets the maximum size, in bytes, of a decompressed cookie. Declaration public int MaxDecompressedSize { get; set; } Property Value Type Description Int32 The maximum size, in bytes, of a decompressed cookie. Methods Decode(Byte[]) Inflates data. Declaration public override byte[] Decode(byte[] encoded) Parameters Type Name Description Byte [] encoded Data previously returned from Encode(Byte[]) Returns Type Description Byte [] The decoded data. Overrides CookieTransform.Decode(Byte[]) Exceptions Type Condition SecurityTokenException The decompressed length is larger than MaxDecompressedSize. Encode(Byte[]) Deflates data. Declaration public override byte[] Encode(byte[] value) Parameters Type Name Description Byte [] value The data to be compressed. Returns Type Description Byte [] The compressed data. Overrides CookieTransform.Encode(Byte[])"
  },
  "api-corewcf/CoreWCF.IdentityModel.DelegatingXmlDictionaryReader.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.DelegatingXmlDictionaryReader.html",
    "title": "Class DelegatingXmlDictionaryReader",
    "keywords": "Class DelegatingXmlDictionaryReader Class wraps a given reader and delegates all XmlDictionaryReader calls to the inner wrapped reader. Inheritance Object DelegatingXmlDictionaryReader Namespace : CoreWCF.IdentityModel Assembly : CoreWCF.Primitives.dll Syntax public class DelegatingXmlDictionaryReader : XmlDictionaryReader Constructors DelegatingXmlDictionaryReader() Initializes a new instance of Declaration protected DelegatingXmlDictionaryReader() Properties AttributeCount Gets the number of Attributes at the current reader position. Declaration public override int AttributeCount { get; } Property Value Type Description Int32 BaseURI Gets the base Uri of the current node. Declaration public override string BaseURI { get; } Property Value Type Description String Depth Gets the Depth of the current node. Declaration public override int Depth { get; } Property Value Type Description Int32 EOF Gets a value indicating if reader is positioned at the end of the stream. Declaration public override bool EOF { get; } Property Value Type Description Boolean HasValue Gets a value indicating if the current node can have a System.Xml.XmlReader.Value. Declaration public override bool HasValue { get; } Property Value Type Description Boolean InnerReader Gets the wrapped inner reader. Declaration protected XmlDictionaryReader InnerReader { get; } Property Value Type Description XmlDictionaryReader IsDefault Gets a value indicating if the current node is an attribute that was generated from the default value defined in the DTD or Schema. Declaration public override bool IsDefault { get; } Property Value Type Description Boolean IsEmptyElement Gets a value indicating if the current node. Declaration public override bool IsEmptyElement { get; } Property Value Type Description Boolean Item[Int32] Gets the value of the attribute with the specified index. Declaration public override string this[int i] { get; } Parameters Type Name Description Int32 i index of the attribute. Property Value Type Description String Attribute value at the specified index. Item[String] Gets the value of the attribute with the specified System.Xml.XmlReader.Name. Declaration public override string this[string name] { get; } Parameters Type Name Description String name The qualified name of the attribute. Property Value Type Description String The value of the specified attribute. If the attribute is not found, null is returned. Item[String, String] Gets the value of the attribute with the specified System.Xml.XmlReader.LocalName and System.Xml.XmlReader.NamespaceURI from the wrapped reader. Declaration public override string this[string name, string namespaceURI] { get; } Parameters Type Name Description String name The local name of the attribute. String namespaceURI The namespace URI of the attribute. Property Value Type Description String The value of the specified attribute. If the attribute is not found, null is returned. LocalName Gets the local name of the current node. Declaration public override string LocalName { get; } Property Value Type Description String Name Gets the qualified name of the current node. Declaration public override string Name { get; } Property Value Type Description String NamespaceURI Gets the namespace URI of the current node. Declaration public override string NamespaceURI { get; } Property Value Type Description String NameTable Gets the System.Xml.XmlNameTable associated with this instance. Declaration public override XmlNameTable NameTable { get; } Property Value Type Description XmlNameTable NodeType Gets the type of the current node. Declaration public override XmlNodeType NodeType { get; } Property Value Type Description XmlNodeType Prefix Gets the prefix of the current node. Declaration public override string Prefix { get; } Property Value Type Description String QuoteChar Gets the quotation mark character used to enclose the attribute node. (\" or ') Declaration public override char QuoteChar { get; } Property Value Type Description Char ReadState Gets the System.Xml.ReadState of the reader. Declaration public override ReadState ReadState { get; } Property Value Type Description ReadState Value Gets the text value of the current node. Declaration public override string Value { get; } Property Value Type Description String ValueType Gets the Common Language Runtime (CLR) type of the curent node. Declaration public override Type ValueType { get; } Property Value Type Description Type XmlLang Gets the xml:lang scope. Declaration public override string XmlLang { get; } Property Value Type Description String XmlSpace Gets the current xml:space scope. If no xml:space scope exists, this property defaults to XmlSpace.None. Declaration public override XmlSpace XmlSpace { get; } Property Value Type Description XmlSpace Methods Close() Closes the reader and changes the System.Xml.XmlReader.ReadState to Closed. Declaration public override void Close() GetAttribute(Int32) Gets the value of the attribute at the given index. Declaration public override string GetAttribute(int i) Parameters Type Name Description Int32 i The index of the attribute. The index is 0 based index. Returns Type Description String The value of the attribute at the specified index. Remarks The method does not move the reader position. GetAttribute(String) Gets the value of the attribute with the given name. Declaration public override string GetAttribute(string name) Parameters Type Name Description String name The qualified name of the attribute. Returns Type Description String The value of the attribute. If the attribute is not found null is returned. Remarks The method does not move the reader position. GetAttribute(String, String) Gets the value of the attribute with the given name and namespace Uri. Declaration public override string GetAttribute(string name, string namespaceURI) Parameters Type Name Description String name The local name of the attribute. String namespaceURI The namespace of the attribute. Returns Type Description String The value of the attribute. If the attribute is not found null is returned. Remarks The method does not move the reader. InitializeInnerReader(XmlDictionaryReader) Initializes the Inner reader that this instance wraps. Declaration protected void InitializeInnerReader(XmlDictionaryReader innerReader) Parameters Type Name Description XmlDictionaryReader innerReader XmlDictionaryReader to wrap. LookupNamespace(String) Resolves a namespace prefix in the current element scope. Declaration public override string LookupNamespace(string prefix) Parameters Type Name Description String prefix Prefix whose namespace Uri to be resolved. Returns Type Description String The namespace Uri to which the prefix matches or null if no matching prefix is found. MoveToAttribute(Int32) Moves to the attribute with the specified index. Declaration public override void MoveToAttribute(int i) Parameters Type Name Description Int32 i The index of the attribute. MoveToAttribute(String) Moves to the attribute with the given local name. Declaration public override bool MoveToAttribute(string name) Parameters Type Name Description String name The qualified name of the attribute. Returns Type Description Boolean true if the attribute is found; otherwise, false. MoveToAttribute(String, String) Moves to the attribute with the specified System.Xml.XmlReader.LocalName and System.Xml.XmlReader.NamespaceURI. Declaration public override bool MoveToAttribute(string name, string ns) Parameters Type Name Description String name The local name of the attribute. String ns The namespace URI of the attribute. Returns Type Description Boolean true if the attribute is found; otherwise, false. MoveToElement() Moves to a node of type Element. Declaration public override bool MoveToElement() Returns Type Description Boolean true if the reader is positioned on an element else false MoveToFirstAttribute() Moves to the first attribute. Declaration public override bool MoveToFirstAttribute() Returns Type Description Boolean Returns true if the reader is positioned at a attribute else false. Remarks When returning false the reader position will not be changed. MoveToNextAttribute() Moves the reader to the next attribute. Declaration public override bool MoveToNextAttribute() Returns Type Description Boolean Returns true if the reader is positioned at an attribute else false. Remarks When returning false the reader position will not be changed. Read() Reads the next node from the stream. Declaration public override bool Read() Returns Type Description Boolean true if the next node was read successfully. ReadAttributeValue() Parses the attribute value into one or more Text, EntityReference, or EndEntity nodes. Declaration public override bool ReadAttributeValue() Returns Type Description Boolean true if there are nodes to return.false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read. ReadContentAsBase64(Byte[], Int32, Int32) Reads the content and returns the Base64 decoded binary bytes. Declaration public override int ReadContentAsBase64(byte[] buffer, int index, int count) Parameters Type Name Description Byte [] buffer The buffer into which to copy the resulting text. This value cannot be null. Int32 index The offset into the buffer where to start copying the result. Int32 count The maximum number of bytes to copy into the buffer. Returns Type Description Int32 The number of bytes written to the buffer. ReadContentAsBinHex(Byte[], Int32, Int32) Reads the content and returns the BinHex decoded binary bytes. Declaration public override int ReadContentAsBinHex(byte[] buffer, int index, int count) Parameters Type Name Description Byte [] buffer The buffer into which to copy the resulting text. This value cannot be null. Int32 index The offset into the buffer where to start copying the result. Int32 count The maximum number of bytes to copy into the buffer. Returns Type Description Int32 The number of bytes written to the buffer. ReadContentAsUniqueId() Reads the content and returns the contained string. Declaration public override UniqueId ReadContentAsUniqueId() Returns Type Description UniqueId ReadValueChunk(Char[], Int32, Int32) Reads large streams of text embedded in an XML document. Declaration public override int ReadValueChunk(char[] buffer, int index, int count) Parameters Type Name Description Char [] buffer The array of characters that serves as the buffer to which the text contents are written. This value cannot be null. Int32 index The offset within the buffer where the System.Xml.XmlReader can start to copy the results. Int32 count The maximum number of characters to copy into the buffer. The actual number of characters copied is returned from this method. Returns Type Description Int32 The number of characters read into the buffer. The value zero is returned when there is no more text content. ResolveEntity() Resolves the entity reference for EntityReference nodes. Declaration public override void ResolveEntity()"
  },
  "api-corewcf/CoreWCF.IdentityModel.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.html",
    "title": "Namespace CoreWCF.IdentityModel",
    "keywords": "Namespace CoreWCF.IdentityModel Classes CookieTransform The abstract base class for classes that apply a reversible data transform to cookie data. DeflateCookieTransform Provides cookie compression using DeflateStream . DelegatingXmlDictionaryReader Class wraps a given reader and delegates all XmlDictionaryReader calls to the inner wrapped reader. ProtectedDataCookieTransform Provides cookie integrity and confidentiality using ProtectedData . SecurityKeyIdentifierClause Represents an abstract base class for a key identifier clause. SecurityMessageSerializationException The exception that is thrown when an error occurs while serializing a security message."
  },
  "api-corewcf/CoreWCF.IdentityModel.Policy.AuthorizationContext.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Policy.AuthorizationContext.html",
    "title": "Class AuthorizationContext",
    "keywords": "Class AuthorizationContext The result of evaluating all authorization policies available from the tokens in the sent message and by calling the method. Inheritance Object AuthorizationContext Implements IAuthorizationComponent Namespace : CoreWCF.IdentityModel.Policy Assembly : CoreWCF.Primitives.dll Syntax public abstract class AuthorizationContext : Object, IAuthorizationComponent Remarks Evaluating all of the authorization policies in an authorization manager results in a set of <xref:System.IdentityModel.Claims.ClaimSet> objects. These objects make up an authorization context. An authorization context contains a set of claim set objects, an expiration time that specifies the span of time during which the authorization context is valid, and a unique identifier. The <xref:System.IdentityModel.Policy.AuthorizationContext> for the current operation can be accessed via the <xref:CoreWCF.ServiceSecurityContext.AuthorizationContext%2A> property. Constructors AuthorizationContext() Declaration protected AuthorizationContext() Properties ClaimSets Declaration public abstract ReadOnlyCollection<ClaimSet> ClaimSets { get; } Property Value Type Description ReadOnlyCollection < ClaimSet > ExpirationTime Declaration public abstract DateTime ExpirationTime { get; } Property Value Type Description DateTime Id Declaration public abstract string Id { get; } Property Value Type Description String Properties Declaration public abstract IDictionary<string, object> Properties { get; } Property Value Type Description IDictionary < String , Object > Methods CreateDefaultAuthorizationContext(IList<IAuthorizationPolicy>) Declaration public static AuthorizationContext CreateDefaultAuthorizationContext(IList<IAuthorizationPolicy> authorizationPolicies) Parameters Type Name Description IList < IAuthorizationPolicy > authorizationPolicies Returns Type Description AuthorizationContext Implements IAuthorizationComponent"
  },
  "api-corewcf/CoreWCF.IdentityModel.Policy.EvaluationContext.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Policy.EvaluationContext.html",
    "title": "Class EvaluationContext",
    "keywords": "Class EvaluationContext When overridden in a derived class, represents the results of the authorization policies that have been evaluated. Inheritance Object EvaluationContext Namespace : CoreWCF.IdentityModel.Policy Assembly : CoreWCF.Primitives.dll Syntax public abstract class EvaluationContext : Object Remarks Claims are added to an <xref:System.IdentityModel.Policy.EvaluationContext> by authorization policies. An authorization policy takes a set of claims, such as those found in a security token, and adds additional claims based on the current set. For instance, an authorization policy might evaluate a claim that contains the date of birth and add a claim that states the user is over 21 years old and add an Over21 claim to the <xref:System.IdentityModel.Policy.EvaluationContext>. Classes that implement the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface do not authorize users, but they enable the <xref:CoreWCF.ServiceAuthorizationManager> class to do so. The <xref:CoreWCF.ServiceAuthorizationManager> calls the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method for each authorization policy in effect. The <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method determines whether additional claims should be added for the user based on the current claims. An authorization policy's <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method may be called multiple times, as claims are added to the <xref:System.IdentityModel.Policy.EvaluationContext> by other authorization policies. When all authorization policies in effect are done, the <xref:CoreWCF.ServiceAuthorizationManager> class makes authorization decisions based upon the final set of claims. The <xref:CoreWCF.ServiceAuthorizationManager> class then creates an <xref:System.IdentityModel.Policy.AuthorizationContext> that contains an immutable set of claims that reflects these authorization decisions. An evaluation context contains a set of <xref:System.IdentityModel.Claims.ClaimSet> objects: an expiration time, which specifies the span of time during which the evaluation context is valid, and a unique identifier. Constructors EvaluationContext() Declaration protected EvaluationContext() Properties ClaimSets Declaration public abstract ReadOnlyCollection<ClaimSet> ClaimSets { get; } Property Value Type Description ReadOnlyCollection < ClaimSet > Generation Declaration public abstract int Generation { get; } Property Value Type Description Int32 Properties Declaration public abstract IDictionary<string, object> Properties { get; } Property Value Type Description IDictionary < String , Object > Methods AddClaimSet(IAuthorizationPolicy, ClaimSet) Declaration public abstract void AddClaimSet(IAuthorizationPolicy policy, ClaimSet claimSet) Parameters Type Name Description IAuthorizationPolicy policy ClaimSet claimSet RecordExpirationTime(DateTime) Declaration public abstract void RecordExpirationTime(DateTime expirationTime) Parameters Type Name Description DateTime expirationTime"
  },
  "api-corewcf/CoreWCF.IdentityModel.Policy.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Policy.html",
    "title": "Namespace CoreWCF.IdentityModel.Policy",
    "keywords": "Namespace CoreWCF.IdentityModel.Policy Classes AuthorizationContext The result of evaluating all authorization policies available from the tokens in the sent message and by calling the method. EvaluationContext When overridden in a derived class, represents the results of the authorization policies that have been evaluated. Interfaces IAuthorizationComponent Represents a component that is used to authorize users. IAuthorizationPolicy Defines a set of rules for authorizing a user, given a set of claims."
  },
  "api-corewcf/CoreWCF.IdentityModel.Policy.IAuthorizationComponent.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Policy.IAuthorizationComponent.html",
    "title": "Interface IAuthorizationComponent",
    "keywords": "Interface IAuthorizationComponent Represents a component that is used to authorize users. Namespace : CoreWCF.IdentityModel.Policy Assembly : CoreWCF.Primitives.dll Syntax public interface IAuthorizationComponent Remarks Authorization policies and authorization contexts, which implement the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface and derive from the <xref:System.IdentityModel.Policy.AuthorizationContext> class, respectively, implement the <xref:System.IdentityModel.Policy.IAuthorizationComponent> interface. The <xref:System.IdentityModel.Policy.IAuthorizationComponent> interface defines a unique identifier for authorization components with the <xref:System.IdentityModel.Policy.IAuthorizationComponent.Id%2A> property, which is generally used for auditing. Properties Id Declaration string Id { get; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.IdentityModel.Policy.IAuthorizationPolicy.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Policy.IAuthorizationPolicy.html",
    "title": "Interface IAuthorizationPolicy",
    "keywords": "Interface IAuthorizationPolicy Defines a set of rules for authorizing a user, given a set of claims. Inherited Members IAuthorizationComponent.Id Namespace : CoreWCF.IdentityModel.Policy Assembly : CoreWCF.Primitives.dll Syntax public interface IAuthorizationPolicy : IAuthorizationComponent Remarks Implement the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface to add or map one set of claims to another. An authorization policy examines a set of claims and adds additional claims based on the current set. For example, an authorization policy might evaluate a claim that contains the date of birth and add a claim that asserts that the user is over 21 years old and add an Over21 claim to the <xref:System.IdentityModel.Policy.EvaluationContext>. Classes that implement the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> interface do not authorize users, but they enable the <xref:CoreWCF.ServiceAuthorizationManager> class to do so. The <xref:CoreWCF.ServiceAuthorizationManager> calls the <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method for each authorization policy in effect. The <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method determines whether additional claims should be added for the user, based on the current context. An authorization policy's <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> method may be called multiple times, as claims are added to the <xref:System.IdentityModel.Policy.EvaluationContext> by other authorization policies. When all authorization policies in effect are done, the <xref:CoreWCF.ServiceAuthorizationManager> class makes authorization decisions based upon the final set of claims. The <xref:CoreWCF.ServiceAuthorizationManager> class then creates an <xref:System.IdentityModel.Policy.AuthorizationContext> that contains an immutable set of claims that reflects these authorization decisions. Properties Issuer Declaration ClaimSet Issuer { get; } Property Value Type Description ClaimSet Methods Evaluate(EvaluationContext, ref Object) Declaration bool Evaluate(EvaluationContext evaluationContext, ref object state) Parameters Type Name Description EvaluationContext evaluationContext Object state Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.IdentityModel.ProtectedDataCookieTransform.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.ProtectedDataCookieTransform.html",
    "title": "Class ProtectedDataCookieTransform",
    "keywords": "Class ProtectedDataCookieTransform Provides cookie integrity and confidentiality using ProtectedData . Inheritance Object CookieTransform ProtectedDataCookieTransform Namespace : CoreWCF.IdentityModel Assembly : CoreWCF.Primitives.dll Syntax public sealed class ProtectedDataCookieTransform : CookieTransform Remarks Due to the nature of ProtectedData , cookies which use this tranform can only be read by the same machine which wrote them. As such, this transform is not appropriate for use in applications that run on a web server farm. Constructors ProtectedDataCookieTransform(IDataProtectionProvider) Declaration public ProtectedDataCookieTransform(IDataProtectionProvider provider) Parameters Type Name Description IDataProtectionProvider provider Methods Decode(Byte[]) Declaration public override byte[] Decode(byte[] encoded) Parameters Type Name Description Byte [] encoded Returns Type Description Byte [] Overrides CookieTransform.Decode(Byte[]) Encode(Byte[]) Declaration public override byte[] Encode(byte[] value) Parameters Type Name Description Byte [] value Returns Type Description Byte [] Overrides CookieTransform.Encode(Byte[])"
  },
  "api-corewcf/CoreWCF.IdentityModel.Protocols.WSTrust.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Protocols.WSTrust.html",
    "title": "Namespace CoreWCF.IdentityModel.Protocols.WSTrust",
    "keywords": "Namespace CoreWCF.IdentityModel.Protocols.WSTrust Classes Lifetime Used in the RequestSecurityToken or RequestSecurityTokenResponse to indicated the desired or required lifetime of a token. Everything here is stored in Utc format. ProtectedKey This class are used in defining Entropy and RequestProofToken element inside the RequestSecurityToken and RequestSecurityTokenResponse. RequestedProofToken The content of a RequestedProofToken element could be EncryptedSecurityToken which means that EncryptedKey is used under the RequestedProofToken. If the security token is a regular token, such as a SCT, then its session key will be the material which gets encrypted. Another possibility is where we use combined entropy, then RequestedProofToken will only contain a ComputedKey element. RequestedSecurityToken This class defines the requested security token which is usually opaque to the token requestor. Status A class encapsulating the result of a WS-Trust request."
  },
  "api-corewcf/CoreWCF.IdentityModel.Protocols.WSTrust.Lifetime.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Protocols.WSTrust.Lifetime.html",
    "title": "Class Lifetime",
    "keywords": "Class Lifetime Used in the RequestSecurityToken or RequestSecurityTokenResponse to indicated the desired or required lifetime of a token. Everything here is stored in Utc format. Inheritance Object Lifetime Namespace : CoreWCF.IdentityModel.Protocols.WSTrust Assembly : CoreWCF.Primitives.dll Syntax public class Lifetime : Object Constructors Lifetime(DateTime, DateTime) Instantiates a LifeTime object with token creation and expiration time in Utc. Declaration public Lifetime(DateTime created, DateTime expires) Parameters Type Name Description DateTime created Token creation time in Utc. DateTime expires Token expiration time in Utc. Exceptions Type Condition ArgumentException When the given expiration time is before the given creation time. Lifetime(Nullable<DateTime>, Nullable<DateTime>) Instantiates a LifeTime object with token creation and expiration time in Utc. Declaration public Lifetime(Nullable<DateTime> created, Nullable<DateTime> expires) Parameters Type Name Description Nullable < DateTime > created Token creation time in Utc. Nullable < DateTime > expires Token expiration time in Utc. Exceptions Type Condition ArgumentException When the given expiration time is before the given creation time. Properties Created Gets the token creation time in UTC time. Declaration public Nullable<DateTime> Created { get; set; } Property Value Type Description Nullable < DateTime > Expires Gets the token expiration time in UTC time. Declaration public Nullable<DateTime> Expires { get; set; } Property Value Type Description Nullable < DateTime >"
  },
  "api-corewcf/CoreWCF.IdentityModel.Protocols.WSTrust.ProtectedKey.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Protocols.WSTrust.ProtectedKey.html",
    "title": "Class ProtectedKey",
    "keywords": "Class ProtectedKey This class are used in defining Entropy and RequestProofToken element inside the RequestSecurityToken and RequestSecurityTokenResponse. Inheritance Object ProtectedKey Namespace : CoreWCF.IdentityModel.Protocols.WSTrust Assembly : CoreWCF.Primitives.dll Syntax public class ProtectedKey : Object Constructors ProtectedKey(Byte[]) Use this constructor if we want to send the key material in clear text. Declaration public ProtectedKey(byte[] secret) Parameters Type Name Description Byte [] secret The key material that needs to be protected. ProtectedKey(Byte[], EncryptingCredentials) Use this constructor if we want to send the key material encrypted. Declaration public ProtectedKey(byte[] secret, EncryptingCredentials wrappingCredentials) Parameters Type Name Description Byte [] secret The key material that needs to be protected. EncryptingCredentials wrappingCredentials The encrypting credentials used to encrypt the key material. Properties WrappingCredentials Gets the encrypting credentials. Null means that the keys are not encrypted. Declaration public EncryptingCredentials WrappingCredentials { get; } Property Value Type Description EncryptingCredentials Methods GetKeyBytes() Gets the key material. Declaration public byte[] GetKeyBytes() Returns Type Description Byte []"
  },
  "api-corewcf/CoreWCF.IdentityModel.Protocols.WSTrust.RequestedProofToken.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Protocols.WSTrust.RequestedProofToken.html",
    "title": "Class RequestedProofToken",
    "keywords": "Class RequestedProofToken The content of a RequestedProofToken element could be EncryptedSecurityToken which means that EncryptedKey is used under the RequestedProofToken. If the security token is a regular token, such as a SCT, then its session key will be the material which gets encrypted. Another possibility is where we use combined entropy, then RequestedProofToken will only contain a ComputedKey element. Inheritance Object RequestedProofToken Namespace : CoreWCF.IdentityModel.Protocols.WSTrust Assembly : CoreWCF.Primitives.dll Syntax public class RequestedProofToken : Object Constructors RequestedProofToken(ProtectedKey) Constructs a requested proof token instance with the protected key. Declaration public RequestedProofToken(ProtectedKey protectedKey) Parameters Type Name Description ProtectedKey protectedKey The protected key which can be either binary secret or encrypted key. RequestedProofToken(Byte[]) When the requested proof token contains real key in plain text. Declaration public RequestedProofToken(byte[] secret) Parameters Type Name Description Byte [] secret The key material. RequestedProofToken(Byte[], EncryptingCredentials) When the requested proof token contains real key encrypted. Declaration public RequestedProofToken(byte[] secret, EncryptingCredentials wrappingCredentials) Parameters Type Name Description Byte [] secret The key material. EncryptingCredentials wrappingCredentials The encrypting credentials to encrypt the key material. RequestedProofToken(String) In case of combined entropy, construct a requestedprooftoken instance with computed key algorithm to specify the algorithm used to calculate the session key. Declaration public RequestedProofToken(string computedKeyAlgorithm) Parameters Type Name Description String computedKeyAlgorithm The algorithm used to computed the session key in the combined entropy case. Properties ComputedKeyAlgorithm Gets the computed key algorithm used to calculate the session key in the combined entropy case. Declaration public string ComputedKeyAlgorithm { get; } Property Value Type Description String ProtectedKey In the case when the requested proof token contains the real key, ProtectedKey getter will returns the real key bytes either encrypted or plaintext. Declaration public ProtectedKey ProtectedKey { get; } Property Value Type Description ProtectedKey"
  },
  "api-corewcf/CoreWCF.IdentityModel.Protocols.WSTrust.RequestedSecurityToken.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Protocols.WSTrust.RequestedSecurityToken.html",
    "title": "Class RequestedSecurityToken",
    "keywords": "Class RequestedSecurityToken This class defines the requested security token which is usually opaque to the token requestor. Inheritance Object RequestedSecurityToken Namespace : CoreWCF.IdentityModel.Protocols.WSTrust Assembly : CoreWCF.Primitives.dll Syntax public class RequestedSecurityToken : Object Constructors RequestedSecurityToken(SecurityToken) Creates an instance of RequestedSecurityToken using the issued token. This is usually used on the token issuer end. Declaration public RequestedSecurityToken(SecurityToken token) Parameters Type Name Description SecurityToken token The Security token requested. RequestedSecurityToken(XmlElement) Creates an instance of RequestedSecurityToken using the token xml. This is usually used on the token receiving end. Declaration public RequestedSecurityToken(XmlElement tokenAsXml) Parameters Type Name Description XmlElement tokenAsXml XML representation of the token. Properties SecurityToken Gets the issued security token when the RequestedSecurityToken was constructed using the token itself. This property getter could return null if the RequestedSecurityToken was constructed using the token xml. Declaration public SecurityToken SecurityToken { get; } Property Value Type Description SecurityToken SecurityTokenXml Returns the XML representation of the token when the RequestedSecurityToken was constructed using the token xml. This property getter could return null if the RequestedSecurityToken was constructed using a security token. Declaration public virtual XmlElement SecurityTokenXml { get; } Property Value Type Description XmlElement"
  },
  "api-corewcf/CoreWCF.IdentityModel.Protocols.WSTrust.Status.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Protocols.WSTrust.Status.html",
    "title": "Class Status",
    "keywords": "Class Status A class encapsulating the result of a WS-Trust request. Inheritance Object Status Namespace : CoreWCF.IdentityModel.Protocols.WSTrust Assembly : CoreWCF.Primitives.dll Syntax public class Status : Object Constructors Status(String, String) Creates an instance of Status Declaration public Status(string code, string reason) Parameters Type Name Description String code Status code. String reason Optional status reason. Properties Code Gets or sets the status code for the validation binding in the RSTR. Declaration public string Code { get; set; } Property Value Type Description String Reason Gets or sets the optional status reason for the validation binding in the RSTR. Declaration public string Reason { get; set; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.IdentityModel.SecurityKeyIdentifierClause.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.SecurityKeyIdentifierClause.html",
    "title": "Class SecurityKeyIdentifierClause",
    "keywords": "Class SecurityKeyIdentifierClause Represents an abstract base class for a key identifier clause. Inheritance Object SecurityKeyIdentifierClause BinaryKeyIdentifierClause EmptySecurityKeyIdentifierClause GenericXmlSecurityKeyIdentifierClause LocalIdKeyIdentifierClause RsaKeyIdentifierClause X509IssuerSerialKeyIdentifierClause SecurityContextKeyIdentifierClause Namespace : CoreWCF.IdentityModel Assembly : CoreWCF.Primitives.dll Syntax public abstract class SecurityKeyIdentifierClause : Object Remarks Typically, the <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause> does not need to be used, other than when a custom security token service is created. When a security token service returns a security token, the issued security token contains references to attached and unattached security tokens. Attached references refer to security tokens that are contained within the security header of a SOAP message and unattached references reference security tokens that are not included within the security header of a SOAP message. These references typically affirm the authenticity of the issued security token. Constructors SecurityKeyIdentifierClause(String) Declaration protected SecurityKeyIdentifierClause(string clauseType) Parameters Type Name Description String clauseType SecurityKeyIdentifierClause(String, Byte[], Int32) Declaration protected SecurityKeyIdentifierClause(string clauseType, byte[] nonce, int length) Parameters Type Name Description String clauseType Byte [] nonce Int32 length Properties CanCreateKey Declaration public virtual bool CanCreateKey { get; } Property Value Type Description Boolean ClauseType Declaration public string ClauseType { get; } Property Value Type Description String DerivationLength Declaration public int DerivationLength { get; } Property Value Type Description Int32 Id Declaration public string Id { get; set; } Property Value Type Description String Methods CreateKey() Declaration public virtual SecurityKey CreateKey() Returns Type Description SecurityKey GetDerivationNonce() Declaration public byte[] GetDerivationNonce() Returns Type Description Byte [] Matches(SecurityKeyIdentifierClause) Declaration public virtual bool Matches(SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.IdentityModel.SecurityMessageSerializationException.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.SecurityMessageSerializationException.html",
    "title": "Class SecurityMessageSerializationException",
    "keywords": "Class SecurityMessageSerializationException The exception that is thrown when an error occurs while serializing a security message. Inheritance Object SecurityMessageSerializationException Namespace : CoreWCF.IdentityModel Assembly : CoreWCF.Primitives.dll Syntax public class SecurityMessageSerializationException : SystemException Remarks To be added. Constructors SecurityMessageSerializationException() Declaration public SecurityMessageSerializationException() SecurityMessageSerializationException(SerializationInfo, StreamingContext) Declaration protected SecurityMessageSerializationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context SecurityMessageSerializationException(String) Declaration public SecurityMessageSerializationException(string message) Parameters Type Name Description String message SecurityMessageSerializationException(String, Exception) Declaration public SecurityMessageSerializationException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException"
  },
  "api-corewcf/CoreWCF.IdentityModel.Selectors.AudienceUriMode.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Selectors.AudienceUriMode.html",
    "title": "Class AudienceUriMode",
    "keywords": "Class AudienceUriMode Specifies whether the security token's should be validated. Inheritance Object AudienceUriMode Namespace : CoreWCF.IdentityModel.Selectors Assembly : CoreWCF.Primitives.dll Syntax public sealed class AudienceUriMode : Enum Remarks Use the <xref:System.IdentityModel.Selectors.AudienceUriMode> property in a federated application that utilizes a security token service (STS) that issues <xref:System.IdentityModel.Tokens.SamlSecurityToken> security tokens. When the STS issues the security token, it can specify the URI of the Web services for which the security token is intended by adding a <xref:System.IdentityModel.Tokens.SamlAudienceRestrictionCondition> to the security token. That allows the <xref:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator> for the recipient Web service to verify that the issued security token is intended for this Web service by specifying that this check should happen by doing the following: Set the <xref:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.AudienceUriMode%2A> property to Always or BearerKeyOnly. Specify the set of valid URIs, by adding the URIs to the <xref:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.AllowedAudienceUris%2A> collection. Optionally, override the <xref:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.ValidateAudienceRestriction%2A> method to specify the validation algorithm to use for the allowed URI. Fields Always Declaration public const AudienceUriMode Always Field Value Type Description AudienceUriMode BearerKeyOnly Declaration public const AudienceUriMode BearerKeyOnly Field Value Type Description AudienceUriMode Never Declaration public const AudienceUriMode Never Field Value Type Description AudienceUriMode value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.IdentityModel.Selectors.AudienceUriModeValidationHelper.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Selectors.AudienceUriModeValidationHelper.html",
    "title": "Class AudienceUriModeValidationHelper",
    "keywords": "Class AudienceUriModeValidationHelper A helper class for the class that verifies that the property is set to a valid value. Inheritance Object AudienceUriModeValidationHelper Namespace : CoreWCF.IdentityModel.Selectors Assembly : CoreWCF.Primitives.dll Syntax public static class AudienceUriModeValidationHelper : Object Remarks To be added. Methods IsDefined(AudienceUriMode) Declaration public static bool IsDefined(AudienceUriMode validationMode) Parameters Type Name Description AudienceUriMode validationMode Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.IdentityModel.Selectors.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Selectors.html",
    "title": "Namespace CoreWCF.IdentityModel.Selectors",
    "keywords": "Namespace CoreWCF.IdentityModel.Selectors Classes AudienceUriMode Specifies whether the security token's should be validated. AudienceUriModeValidationHelper A helper class for the class that verifies that the property is set to a valid value. SamlSecurityTokenAuthenticator Authenticates a security token. SecurityTokenAuthenticator Authenticates a security token. SecurityTokenManager Represents a security token manager that specifies how security tokens are provided, authenticated, and serialized. SecurityTokenProvider Represents a security token provider that handles security tokens for a SOAP message sender. SecurityTokenRequirement Specifies security token requirements. SecurityTokenResolver Represents a utility class that can retrieve security tokens or keys when you have a key identifier or key identifier clause. SecurityTokenSerializer SecurityTokenSerializer is responsible for writing and reading SecurityKeyIdentifiers, SecurityKeyIdentifierClauses and SecurityTokens. In order to read SecurityTokens the SecurityTokenSerializer may need to resolve token references using the SecurityTokenResolvers that get passed in. The SecurityTokenSerializer is stateless Exceptions: XmlException, SecurityTokenException, NotSupportedException, InvalidOperationException, ArgumentException SecurityTokenVersion Represents the specifications, such as the WS-*specifications, that security tokens are defined in. UserNamePasswordValidator Validates a username and password. UserNameSecurityTokenAuthenticator Authenticates a security token. WindowsSecurityTokenAuthenticator Uses Windows authentication to authenticate the security token. X509CertificateValidator Validates an X.509 certificate. X509SecurityTokenAuthenticator Authenticates an ."
  },
  "api-corewcf/CoreWCF.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Selectors.SamlSecurityTokenAuthenticator.html",
    "title": "Class SamlSecurityTokenAuthenticator",
    "keywords": "Class SamlSecurityTokenAuthenticator Authenticates a security token. Inheritance Object SecurityTokenAuthenticator SamlSecurityTokenAuthenticator Inherited Members SecurityTokenAuthenticator.CanValidateToken(SecurityToken) SecurityTokenAuthenticator.ValidateToken(SecurityToken) SecurityTokenAuthenticator.ValidateTokenAsync(SecurityToken) SecurityTokenAuthenticator.ValidateTokenCore(SecurityToken) Namespace : CoreWCF.IdentityModel.Selectors Assembly : CoreWCF.Primitives.dll Syntax public class SamlSecurityTokenAuthenticator : SecurityTokenAuthenticator Remarks Use the <xref:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator> class to authenticate <xref:System.IdentityModel.Tokens.SamlSecurityToken> security tokens. Constructors SamlSecurityTokenAuthenticator(IList<SecurityTokenAuthenticator>) Declaration public SamlSecurityTokenAuthenticator(IList<SecurityTokenAuthenticator> supportingAuthenticators) Parameters Type Name Description IList < SecurityTokenAuthenticator > supportingAuthenticators SamlSecurityTokenAuthenticator(IList<SecurityTokenAuthenticator>, TimeSpan) Declaration public SamlSecurityTokenAuthenticator(IList<SecurityTokenAuthenticator> supportingAuthenticators, TimeSpan maxClockSkew) Parameters Type Name Description IList < SecurityTokenAuthenticator > supportingAuthenticators TimeSpan maxClockSkew Properties AllowedAudienceUris Declaration public IList<string> AllowedAudienceUris { get; } Property Value Type Description IList < String > AudienceUriMode Declaration public AudienceUriMode AudienceUriMode { get; set; } Property Value Type Description AudienceUriMode Methods CanValidateTokenCore(SecurityToken) Declaration protected override bool CanValidateTokenCore(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description Boolean Overrides SecurityTokenAuthenticator.CanValidateTokenCore(SecurityToken) ResolveClaimSet(SecurityKeyIdentifier) Declaration public virtual ClaimSet ResolveClaimSet(SecurityKeyIdentifier keyIdentifier) Parameters Type Name Description SecurityKeyIdentifier keyIdentifier Returns Type Description ClaimSet ResolveClaimSetAsyc(SecurityToken) Declaration public virtual ValueTask<ClaimSet> ResolveClaimSetAsyc(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description ValueTask < ClaimSet > ResolveIdentity(SecurityKeyIdentifier) Declaration public virtual IIdentity ResolveIdentity(SecurityKeyIdentifier keyIdentifier) Parameters Type Name Description SecurityKeyIdentifier keyIdentifier Returns Type Description IIdentity ResolveIdentityAsync(SecurityToken) Declaration public virtual ValueTask<IIdentity> ResolveIdentityAsync(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description ValueTask < IIdentity > ValidateAudienceRestriction(SamlAudienceRestrictionCondition) Declaration protected virtual bool ValidateAudienceRestriction(SamlAudienceRestrictionCondition audienceRestrictionCondition) Parameters Type Name Description SamlAudienceRestrictionCondition audienceRestrictionCondition Returns Type Description Boolean ValidateTokenCoreAsync(SecurityToken) Declaration protected override ValueTask<ReadOnlyCollection<IAuthorizationPolicy>> ValidateTokenCoreAsync(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description ValueTask < ReadOnlyCollection < IAuthorizationPolicy >> Overrides SecurityTokenAuthenticator.ValidateTokenCoreAsync(SecurityToken)"
  },
  "api-corewcf/CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Selectors.SecurityTokenAuthenticator.html",
    "title": "Class SecurityTokenAuthenticator",
    "keywords": "Class SecurityTokenAuthenticator Authenticates a security token. Inheritance Object SecurityTokenAuthenticator SamlSecurityTokenAuthenticator UserNameSecurityTokenAuthenticator WindowsSecurityTokenAuthenticator X509SecurityTokenAuthenticator SecurityContextSecurityTokenAuthenticator Namespace : CoreWCF.IdentityModel.Selectors Assembly : CoreWCF.Primitives.dll Syntax public abstract class SecurityTokenAuthenticator : Object Remarks The <xref:System.IdentityModel.Selectors.SecurityTokenAuthenticator> class and the classes that derive from it authenticate security tokens. Typically, you would only derive a class directly from <xref:System.IdentityModel.Selectors.SecurityTokenAuthenticator> when you create a custom security token. If you wanted to override the default authentication or authorization behaviors for built-in security tokens, derive from one of the classes that derive from <xref:System.IdentityModel.Selectors.SecurityTokenAuthenticator>, such as <xref:System.IdentityModel.Selectors.SamlSecurityTokenAuthenticator>. When you derive a class from <xref:System.IdentityModel.Selectors.SecurityTokenAuthenticator>, override the following two methods: <xref:System.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenCore%2A> and <xref:System.IdentityModel.Selectors.SecurityTokenAuthenticator.CanValidateTokenCore%2A>. The <xref:System.IdentityModel.Selectors.SecurityTokenAuthenticator.CanValidateTokenCore%2A> method determines whether this security token authenticator can authenticate a specific security token. The <xref:System.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateTokenCore%2A> method authenticates the security token and establishes a set of authorization policies for authorization. The authorization policies map the claims found in the security token to claims required by the application. Constructors SecurityTokenAuthenticator() Declaration protected SecurityTokenAuthenticator() Methods CanValidateToken(SecurityToken) Declaration public bool CanValidateToken(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description Boolean CanValidateTokenCore(SecurityToken) Declaration protected abstract bool CanValidateTokenCore(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description Boolean ValidateToken(SecurityToken) Declaration public ReadOnlyCollection<IAuthorizationPolicy> ValidateToken(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description ReadOnlyCollection < IAuthorizationPolicy > ValidateTokenAsync(SecurityToken) Declaration public ValueTask<ReadOnlyCollection<IAuthorizationPolicy>> ValidateTokenAsync(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description ValueTask < ReadOnlyCollection < IAuthorizationPolicy >> ValidateTokenCore(SecurityToken) Declaration protected virtual ReadOnlyCollection<IAuthorizationPolicy> ValidateTokenCore(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description ReadOnlyCollection < IAuthorizationPolicy > ValidateTokenCoreAsync(SecurityToken) Declaration protected virtual ValueTask<ReadOnlyCollection<IAuthorizationPolicy>> ValidateTokenCoreAsync(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description ValueTask < ReadOnlyCollection < IAuthorizationPolicy >>"
  },
  "api-corewcf/CoreWCF.IdentityModel.Selectors.SecurityTokenManager.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Selectors.SecurityTokenManager.html",
    "title": "Class SecurityTokenManager",
    "keywords": "Class SecurityTokenManager Represents a security token manager that specifies how security tokens are provided, authenticated, and serialized. Inheritance Object SecurityTokenManager Namespace : CoreWCF.IdentityModel.Selectors Assembly : CoreWCF.Primitives.dll Syntax public abstract class SecurityTokenManager : Object Remarks Use the <xref:System.IdentityModel.Selectors.SecurityTokenManager> class when you need a custom security token, security token authenticator, or security token provider. Use a custom security token to handle credentials that WCF does not support. Use a custom security token authenticator when the authentication methods WCF provides are not sufficient. A <xref:System.IdentityModel.Selectors.SecurityTokenManager> class returns a security token authenticator in the <xref:System.IdentityModel.Selectors.SecurityTokenManager.CreateSecurityTokenAuthenticator%28System.IdentityModel.Selectors.SecurityTokenRequirement%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%40%29> method. A security token provider provides security tokens for outgoing SOAP messages. A <xref:System.IdentityModel.Selectors.SecurityTokenManager> class returns a security token provider in the <xref:System.IdentityModel.Selectors.SecurityTokenManager.CreateSecurityTokenProvider%28System.IdentityModel.Selectors.SecurityTokenRequirement%29> method. For more information about using custom security token authenticators and security token providers, see Custom Credential and Credential Validation . For more information about creating a custom security token, see How to: Create a Custom Token . Constructors SecurityTokenManager() Declaration protected SecurityTokenManager() Methods CreateSecurityTokenAuthenticator(SecurityTokenRequirement, out SecurityTokenResolver) Declaration public abstract SecurityTokenAuthenticator CreateSecurityTokenAuthenticator(SecurityTokenRequirement tokenRequirement, out SecurityTokenResolver outOfBandTokenResolver) Parameters Type Name Description SecurityTokenRequirement tokenRequirement SecurityTokenResolver outOfBandTokenResolver Returns Type Description SecurityTokenAuthenticator CreateSecurityTokenProvider(SecurityTokenRequirement) Declaration public abstract SecurityTokenProvider CreateSecurityTokenProvider(SecurityTokenRequirement tokenRequirement) Parameters Type Name Description SecurityTokenRequirement tokenRequirement Returns Type Description SecurityTokenProvider CreateSecurityTokenSerializer(SecurityTokenVersion) Declaration public abstract SecurityTokenSerializer CreateSecurityTokenSerializer(SecurityTokenVersion version) Parameters Type Name Description SecurityTokenVersion version Returns Type Description SecurityTokenSerializer"
  },
  "api-corewcf/CoreWCF.IdentityModel.Selectors.SecurityTokenProvider.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Selectors.SecurityTokenProvider.html",
    "title": "Class SecurityTokenProvider",
    "keywords": "Class SecurityTokenProvider Represents a security token provider that handles security tokens for a SOAP message sender. Inheritance Object SecurityTokenProvider SspiSecurityTokenProvider Namespace : CoreWCF.IdentityModel.Selectors Assembly : CoreWCF.Primitives.dll Syntax public abstract class SecurityTokenProvider : Object Remarks Use the <xref:System.IdentityModel.Selectors.SecurityTokenProvider> class when custom security tokens are required. The role of a security token provider is to get a security token when a SOAP message is sent by a client and a security token is used to authenticate the client or to protect the SOAP message. Specifically, the <xref:System.IdentityModel.Selectors.SecurityTokenProvider.GetToken%2A> method is called to get a security token. The security token provider can also be called to cancel and renew a security using the <xref:System.IdentityModel.Selectors.SecurityTokenProvider.CancelToken%2A> and <xref:System.IdentityModel.Selectors.SecurityTokenProvider.RenewToken%2A> methods. Classes that derive from the <xref:System.IdentityModel.Selectors.SecurityTokenManager> class implement the <xref:System.IdentityModel.Selectors.SecurityTokenManager.CreateSecurityTokenProvider%2A> method to determine which security token provider is required for a given security token. The <xref:CoreWCF.ClientCredentialsSecurityTokenManager> and <xref:CoreWCF.Security.ServiceCredentialsSecurityTokenManager> classes provide the default implementations for built-in security token types. For custom security token scenarios, you must derive a class from one of the <xref:System.IdentityModel.Selectors.SecurityTokenManager>, <xref:CoreWCF.ClientCredentialsSecurityTokenManager>, or <xref:CoreWCF.Security.ServiceCredentialsSecurityTokenManager> classes and provide the functionality to create the security token provider, security token authenticator, and security token serializer for the custom security token. For more information about creating a custom token, see How to: Create a Custom Token . Constructors SecurityTokenProvider() Declaration protected SecurityTokenProvider() Properties SupportsTokenCancellation Declaration public virtual bool SupportsTokenCancellation { get; } Property Value Type Description Boolean SupportsTokenRenewal Declaration public virtual bool SupportsTokenRenewal { get; } Property Value Type Description Boolean Methods CancelToken(TimeSpan, SecurityToken) Declaration public void CancelToken(TimeSpan timeout, SecurityToken token) Parameters Type Name Description TimeSpan timeout SecurityToken token CancelTokenAsync(SecurityToken, TimeSpan) Declaration public Task CancelTokenAsync(SecurityToken token, TimeSpan timeout) Parameters Type Name Description SecurityToken token TimeSpan timeout Returns Type Description Task CancelTokenCore(TimeSpan, SecurityToken) Declaration protected virtual void CancelTokenCore(TimeSpan timeout, SecurityToken token) Parameters Type Name Description TimeSpan timeout SecurityToken token CancelTokenCoreAsync(SecurityToken, TimeSpan) Declaration protected virtual Task CancelTokenCoreAsync(SecurityToken token, TimeSpan timeout) Parameters Type Name Description SecurityToken token TimeSpan timeout Returns Type Description Task GetToken(TimeSpan) Declaration public SecurityToken GetToken(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout Returns Type Description SecurityToken GetTokenAsync(CancellationToken) Declaration public Task<SecurityToken> GetTokenAsync(CancellationToken token) Parameters Type Name Description CancellationToken token Returns Type Description Task < SecurityToken > GetTokenCore(TimeSpan) Declaration protected abstract SecurityToken GetTokenCore(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout Returns Type Description SecurityToken GetTokenCoreAsync(CancellationToken) Declaration protected virtual Task<SecurityToken> GetTokenCoreAsync(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken Returns Type Description Task < SecurityToken > RenewToken(TimeSpan, SecurityToken) Declaration public SecurityToken RenewToken(TimeSpan timeout, SecurityToken tokenToBeRenewed) Parameters Type Name Description TimeSpan timeout SecurityToken tokenToBeRenewed Returns Type Description SecurityToken RenewTokenAsync(SecurityToken, TimeSpan) Declaration public Task<SecurityToken> RenewTokenAsync(SecurityToken tokenToBeRenewed, TimeSpan timeout) Parameters Type Name Description SecurityToken tokenToBeRenewed TimeSpan timeout Returns Type Description Task < SecurityToken > RenewTokenCore(TimeSpan, SecurityToken) Declaration protected virtual SecurityToken RenewTokenCore(TimeSpan timeout, SecurityToken tokenToBeRenewed) Parameters Type Name Description TimeSpan timeout SecurityToken tokenToBeRenewed Returns Type Description SecurityToken RenewTokenCoreAsync(SecurityToken, TimeSpan) Declaration protected virtual Task<SecurityToken> RenewTokenCoreAsync(SecurityToken tokenToBeRenewed, TimeSpan timeout) Parameters Type Name Description SecurityToken tokenToBeRenewed TimeSpan timeout Returns Type Description Task < SecurityToken >"
  },
  "api-corewcf/CoreWCF.IdentityModel.Selectors.SecurityTokenRequirement.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Selectors.SecurityTokenRequirement.html",
    "title": "Class SecurityTokenRequirement",
    "keywords": "Class SecurityTokenRequirement Specifies security token requirements. Inheritance Object SecurityTokenRequirement ServiceModelSecurityTokenRequirement Namespace : CoreWCF.IdentityModel.Selectors Assembly : CoreWCF.Primitives.dll Syntax public class SecurityTokenRequirement : Object Remarks Application code typically does not need to use the <xref:System.IdentityModel.Selectors.SecurityTokenRequirement> class, unless a custom security token, security token manager, security token provider, or security token authenticator are created. The <xref:System.IdentityModel.Selectors.SecurityTokenRequirement> class is used by a security token manager to specify what is required of a security token, such as the key size, key type, and how the key can be used. When a security token can be identified that matches the specified criteria, a <xref:System.IdentityModel.Selectors.SecurityTokenProvider> and <xref:System.IdentityModel.Selectors.SecurityTokenAuthenticator> can be obtained to provide security tokens for outgoing SOAP messages and to authenticate security tokens for incoming SOAP messages, respectively. For example, the default security token manager for outgoing SOAP messages has the <xref:CoreWCF.ClientCredentialsSecurityTokenManager.CreateSecurityTokenProvider%28System.IdentityModel.Selectors.SecurityTokenRequirement%29> method that takes a <xref:System.IdentityModel.Selectors.SecurityTokenRequirement> parameter that can be called to obtain a security token provider that matches the criteria specified in the security token requirement. Constructors SecurityTokenRequirement() Declaration public SecurityTokenRequirement() Properties IsOptionalTokenProperty Declaration public static string IsOptionalTokenProperty { get; } Property Value Type Description String KeySize Declaration public int KeySize { get; set; } Property Value Type Description Int32 KeySizeProperty Declaration public static string KeySizeProperty { get; } Property Value Type Description String KeyTypeProperty Declaration public static string KeyTypeProperty { get; } Property Value Type Description String KeyUsageProperty Declaration public static string KeyUsageProperty { get; } Property Value Type Description String PeerAuthenticationMode Declaration public static string PeerAuthenticationMode { get; } Property Value Type Description String Properties Declaration public IDictionary<string, object> Properties { get; } Property Value Type Description IDictionary < String , Object > RequireCryptographicToken Declaration public bool RequireCryptographicToken { get; set; } Property Value Type Description Boolean RequireCryptographicTokenProperty Declaration public static string RequireCryptographicTokenProperty { get; } Property Value Type Description String TokenType Declaration public string TokenType { get; set; } Property Value Type Description String TokenTypeProperty Declaration public static string TokenTypeProperty { get; } Property Value Type Description String Methods GetProperty<TValue>(String) Declaration public TValue GetProperty<TValue>(string propertyName) Parameters Type Name Description String propertyName Returns Type Description TValue Type Parameters Name Description TValue TryGetProperty<TValue>(String, out TValue) Declaration public bool TryGetProperty<TValue>(string propertyName, out TValue result) Parameters Type Name Description String propertyName TValue result Returns Type Description Boolean Type Parameters Name Description TValue"
  },
  "api-corewcf/CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Selectors.SecurityTokenResolver.html",
    "title": "Class SecurityTokenResolver",
    "keywords": "Class SecurityTokenResolver Represents a utility class that can retrieve security tokens or keys when you have a key identifier or key identifier clause. Inheritance Object SecurityTokenResolver IssuerTokenResolver X509CertificateStoreTokenResolver SecurityContextSecurityTokenResolver Namespace : CoreWCF.IdentityModel.Selectors Assembly : CoreWCF.Primitives.dll Syntax public abstract class SecurityTokenResolver : Object Remarks Use the <xref:System.IdentityModel.Selectors.SecurityTokenResolver> class to retrieve a key or security token when you have a key identifier or key identifier clause. The <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveToken%2A> and <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveToken%2A> methods retrieve a token given that there is a key identifier or key identifier clause. The <xref:System.IdentityModel.Selectors.SecurityTokenResolver.ResolveSecurityKey%2A> and <xref:System.IdentityModel.Selectors.SecurityTokenResolver.TryResolveSecurityKey%2A> retrieve a key given that there is a key identifier clause. The methods with a Try prefix return false when the retrieval is unsuccessful, whereas the methods without a Try prefix throw an exception. Constructors SecurityTokenResolver() Declaration protected SecurityTokenResolver() Methods CreateDefaultSecurityTokenResolver(ReadOnlyCollection<SecurityToken>, Boolean) Declaration public static SecurityTokenResolver CreateDefaultSecurityTokenResolver(ReadOnlyCollection<SecurityToken> tokens, bool canMatchLocalId) Parameters Type Name Description ReadOnlyCollection < SecurityToken > tokens Boolean canMatchLocalId Returns Type Description SecurityTokenResolver ResolveSecurityKey(SecurityKeyIdentifierClause) Declaration public SecurityKey ResolveSecurityKey(SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause Returns Type Description SecurityKey ResolveToken(SecurityKeyIdentifierClause) Declaration public SecurityToken ResolveToken(SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause Returns Type Description SecurityToken ResolveToken(SecurityKeyIdentifier) Declaration public SecurityToken ResolveToken(SecurityKeyIdentifier keyIdentifier) Parameters Type Name Description SecurityKeyIdentifier keyIdentifier Returns Type Description SecurityToken TryResolveSecurityKey(SecurityKeyIdentifierClause, out SecurityKey) Declaration public bool TryResolveSecurityKey(SecurityKeyIdentifierClause keyIdentifierClause, out SecurityKey key) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause SecurityKey key Returns Type Description Boolean TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, out SecurityKey) Declaration protected abstract bool TryResolveSecurityKeyCore(SecurityKeyIdentifierClause keyIdentifierClause, out SecurityKey key) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause SecurityKey key Returns Type Description Boolean TryResolveToken(SecurityKeyIdentifierClause, out SecurityToken) Declaration public bool TryResolveToken(SecurityKeyIdentifierClause keyIdentifierClause, out SecurityToken token) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause SecurityToken token Returns Type Description Boolean TryResolveToken(SecurityKeyIdentifier, out SecurityToken) Declaration public bool TryResolveToken(SecurityKeyIdentifier keyIdentifier, out SecurityToken token) Parameters Type Name Description SecurityKeyIdentifier keyIdentifier SecurityToken token Returns Type Description Boolean TryResolveTokenCore(SecurityKeyIdentifierClause, out SecurityToken) Declaration protected abstract bool TryResolveTokenCore(SecurityKeyIdentifierClause keyIdentifierClause, out SecurityToken token) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause SecurityToken token Returns Type Description Boolean TryResolveTokenCore(SecurityKeyIdentifier, out SecurityToken) Declaration protected abstract bool TryResolveTokenCore(SecurityKeyIdentifier keyIdentifier, out SecurityToken token) Parameters Type Name Description SecurityKeyIdentifier keyIdentifier SecurityToken token Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.IdentityModel.Selectors.SecurityTokenSerializer.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Selectors.SecurityTokenSerializer.html",
    "title": "Class SecurityTokenSerializer",
    "keywords": "Class SecurityTokenSerializer SecurityTokenSerializer is responsible for writing and reading SecurityKeyIdentifiers, SecurityKeyIdentifierClauses and SecurityTokens. In order to read SecurityTokens the SecurityTokenSerializer may need to resolve token references using the SecurityTokenResolvers that get passed in. The SecurityTokenSerializer is stateless Exceptions: XmlException, SecurityTokenException, NotSupportedException, InvalidOperationException, ArgumentException Inheritance Object SecurityTokenSerializer WSSecurityTokenSerializer Namespace : CoreWCF.IdentityModel.Selectors Assembly : CoreWCF.Primitives.dll Syntax public abstract class SecurityTokenSerializer : Object Constructors SecurityTokenSerializer() Declaration protected SecurityTokenSerializer() Methods CanReadKeyIdentifier(XmlReader) Declaration public bool CanReadKeyIdentifier(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description Boolean CanReadKeyIdentifierClause(XmlReader) Declaration public bool CanReadKeyIdentifierClause(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description Boolean CanReadKeyIdentifierClauseCore(XmlReader) Declaration protected abstract bool CanReadKeyIdentifierClauseCore(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description Boolean CanReadKeyIdentifierCore(XmlReader) Declaration protected abstract bool CanReadKeyIdentifierCore(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description Boolean CanReadToken(XmlReader) Declaration public bool CanReadToken(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description Boolean CanReadTokenCore(XmlReader) Declaration protected abstract bool CanReadTokenCore(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description Boolean CanWriteKeyIdentifier(SecurityKeyIdentifier) Declaration public bool CanWriteKeyIdentifier(SecurityKeyIdentifier keyIdentifier) Parameters Type Name Description SecurityKeyIdentifier keyIdentifier Returns Type Description Boolean CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause) Declaration public bool CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause Returns Type Description Boolean CanWriteKeyIdentifierClauseCore(SecurityKeyIdentifierClause) Declaration protected abstract bool CanWriteKeyIdentifierClauseCore(SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause Returns Type Description Boolean CanWriteKeyIdentifierCore(SecurityKeyIdentifier) Declaration protected abstract bool CanWriteKeyIdentifierCore(SecurityKeyIdentifier keyIdentifier) Parameters Type Name Description SecurityKeyIdentifier keyIdentifier Returns Type Description Boolean CanWriteToken(SecurityToken) Declaration public bool CanWriteToken(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description Boolean CanWriteTokenCore(SecurityToken) Declaration protected abstract bool CanWriteTokenCore(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description Boolean ReadKeyIdentifier(XmlReader) Declaration public SecurityKeyIdentifier ReadKeyIdentifier(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description SecurityKeyIdentifier ReadKeyIdentifierClause(XmlReader) Declaration public SecurityKeyIdentifierClause ReadKeyIdentifierClause(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description SecurityKeyIdentifierClause ReadKeyIdentifierClauseCore(XmlReader) Declaration protected abstract SecurityKeyIdentifierClause ReadKeyIdentifierClauseCore(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description SecurityKeyIdentifierClause ReadKeyIdentifierCore(XmlReader) Declaration protected abstract SecurityKeyIdentifier ReadKeyIdentifierCore(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description SecurityKeyIdentifier ReadToken(XmlReader, SecurityTokenResolver) Declaration public SecurityToken ReadToken(XmlReader reader, SecurityTokenResolver tokenResolver) Parameters Type Name Description XmlReader reader SecurityTokenResolver tokenResolver Returns Type Description SecurityToken ReadTokenCore(XmlReader, SecurityTokenResolver) Declaration protected abstract SecurityToken ReadTokenCore(XmlReader reader, SecurityTokenResolver tokenResolver) Parameters Type Name Description XmlReader reader SecurityTokenResolver tokenResolver Returns Type Description SecurityToken WriteKeyIdentifier(XmlWriter, SecurityKeyIdentifier) Declaration public void WriteKeyIdentifier(XmlWriter writer, SecurityKeyIdentifier keyIdentifier) Parameters Type Name Description XmlWriter writer SecurityKeyIdentifier keyIdentifier WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause) Declaration public void WriteKeyIdentifierClause(XmlWriter writer, SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description XmlWriter writer SecurityKeyIdentifierClause keyIdentifierClause WriteKeyIdentifierClauseCore(XmlWriter, SecurityKeyIdentifierClause) Declaration protected abstract void WriteKeyIdentifierClauseCore(XmlWriter writer, SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description XmlWriter writer SecurityKeyIdentifierClause keyIdentifierClause WriteKeyIdentifierCore(XmlWriter, SecurityKeyIdentifier) Declaration protected abstract void WriteKeyIdentifierCore(XmlWriter writer, SecurityKeyIdentifier keyIdentifier) Parameters Type Name Description XmlWriter writer SecurityKeyIdentifier keyIdentifier WriteToken(XmlWriter, SecurityToken) Declaration public void WriteToken(XmlWriter writer, SecurityToken token) Parameters Type Name Description XmlWriter writer SecurityToken token WriteTokenCore(XmlWriter, SecurityToken) Declaration protected abstract void WriteTokenCore(XmlWriter writer, SecurityToken token) Parameters Type Name Description XmlWriter writer SecurityToken token"
  },
  "api-corewcf/CoreWCF.IdentityModel.Selectors.SecurityTokenVersion.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Selectors.SecurityTokenVersion.html",
    "title": "Class SecurityTokenVersion",
    "keywords": "Class SecurityTokenVersion Represents the specifications, such as the WS-*specifications, that security tokens are defined in. Inheritance Object SecurityTokenVersion Namespace : CoreWCF.IdentityModel.Selectors Assembly : CoreWCF.Primitives.dll Syntax public abstract class SecurityTokenVersion : Object Remarks Use the <xref:System.IdentityModel.Selectors.SecurityTokenVersion> class to determine which version of the WS-* specifications that security tokens confirm to in a SOAP message. Use the <xref:System.IdentityModel.Selectors.SecurityTokenManager.CreateSecurityTokenSerializer%28System.IdentityModel.Selectors.SecurityTokenVersion%29> method to create a <xref:System.IdentityModel.Selectors.SecurityTokenSerializer> that is capable of serializing and deserializing security tokens according to the set of specifications that are associated with a class deriving from the <xref:System.IdentityModel.Selectors.SecurityTokenVersion> class. Constructors SecurityTokenVersion() Declaration protected SecurityTokenVersion() Methods GetSecuritySpecifications() Declaration public abstract ReadOnlyCollection<string> GetSecuritySpecifications() Returns Type Description ReadOnlyCollection < String >"
  },
  "api-corewcf/CoreWCF.IdentityModel.Selectors.UserNamePasswordValidator.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Selectors.UserNamePasswordValidator.html",
    "title": "Class UserNamePasswordValidator",
    "keywords": "Class UserNamePasswordValidator Validates a username and password. Inheritance Object UserNamePasswordValidator Namespace : CoreWCF.IdentityModel.Selectors Assembly : CoreWCF.Primitives.dll Syntax public abstract class UserNamePasswordValidator : Object Remarks Use the <xref:System.IdentityModel.Selectors.UserNamePasswordValidator> class to specify how a username and password is validated. This can be done by deriving a class from <xref:System.IdentityModel.Selectors.UserNamePasswordValidator> and override the <xref:System.IdentityModel.Selectors.UserNamePasswordValidator.Validate%2A> method. For more information about creating a custom user name and password validator, see How to: Use a Custom User Name and Password Validator . Constructors UserNamePasswordValidator() Declaration protected UserNamePasswordValidator() Properties None Declaration public static UserNamePasswordValidator None { get; } Property Value Type Description UserNamePasswordValidator Methods Validate(String, String) Declaration public virtual void Validate(string userName, string password) Parameters Type Name Description String userName String password ValidateAsync(String, String) Declaration public virtual ValueTask ValidateAsync(string userName, string password) Parameters Type Name Description String userName String password Returns Type Description ValueTask"
  },
  "api-corewcf/CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.html",
    "title": "Class UserNameSecurityTokenAuthenticator",
    "keywords": "Class UserNameSecurityTokenAuthenticator Authenticates a security token. Inheritance Object SecurityTokenAuthenticator UserNameSecurityTokenAuthenticator Inherited Members SecurityTokenAuthenticator.CanValidateToken(SecurityToken) SecurityTokenAuthenticator.ValidateToken(SecurityToken) SecurityTokenAuthenticator.ValidateTokenAsync(SecurityToken) SecurityTokenAuthenticator.ValidateTokenCore(SecurityToken) Namespace : CoreWCF.IdentityModel.Selectors Assembly : CoreWCF.Primitives.dll Syntax public abstract class UserNameSecurityTokenAuthenticator : SecurityTokenAuthenticator Remarks Override the <xref:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator> class to authenticate security tokens based on a user name and password. Windows Communication Foundation ships with the following classes that provide support for authenticating <xref:System.IdentityModel.Tokens.UserNameSecurityToken> security tokens. Type Description <xref:System.IdentityModel.Selectors.CustomUserNameSecurityTokenAuthenticator> Allows an application to provide a custom authentication scheme for user names and passwords. The authentication scheme is provided using a class deriving from the <xref:System.IdentityModel.Selectors.UserNamePasswordValidator> class. <xref:System.IdentityModel.Selectors.WindowsUserNameSecurityTokenAuthenticator> Authenticates the user name and password as a Windows account. Most custom authentication schemes can use the use the <xref:System.IdentityModel.Selectors.CustomUserNameSecurityTokenAuthenticator> class and implement a class that derives from the <xref:System.IdentityModel.Selectors.UserNamePasswordValidator> class. However, if additional flexibility is needed, you can derive a class from the <xref:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator> class and override the <xref:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator.ValidateUserNamePasswordCore%2A> method. Constructors UserNameSecurityTokenAuthenticator() Declaration protected UserNameSecurityTokenAuthenticator() Methods CanValidateTokenCore(SecurityToken) Declaration protected override bool CanValidateTokenCore(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description Boolean Overrides SecurityTokenAuthenticator.CanValidateTokenCore(SecurityToken) ValidateTokenCoreAsync(SecurityToken) Declaration protected override ValueTask<ReadOnlyCollection<IAuthorizationPolicy>> ValidateTokenCoreAsync(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description ValueTask < ReadOnlyCollection < IAuthorizationPolicy >> Overrides SecurityTokenAuthenticator.ValidateTokenCoreAsync(SecurityToken) ValidateUserNamePasswordCore(String, String) Declaration protected virtual ReadOnlyCollection<IAuthorizationPolicy> ValidateUserNamePasswordCore(string userName, string password) Parameters Type Name Description String userName String password Returns Type Description ReadOnlyCollection < IAuthorizationPolicy > ValidateUserNamePasswordCoreAsync(String, String) Declaration protected virtual ValueTask<ReadOnlyCollection<IAuthorizationPolicy>> ValidateUserNamePasswordCoreAsync(string userName, string password) Parameters Type Name Description String userName String password Returns Type Description ValueTask < ReadOnlyCollection < IAuthorizationPolicy >>"
  },
  "api-corewcf/CoreWCF.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator.html",
    "title": "Class WindowsSecurityTokenAuthenticator",
    "keywords": "Class WindowsSecurityTokenAuthenticator Uses Windows authentication to authenticate the security token. Inheritance Object SecurityTokenAuthenticator WindowsSecurityTokenAuthenticator Inherited Members SecurityTokenAuthenticator.CanValidateToken(SecurityToken) SecurityTokenAuthenticator.ValidateToken(SecurityToken) SecurityTokenAuthenticator.ValidateTokenAsync(SecurityToken) SecurityTokenAuthenticator.ValidateTokenCore(SecurityToken) Namespace : CoreWCF.IdentityModel.Selectors Assembly : CoreWCF.Primitives.dll Syntax public class WindowsSecurityTokenAuthenticator : SecurityTokenAuthenticator Remarks Use the <xref:System.IdentityModel.Selectors.WindowsSecurityTokenAuthenticator> class to authenticate security tokens that derive from <xref:System.IdentityModel.Tokens.WindowsSecurityToken>. Constructors WindowsSecurityTokenAuthenticator() Declaration public WindowsSecurityTokenAuthenticator() WindowsSecurityTokenAuthenticator(Boolean, LdapSettings) Declaration public WindowsSecurityTokenAuthenticator(bool includeWindowsGroups, LdapSettings ldapSettings) Parameters Type Name Description Boolean includeWindowsGroups LdapSettings ldapSettings Methods CanValidateTokenCore(SecurityToken) Declaration protected override bool CanValidateTokenCore(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description Boolean Overrides SecurityTokenAuthenticator.CanValidateTokenCore(SecurityToken) ValidateTokenCoreAsync(SecurityToken) Declaration protected override ValueTask<ReadOnlyCollection<IAuthorizationPolicy>> ValidateTokenCoreAsync(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description ValueTask < ReadOnlyCollection < IAuthorizationPolicy >> Overrides SecurityTokenAuthenticator.ValidateTokenCoreAsync(SecurityToken)"
  },
  "api-corewcf/CoreWCF.IdentityModel.Selectors.X509CertificateValidator.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Selectors.X509CertificateValidator.html",
    "title": "Class X509CertificateValidator",
    "keywords": "Class X509CertificateValidator Validates an X.509 certificate. Inheritance Object X509CertificateValidator Namespace : CoreWCF.IdentityModel.Selectors Assembly : CoreWCF.Primitives.dll Syntax public abstract class X509CertificateValidator : Object Remarks Use the <xref:System.IdentityModel.Selectors.X509CertificateValidator> class to specify how an X.509 certificate is deemed valid. This can be done using by deriving a class from <xref:System.IdentityModel.Selectors.X509CertificateValidator> and overriding the <xref:System.IdentityModel.Selectors.X509CertificateValidator.Validate%2A> method. Constructors X509CertificateValidator() Declaration protected X509CertificateValidator() Properties ChainTrust Declaration public static X509CertificateValidator ChainTrust { get; } Property Value Type Description X509CertificateValidator None Declaration public static X509CertificateValidator None { get; } Property Value Type Description X509CertificateValidator PeerOrChainTrust Declaration public static X509CertificateValidator PeerOrChainTrust { get; } Property Value Type Description X509CertificateValidator PeerTrust Declaration public static X509CertificateValidator PeerTrust { get; } Property Value Type Description X509CertificateValidator Methods CreateChainTrustValidator(Boolean, X509ChainPolicy) Declaration public static X509CertificateValidator CreateChainTrustValidator(bool useMachineContext, X509ChainPolicy chainPolicy) Parameters Type Name Description Boolean useMachineContext X509ChainPolicy chainPolicy Returns Type Description X509CertificateValidator CreatePeerOrChainTrustValidator(Boolean, X509ChainPolicy) Declaration public static X509CertificateValidator CreatePeerOrChainTrustValidator(bool useMachineContext, X509ChainPolicy chainPolicy) Parameters Type Name Description Boolean useMachineContext X509ChainPolicy chainPolicy Returns Type Description X509CertificateValidator Validate(X509Certificate2) Declaration public abstract void Validate(X509Certificate2 certificate) Parameters Type Name Description X509Certificate2 certificate"
  },
  "api-corewcf/CoreWCF.IdentityModel.Selectors.X509SecurityTokenAuthenticator.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Selectors.X509SecurityTokenAuthenticator.html",
    "title": "Class X509SecurityTokenAuthenticator",
    "keywords": "Class X509SecurityTokenAuthenticator Authenticates an . Inheritance Object SecurityTokenAuthenticator X509SecurityTokenAuthenticator Inherited Members SecurityTokenAuthenticator.CanValidateToken(SecurityToken) SecurityTokenAuthenticator.ValidateToken(SecurityToken) SecurityTokenAuthenticator.ValidateTokenAsync(SecurityToken) SecurityTokenAuthenticator.ValidateTokenCore(SecurityToken) Namespace : CoreWCF.IdentityModel.Selectors Assembly : CoreWCF.Primitives.dll Syntax public class X509SecurityTokenAuthenticator : SecurityTokenAuthenticator Remarks Use the <xref:System.IdentityModel.Selectors.X509SecurityTokenAuthenticator> class to authenticate <xref:System.IdentityModel.Tokens.X509SecurityToken> security tokens. Constructors X509SecurityTokenAuthenticator() Declaration public X509SecurityTokenAuthenticator() X509SecurityTokenAuthenticator(X509CertificateValidator) Declaration public X509SecurityTokenAuthenticator(X509CertificateValidator validator) Parameters Type Name Description X509CertificateValidator validator X509SecurityTokenAuthenticator(X509CertificateValidator, Boolean) Declaration public X509SecurityTokenAuthenticator(X509CertificateValidator validator, bool mapToWindows) Parameters Type Name Description X509CertificateValidator validator Boolean mapToWindows X509SecurityTokenAuthenticator(X509CertificateValidator, Boolean, Boolean) Declaration public X509SecurityTokenAuthenticator(X509CertificateValidator validator, bool mapToWindows, bool includeWindowsGroups) Parameters Type Name Description X509CertificateValidator validator Boolean mapToWindows Boolean includeWindowsGroups Properties MapCertificateToWindowsAccount Declaration public bool MapCertificateToWindowsAccount { get; } Property Value Type Description Boolean Methods CanValidateTokenCore(SecurityToken) Declaration protected override bool CanValidateTokenCore(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description Boolean Overrides SecurityTokenAuthenticator.CanValidateTokenCore(SecurityToken) ValidateTokenCoreAsync(SecurityToken) Declaration protected override ValueTask<ReadOnlyCollection<IAuthorizationPolicy>> ValidateTokenCoreAsync(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description ValueTask < ReadOnlyCollection < IAuthorizationPolicy >> Overrides SecurityTokenAuthenticator.ValidateTokenCoreAsync(SecurityToken)"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.AsymmetricSecurityKey.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.AsymmetricSecurityKey.html",
    "title": "Class AsymmetricSecurityKey",
    "keywords": "Class AsymmetricSecurityKey Base class for asymmetric keys. Inheritance Object SecurityKey AsymmetricSecurityKey RsaSecurityKey X509AsymmetricSecurityKey Inherited Members SecurityKey.DecryptKey(String, Byte[]) SecurityKey.EncryptKey(String, Byte[]) SecurityKey.IsSupportedAlgorithm(String) SecurityKey.KeySize Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public abstract class AsymmetricSecurityKey : SecurityKey Remarks You cannot use this class when Windows Communication Foundation is running under partial trust. Constructors AsymmetricSecurityKey() Declaration protected AsymmetricSecurityKey() Methods GetAsymmetricAlgorithm(String, Boolean) Declaration public abstract AsymmetricAlgorithm GetAsymmetricAlgorithm(string algorithm, bool privateKey) Parameters Type Name Description String algorithm Boolean privateKey Returns Type Description AsymmetricAlgorithm GetHashAlgorithmForSignature(String) Declaration public abstract HashAlgorithm GetHashAlgorithmForSignature(string algorithm) Parameters Type Name Description String algorithm Returns Type Description HashAlgorithm GetSignatureDeformatter(String) Declaration public abstract AsymmetricSignatureDeformatter GetSignatureDeformatter(string algorithm) Parameters Type Name Description String algorithm Returns Type Description AsymmetricSignatureDeformatter GetSignatureFormatter(String) Declaration public abstract AsymmetricSignatureFormatter GetSignatureFormatter(string algorithm) Parameters Type Name Description String algorithm Returns Type Description AsymmetricSignatureFormatter HasPrivateKey() Declaration public abstract bool HasPrivateKey() Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.AudienceRestriction.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.AudienceRestriction.html",
    "title": "Class AudienceRestriction",
    "keywords": "Class AudienceRestriction Defines settings for a AudienceRestriction verification. Inheritance Object AudienceRestriction Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class AudienceRestriction : Object Constructors AudienceRestriction() Creates an instance of AudienceRestriction Declaration public AudienceRestriction() AudienceRestriction(AudienceUriMode) Creates an instance of AudienceRestriction Declaration public AudienceRestriction(AudienceUriMode audienceMode) Parameters Type Name Description AudienceUriMode audienceMode Specifies the mode in which AudienceUri restriction is applied. Properties AllowedAudienceUris Gets the list of Allowed Audience URIs. Declaration public Collection<Uri> AllowedAudienceUris { get; } Property Value Type Description Collection < Uri > AudienceMode Gets/Sets the mode in which Audience URI restriction is applied. Declaration public AudienceUriMode AudienceMode { get; set; } Property Value Type Description AudienceUriMode"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.AudienceUriValidationFailedException.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.AudienceUriValidationFailedException.html",
    "title": "Class AudienceUriValidationFailedException",
    "keywords": "Class AudienceUriValidationFailedException Throw this exception a received Security token failed Audience Uri validation. Inheritance Object SecurityTokenException SecurityTokenValidationException AudienceUriValidationFailedException Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class AudienceUriValidationFailedException : SecurityTokenValidationException Constructors AudienceUriValidationFailedException() Initializes a new instance of AudienceUriValidationFailedException Declaration public AudienceUriValidationFailedException() AudienceUriValidationFailedException(SerializationInfo, StreamingContext) Initializes a new instance of AudienceUriValidationFailedException Declaration protected AudienceUriValidationFailedException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context AudienceUriValidationFailedException(String) Initializes a new instance of AudienceUriValidationFailedException Declaration public AudienceUriValidationFailedException(string message) Parameters Type Name Description String message AudienceUriValidationFailedException(String, Exception) Initializes a new instance of AudienceUriValidationFailedException Declaration public AudienceUriValidationFailedException(string message, Exception inner) Parameters Type Name Description String message Exception inner"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.AuthenticationContext.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.AuthenticationContext.html",
    "title": "Class AuthenticationContext",
    "keywords": "Class AuthenticationContext This class is used to specify the context of an authentication event. Inheritance Object AuthenticationContext Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class AuthenticationContext : Object Constructors AuthenticationContext() Creates an instance of AuthenticationContext. Declaration public AuthenticationContext() Properties Authorities The collection of authorities for resolving an authentication event. Declaration public Collection<string> Authorities { get; } Property Value Type Description Collection < String > ContextClass The context class for resolving an authentication event. Declaration public string ContextClass { get; set; } Property Value Type Description String ContextDeclaration The context declaration for resolving an authentication event. Declaration public string ContextDeclaration { get; set; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.AuthenticationMethods.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.AuthenticationMethods.html",
    "title": "Class AuthenticationMethods",
    "keywords": "Class AuthenticationMethods Defines constants for SAML authentication methods. Inheritance Object AuthenticationMethods Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public static class AuthenticationMethods : Object Fields HardwareToken Declaration public const string HardwareToken = \"http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/hardwaretoken\" Field Value Type Description String Kerberos Declaration public const string Kerberos = \"http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/kerberos\" Field Value Type Description String Namespace Declaration public const string Namespace = \"http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/\" Field Value Type Description String Password Declaration public const string Password = \"http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/password\" Field Value Type Description String Pgp Declaration public const string Pgp = \"http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/pgp\" Field Value Type Description String SecureRemotePassword Declaration public const string SecureRemotePassword = \"http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/secureremotepassword\" Field Value Type Description String Signature Declaration public const string Signature = \"http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/signature\" Field Value Type Description String Smartcard Declaration public const string Smartcard = \"http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/smartcard\" Field Value Type Description String SmartcardPki Declaration public const string SmartcardPki = \"http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/smartcardpki\" Field Value Type Description String Spki Declaration public const string Spki = \"http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/spki\" Field Value Type Description String TlsClient Declaration public const string TlsClient = \"http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/tlsclient\" Field Value Type Description String Unspecified Declaration public const string Unspecified = \"http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/unspecified\" Field Value Type Description String Windows Declaration public const string Windows = \"http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/windows\" Field Value Type Description String X509 Declaration public const string X509 = \"http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/x509\" Field Value Type Description String Xkms Declaration public const string Xkms = \"http://schemas.microsoft.com/ws/2008/06/identity/authenticationmethod/xkms\" Field Value Type Description String"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.BinaryKeyIdentifierClause.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.BinaryKeyIdentifierClause.html",
    "title": "Class BinaryKeyIdentifierClause",
    "keywords": "Class BinaryKeyIdentifierClause Represents a base class for key identifier clauses that are based upon binary data. Inheritance Object SecurityKeyIdentifierClause BinaryKeyIdentifierClause EncryptedKeyIdentifierClause X509RawDataKeyIdentifierClause X509SubjectKeyIdentifierClause X509ThumbprintKeyIdentifierClause BinarySecretKeyIdentifierClause Inherited Members SecurityKeyIdentifierClause.CreateKey() SecurityKeyIdentifierClause.GetDerivationNonce() SecurityKeyIdentifierClause.CanCreateKey SecurityKeyIdentifierClause.ClauseType SecurityKeyIdentifierClause.Id SecurityKeyIdentifierClause.DerivationLength Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public abstract class BinaryKeyIdentifierClause : SecurityKeyIdentifierClause Remarks Typically, the <xref:System.IdentityModel.Tokens.BinaryKeyIdentifierClause> does not need to be used, other than when a custom security token service is created. When a security token service returns a security token, the issued security token contains references to attached and unattached security tokens. Attached references refer to security tokens that are contained within the security header of a SOAP message and unattached references are security tokens that are not included within the security header of the SOAP message. These references typically affirm the authenticity of the issued security token. Constructors BinaryKeyIdentifierClause(String, Byte[], Boolean) Declaration protected BinaryKeyIdentifierClause(string clauseType, byte[] identificationData, bool cloneBuffer) Parameters Type Name Description String clauseType Byte [] identificationData Boolean cloneBuffer BinaryKeyIdentifierClause(String, Byte[], Boolean, Byte[], Int32) Declaration protected BinaryKeyIdentifierClause(string clauseType, byte[] identificationData, bool cloneBuffer, byte[] derivationNonce, int derivationLength) Parameters Type Name Description String clauseType Byte [] identificationData Boolean cloneBuffer Byte [] derivationNonce Int32 derivationLength Methods GetBuffer() Declaration public byte[] GetBuffer() Returns Type Description Byte [] GetRawBuffer() Declaration protected byte[] GetRawBuffer() Returns Type Description Byte [] Matches(SecurityKeyIdentifierClause) Declaration public override bool Matches(SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause Returns Type Description Boolean Overrides SecurityKeyIdentifierClause.Matches(SecurityKeyIdentifierClause) Matches(Byte[]) Declaration public bool Matches(byte[] data) Parameters Type Name Description Byte [] data Returns Type Description Boolean Matches(Byte[], Int32) Declaration public bool Matches(byte[] data, int offset) Parameters Type Name Description Byte [] data Int32 offset Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.BootstrapContext.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.BootstrapContext.html",
    "title": "Class BootstrapContext",
    "keywords": "Class BootstrapContext Represents a serializable version of a token that can be attached to a ClaimsIdentity to retain the original token that was used to create ClaimsIdentity Inheritance Object BootstrapContext Implements ISerializable Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class BootstrapContext : Object Constructors BootstrapContext(SecurityToken, SecurityTokenHandler) Declaration public BootstrapContext(SecurityToken token, SecurityTokenHandler tokenHandler) Parameters Type Name Description SecurityToken token SecurityTokenHandler tokenHandler BootstrapContext(Byte[]) Declaration public BootstrapContext(byte[] token) Parameters Type Name Description Byte [] token BootstrapContext(SerializationInfo, StreamingContext) Declaration protected BootstrapContext(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context BootstrapContext(String) Declaration public BootstrapContext(string token) Parameters Type Name Description String token Properties SecurityToken Gets the SecurityToken that was passed in constructor. If a different constructor was used, will be null. Declaration public SecurityToken SecurityToken { get; } Property Value Type Description SecurityToken SecurityTokenHandler Gets the SecurityTokenHandler that was passed in constructor. If a different constructor was used, will be null. Declaration public SecurityTokenHandler SecurityTokenHandler { get; } Property Value Type Description SecurityTokenHandler Token Gets the string that was passed in constructor. If a different constructor was used, will be null. Declaration public string Token { get; } Property Value Type Description String TokenBytes Gets the string that was passed in constructor. If a different constructor was used, will be null. Declaration public byte[] TokenBytes { get; } Property Value Type Description Byte [] Methods GetObjectData(SerializationInfo, StreamingContext) Called to serialize this context. Declaration public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info SerializationInfo container for storing data. Cannot be null. StreamingContext context StreamingContext contains the context for streaming and optionally additional user data. Exceptions Type Condition ArgumentNullException thrown if 'info' is null. Implements System.Runtime.Serialization.ISerializable"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.html",
    "title": "Class ConfigurationBasedIssuerNameRegistry",
    "keywords": "Class ConfigurationBasedIssuerNameRegistry Represents an issuer name registry that maintains a list of trusted issuers loaded from elements in the application configuration file that associate each issuer name to the X.509 certificate that is needed to verify the signature of tokens produced by the issuer. Inheritance Object IssuerNameRegistry ConfigurationBasedIssuerNameRegistry Inherited Members IssuerNameRegistry.GetIssuerName(SecurityToken, String) IssuerNameRegistry.GetWindowsIssuerName() Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class ConfigurationBasedIssuerNameRegistry : IssuerNameRegistry Remarks The <xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry> class maintains a dictionary of trusted issuers by mapping the certificate of each trusted issuer to a name that refers to that issuer. The certificates are specified using the ASN.1 encoded form of the thumbprint. The issuer name can be any string, as long as it is unique within the scope of the application. This dictionary can be accessed through the <xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.ConfiguredTrustedIssuers%2A> property. The class can only resolve X.509 certificates. The map of trusted issuers is specified in a configuration file by adding entries under the &lt;trustedIssuers&gt; element. The &lt;trustedIssuers> element is a child element of the &lt;issuerNameRegistry&gt; element and it is valid when the <xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry> class is specified in the type attribute of that element. For more information, see the documentation for each of these elements in the WIF Configuration Schema . For more information about issuer name registries, see the <xref:System.IdentityModel.Tokens.IssuerNameRegistry> class. You can derive from <xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry> to implement your own configuration based issuer name registry. Which methods you override will depend upon your implementation. For example, you can override the <xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry.LoadCustomConfiguration%2A> method to load configuration from a custom configuration schema. Constructors ConfigurationBasedIssuerNameRegistry() Creates an instance of ConfigurationBasedIssuerNameRegistry Declaration public ConfigurationBasedIssuerNameRegistry() Properties ConfiguredTrustedIssuers Gets the Dictionary of Configured Trusted Issuers. The key to the dictionary is the ASN.1 encoded form of the Thumbprint of the trusted issuer's certificate and the value is the issuer name. Declaration public IDictionary<string, string> ConfiguredTrustedIssuers { get; } Property Value Type Description IDictionary < String , String > Methods AddTrustedIssuer(String, String) Adds a trusted issuer to the collection. Declaration public void AddTrustedIssuer(string certificateThumbprint, string name) Parameters Type Name Description String certificateThumbprint ASN.1 encoded form of the trusted issuer's certificate Thumbprint. String name Name of the trusted issuer. Exceptions Type Condition ArgumentException The argument 'certificateThumbprint' or 'name' is either null or Empty. InvalidOperationException The issuer specified by 'certificateThumbprint' argument has already been configured. GetIssuerName(SecurityToken) Returns the issuer name of the given X509SecurityToken mapping the Certificate Thumbprint to a name in the configured map. Declaration public override string GetIssuerName(SecurityToken securityToken) Parameters Type Name Description SecurityToken securityToken SecurityToken for which the issuer name is requested. Returns Type Description String Issuer name if the token was registered, null otherwise. Overrides IssuerNameRegistry.GetIssuerName(SecurityToken) Exceptions Type Condition ArgumentNullException The input parameter 'securityToken' is null."
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.EmptySecurityKeyIdentifierClause.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.EmptySecurityKeyIdentifierClause.html",
    "title": "Class EmptySecurityKeyIdentifierClause",
    "keywords": "Class EmptySecurityKeyIdentifierClause Represents an empty SecurityKeyClause. This class is used when an 'encrypted data element' or ' signature element' does not contain a 'key info element' that is used to describe the key required to decrypt the data or check the signature. Inheritance Object SecurityKeyIdentifierClause EmptySecurityKeyIdentifierClause Inherited Members SecurityKeyIdentifierClause.CreateKey() SecurityKeyIdentifierClause.Matches(SecurityKeyIdentifierClause) SecurityKeyIdentifierClause.GetDerivationNonce() SecurityKeyIdentifierClause.CanCreateKey SecurityKeyIdentifierClause.ClauseType SecurityKeyIdentifierClause.Id SecurityKeyIdentifierClause.DerivationLength Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class EmptySecurityKeyIdentifierClause : SecurityKeyIdentifierClause Constructors EmptySecurityKeyIdentifierClause() Creates an instance of EmptySecurityKeyIdentifierClause Declaration public EmptySecurityKeyIdentifierClause() Remarks This constructor assumes that the user knows how to resolve the key required without any context. EmptySecurityKeyIdentifierClause(Object) Creates an instance of EmptySecurityKeyIdentifierClause Declaration public EmptySecurityKeyIdentifierClause(object context) Parameters Type Name Description Object context Used to provide a hint when there is a need resolve an empty clause to a particular key. In the case of Saml11 and Saml2 tokens that have signatures without KeyInfo, this clause will contain the assertion that is currently being processed. Properties Context Used to provide a hint when there is a need to resolve to a particular key. In the case of Saml11 and Saml2 tokens that have signatures without KeyInfo, this will contain the assertion that is currently being processed. Declaration public object Context { get; } Property Value Type Description Object"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.EncryptedKeyIdentifierClause.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.EncryptedKeyIdentifierClause.html",
    "title": "Class EncryptedKeyIdentifierClause",
    "keywords": "Class EncryptedKeyIdentifierClause Represents a key identifier clause that identifies an encrypted key. Inheritance Object SecurityKeyIdentifierClause BinaryKeyIdentifierClause EncryptedKeyIdentifierClause Inherited Members BinaryKeyIdentifierClause.GetBuffer() BinaryKeyIdentifierClause.GetRawBuffer() BinaryKeyIdentifierClause.Matches(Byte[]) BinaryKeyIdentifierClause.Matches(Byte[], Int32) SecurityKeyIdentifierClause.CreateKey() SecurityKeyIdentifierClause.GetDerivationNonce() SecurityKeyIdentifierClause.CanCreateKey SecurityKeyIdentifierClause.ClauseType SecurityKeyIdentifierClause.Id SecurityKeyIdentifierClause.DerivationLength Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public sealed class EncryptedKeyIdentifierClause : BinaryKeyIdentifierClause Remarks Typically, the <xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause> does not need to be used, other than when a custom security token service is created. When a security token service returns a security token, the issued security token contains references to attached and unattached security tokens. Attached references refer to security tokens that are contained within the security header of a SOAP message and unattached references are security tokens that are not included within the security header of a SOAP message. These references typically affirm the authenticity of the issued security token. Use the <xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause> class to reference an encrypted key. The <xref:System.IdentityModel.Tokens.EncryptedKeyIdentifierClause.GetEncryptedKey%2A> method returns the encrypted key. WCF accepts wrapped keys that are well formed with respect to the wire format. The key wrap algorithm specified on the wire is accepted and used. It is not verified to be compatible with the <xref:CoreWCF.Security.SecurityAlgorithmSuite> specified by the endpoint. Constructors EncryptedKeyIdentifierClause(Byte[], String) Declaration public EncryptedKeyIdentifierClause(byte[] encryptedKey, string encryptionMethod) Parameters Type Name Description Byte [] encryptedKey String encryptionMethod EncryptedKeyIdentifierClause(Byte[], String, SecurityKeyIdentifier) Declaration public EncryptedKeyIdentifierClause(byte[] encryptedKey, string encryptionMethod, SecurityKeyIdentifier encryptingKeyIdentifier) Parameters Type Name Description Byte [] encryptedKey String encryptionMethod SecurityKeyIdentifier encryptingKeyIdentifier EncryptedKeyIdentifierClause(Byte[], String, SecurityKeyIdentifier, String) Declaration public EncryptedKeyIdentifierClause(byte[] encryptedKey, string encryptionMethod, SecurityKeyIdentifier encryptingKeyIdentifier, string carriedKeyName) Parameters Type Name Description Byte [] encryptedKey String encryptionMethod SecurityKeyIdentifier encryptingKeyIdentifier String carriedKeyName EncryptedKeyIdentifierClause(Byte[], String, SecurityKeyIdentifier, String, Byte[], Int32) Declaration public EncryptedKeyIdentifierClause(byte[] encryptedKey, string encryptionMethod, SecurityKeyIdentifier encryptingKeyIdentifier, string carriedKeyName, byte[] derivationNonce, int derivationLength) Parameters Type Name Description Byte [] encryptedKey String encryptionMethod SecurityKeyIdentifier encryptingKeyIdentifier String carriedKeyName Byte [] derivationNonce Int32 derivationLength Properties CarriedKeyName Declaration public string CarriedKeyName { get; } Property Value Type Description String EncryptingKeyIdentifier Declaration public SecurityKeyIdentifier EncryptingKeyIdentifier { get; } Property Value Type Description SecurityKeyIdentifier EncryptionMethod Declaration public string EncryptionMethod { get; } Property Value Type Description String Methods GetEncryptedKey() Declaration public byte[] GetEncryptedKey() Returns Type Description Byte [] Matches(SecurityKeyIdentifierClause) Declaration public override bool Matches(SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause Returns Type Description Boolean Overrides BinaryKeyIdentifierClause.Matches(SecurityKeyIdentifierClause) Matches(Byte[], String, String) Declaration public bool Matches(byte[] encryptedKey, string encryptionMethod, string carriedKeyName) Parameters Type Name Description Byte [] encryptedKey String encryptionMethod String carriedKeyName Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.EncryptedSecurityToken.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.EncryptedSecurityToken.html",
    "title": "Class EncryptedSecurityToken",
    "keywords": "Class EncryptedSecurityToken A pseudo-token which handles encryption for a token which does not natively support it. Inheritance Object SecurityToken EncryptedSecurityToken Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class EncryptedSecurityToken : SecurityToken Remarks For example, a SamlSecurityToken has no notion of how to encrypt itself, so to issue an encrypted SAML11 assertion, wrap a SamlSecurityToken with an EncryptedSecurityToken and provide appropriate EncryptingCredentials. Constructors EncryptedSecurityToken(SecurityToken, EncryptingCredentials) Creates an instance of EncryptedSecurityToken. Declaration public EncryptedSecurityToken(SecurityToken token, EncryptingCredentials encryptingCredentials) Parameters Type Name Description SecurityToken token The SecurityToken to encrypt. EncryptingCredentials encryptingCredentials The EncryptingCredentials to use for encryption. Properties EncryptingCredentials Gets the EncryptingCredentials to use for encryption. Declaration public EncryptingCredentials EncryptingCredentials { get; } Property Value Type Description EncryptingCredentials Id Gets a unique identifier of the security token. Declaration public override string Id { get; } Property Value Type Description String Overrides SecurityToken.Id SecurityKeys Inherited from SecurityToken . Declaration public override ReadOnlyCollection<SecurityKey> SecurityKeys { get; } Property Value Type Description ReadOnlyCollection < SecurityKey > Overrides SecurityToken.SecurityKeys Token Gets the encrypted SecurityToken . Declaration public SecurityToken Token { get; } Property Value Type Description SecurityToken ValidFrom Gets the first instant in time at which this security token is valid. Declaration public override DateTime ValidFrom { get; } Property Value Type Description DateTime Overrides SecurityToken.ValidFrom ValidTo Gets the last instant in time at which this security token is valid. Declaration public override DateTime ValidTo { get; } Property Value Type Description DateTime Overrides SecurityToken.ValidTo Methods CanCreateKeyIdentifierClause<T>() Inherited from SecurityToken . Declaration public override bool CanCreateKeyIdentifierClause<T>() where T : SecurityKeyIdentifierClause Returns Type Description Boolean Type Parameters Name Description T Overrides SecurityToken.CanCreateKeyIdentifierClause<T>() CreateKeyIdentifierClause<T>() Inherited from SecurityToken . Declaration public override T CreateKeyIdentifierClause<T>() where T : SecurityKeyIdentifierClause Returns Type Description T Type Parameters Name Description T Overrides SecurityToken.CreateKeyIdentifierClause<T>() MatchesKeyIdentifierClause(SecurityKeyIdentifierClause) Inherited from SecurityToken . Declaration public override bool MatchesKeyIdentifierClause(SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause Returns Type Description Boolean Overrides SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause) ResolveKeyIdentifierClause(SecurityKeyIdentifierClause) Inherited from SecurityToken . Declaration public override SecurityKey ResolveKeyIdentifierClause(SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause Returns Type Description SecurityKey Overrides SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause)"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.EncryptedSecurityTokenHandler.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.EncryptedSecurityTokenHandler.html",
    "title": "Class EncryptedSecurityTokenHandler",
    "keywords": "Class EncryptedSecurityTokenHandler Token handler for an encrypted SecurityToken type. Inheritance Object SecurityTokenHandler EncryptedSecurityTokenHandler Inherited Members SecurityTokenHandler.CanReadToken(String) SecurityTokenHandler.ReadToken(XmlReader, SecurityTokenResolver) SecurityTokenHandler.ReadToken(String) SecurityTokenHandler.WriteToken(SecurityToken) SecurityTokenHandler.CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause) SecurityTokenHandler.WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause) SecurityTokenHandler.CreateToken(SecurityTokenDescriptor) SecurityTokenHandler.CreateSecurityTokenReference(SecurityToken, Boolean) SecurityTokenHandler.ValidateToken(SecurityToken) SecurityTokenHandler.DetectReplayedToken(SecurityToken) SecurityTokenHandler.CanValidateToken SecurityTokenHandler.Configuration SecurityTokenHandler.ContainingCollection Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class EncryptedSecurityTokenHandler : SecurityTokenHandler Constructors EncryptedSecurityTokenHandler() Create an instance of EncryptedSecurityTokenHandler Declaration public EncryptedSecurityTokenHandler() Properties CanWriteToken Overrides the base CanWriteToken and returns true always. Declaration public override bool CanWriteToken { get; } Property Value Type Description Boolean Overrides SecurityTokenHandler.CanWriteToken KeyInfoSerializer Gets or Sets a SecurityTokenSerializers that will be used to serialize and deserializer SecurtyKeyIdentifier of the <xenc:EncryptedData> element. Declaration public SecurityTokenSerializer KeyInfoSerializer { get; set; } Property Value Type Description SecurityTokenSerializer Exceptions Type Condition ArgumentNullException Input parameter 'value' is null. TokenType Gets the System.Type of the token that this SecurityTokenHandler handles. Returns typeof EncryptedSecurityToken by default. Declaration public override Type TokenType { get; } Property Value Type Description Type Overrides SecurityTokenHandler.TokenType Methods CanReadKeyIdentifierClause(XmlReader) Declaration public override bool CanReadKeyIdentifierClause(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description Boolean Overrides SecurityTokenHandler.CanReadKeyIdentifierClause(XmlReader) CanReadToken(XmlReader) Declaration public override bool CanReadToken(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description Boolean Overrides SecurityTokenHandler.CanReadToken(XmlReader) GetTokenTypeIdentifiers() By default returns an array with a single null string as there isn't any specific TokenType identifier that is associated with a EncryptedSecurityToken . Declaration public override string[] GetTokenTypeIdentifiers() Returns Type Description String [] Overrides SecurityTokenHandler.GetTokenTypeIdentifiers() ReadKeyIdentifierClause(XmlReader) Declaration public override SecurityKeyIdentifierClause ReadKeyIdentifierClause(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description SecurityKeyIdentifierClause Overrides SecurityTokenHandler.ReadKeyIdentifierClause(XmlReader) ReadToken(XmlReader) Declaration public override SecurityToken ReadToken(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description SecurityToken Overrides SecurityTokenHandler.ReadToken(XmlReader) WriteToken(XmlWriter, SecurityToken) Declaration public override void WriteToken(XmlWriter writer, SecurityToken token) Parameters Type Name Description XmlWriter writer SecurityToken token Overrides SecurityTokenHandler.WriteToken(XmlWriter, SecurityToken)"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.EncryptedTokenDecryptionFailedException.html",
    "title": "Class EncryptedTokenDecryptionFailedException",
    "keywords": "Class EncryptedTokenDecryptionFailedException This indicates an error has occured while processing an encrypted security token Inheritance Object SecurityTokenException EncryptedTokenDecryptionFailedException Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class EncryptedTokenDecryptionFailedException : SecurityTokenException Constructors EncryptedTokenDecryptionFailedException() Initializes a new instance of EncryptedTokenDecryptionFailedException Declaration public EncryptedTokenDecryptionFailedException() EncryptedTokenDecryptionFailedException(SerializationInfo, StreamingContext) Initializes a new instance of EncryptedTokenDecryptionFailedException Declaration protected EncryptedTokenDecryptionFailedException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context EncryptedTokenDecryptionFailedException(String) Initializes a new instance of EncryptedTokenDecryptionFailedException Declaration public EncryptedTokenDecryptionFailedException(string message) Parameters Type Name Description String message EncryptedTokenDecryptionFailedException(String, Exception) Initializes a new instance of EncryptedTokenDecryptionFailedException Declaration public EncryptedTokenDecryptionFailedException(string message, Exception inner) Parameters Type Name Description String message Exception inner"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.EncryptingCredentials.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.EncryptingCredentials.html",
    "title": "Class EncryptingCredentials",
    "keywords": "Class EncryptingCredentials This class defines the encrypting credentials which can be used to encrypt the proof key. It is very similar to SigningCredentials class defined in System.IdentityModel.dll Inheritance Object EncryptingCredentials Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class EncryptingCredentials : Object Constructors EncryptingCredentials() Constructor for easy subclassing. Declaration public EncryptingCredentials() EncryptingCredentials(SecurityKey, SecurityKeyIdentifier, String) Constructs an EncryptingCredentials with a security key, a security key identifier and the encryption algorithm. Declaration public EncryptingCredentials(SecurityKey key, SecurityKeyIdentifier keyIdentifier, string algorithm) Parameters Type Name Description SecurityKey key A security key for encryption. SecurityKeyIdentifier keyIdentifier A security key identifier for the encryption key. String algorithm The encryption algorithm. Exceptions Type Condition ArgumentNullException When key is null. ArgumentNullException When key identifier is null. ArgumentNullException When algorithm is null. Properties Algorithm Gets or sets the encryption algorithm. Declaration public string Algorithm { get; set; } Property Value Type Description String SecurityKey Gets or sets the encryption key material. Declaration public SecurityKey SecurityKey { get; set; } Property Value Type Description SecurityKey SecurityKeyIdentifier Gets or sets the SecurityKeyIdentifier that identifies the encrypting credential. Declaration public SecurityKeyIdentifier SecurityKeyIdentifier { get; set; } Property Value Type Description SecurityKeyIdentifier"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.GenericIdentitySecurityToken.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.GenericIdentitySecurityToken.html",
    "title": "Class GenericIdentitySecurityToken",
    "keywords": "Class GenericIdentitySecurityToken Inheritance Object SecurityToken GenericIdentitySecurityToken Inherited Members SecurityToken.CanCreateKeyIdentifierClause<T>() SecurityToken.CreateKeyIdentifierClause<T>() SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause) SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause) Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class GenericIdentitySecurityToken : SecurityToken Constructors GenericIdentitySecurityToken(GenericIdentity) Declaration public GenericIdentitySecurityToken(GenericIdentity genericIdentity) Parameters Type Name Description GenericIdentity genericIdentity GenericIdentitySecurityToken(GenericIdentity, String) Declaration public GenericIdentitySecurityToken(GenericIdentity genericIdentity, string id) Parameters Type Name Description GenericIdentity genericIdentity String id Properties GenericIdentity Declaration public virtual GenericIdentity GenericIdentity { get; } Property Value Type Description GenericIdentity Id Declaration public override string Id { get; } Property Value Type Description String Overrides SecurityToken.Id Name Declaration public string Name { get; } Property Value Type Description String SecurityKeys Declaration public override ReadOnlyCollection<SecurityKey> SecurityKeys { get; } Property Value Type Description ReadOnlyCollection < SecurityKey > Overrides SecurityToken.SecurityKeys ValidFrom Declaration public override DateTime ValidFrom { get; } Property Value Type Description DateTime Overrides SecurityToken.ValidFrom ValidTo Declaration public override DateTime ValidTo { get; } Property Value Type Description DateTime Overrides SecurityToken.ValidTo"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.GenericXmlSecurityKeyIdentifierClause.html",
    "title": "Class GenericXmlSecurityKeyIdentifierClause",
    "keywords": "Class GenericXmlSecurityKeyIdentifierClause Represents a key identifier clause that is based on XML. Inheritance Object SecurityKeyIdentifierClause GenericXmlSecurityKeyIdentifierClause Inherited Members SecurityKeyIdentifierClause.CreateKey() SecurityKeyIdentifierClause.GetDerivationNonce() SecurityKeyIdentifierClause.CanCreateKey SecurityKeyIdentifierClause.ClauseType SecurityKeyIdentifierClause.Id SecurityKeyIdentifierClause.DerivationLength Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class GenericXmlSecurityKeyIdentifierClause : SecurityKeyIdentifierClause Remarks To be added. Constructors GenericXmlSecurityKeyIdentifierClause(XmlElement) Declaration public GenericXmlSecurityKeyIdentifierClause(XmlElement referenceXml) Parameters Type Name Description XmlElement referenceXml GenericXmlSecurityKeyIdentifierClause(XmlElement, Byte[], Int32) Declaration public GenericXmlSecurityKeyIdentifierClause(XmlElement referenceXml, byte[] derivationNonce, int derivationLength) Parameters Type Name Description XmlElement referenceXml Byte [] derivationNonce Int32 derivationLength Properties ReferenceXml Declaration public XmlElement ReferenceXml { get; } Property Value Type Description XmlElement Methods Matches(SecurityKeyIdentifierClause) Declaration public override bool Matches(SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause Returns Type Description Boolean Overrides SecurityKeyIdentifierClause.Matches(SecurityKeyIdentifierClause)"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.GenericXmlSecurityToken.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.GenericXmlSecurityToken.html",
    "title": "Class GenericXmlSecurityToken",
    "keywords": "Class GenericXmlSecurityToken Represents a security token that is based upon XML. Inheritance Object SecurityToken GenericXmlSecurityToken Inherited Members SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause) Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class GenericXmlSecurityToken : SecurityToken Remarks Use the <xref:System.IdentityModel.Tokens.GenericXmlSecurityToken> class when you receive a token over the wire that is not defined in a specification or there is no way for you to determine the type of the security token. For example, in a federation scenario when you send a Request Security Token (RST) to a Security Token Service (STS) you do not always know the type of the security token returned by the STS. In such cases, you can use a <xref:System.IdentityModel.Tokens.GenericXmlSecurityToken> to store the security token as XML along with its internal and external references. Use the <xref:System.IdentityModel.Tokens.GenericXmlSecurityToken> class to define claims using XML when one of the built-in security tokens does not suffice. Other security tokens can define their claims using XML, however the <xref:System.IdentityModel.Tokens.GenericXmlSecurityToken> security token generically allows a security token to have an application-defined set of XML. Constructors GenericXmlSecurityToken(XmlElement, SecurityToken, DateTime, DateTime, SecurityKeyIdentifierClause, SecurityKeyIdentifierClause, ReadOnlyCollection<IAuthorizationPolicy>) Declaration public GenericXmlSecurityToken(XmlElement tokenXml, SecurityToken proofToken, DateTime effectiveTime, DateTime expirationTime, SecurityKeyIdentifierClause internalTokenReference, SecurityKeyIdentifierClause externalTokenReference, ReadOnlyCollection<IAuthorizationPolicy> authorizationPolicies) Parameters Type Name Description XmlElement tokenXml SecurityToken proofToken DateTime effectiveTime DateTime expirationTime SecurityKeyIdentifierClause internalTokenReference SecurityKeyIdentifierClause externalTokenReference ReadOnlyCollection < IAuthorizationPolicy > authorizationPolicies Properties AuthorizationPolicies Declaration public ReadOnlyCollection<IAuthorizationPolicy> AuthorizationPolicies { get; } Property Value Type Description ReadOnlyCollection < IAuthorizationPolicy > ExternalTokenReference Declaration public SecurityKeyIdentifierClause ExternalTokenReference { get; } Property Value Type Description SecurityKeyIdentifierClause Id Declaration public override string Id { get; } Property Value Type Description String Overrides SecurityToken.Id InternalTokenReference Declaration public SecurityKeyIdentifierClause InternalTokenReference { get; } Property Value Type Description SecurityKeyIdentifierClause ProofToken Declaration public SecurityToken ProofToken { get; } Property Value Type Description SecurityToken SecurityKeys Declaration public override ReadOnlyCollection<SecurityKey> SecurityKeys { get; } Property Value Type Description ReadOnlyCollection < SecurityKey > Overrides SecurityToken.SecurityKeys TokenXml Declaration public XmlElement TokenXml { get; } Property Value Type Description XmlElement ValidFrom Declaration public override DateTime ValidFrom { get; } Property Value Type Description DateTime Overrides SecurityToken.ValidFrom ValidTo Declaration public override DateTime ValidTo { get; } Property Value Type Description DateTime Overrides SecurityToken.ValidTo Methods CanCreateKeyIdentifierClause<T>() Declaration public override bool CanCreateKeyIdentifierClause<T>() where T : SecurityKeyIdentifierClause Returns Type Description Boolean Type Parameters Name Description T Overrides SecurityToken.CanCreateKeyIdentifierClause<T>() CreateKeyIdentifierClause<T>() Declaration public override T CreateKeyIdentifierClause<T>() where T : SecurityKeyIdentifierClause Returns Type Description T Type Parameters Name Description T Overrides SecurityToken.CreateKeyIdentifierClause<T>() MatchesKeyIdentifierClause(SecurityKeyIdentifierClause) Declaration public override bool MatchesKeyIdentifierClause(SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause Returns Type Description Boolean Overrides SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause) ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.html",
    "title": "Namespace CoreWCF.IdentityModel.Tokens",
    "keywords": "Namespace CoreWCF.IdentityModel.Tokens Classes AsymmetricSecurityKey Base class for asymmetric keys. AudienceRestriction Defines settings for a AudienceRestriction verification. AudienceUriValidationFailedException Throw this exception a received Security token failed Audience Uri validation. AuthenticationContext This class is used to specify the context of an authentication event. AuthenticationMethods Defines constants for SAML authentication methods. BinaryKeyIdentifierClause Represents a base class for key identifier clauses that are based upon binary data. BootstrapContext Represents a serializable version of a token that can be attached to a ClaimsIdentity to retain the original token that was used to create ClaimsIdentity ConfigurationBasedIssuerNameRegistry Represents an issuer name registry that maintains a list of trusted issuers loaded from elements in the application configuration file that associate each issuer name to the X.509 certificate that is needed to verify the signature of tokens produced by the issuer. EmptySecurityKeyIdentifierClause Represents an empty SecurityKeyClause. This class is used when an 'encrypted data element' or ' signature element' does not contain a 'key info element' that is used to describe the key required to decrypt the data or check the signature. EncryptedKeyIdentifierClause Represents a key identifier clause that identifies an encrypted key. EncryptedSecurityToken A pseudo-token which handles encryption for a token which does not natively support it. EncryptedSecurityTokenHandler Token handler for an encrypted SecurityToken type. EncryptedTokenDecryptionFailedException This indicates an error has occured while processing an encrypted security token EncryptingCredentials This class defines the encrypting credentials which can be used to encrypt the proof key. It is very similar to SigningCredentials class defined in System.IdentityModel.dll GenericIdentitySecurityToken GenericXmlSecurityKeyIdentifierClause Represents a key identifier clause that is based on XML. GenericXmlSecurityToken Represents a security token that is based upon XML. IssuerNameRegistry Interface that defines the name service that returns that issuer name of a given token as string. IssuerTokenResolver Resolves issuer tokens received from service partners. LocalIdKeyIdentifierClause Represents a key identifier clause that identifies a security tokens specified in the security header of the SOAP message. RsaKeyIdentifierClause Represents a key identifier clause that identifies a security token. RsaSecurityKey Represents a security key that is generated using the RSA algorithm. This class cannot be inherited. Saml2SecurityToken A security token backed by a SAML2 assertion. Saml2SecurityTokenHandler Creates SAML2 assertion-based security tokens SamlAccessDecision Specifies whether the subject of a security token is granted access to a given resource. SamlAuthenticationClaimResource Represents the resource type for a claim that is created from a . SamlAuthorizationDecisionClaimResource Represents a claim for a security token that asserts an authorization decision regarding access to a specific resource. SamlSecurityToken Represents a security token that is based upon a SAML assertion. SamlSecurityTokenHandler This class implements a SecurityTokenHandler for a Saml11 token. It contains functionality for: Creating, Serializing and Validating a Saml 11 Token. SamlSecurityTokenRequirement Extends the class by adding new properties that are useful for issued tokens. SecurityAlgorithms Defines constants for the URIs that represent the cryptographic algorithms that are used to encrypt XML and compute digital signatures for SOAP messages. SecurityKey Base class for security keys. SecurityKeyElement SecurityKeyElement provides delayed resolution of security keys by resolving the SecurityKeyIdentifierClause or SecurityKeyIdentifier only when cryptographic functions are needed. This allows a key clause or identifier that is never used by an application to be serialized and deserialzied on and off the wire without issue. SecurityKeyIdentifier Represents a key identifier. SecurityKeyIdentifierClauseSerializer Abstract class for SecurityKeyIdentifierClause Serializer. SecurityKeyType Specifies the type of key that is associated with a security token. SecurityToken Represents a base class used to implement all security tokens. SecurityTokenDescriptor This is a place holder for all the attributes related to the issued token. SecurityTokenElement This class represents a number elements found in a which represent security tokens. SecurityTokenException The exception that is thrown when a problem occurs while processing a security token. SecurityTokenExpiredException Throw this exception when a received Security Token has expiration time in the past. SecurityTokenHandler Defines the interface for a Security Token Handler. SecurityTokenHandlerCollection Defines a collection of SecurityTokenHandlers. SecurityTokenHandlerCollectionManager A class which manages multiple named SecurityTokenHandlerCollection . SecurityTokenHandlerCollectionManager.Usage Defines standard collection names used by the framework. SecurityTokenHandlerConfiguration Configuration common to all SecurityTokenHandlers. SecurityTokenNotYetValidException Throw this exception when a received Security token has an effective time in the future. SecurityTokenReplayDetectedException Throw this exception when a received Security Token has been replayed. SecurityTokenValidationException The exception that is thrown when a received security token is invalid. SessionSecurityToken Defines a SessionSecurityToken that contains data associated with a session. SessionSecurityTokenCache Defines a simple interface to a cache of security tokens. SessionSecurityTokenCacheKey When caching an SessionSecurityToken there are two indexes required. One is the ContextId that is unique across all SessionSecurityToken and the next is KeyGeneration which is unique within a session. When an SessionSecurityToken is issued it has only a ContextId. When the SessionSecurityToken is renewed the KeyGeneration is added as an second index to the SessionSecurityToken . Now the renewed SessionSecurityToken is uniquely identifiable via the ContextId and KeyGeneration. The class SessionSecurityTokenCacheKey is used as the index to the SessionSecurityToken cache. This index will always have a valid ContextId specified but the KeyGeneration may be null. There is also an optional EndpointId which gives the endpoint to which the token is scoped. SessionSecurityTokenHandler A SecurityTokenHandler that processes SessionSecurityToken . SigningCredentials Represents the cryptographic key and security algorithms that are used to generate a digital signature. SymmetricSecurityKey Represents the abstract base class for all keys that are generated using symmetric algorithms. TokenReplayCache This class defines the API for a cache that stores tokens for and purges them on a schedule time interval. UserNameSecurityTokenHandler Defines a SecurityTokenHandler for Username Password Tokens. WindowsSecurityToken Represents a security token that is based on the identity of a Windows domain or user account. X509AsymmetricSecurityKey Represents an asymmetric key for X.509 certificates. X509CertificateStoreTokenResolver Token Resolver that can resolve X509SecurityTokens against a given X.509 Certificate Store. X509DataSecurityKeyIdentifierClauseSerializer Implementation of SecurityKeyIdentifierClauseSerializer that handles X.509 Certificate reference types. X509IssuerSerialKeyIdentifierClause Represents a key identifier clause that identifies a security tokens using the distinguished name of the certificate issuer and the X.509 certificate's serial number. X509RawDataKeyIdentifierClause Represents a key identifier clause that identifies a security token using the X.509 certificate's raw data. X509SecurityToken Represents a security token that is based upon an X.509 certificate. X509SecurityTokenHandler SecurityTokenHandler for X509SecurityToken. By default, the handler will do chain-trust validation of the Certificate. X509SubjectKeyIdentifierClause Represents a key identifier clause that identifies a security token using the X.509 certificate's subject key identifier extension. X509ThumbprintKeyIdentifierClause Represents a key identifier clause that identifies a security tokens using the X.509 certificate's thumbprint."
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.IssuerNameRegistry.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.IssuerNameRegistry.html",
    "title": "Class IssuerNameRegistry",
    "keywords": "Class IssuerNameRegistry Interface that defines the name service that returns that issuer name of a given token as string. Inheritance Object IssuerNameRegistry ConfigurationBasedIssuerNameRegistry Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public abstract class IssuerNameRegistry : Object Constructors IssuerNameRegistry() Declaration protected IssuerNameRegistry() Methods GetIssuerName(SecurityToken) When implemented in the derived class, the method returns the issuer name of the given SecurityToken's issuer. Implementations must return a non-null and non-empty string to identify a recognized issuer, or a null string to identify an unrecognized issuer. Declaration public abstract string GetIssuerName(SecurityToken securityToken) Parameters Type Name Description SecurityToken securityToken The SecurityToken whose name is requested. Returns Type Description String Issuer name as a string. GetIssuerName(SecurityToken, String) When implemented in the derived class the method returns the issuer name of the given SecurityToken's issuer. The requested issuer name may be considered in determining the issuer's name. Declaration public virtual string GetIssuerName(SecurityToken securityToken, string requestedIssuerName) Parameters Type Name Description SecurityToken securityToken The SecurityToken whose name is requested. String requestedIssuerName Input to determine the issuer name Returns Type Description String Issuer name as a string. Remarks The default implementation ignores the requestedIsserName parameter and simply calls the GetIssuerName( SecurityToken securityToken ) method GetWindowsIssuerName() This function returns the default issuer name to be used for Windows claims. Declaration public virtual string GetWindowsIssuerName() Returns Type Description String Issuer name as a string."
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.IssuerTokenResolver.html",
    "title": "Class IssuerTokenResolver",
    "keywords": "Class IssuerTokenResolver Resolves issuer tokens received from service partners. Inheritance Object SecurityTokenResolver IssuerTokenResolver Inherited Members SecurityTokenResolver.ResolveToken(SecurityKeyIdentifier) SecurityTokenResolver.TryResolveToken(SecurityKeyIdentifier, SecurityToken) SecurityTokenResolver.ResolveToken(SecurityKeyIdentifierClause) SecurityTokenResolver.TryResolveToken(SecurityKeyIdentifierClause, SecurityToken) SecurityTokenResolver.ResolveSecurityKey(SecurityKeyIdentifierClause) SecurityTokenResolver.TryResolveSecurityKey(SecurityKeyIdentifierClause, SecurityKey) SecurityTokenResolver.CreateDefaultSecurityTokenResolver(ReadOnlyCollection<SecurityToken>, Boolean) Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class IssuerTokenResolver : SecurityTokenResolver Constructors IssuerTokenResolver() Creates an instance of IssuerTokenResolver. Declaration public IssuerTokenResolver() IssuerTokenResolver(SecurityTokenResolver) Creates an instance of IssuerTokenResolver using a given SecurityTokenResolver . Declaration public IssuerTokenResolver(SecurityTokenResolver wrappedTokenResolver) Parameters Type Name Description SecurityTokenResolver wrappedTokenResolver The SecurityTokenResolver to use. Fields DefaultStoreLocation Default store location for resolving X509 certificates. Declaration public static readonly StoreLocation DefaultStoreLocation Field Value Type Description StoreLocation DefaultStoreName Default store for resolving X509 certificates. Declaration public static readonly StoreName DefaultStoreName Field Value Type Description StoreName Properties WrappedTokenResolver Gets the SecurityTokenResolver wrapped by this class. Declaration public SecurityTokenResolver WrappedTokenResolver { get; } Property Value Type Description SecurityTokenResolver Methods TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, out SecurityKey) Inherited from SecurityTokenResolver . Declaration protected override bool TryResolveSecurityKeyCore(SecurityKeyIdentifierClause keyIdentifierClause, out SecurityKey key) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause SecurityKey key Returns Type Description Boolean Overrides SecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, out SecurityKey) TryResolveTokenCore(SecurityKeyIdentifierClause, out SecurityToken) Inherited from SecurityTokenResolver . Declaration protected override bool TryResolveTokenCore(SecurityKeyIdentifierClause keyIdentifierClause, out SecurityToken token) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause SecurityToken token Returns Type Description Boolean Overrides SecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause, out SecurityToken) TryResolveTokenCore(SecurityKeyIdentifier, out SecurityToken) Inherited from SecurityTokenResolver . Declaration protected override bool TryResolveTokenCore(SecurityKeyIdentifier keyIdentifier, out SecurityToken token) Parameters Type Name Description SecurityKeyIdentifier keyIdentifier SecurityToken token Returns Type Description Boolean Overrides SecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier, out SecurityToken)"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.LocalIdKeyIdentifierClause.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.LocalIdKeyIdentifierClause.html",
    "title": "Class LocalIdKeyIdentifierClause",
    "keywords": "Class LocalIdKeyIdentifierClause Represents a key identifier clause that identifies a security tokens specified in the security header of the SOAP message. Inheritance Object SecurityKeyIdentifierClause LocalIdKeyIdentifierClause Inherited Members SecurityKeyIdentifierClause.CreateKey() SecurityKeyIdentifierClause.GetDerivationNonce() SecurityKeyIdentifierClause.CanCreateKey SecurityKeyIdentifierClause.ClauseType SecurityKeyIdentifierClause.Id SecurityKeyIdentifierClause.DerivationLength Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class LocalIdKeyIdentifierClause : SecurityKeyIdentifierClause Remarks Typically, the <xref:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause> does not need to be used, other than when a custom security token service is created. When a security token service returns a security token, the issued security token contains references to attached and unattached security tokens Attached references refer to security tokens that are contained within the security header of the SOAP message and unattached references are security tokens that are not included within the security header of the SOAP message. These references typically affirm the authenticity of the issued security token. The <xref:System.IdentityModel.Tokens.LocalIdKeyIdentifierClause> key identifier is placed within an &lt;SecurityTokenReference> element. Constructors LocalIdKeyIdentifierClause(String) Declaration public LocalIdKeyIdentifierClause(string localId) Parameters Type Name Description String localId LocalIdKeyIdentifierClause(String, Byte[], Int32, Type) Declaration public LocalIdKeyIdentifierClause(string localId, byte[] derivationNonce, int derivationLength, Type ownerType) Parameters Type Name Description String localId Byte [] derivationNonce Int32 derivationLength Type ownerType LocalIdKeyIdentifierClause(String, Type) Declaration public LocalIdKeyIdentifierClause(string localId, Type ownerType) Parameters Type Name Description String localId Type ownerType Properties LocalId Declaration public string LocalId { get; } Property Value Type Description String OwnerType Declaration public Type OwnerType { get; } Property Value Type Description Type Methods Matches(SecurityKeyIdentifierClause) Declaration public override bool Matches(SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause Returns Type Description Boolean Overrides SecurityKeyIdentifierClause.Matches(SecurityKeyIdentifierClause) Matches(String, Type) Declaration public bool Matches(string localId, Type ownerType) Parameters Type Name Description String localId Type ownerType Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.RsaKeyIdentifierClause.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.RsaKeyIdentifierClause.html",
    "title": "Class RsaKeyIdentifierClause",
    "keywords": "Class RsaKeyIdentifierClause Represents a key identifier clause that identifies a security token. Inheritance Object SecurityKeyIdentifierClause RsaKeyIdentifierClause Inherited Members SecurityKeyIdentifierClause.GetDerivationNonce() SecurityKeyIdentifierClause.ClauseType SecurityKeyIdentifierClause.Id SecurityKeyIdentifierClause.DerivationLength Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class RsaKeyIdentifierClause : SecurityKeyIdentifierClause Remarks Typically, the <xref:System.IdentityModel.Tokens.RsaKeyIdentifierClause> does not need to be used, other than when a custom security token service is created. When a security token service returns a security token, the issued security token contains references to attached and unattached security tokens. Attached references refer to security tokens that are contained within the security header of a SOAP message and unattached references are security tokens that are not included within the security header in the SOAP message. These references typically affirm the authenticity of the issued security token. Use the <xref:System.IdentityModel.Tokens.RsaKeyIdentifierClause> class to reference a <xref:System.IdentityModel.Tokens.RsaSecurityToken> security token and to access the RSA algorithm. To access the RSA algorithm, get the value of the <xref:System.IdentityModel.Tokens.RsaKeyIdentifierClause.Rsa%2A> property. Constructors RsaKeyIdentifierClause(RSA) Declaration public RsaKeyIdentifierClause(RSA rsa) Parameters Type Name Description RSA rsa Properties CanCreateKey Declaration public override bool CanCreateKey { get; } Property Value Type Description Boolean Overrides SecurityKeyIdentifierClause.CanCreateKey Rsa Declaration public RSA Rsa { get; } Property Value Type Description RSA Methods CreateKey() Declaration public override SecurityKey CreateKey() Returns Type Description SecurityKey Overrides SecurityKeyIdentifierClause.CreateKey() GetExponent() Declaration public byte[] GetExponent() Returns Type Description Byte [] GetModulus() Declaration public byte[] GetModulus() Returns Type Description Byte [] Matches(SecurityKeyIdentifierClause) Declaration public override bool Matches(SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause Returns Type Description Boolean Overrides SecurityKeyIdentifierClause.Matches(SecurityKeyIdentifierClause) Matches(RSA) Declaration public bool Matches(RSA rsa) Parameters Type Name Description RSA rsa Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String WriteExponentAsBase64(XmlWriter) Declaration public void WriteExponentAsBase64(XmlWriter writer) Parameters Type Name Description XmlWriter writer WriteModulusAsBase64(XmlWriter) Declaration public void WriteModulusAsBase64(XmlWriter writer) Parameters Type Name Description XmlWriter writer"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.RsaSecurityKey.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.RsaSecurityKey.html",
    "title": "Class RsaSecurityKey",
    "keywords": "Class RsaSecurityKey Represents a security key that is generated using the RSA algorithm. This class cannot be inherited. Inheritance Object SecurityKey AsymmetricSecurityKey RsaSecurityKey Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public sealed class RsaSecurityKey : AsymmetricSecurityKey Remarks To be added. Constructors RsaSecurityKey(RSA) Declaration public RsaSecurityKey(RSA rsa) Parameters Type Name Description RSA rsa Properties KeySize Declaration public override int KeySize { get; } Property Value Type Description Int32 Overrides SecurityKey.KeySize Methods DecryptKey(String, Byte[]) Declaration public override byte[] DecryptKey(string algorithm, byte[] keyData) Parameters Type Name Description String algorithm Byte [] keyData Returns Type Description Byte [] Overrides SecurityKey.DecryptKey(String, Byte[]) EncryptKey(String, Byte[]) Declaration public override byte[] EncryptKey(string algorithm, byte[] keyData) Parameters Type Name Description String algorithm Byte [] keyData Returns Type Description Byte [] Overrides SecurityKey.EncryptKey(String, Byte[]) GetAsymmetricAlgorithm(String, Boolean) Declaration public override AsymmetricAlgorithm GetAsymmetricAlgorithm(string algorithm, bool requiresPrivateKey) Parameters Type Name Description String algorithm Boolean requiresPrivateKey Returns Type Description AsymmetricAlgorithm Overrides AsymmetricSecurityKey.GetAsymmetricAlgorithm(String, Boolean) GetHashAlgorithmForSignature(String) Declaration public override HashAlgorithm GetHashAlgorithmForSignature(string algorithm) Parameters Type Name Description String algorithm Returns Type Description HashAlgorithm Overrides AsymmetricSecurityKey.GetHashAlgorithmForSignature(String) GetSignatureDeformatter(String) Declaration public override AsymmetricSignatureDeformatter GetSignatureDeformatter(string algorithm) Parameters Type Name Description String algorithm Returns Type Description AsymmetricSignatureDeformatter Overrides AsymmetricSecurityKey.GetSignatureDeformatter(String) GetSignatureFormatter(String) Declaration public override AsymmetricSignatureFormatter GetSignatureFormatter(string algorithm) Parameters Type Name Description String algorithm Returns Type Description AsymmetricSignatureFormatter Overrides AsymmetricSecurityKey.GetSignatureFormatter(String) HasPrivateKey() Declaration public override bool HasPrivateKey() Returns Type Description Boolean Overrides AsymmetricSecurityKey.HasPrivateKey() IsSupportedAlgorithm(String) Declaration public override bool IsSupportedAlgorithm(string algorithm) Parameters Type Name Description String algorithm Returns Type Description Boolean Overrides SecurityKey.IsSupportedAlgorithm(String)"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.Saml2SecurityToken.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.Saml2SecurityToken.html",
    "title": "Class Saml2SecurityToken",
    "keywords": "Class Saml2SecurityToken A security token backed by a SAML2 assertion. Inheritance Object SecurityToken Saml2SecurityToken Inherited Members SecurityToken.CanCreateKeyIdentifierClause<T>() SecurityToken.CreateKeyIdentifierClause<T>() SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause) SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause) Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class Saml2SecurityToken : SecurityToken Constructors Saml2SecurityToken() Declaration protected Saml2SecurityToken() Saml2SecurityToken(Saml2Assertion) Declaration public Saml2SecurityToken(Saml2Assertion assertion) Parameters Type Name Description Saml2Assertion assertion Saml2SecurityToken(Saml2SecurityToken, ReadOnlyCollection<SecurityKey>) Declaration public Saml2SecurityToken(Saml2SecurityToken saml2SecurityToken, ReadOnlyCollection<SecurityKey> keys) Parameters Type Name Description Saml2SecurityToken saml2SecurityToken ReadOnlyCollection < SecurityKey > keys Properties Assertion Declaration public Saml2Assertion Assertion { get; } Property Value Type Description Saml2Assertion Id Declaration public override string Id { get; } Property Value Type Description String Overrides SecurityToken.Id SecurityKeys Gets the collection of SecurityKey contained in this token. Declaration public override ReadOnlyCollection<SecurityKey> SecurityKeys { get; } Property Value Type Description ReadOnlyCollection < SecurityKey > Overrides SecurityToken.SecurityKeys ValidFrom Declaration public override DateTime ValidFrom { get; } Property Value Type Description DateTime Overrides SecurityToken.ValidFrom ValidTo Declaration public override DateTime ValidTo { get; } Property Value Type Description DateTime Overrides SecurityToken.ValidTo Methods Initialize(Saml2Assertion) Declaration protected void Initialize(Saml2Assertion assertion) Parameters Type Name Description Saml2Assertion assertion"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.Saml2SecurityTokenHandler.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.Saml2SecurityTokenHandler.html",
    "title": "Class Saml2SecurityTokenHandler",
    "keywords": "Class Saml2SecurityTokenHandler Creates SAML2 assertion-based security tokens Inheritance Object SecurityTokenHandler Saml2SecurityTokenHandler Inherited Members SecurityTokenHandler.CanReadToken(String) SecurityTokenHandler.ReadToken(XmlReader, SecurityTokenResolver) SecurityTokenHandler.ReadToken(String) SecurityTokenHandler.WriteToken(SecurityToken) SecurityTokenHandler.CanReadKeyIdentifierClause(XmlReader) SecurityTokenHandler.ReadKeyIdentifierClause(XmlReader) SecurityTokenHandler.CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause) SecurityTokenHandler.WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause) SecurityTokenHandler.CreateToken(SecurityTokenDescriptor) SecurityTokenHandler.CreateSecurityTokenReference(SecurityToken, Boolean) SecurityTokenHandler.DetectReplayedToken(SecurityToken) SecurityTokenHandler.Configuration SecurityTokenHandler.ContainingCollection Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class Saml2SecurityTokenHandler : SecurityTokenHandler Constructors Saml2SecurityTokenHandler() Creates an instance of Saml2SecurityTokenHandler Declaration public Saml2SecurityTokenHandler() Saml2SecurityTokenHandler(SamlSecurityTokenRequirement) Creates an instance of Saml2SecurityTokenHandler Declaration public Saml2SecurityTokenHandler(SamlSecurityTokenRequirement samlSecurityTokenRequirement) Parameters Type Name Description SamlSecurityTokenRequirement samlSecurityTokenRequirement The SamlSecurityTokenRequirement to be used by the Saml2SecurityTokenHandler instance when validating tokens. Saml2SecurityTokenHandler(Saml2SecurityTokenHandler) Method exposed for extensibility Declaration public Saml2SecurityTokenHandler(Saml2SecurityTokenHandler saml2SecurityTokenHandler) Parameters Type Name Description Saml2SecurityTokenHandler saml2SecurityTokenHandler Saml2SecurityTokenHandler(Saml2SecurityTokenHandler, SamlSecurityTokenRequirement) Declaration public Saml2SecurityTokenHandler(Saml2SecurityTokenHandler saml2SecurityTokenHandler, SamlSecurityTokenRequirement samlSecurityTokenRequirement) Parameters Type Name Description Saml2SecurityTokenHandler saml2SecurityTokenHandler SamlSecurityTokenRequirement samlSecurityTokenRequirement Fields TokenProfile11ValueType The key identifier value type for SAML 2.0 assertion IDs, as defined by the OASIS Web Services Security SAML Token Profile 1.1. Declaration public const string TokenProfile11ValueType = \"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLID\" Field Value Type Description String Properties CanValidateToken Returns value indicates if this handler can validate tokens of type Saml2SecurityToken. Declaration public override bool CanValidateToken { get; } Property Value Type Description Boolean Overrides SecurityTokenHandler.CanValidateToken CanWriteToken Gets a boolean indicating if the SecurityTokenHandler can Serialize Tokens. Return true by default. Declaration public override bool CanWriteToken { get; } Property Value Type Description Boolean Overrides SecurityTokenHandler.CanWriteToken KeyInfoSerializer Gets or Sets a SecurityTokenSerializers that will be used to serialize and deserializer SecurtyKeyIdentifier. For example, SamlSubject SecurityKeyIdentifier or Signature SecurityKeyIdentifier. Declaration public SecurityTokenSerializer KeyInfoSerializer { get; set; } Property Value Type Description SecurityTokenSerializer TokenType Gets the System.Type of the SecurityToken is supported by ththis handler. Declaration public override Type TokenType { get; } Property Value Type Description Type Overrides SecurityTokenHandler.TokenType Methods CanReadToken(XmlReader) Indicates whether the current XML element can be read as a token of the type handled by this instance. Declaration public override bool CanReadToken(XmlReader reader) Parameters Type Name Description XmlReader reader An XML reader positioned at a start element. The reader should not be advanced. Returns Type Description Boolean 'True' if the ReadToken method can the element. Overrides SecurityTokenHandler.CanReadToken(XmlReader) GetTokenTypeIdentifiers() Returns the saml token's token type that is supported by this handler. Declaration public override string[] GetTokenTypeIdentifiers() Returns Type Description String [] Overrides SecurityTokenHandler.GetTokenTypeIdentifiers() ReadToken(XmlReader) Deserializes from XML a token of the type handled by this instance. Declaration public override SecurityToken ReadToken(XmlReader reader) Parameters Type Name Description XmlReader reader An XML reader positioned at the token's start element. Returns Type Description SecurityToken An instance of Saml2SecurityToken . Overrides SecurityTokenHandler.ReadToken(XmlReader) Exceptions Type Condition InvalidOperationException Is thrown if 'Configuration' or 'Configruation.IssuerTokenResolver' is null. ResolveSecurityKeys(Saml2Assertion, SecurityTokenResolver) Resolves the collection of SecurityKey referenced in a Saml2Assertion . Declaration protected virtual ReadOnlyCollection<SecurityKey> ResolveSecurityKeys(Saml2Assertion assertion, SecurityTokenResolver resolver) Parameters Type Name Description Saml2Assertion assertion Saml2Assertion to process. SecurityTokenResolver resolver SecurityTokenResolver to use in resolving the SecurityKey . Returns Type Description ReadOnlyCollection < SecurityKey > A read only collection of SecurityKey contained in the assertion. TryResolveIssuerToken(Saml2Assertion, SecurityTokenResolver, out SecurityToken) Declaration protected virtual bool TryResolveIssuerToken(Saml2Assertion assertion, SecurityTokenResolver issuerResolver, out SecurityToken token) Parameters Type Name Description Saml2Assertion assertion SecurityTokenResolver issuerResolver SecurityToken token Returns Type Description Boolean ValidateToken(SecurityToken) Validates a Saml2SecurityToken . Declaration public override ReadOnlyCollection<ClaimsIdentity> ValidateToken(SecurityToken token) Parameters Type Name Description SecurityToken token The Saml2SecurityToken to validate. Returns Type Description ReadOnlyCollection < ClaimsIdentity > The ReadOnlyCollection<T> of ClaimsIdentity representing the identities contained in the token. Overrides SecurityTokenHandler.ValidateToken(SecurityToken) Exceptions Type Condition ArgumentNullException The parameter 'token' is null. ArgumentException The token is not assignable from Saml2SecurityToken . InvalidOperationException Configuration SecurityTokenHandlerConfiguration is null. ArgumentException Saml2SecurityToken.Assertion is null. SecurityTokenValidationException Thrown if Saml2SecurityToken.Assertion.SigningToken is null. SecurityTokenValidationException Thrown if the certificate associated with the token issuer does not pass validation. WriteToken(XmlWriter, SecurityToken) Serializes the given SecurityToken to the XmlWriter. Declaration public override void WriteToken(XmlWriter writer, SecurityToken token) Parameters Type Name Description XmlWriter writer XmlWriter into which the token is serialized. SecurityToken token SecurityToken to be serialized. Overrides SecurityTokenHandler.WriteToken(XmlWriter, SecurityToken) Exceptions Type Condition ArgumentNullException Input parameter 'writer' or 'token' is null. SecurityTokenException The given 'token' is not a Saml2SecurityToken."
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SamlAccessDecision.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SamlAccessDecision.html",
    "title": "Class SamlAccessDecision",
    "keywords": "Class SamlAccessDecision Specifies whether the subject of a security token is granted access to a given resource. Inheritance Object SamlAccessDecision Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public sealed class SamlAccessDecision : Enum Remarks Use the <xref:System.IdentityModel.Tokens.SamlAccessDecision> to express access permissions to a resource in a <xref:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement> within a <xref:System.IdentityModel.Tokens.SamlSecurityToken> security token. Fields Deny Declaration public const SamlAccessDecision Deny Field Value Type Description SamlAccessDecision Indeterminate Declaration public const SamlAccessDecision Indeterminate Field Value Type Description SamlAccessDecision Permit Declaration public const SamlAccessDecision Permit Field Value Type Description SamlAccessDecision value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SamlAuthenticationClaimResource.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SamlAuthenticationClaimResource.html",
    "title": "Class SamlAuthenticationClaimResource",
    "keywords": "Class SamlAuthenticationClaimResource Represents the resource type for a claim that is created from a . Inheritance Object SamlAuthenticationClaimResource Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SamlAuthenticationClaimResource : Object Remarks Use the <xref:System.IdentityModel.Tokens.SamlAuthenticationClaimResource> class to create a <xref:System.IdentityModel.Claims.Claim> instance for a <xref:System.IdentityModel.Tokens.SamlSecurityToken> authentication claim. The <xref:System.IdentityModel.Claims.Claim> class has a constructor that takes a resource, which this class can be passed to. <xref:System.IdentityModel.Tokens.SamlSecurityToken> security tokens specify their claims using SAML assertions, which can specify when the subject was authenticated. The claims in a SAML assertion are represented by SAML statements. The SAML specification defines a set of SAML statement types and one of them is a <xref:System.IdentityModel.Tokens.SamlAuthenticationStatement>. A <xref:System.IdentityModel.Tokens.SamlAuthenticationStatement> asserts that the statement's subject is authenticated by a particular means at a particular time. The <xref:System.IdentityModel.Tokens.SamlAuthenticationClaimResource> class represents a claim resource for the <xref:System.IdentityModel.Tokens.SamlAuthenticationStatement>. Constructors SamlAuthenticationClaimResource(DateTime, String, String, String) Declaration public SamlAuthenticationClaimResource(DateTime authenticationInstant, string authenticationMethod, string dnsAddress, string ipAddress) Parameters Type Name Description DateTime authenticationInstant String authenticationMethod String dnsAddress String ipAddress SamlAuthenticationClaimResource(DateTime, String, String, String, IEnumerable<SamlAuthorityBinding>) Declaration public SamlAuthenticationClaimResource(DateTime authenticationInstant, string authenticationMethod, string dnsAddress, string ipAddress, IEnumerable<SamlAuthorityBinding> authorityBindings) Parameters Type Name Description DateTime authenticationInstant String authenticationMethod String dnsAddress String ipAddress IEnumerable < SamlAuthorityBinding > authorityBindings SamlAuthenticationClaimResource(DateTime, String, String, String, ReadOnlyCollection<SamlAuthorityBinding>) Declaration public SamlAuthenticationClaimResource(DateTime authenticationInstant, string authenticationMethod, string dnsAddress, string ipAddress, ReadOnlyCollection<SamlAuthorityBinding> authorityBindings) Parameters Type Name Description DateTime authenticationInstant String authenticationMethod String dnsAddress String ipAddress ReadOnlyCollection < SamlAuthorityBinding > authorityBindings Properties AuthenticationInstant Declaration public DateTime AuthenticationInstant { get; } Property Value Type Description DateTime AuthenticationMethod Declaration public string AuthenticationMethod { get; } Property Value Type Description String AuthorityBindings Declaration public ReadOnlyCollection<SamlAuthorityBinding> AuthorityBindings { get; } Property Value Type Description ReadOnlyCollection < SamlAuthorityBinding > DnsAddress Declaration public string DnsAddress { get; } Property Value Type Description String IPAddress Declaration public string IPAddress { get; } Property Value Type Description String Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource.html",
    "title": "Class SamlAuthorizationDecisionClaimResource",
    "keywords": "Class SamlAuthorizationDecisionClaimResource Represents a claim for a security token that asserts an authorization decision regarding access to a specific resource. Inheritance Object SamlAuthorizationDecisionClaimResource Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SamlAuthorizationDecisionClaimResource : Object Remarks <xref:System.IdentityModel.Tokens.SamlSecurityToken> security tokens specify their claims using SAML assertions. The claims in a SAML assertion are represented by SAML statements. The SAML specification defines a set of SAML statement types and one of them is a <xref:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement>. A <xref:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement> asserts an authorization decision by a SAML authority regarding access to a specific resource. The <xref:System.IdentityModel.Tokens.SamlAuthorizationDecisionClaimResource> class represents a claim resource for the <xref:System.IdentityModel.Tokens.SamlAuthorizationDecisionStatement>. Constructors SamlAuthorizationDecisionClaimResource(String, SamlAccessDecision, String, String) Declaration public SamlAuthorizationDecisionClaimResource(string resource, SamlAccessDecision accessDecision, string actionNamespace, string actionName) Parameters Type Name Description String resource SamlAccessDecision accessDecision String actionNamespace String actionName Properties AccessDecision Declaration public SamlAccessDecision AccessDecision { get; } Property Value Type Description SamlAccessDecision ActionName Declaration public string ActionName { get; } Property Value Type Description String ActionNamespace Declaration public string ActionNamespace { get; } Property Value Type Description String Resource Declaration public string Resource { get; } Property Value Type Description String Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SamlSecurityToken.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SamlSecurityToken.html",
    "title": "Class SamlSecurityToken",
    "keywords": "Class SamlSecurityToken Represents a security token that is based upon a SAML assertion. Inheritance Object SecurityToken SamlSecurityToken Inherited Members SecurityToken.CanCreateKeyIdentifierClause<T>() SecurityToken.CreateKeyIdentifierClause<T>() SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause) SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause) Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SamlSecurityToken : SecurityToken Remarks The claims for <xref:System.IdentityModel.Tokens.SamlSecurityToken> security tokens are expressed as part of a <xref:System.IdentityModel.Tokens.SamlAssertion>. A <xref:System.IdentityModel.Tokens.SamlAssertion> has an extensible set of claims known as SAML statements that are represented by the <xref:System.IdentityModel.Tokens.SamlAssertion.Statements%2A> property. The SAML authority that issued the SAML assertion is specified in the <xref:System.IdentityModel.Tokens.SamlAssertion.Issuer%2A> property. Constructors SamlSecurityToken() Declaration protected SamlSecurityToken() SamlSecurityToken(SamlAssertion) Declaration public SamlSecurityToken(SamlAssertion assertion) Parameters Type Name Description SamlAssertion assertion Properties AssertionXML Declaration public string AssertionXML { get; } Property Value Type Description String Id Declaration public override string Id { get; } Property Value Type Description String Overrides SecurityToken.Id SecurityKeys Declaration public override ReadOnlyCollection<SecurityKey> SecurityKeys { get; } Property Value Type Description ReadOnlyCollection < SecurityKey > Overrides SecurityToken.SecurityKeys ValidFrom Declaration public override DateTime ValidFrom { get; } Property Value Type Description DateTime Overrides SecurityToken.ValidFrom ValidTo Declaration public override DateTime ValidTo { get; } Property Value Type Description DateTime Overrides SecurityToken.ValidTo Methods Initialize(SamlAssertion) Declaration protected void Initialize(SamlAssertion assertion) Parameters Type Name Description SamlAssertion assertion"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SamlSecurityTokenHandler.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SamlSecurityTokenHandler.html",
    "title": "Class SamlSecurityTokenHandler",
    "keywords": "Class SamlSecurityTokenHandler This class implements a SecurityTokenHandler for a Saml11 token. It contains functionality for: Creating, Serializing and Validating a Saml 11 Token. Inheritance Object SecurityTokenHandler SamlSecurityTokenHandler Inherited Members SecurityTokenHandler.CanReadToken(String) SecurityTokenHandler.ReadToken(XmlReader, SecurityTokenResolver) SecurityTokenHandler.ReadToken(String) SecurityTokenHandler.WriteToken(SecurityToken) SecurityTokenHandler.CanReadKeyIdentifierClause(XmlReader) SecurityTokenHandler.ReadKeyIdentifierClause(XmlReader) SecurityTokenHandler.CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause) SecurityTokenHandler.WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause) SecurityTokenHandler.CreateToken(SecurityTokenDescriptor) SecurityTokenHandler.CreateSecurityTokenReference(SecurityToken, Boolean) SecurityTokenHandler.DetectReplayedToken(SecurityToken) SecurityTokenHandler.Configuration SecurityTokenHandler.ContainingCollection Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SamlSecurityTokenHandler : SecurityTokenHandler Constructors SamlSecurityTokenHandler() Initializes an instance of SamlSecurityTokenHandler Declaration public SamlSecurityTokenHandler() SamlSecurityTokenHandler(SamlSecurityTokenRequirement) Initializes an instance of SamlSecurityTokenHandler Declaration public SamlSecurityTokenHandler(SamlSecurityTokenRequirement samlSecurityTokenRequirement) Parameters Type Name Description SamlSecurityTokenRequirement samlSecurityTokenRequirement The SamlSecurityTokenRequirement to be used by the Saml11SecurityTokenHandler instance when validating tokens. SamlSecurityTokenHandler(SamlSecurityTokenHandler) Method exposed for extensibility Declaration public SamlSecurityTokenHandler(SamlSecurityTokenHandler samlSecurityTokenHandler) Parameters Type Name Description SamlSecurityTokenHandler samlSecurityTokenHandler SamlSecurityTokenHandler(SamlSecurityTokenHandler, SamlSecurityTokenRequirement) Declaration public SamlSecurityTokenHandler(SamlSecurityTokenHandler samlSecurityTokenHandler, SamlSecurityTokenRequirement samlSecurityTokenRequirement) Parameters Type Name Description SamlSecurityTokenHandler samlSecurityTokenHandler SamlSecurityTokenRequirement samlSecurityTokenRequirement Properties CanValidateToken Returns value indicates if this handler can validate tokens of type SamlSecurityToken. Declaration public override bool CanValidateToken { get; } Property Value Type Description Boolean Overrides SecurityTokenHandler.CanValidateToken CanWriteToken Gets a boolean indicating if the SecurityTokenHandler can Serialize Tokens. Return true by default. Declaration public override bool CanWriteToken { get; } Property Value Type Description Boolean Overrides SecurityTokenHandler.CanWriteToken KeyInfoSerializer Gets or Sets a SecurityTokenSerializers that will be used to serialize and deserializer SecurtyKeyIdentifier. For example, SamlSubject SecurityKeyIdentifier or Signature SecurityKeyIdentifier. Declaration public SecurityTokenSerializer KeyInfoSerializer { get; set; } Property Value Type Description SecurityTokenSerializer TokenType Gets the System.Type of the SecurityToken is supported by ththis handler. Declaration public override Type TokenType { get; } Property Value Type Description Type Overrides SecurityTokenHandler.TokenType Methods CanReadToken(XmlReader) Indicates whether the current XML element can be read as a token of the type handled by this instance. Declaration public override bool CanReadToken(XmlReader reader) Parameters Type Name Description XmlReader reader An XML reader positioned at a start element. The reader should not be advanced. Returns Type Description Boolean 'True' if the ReadToken method can the element. Overrides SecurityTokenHandler.CanReadToken(XmlReader) GetTokenTypeIdentifiers() Returns the saml token's token type that is supported by this handler. Declaration public override string[] GetTokenTypeIdentifiers() Returns Type Description String [] Overrides SecurityTokenHandler.GetTokenTypeIdentifiers() ReadToken(XmlReader) Deserializes from XML a token of the type handled by this instance. Declaration public override SecurityToken ReadToken(XmlReader reader) Parameters Type Name Description XmlReader reader An XML reader positioned at the token's start element. Returns Type Description SecurityToken An instance of SamlSecurityToken . Overrides SecurityTokenHandler.ReadToken(XmlReader) Exceptions Type Condition InvalidOperationException Is thrown if 'Configuration' or 'Configruation.IssuerTokenResolver' is null. ResolveSubjectKeyIdentifier(SecurityKeyIdentifier) Resolves the SecurityKeyIdentifier specified in a saml:Subject element. Declaration protected virtual SecurityKey ResolveSubjectKeyIdentifier(SecurityKeyIdentifier subjectKeyIdentifier) Parameters Type Name Description SecurityKeyIdentifier subjectKeyIdentifier SecurityKeyIdentifier to resolve into a key. Returns Type Description SecurityKey SecurityKey Exceptions Type Condition ArgumentNullException The input parameter 'subjectKeyIdentifier' is null. TryResolveIssuerToken(SamlAssertion, SecurityTokenResolver, out SecurityToken) Declaration protected virtual bool TryResolveIssuerToken(SamlAssertion assertion, SecurityTokenResolver issuerResolver, out SecurityToken token) Parameters Type Name Description SamlAssertion assertion SecurityTokenResolver issuerResolver SecurityToken token Returns Type Description Boolean ValidateToken(SecurityToken) Validates a SamlSecurityToken . Declaration public override ReadOnlyCollection<ClaimsIdentity> ValidateToken(SecurityToken token) Parameters Type Name Description SecurityToken token The SamlSecurityToken to validate. Returns Type Description ReadOnlyCollection < ClaimsIdentity > The ReadOnlyCollection<T> of ClaimsIdentity representing the identities contained in the token. Overrides SecurityTokenHandler.ValidateToken(SecurityToken) Exceptions Type Condition ArgumentNullException The parameter 'token' is null. ArgumentException The token is not assignable from SamlSecurityToken . InvalidOperationException Configuration SecurityTokenHandlerConfiguration is null. ArgumentException SamlSecurityToken.Assertion is null. SecurityTokenValidationException Thrown if SamlSecurityToken.Assertion.SigningToken is null. SecurityTokenValidationException Thrown if the certificate associated with the token issuer does not pass validation. WriteToken(XmlWriter, SecurityToken) Serializes the given SecurityToken to the XmlWriter. Declaration public override void WriteToken(XmlWriter writer, SecurityToken token) Parameters Type Name Description XmlWriter writer XmlWriter into which the token is serialized. SecurityToken token SecurityToken to be serialized. Overrides SecurityTokenHandler.WriteToken(XmlWriter, SecurityToken) Exceptions Type Condition ArgumentNullException Input parameter 'writer' or 'token' is null. SecurityTokenException The given 'token' is not a SamlSecurityToken."
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SamlSecurityTokenRequirement.html",
    "title": "Class SamlSecurityTokenRequirement",
    "keywords": "Class SamlSecurityTokenRequirement Extends the class by adding new properties that are useful for issued tokens. Inheritance Object SamlSecurityTokenRequirement Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SamlSecurityTokenRequirement : Object Remarks To be added. Constructors SamlSecurityTokenRequirement() Creates an instance of SamlSecurityTokenRequirement Declaration public SamlSecurityTokenRequirement() Properties CertificateValidator Gets/sets the X509CertificateValidator associated with this token requirement Declaration public X509CertificateValidator CertificateValidator { get; set; } Property Value Type Description X509CertificateValidator NameClaimType Gets or sets the Claim Type that will be used to generate the FederatedIdentity.Name property. Declaration public string NameClaimType { get; set; } Property Value Type Description String RoleClaimType Gets the Claim Types that are used to generate the FederatedIdentity.Roles property. Declaration public string RoleClaimType { get; set; } Property Value Type Description String Methods ShouldEnforceAudienceRestriction(AudienceUriMode, SecurityToken) Checks if Audience Enforcement checks are required for the given token based on this SamlSecurityTokenRequirement settings. Declaration public virtual bool ShouldEnforceAudienceRestriction(AudienceUriMode audienceUriMode, SecurityToken token) Parameters Type Name Description AudienceUriMode audienceUriMode The AudienceUriMode defining the audience requirement. SecurityToken token The Security token to be tested for Audience Enforcement. Returns Type Description Boolean True if Audience Enforcement should be applied. Exceptions Type Condition ArgumentNullException The input argument 'token' is null. ValidateAudienceRestriction(IList<Uri>, IList<Uri>) Checks the given list of Audience URIs with the AllowedAudienceUri list. Declaration public virtual void ValidateAudienceRestriction(IList<Uri> allowedAudienceUris, IList<Uri> tokenAudiences) Parameters Type Name Description IList < Uri > allowedAudienceUris Collection of AudienceUris. IList < Uri > tokenAudiences Collection of audience URIs the token applies to. Exceptions Type Condition ArgumentNullException The input argument 'allowedAudienceUris' is null. ArgumentNullException The input argument 'tokenAudiences' is null. AudienceUriValidationFailedException Either the input argument 'tokenAudiences' or the configured 'AudienceUris' collection is empty."
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityAlgorithms.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityAlgorithms.html",
    "title": "Class SecurityAlgorithms",
    "keywords": "Class SecurityAlgorithms Defines constants for the URIs that represent the cryptographic algorithms that are used to encrypt XML and compute digital signatures for SOAP messages. Inheritance Object SecurityAlgorithms Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public static class SecurityAlgorithms : Object Remarks To be added. Fields Aes128Encryption Declaration public const string Aes128Encryption = \"http://www.w3.org/2001/04/xmlenc#aes128-cbc\" Field Value Type Description String Aes128KeyWrap Declaration public const string Aes128KeyWrap = \"http://www.w3.org/2001/04/xmlenc#kw-aes128\" Field Value Type Description String Aes192Encryption Declaration public const string Aes192Encryption = \"http://www.w3.org/2001/04/xmlenc#aes192-cbc\" Field Value Type Description String Aes192KeyWrap Declaration public const string Aes192KeyWrap = \"http://www.w3.org/2001/04/xmlenc#kw-aes192\" Field Value Type Description String Aes256Encryption Declaration public const string Aes256Encryption = \"http://www.w3.org/2001/04/xmlenc#aes256-cbc\" Field Value Type Description String Aes256KeyWrap Declaration public const string Aes256KeyWrap = \"http://www.w3.org/2001/04/xmlenc#kw-aes256\" Field Value Type Description String DesEncryption Declaration public const string DesEncryption = \"http://www.w3.org/2001/04/xmlenc#des-cbc\" Field Value Type Description String DsaSha1Signature Declaration public const string DsaSha1Signature = \"http://www.w3.org/2000/09/xmldsig#dsa-sha1\" Field Value Type Description String ExclusiveC14n Declaration public const string ExclusiveC14n = \"http://www.w3.org/2001/10/xml-exc-c14n#\" Field Value Type Description String ExclusiveC14nWithComments Declaration public const string ExclusiveC14nWithComments = \"http://www.w3.org/2001/10/xml-exc-c14n#WithComments\" Field Value Type Description String HmacSha1Signature Declaration public const string HmacSha1Signature = \"http://www.w3.org/2000/09/xmldsig#hmac-sha1\" Field Value Type Description String HmacSha256Signature Declaration public const string HmacSha256Signature = \"http://www.w3.org/2001/04/xmldsig-more#hmac-sha256\" Field Value Type Description String Psha1KeyDerivation Declaration public const string Psha1KeyDerivation = \"http://schemas.xmlsoap.org/ws/2005/02/sc/dk/p_sha1\" Field Value Type Description String Psha1KeyDerivationDec2005 Declaration public const string Psha1KeyDerivationDec2005 = \"http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512/dk/p_sha1\" Field Value Type Description String Ripemd160Digest Declaration public const string Ripemd160Digest = \"http://www.w3.org/2001/04/xmlenc#ripemd160\" Field Value Type Description String RsaOaepKeyWrap Declaration public const string RsaOaepKeyWrap = \"http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p\" Field Value Type Description String RsaSha1Signature Declaration public const string RsaSha1Signature = \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\" Field Value Type Description String RsaSha256Signature Declaration public const string RsaSha256Signature = \"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\" Field Value Type Description String RsaV15KeyWrap Declaration public const string RsaV15KeyWrap = \"http://www.w3.org/2001/04/xmlenc#rsa-1_5\" Field Value Type Description String Sha1Digest Declaration public const string Sha1Digest = \"http://www.w3.org/2000/09/xmldsig#sha1\" Field Value Type Description String Sha256Digest Declaration public const string Sha256Digest = \"http://www.w3.org/2001/04/xmlenc#sha256\" Field Value Type Description String Sha512Digest Declaration public const string Sha512Digest = \"http://www.w3.org/2001/04/xmlenc#sha512\" Field Value Type Description String StrTransform Declaration public const string StrTransform = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#STR-Transform\" Field Value Type Description String TlsSspiKeyWrap Declaration public const string TlsSspiKeyWrap = \"http://schemas.xmlsoap.org/2005/02/trust/tlsnego#TLS_Wrap\" Field Value Type Description String TripleDesEncryption Declaration public const string TripleDesEncryption = \"http://www.w3.org/2001/04/xmlenc#tripledes-cbc\" Field Value Type Description String TripleDesKeyWrap Declaration public const string TripleDesKeyWrap = \"http://www.w3.org/2001/04/xmlenc#kw-tripledes\" Field Value Type Description String WindowsSspiKeyWrap Declaration public const string WindowsSspiKeyWrap = \"http://schemas.xmlsoap.org/2005/02/trust/spnego#GSS_Wrap\" Field Value Type Description String"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityKey.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityKey.html",
    "title": "Class SecurityKey",
    "keywords": "Class SecurityKey Base class for security keys. Inheritance Object SecurityKey AsymmetricSecurityKey SecurityKeyElement SymmetricSecurityKey Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public abstract class SecurityKey : Object Remarks Security keys are used for cryptographic operations, such as generating digital signatures and encrypting XML data. Constructors SecurityKey() Declaration protected SecurityKey() Properties KeySize Declaration public abstract int KeySize { get; } Property Value Type Description Int32 Methods DecryptKey(String, Byte[]) Declaration public abstract byte[] DecryptKey(string algorithm, byte[] keyData) Parameters Type Name Description String algorithm Byte [] keyData Returns Type Description Byte [] EncryptKey(String, Byte[]) Declaration public abstract byte[] EncryptKey(string algorithm, byte[] keyData) Parameters Type Name Description String algorithm Byte [] keyData Returns Type Description Byte [] IsSupportedAlgorithm(String) Declaration public abstract bool IsSupportedAlgorithm(string algorithm) Parameters Type Name Description String algorithm Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityKeyElement.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityKeyElement.html",
    "title": "Class SecurityKeyElement",
    "keywords": "Class SecurityKeyElement SecurityKeyElement provides delayed resolution of security keys by resolving the SecurityKeyIdentifierClause or SecurityKeyIdentifier only when cryptographic functions are needed. This allows a key clause or identifier that is never used by an application to be serialized and deserialzied on and off the wire without issue. Inheritance Object SecurityKey SecurityKeyElement Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SecurityKeyElement : SecurityKey Constructors SecurityKeyElement(SecurityKeyIdentifierClause, SecurityTokenResolver) Constructor to use when working with SecurityKeyIdentifierClauses Declaration public SecurityKeyElement(SecurityKeyIdentifierClause securityKeyIdentifierClause, SecurityTokenResolver securityTokenResolver) Parameters Type Name Description SecurityKeyIdentifierClause securityKeyIdentifierClause SecurityKeyIdentifierClause that represents a SecuriytKey SecurityTokenResolver securityTokenResolver SecurityTokenResolver that can be resolved to a SecurityKey Exceptions Type Condition ArgumentNullException Thrown if the 'clause' is null SecurityKeyElement(SecurityKeyIdentifier, SecurityTokenResolver) Constructor to use when working with SecurityKeyIdentifiers Declaration public SecurityKeyElement(SecurityKeyIdentifier securityKeyIdentifier, SecurityTokenResolver securityTokenResolver) Parameters Type Name Description SecurityKeyIdentifier securityKeyIdentifier SecurityKeyIdentifier that represents a SecuriytKey SecurityTokenResolver securityTokenResolver SecurityTokenResolver that can be resolved to a SecurityKey Exceptions Type Condition ArgumentNullException Thrown if the 'securityKeyIdentifier' is null Properties KeySize Gets the key size in bits. Declaration public override int KeySize { get; } Property Value Type Description Int32 Key size in bits. Overrides SecurityKey.KeySize Methods DecryptKey(String, Byte[]) Decrypts a key using the specified algorithm. Declaration public override byte[] DecryptKey(string algorithm, byte[] keyData) Parameters Type Name Description String algorithm Algorithm to use when decrypting the key. Byte [] keyData Bytes representing the encrypted key. Returns Type Description Byte [] Decrypted bytes. Overrides SecurityKey.DecryptKey(String, Byte[]) EncryptKey(String, Byte[]) Encrypts a key using the specified algorithm. Declaration public override byte[] EncryptKey(string algorithm, byte[] keyData) Parameters Type Name Description String algorithm Algorithm to use when encrypting the key. Byte [] keyData Bytes representing the key. Returns Type Description Byte [] Encrypted bytes. Overrides SecurityKey.EncryptKey(String, Byte[]) IsAsymmetricAlgorithm(String) Answers question: is the algorithm Asymmetric. Declaration public virtual bool IsAsymmetricAlgorithm(string algorithm) Parameters Type Name Description String algorithm Algorithm to check. Returns Type Description Boolean True if algorithm will be processed by runtime as Asymmetric. IsSupportedAlgorithm(String) Answers question: is the algorithm is supported by this key. Declaration public override bool IsSupportedAlgorithm(string algorithm) Parameters Type Name Description String algorithm Algorithm to check. Returns Type Description Boolean True if algorithm is supported by this key. Overrides SecurityKey.IsSupportedAlgorithm(String) IsSymmetricAlgorithm(String) Answers question: is the algorithm Symmetric. Declaration public virtual bool IsSymmetricAlgorithm(string algorithm) Parameters Type Name Description String algorithm Algorithm to check. Returns Type Description Boolean True if algorithm will be processed by runtime as Symmetric."
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifier.html",
    "title": "Class SecurityKeyIdentifier",
    "keywords": "Class SecurityKeyIdentifier Represents a key identifier. Inheritance Object SecurityKeyIdentifier Implements IEnumerable < SecurityKeyIdentifierClause > IEnumerable Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SecurityKeyIdentifier : Object Remarks Typically, the <xref:System.IdentityModel.Tokens.SecurityKeyIdentifier> is not used, other than when a custom security token service is created. When a security token service returns a security token, the issued security token contains references to attached and unattached security tokens. Attached references refer to security tokens that are contained within the security header of a SOAP message and unattached references are security tokens that are not included within the security header of a SOAP message. These references typically affirm the authenticity of the issued security token. These references are represented by classes that derive from the <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause> class. The <xref:System.IdentityModel.Tokens.SecurityKeyIdentifier> class contains the collection of these references. Constructors SecurityKeyIdentifier() Declaration public SecurityKeyIdentifier() SecurityKeyIdentifier(SecurityKeyIdentifierClause[]) Declaration public SecurityKeyIdentifier(params SecurityKeyIdentifierClause[] clauses) Parameters Type Name Description SecurityKeyIdentifierClause [] clauses Properties CanCreateKey Declaration public bool CanCreateKey { get; } Property Value Type Description Boolean Count Declaration public int Count { get; } Property Value Type Description Int32 IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean Item[Int32] Declaration public SecurityKeyIdentifierClause this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description SecurityKeyIdentifierClause Methods Add(SecurityKeyIdentifierClause) Declaration public void Add(SecurityKeyIdentifierClause clause) Parameters Type Name Description SecurityKeyIdentifierClause clause CreateKey() Declaration public SecurityKey CreateKey() Returns Type Description SecurityKey Find<TClause>() Declaration public TClause Find<TClause>() where TClause : SecurityKeyIdentifierClause Returns Type Description TClause Type Parameters Name Description TClause GetEnumerator() Declaration public IEnumerator<SecurityKeyIdentifierClause> GetEnumerator() Returns Type Description IEnumerator < SecurityKeyIdentifierClause > MakeReadOnly() Declaration public void MakeReadOnly() ToString() Declaration public override string ToString() Returns Type Description String TryFind<TClause>(out TClause) Declaration public bool TryFind<TClause>(out TClause clause) where TClause : SecurityKeyIdentifierClause Parameters Type Name Description TClause clause Returns Type Description Boolean Type Parameters Name Description TClause Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityKeyIdentifierClauseSerializer.html",
    "title": "Class SecurityKeyIdentifierClauseSerializer",
    "keywords": "Class SecurityKeyIdentifierClauseSerializer Abstract class for SecurityKeyIdentifierClause Serializer. Inheritance Object SecurityKeyIdentifierClauseSerializer X509DataSecurityKeyIdentifierClauseSerializer Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public abstract class SecurityKeyIdentifierClauseSerializer : Object Constructors SecurityKeyIdentifierClauseSerializer() Declaration protected SecurityKeyIdentifierClauseSerializer() Methods CanReadKeyIdentifierClause(XmlReader) When implmented in the derived class will check the element where the reader is positioned for a SecurityKeyIdentifierClause type. Declaration public abstract bool CanReadKeyIdentifierClause(XmlReader reader) Parameters Type Name Description XmlReader reader XmlReader positioned at a SecurityKeyIdentifierClause element. Returns Type Description Boolean True if the SecurityKeyIdentifierClause can be deserialized. CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause) When implemented in the derived class, the method checks if the given SecurityKeyIdentifierClause can be serialized. Declaration public abstract bool CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause securityKeyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause securityKeyIdentifierClause SecurityKeyIdentifierClause to be serialized. Returns Type Description Boolean True if the SecurityKeyIdentifierClause can be serialized. ReadKeyIdentifierClause(XmlReader) When implemented in the dervice class will deserialize a SecurityKeyIdentifierClause from the given XmlReader. Declaration public abstract SecurityKeyIdentifierClause ReadKeyIdentifierClause(XmlReader reader) Parameters Type Name Description XmlReader reader XmlReader positioned at a SecurityKeyIdentifierClause. Returns Type Description SecurityKeyIdentifierClause Deserialized SecurityKeyIdentifierClause WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause) When implemented in the derived class will serialize the given SecurityKeyIdentifierClause to the XmlWriter. Declaration public abstract void WriteKeyIdentifierClause(XmlWriter writer, SecurityKeyIdentifierClause securityKeyIdentifierClause) Parameters Type Name Description XmlWriter writer XmlWriter to serialize the SecurityKeyIdenfierClause. SecurityKeyIdentifierClause securityKeyIdentifierClause SecurityKeyIdentifierClause to be serialized."
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityKeyType.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityKeyType.html",
    "title": "Class SecurityKeyType",
    "keywords": "Class SecurityKeyType Specifies the type of key that is associated with a security token. Inheritance Object SecurityKeyType Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public sealed class SecurityKeyType : Enum Remarks Use the <xref:System.IdentityModel.Tokens.SecurityKeyType> enumeration to set the <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.KeyType%2A> property. The BearerKey field is used with the <xref:CoreWCF.Configuration.IssuedTokenParametersElement.KeyType%2A> property. BearerKey Requires Wsu:Id or Transport Security with Message Credentials In federation scenarios, an issued token is generally configured as an endorsing supporting token for message security between a client and the relying parties. However, when a Security Token Service (STS) issues a token with no key (BearerKey), WCF configures it as a <xref:CoreWCF.Security.SecurityTokenAttachmentMode.SignedEncrypted?displayProperty=nameWithType> supporting token (WCF cannot endorse without a key). This requires the issued token to be referenced in the signature. WCF currently uses the following: http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd:Id as a reference mechanism (Wsu:Id). If an issued token does not have such an attribute, on a client, a <xref:CoreWCF.Security.MessageSecurityException> is thrown with the text \"Element to sign must have id\". This happens when a SAML 1.1 token is used as an issued token (the Wsu:Id is not defined in the SAML 1.1 specification). To work around this situation, either use transport security with message credentials (for example, <xref:CoreWCF.Configuration.AuthenticationMode.IssuedTokenOverTransport?displayProperty=nameWithType>), or an STS must add the http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd:Id (Wsu:Id) to the issued token. Note that if the Wsu:Id is added to a SAML 1.1 token, the resulting XML does not comply to the SAML 1.1 specification. The alternative is to add a Wsu:Id to the EncryptedData which is a result of encrypting the issued token. This procedure complies with the SAML 1.1 specification, because the EncryptedData element supports the Wsu:Id attribute. So to be compliant with the specification, the bearer token must be encrypted by the STS. Fields AsymmetricKey Declaration public const SecurityKeyType AsymmetricKey Field Value Type Description SecurityKeyType BearerKey Declaration public const SecurityKeyType BearerKey Field Value Type Description SecurityKeyType SymmetricKey Declaration public const SecurityKeyType SymmetricKey Field Value Type Description SecurityKeyType value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityToken.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityToken.html",
    "title": "Class SecurityToken",
    "keywords": "Class SecurityToken Represents a base class used to implement all security tokens. Inheritance Object SecurityToken EncryptedSecurityToken GenericIdentitySecurityToken GenericXmlSecurityToken Saml2SecurityToken SamlSecurityToken SessionSecurityToken WindowsSecurityToken X509SecurityToken BinarySecretSecurityToken SecurityContextSecurityToken SspiSecurityToken WrappedKeySecurityToken Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public abstract class SecurityToken : Object Remarks e a security token to provide authentication credentials or to protect a message. A security token can be used to provide authentication credentials, cryptographic key material, or, in the case of a security token issued by a security token service (STS), a collection of claims about a subject. All security tokens derive from the <xref:System.IdentityModel.Tokens.SecurityToken> class. Beginning with .NET 4.5, Windows Identity Foundation (WIF) has been fully integrated into the .NET Framework and the classes exposed by WIF are the preferred method of handling security tokens in your code. In WIF, security tokens are serialized and deserialized to and from their XML representation and are validated by using classes derived from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler> base class. Validating a token involves not just ensuring that the token is valid, but also returning a <xref:System.Security.Claims.ClaimsIdentity> instance from the token that can be used in making authentication and authorization decisions. The <xref:System.Security.Claims.ClaimsIdentity> is constructed by the token handler's implementation of the <xref:System.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken%2A> method from the claims contained in the token as well as from claims that are intrinsic to the token type itself. WIF ships with support for the following types of security tokens: <xref:System.IdentityModel.Tokens.Saml2SecurityToken>: Represents a security token that is based upon a SAML 2.0 Assertion. This token type is typically issued by a security token service in response to a WS-Trust or WS-Federation security token request (RST). <xref:System.IdentityModel.Tokens.SamlSecurityToken>: Represents a security token that is based upon a SAML 1.1 Assertion. This token type is typically issued by a security token service in response to a WS-Trust or WS-Federation security token request (RST). <xref:System.IdentityModel.Tokens.KerberosRequestorSecurityToken> and <xref:System.IdentityModel.Tokens.KerberosReceiverSecurityToken>: Represents a security token that is based upon a Kerberos ticket that is received or sent in a SOAP message <xref:System.IdentityModel.Tokens.RsaSecurityToken>: Represents a security token that is based upon key that is created using the RSA algorithm. <xref:System.IdentityModel.Tokens.SessionSecurityToken>: Represents a security token that contains information about a session. <xref:System.IdentityModel.Tokens.UserNameSecurityToken>: Represents a security token that is based on a username and password. <xref:System.IdentityModel.Tokens.WindowsSecurityToken>: Represents a security token that is based on the identity of a Windows domain or user account. <xref:System.IdentityModel.Tokens.X509SecurityToken>: Represents a security token that is based on an X.509 certificate. <xref:System.IdentityModel.Tokens.X509WindowsSecurityToken>: Represents a security token that is based upon an X.509 certificate that is mapped to a Windows domain user or local computer user account. Two other security token classes, <xref:System.IdentityModel.Tokens.GenericXmlSecurityToken> and <xref:System.IdentityModel.Tokens.EncryptedSecurityToken>, can be used to help handle general cases. Broadly speaking security tokens fall into three major categories: Tokens that carry or reference cryptographic key material. For example the <xref:System.IdentityModel.Tokens.RsaSecurityToken> and <xref:System.IdentityModel.Tokens.X509SecurityToken> types are often used for this purpose. Tokens that represent credentials for users that have already been authenticated. For example, the <xref:System.IdentityModel.Tokens.UserNameSecurityToken>, <xref:System.IdentityModel.Tokens.WindowsSecurityToken>, and, in the case of a user authenticated using a certificate, the <xref:System.IdentityModel.Tokens.X509SecurityToken> types. Tokens that are issued by a security token service (STS) in response to a security token request using either the WS-Trust or WS-Federation protocol. These are typically returned in a wst:RequestSecurityTokenResponse XML fragment. The <xref:System.IdentityModel.Tokens.Saml2SecurityToken> and <xref:System.IdentityModel.Tokens.SamlSecurityToken> types are most often used to represent these tokens. A special token type, the <xref:System.IdentityModel.Tokens.SessionSecurityToken>, contains information necessary to recreate a principal when using sessions in active or passive scenarios. To add functionality to existing token types you can derive from the specific type and its associated token handler to support any new elements that you add to the token. To add support for new token types, you can derive directly from the <xref:System.IdentityModel.Tokens.SecurityToken> class. When you do this, you will also need to create a token handler class by deriving from the <xref:System.IdentityModel.Tokens.SecurityTokenHandler> class. Depending on how your token is to be used, you may also need to create a custom token resolver by deriving from the <xref:System.IdentityModel.Tokens.IssuerTokenResolver> class as well as one or more custom key identifier clause types by deriving from the <xref:System.IdentityModel.Tokens.SecurityKeyIdentifierClause> class. Constructors SecurityToken() Declaration protected SecurityToken() Properties Id Declaration public abstract string Id { get; } Property Value Type Description String SecurityKeys Declaration public abstract ReadOnlyCollection<SecurityKey> SecurityKeys { get; } Property Value Type Description ReadOnlyCollection < SecurityKey > ValidFrom Declaration public abstract DateTime ValidFrom { get; } Property Value Type Description DateTime ValidTo Declaration public abstract DateTime ValidTo { get; } Property Value Type Description DateTime Methods CanCreateKeyIdentifierClause<T>() Declaration public virtual bool CanCreateKeyIdentifierClause<T>() where T : SecurityKeyIdentifierClause Returns Type Description Boolean Type Parameters Name Description T CreateKeyIdentifierClause<T>() Declaration public virtual T CreateKeyIdentifierClause<T>() where T : SecurityKeyIdentifierClause Returns Type Description T Type Parameters Name Description T MatchesKeyIdentifierClause(SecurityKeyIdentifierClause) Declaration public virtual bool MatchesKeyIdentifierClause(SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause Returns Type Description Boolean ResolveKeyIdentifierClause(SecurityKeyIdentifierClause) Declaration public virtual SecurityKey ResolveKeyIdentifierClause(SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause Returns Type Description SecurityKey"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityTokenDescriptor.html",
    "title": "Class SecurityTokenDescriptor",
    "keywords": "Class SecurityTokenDescriptor This is a place holder for all the attributes related to the issued token. Inheritance Object SecurityTokenDescriptor Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SecurityTokenDescriptor : Object Constructors SecurityTokenDescriptor() Declaration public SecurityTokenDescriptor() Properties AppliesToAddress Gets or sets the address for the AppliesTo property. Declaration public string AppliesToAddress { get; set; } Property Value Type Description String Exceptions Type Condition InvalidOperationException Thrown if not an absolute URI. AttachedReference Gets or sets the SecurityKeyIdentifierClause when the token is attached to the message. Declaration public SecurityKeyIdentifierClause AttachedReference { get; set; } Property Value Type Description SecurityKeyIdentifierClause AuthenticationInfo Gets or sets the AuthenticationInformation. Declaration public AuthenticationInformation AuthenticationInfo { get; set; } Property Value Type Description AuthenticationInformation EncryptingCredentials Gets or sets the credentials used to encrypt the token. Declaration public EncryptingCredentials EncryptingCredentials { get; set; } Property Value Type Description EncryptingCredentials Lifetime Gets or sets the lifetime information for the issued token. Declaration public Lifetime Lifetime { get; set; } Property Value Type Description Lifetime Properties Gets the properties bag to extend the object. Declaration public Dictionary<string, object> Properties { get; } Property Value Type Description Dictionary < String , Object > ReplyToAddress Gets or sets the address for the ReplyToAddress property. Declaration public string ReplyToAddress { get; set; } Property Value Type Description String SigningCredentials Gets or sets the credentials used to sign the token. Declaration public SigningCredentials SigningCredentials { get; set; } Property Value Type Description SigningCredentials Subject Gets or sets the OutputClaims to be included in the issued token. Declaration public ClaimsIdentity Subject { get; set; } Property Value Type Description ClaimsIdentity Token Gets or sets the issued security token. Declaration public SecurityToken Token { get; set; } Property Value Type Description SecurityToken TokenIssuerName Gets or sets the issuer name, which may be used inside the issued token as well. Declaration public string TokenIssuerName { get; set; } Property Value Type Description String TokenType Gets or sets the token type of the issued token. Declaration public string TokenType { get; set; } Property Value Type Description String UnattachedReference Gets or sets the unattached token reference to refer to the issued token when it is not attached to the message. Declaration public SecurityKeyIdentifierClause UnattachedReference { get; set; } Property Value Type Description SecurityKeyIdentifierClause Methods AddAuthenticationClaims(String) Adds a Claim for the authentication type to the claim collection of the SecurityTokenDescriptor Declaration public void AddAuthenticationClaims(string authType) Parameters Type Name Description String authType The authentication type. AddAuthenticationClaims(String, DateTime) Adds Claim s for the authentication type and the authentication instant to the claim collection of the SecurityTokenDescriptor Declaration public void AddAuthenticationClaims(string authType, DateTime time) Parameters Type Name Description String authType Specifies the authentication type DateTime time Specifies the authentication instant in UTC. If the input is not in UTC, it is converted to UTC."
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityTokenElement.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityTokenElement.html",
    "title": "Class SecurityTokenElement",
    "keywords": "Class SecurityTokenElement This class represents a number elements found in a which represent security tokens. Inheritance Object SecurityTokenElement Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SecurityTokenElement : Object Remarks This class is not thread-safe. Constructors SecurityTokenElement(SecurityToken) Creates an instance of this object using a SecurityToken object. Declaration public SecurityTokenElement(SecurityToken securityToken) Parameters Type Name Description SecurityToken securityToken The security token this object represents. Remarks GetIdentities() is not supported by this object if this constructor is used unless ValidateToken(XmlElement, SecurityTokenHandlerCollection) is overriden. If the securityToken passed in is a GenericXmlSecurityToken then SecurityTokenXml will be set to the value found in GenericXmlSecurityToken SecurityTokenElement(XmlElement, SecurityTokenHandlerCollection) Creates an instance of this object using XML representation of the security token. Declaration public SecurityTokenElement(XmlElement securityTokenXml, SecurityTokenHandlerCollection securityTokenHandlers) Parameters Type Name Description XmlElement securityTokenXml The XmlElement representation of the security token. SecurityTokenHandlerCollection securityTokenHandlers The collection of SecurityTokenHandler objects that may be used to read and validate the security token this object represents. Properties SecurityTokenXml Gets the XML representation of the token. Declaration public XmlElement SecurityTokenXml { get; } Property Value Type Description XmlElement Remarks This property will be null unless this object was constructed using SecurityTokenElement(XmlElement, SecurityTokenHandlerCollection) . Methods GetIdentities() Gets the collection of ClaimsIdentity contained in the token. ValidateToken(XmlElement, SecurityTokenHandlerCollection) Declaration public ReadOnlyCollection<ClaimsIdentity> GetIdentities() Returns Type Description ReadOnlyCollection < ClaimsIdentity > A ReadOnlyCollection<T> of ClaimsIdentity representing the identities contained in the token. GetSecurityToken() Gets the security token this object represents. Declaration public SecurityToken GetSecurityToken() Returns Type Description SecurityToken The SecurityToken this object represents Remarks If this object was not constructed directly with a SecurityToken using SecurityTokenElement(SecurityToken) , ReadSecurityToken(XmlElement, SecurityTokenHandlerCollection) will be called for this value. ReadSecurityToken(XmlElement, SecurityTokenHandlerCollection) Reads a SecurityToken from the provided XML representation. Declaration protected virtual SecurityToken ReadSecurityToken(XmlElement securityTokenXml, SecurityTokenHandlerCollection securityTokenHandlers) Parameters Type Name Description XmlElement securityTokenXml The XML representation of the security token. SecurityTokenHandlerCollection securityTokenHandlers The SecurityTokenHandlerCollection used to read the token. Returns Type Description SecurityToken A SecurityToken . ValidateToken(XmlElement, SecurityTokenHandlerCollection) Creates the identities for the represented by the SecurityToken . Declaration protected virtual ReadOnlyCollection<ClaimsIdentity> ValidateToken(XmlElement securityTokenXml, SecurityTokenHandlerCollection securityTokenHandlers) Parameters Type Name Description XmlElement securityTokenXml The XmlElement representation of the security token. SecurityTokenHandlerCollection securityTokenHandlers The collection of SecurityTokenHandler objects that may be used to read and validate the security token this object represents. Returns Type Description ReadOnlyCollection < ClaimsIdentity > A ReadOnlyCollection<T> of ClaimsIdentity representing the identities contained in the token. Exceptions Type Condition InvalidOperationException If either parameter 'securityTokenXml' or 'securityTokenHandlers' are null."
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityTokenException.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityTokenException.html",
    "title": "Class SecurityTokenException",
    "keywords": "Class SecurityTokenException The exception that is thrown when a problem occurs while processing a security token. Inheritance Object SecurityTokenException EncryptedTokenDecryptionFailedException SecurityTokenValidationException Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SecurityTokenException : Exception Remarks To be added. Constructors SecurityTokenException() Declaration public SecurityTokenException() SecurityTokenException(SerializationInfo, StreamingContext) Declaration protected SecurityTokenException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context SecurityTokenException(String) Declaration public SecurityTokenException(string message) Parameters Type Name Description String message SecurityTokenException(String, Exception) Declaration public SecurityTokenException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityTokenExpiredException.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityTokenExpiredException.html",
    "title": "Class SecurityTokenExpiredException",
    "keywords": "Class SecurityTokenExpiredException Throw this exception when a received Security Token has expiration time in the past. Inheritance Object SecurityTokenException SecurityTokenValidationException SecurityTokenExpiredException Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SecurityTokenExpiredException : SecurityTokenValidationException Constructors SecurityTokenExpiredException() Initializes a new instance of SecurityTokenExpiredException Declaration public SecurityTokenExpiredException() SecurityTokenExpiredException(SerializationInfo, StreamingContext) Initializes a new instance of SecurityTokenExpiredException Declaration protected SecurityTokenExpiredException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context SecurityTokenExpiredException(String) Initializes a new instance of SecurityTokenExpiredException Declaration public SecurityTokenExpiredException(string message) Parameters Type Name Description String message SecurityTokenExpiredException(String, Exception) Initializes a new instance of SecurityTokenExpiredException Declaration public SecurityTokenExpiredException(string message, Exception inner) Parameters Type Name Description String message Exception inner"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityTokenHandler.html",
    "title": "Class SecurityTokenHandler",
    "keywords": "Class SecurityTokenHandler Defines the interface for a Security Token Handler. Inheritance Object SecurityTokenHandler EncryptedSecurityTokenHandler Saml2SecurityTokenHandler SamlSecurityTokenHandler SessionSecurityTokenHandler UserNameSecurityTokenHandler X509SecurityTokenHandler Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public abstract class SecurityTokenHandler : Object Constructors SecurityTokenHandler() Creates an instance of SecurityTokenHandler Declaration protected SecurityTokenHandler() Properties CanValidateToken Gets a value indicating whether this handler supports validation of tokens handled by this instance. Declaration public virtual bool CanValidateToken { get; } Property Value Type Description Boolean 'True' if the instance is capable of SecurityToken validation. CanWriteToken Gets a value indicating whether the class provides serialization functionality to serialize token handled by this instance. Declaration public virtual bool CanWriteToken { get; } Property Value Type Description Boolean true if the WriteToken method can serialize this token. Configuration Gets or sets the SecurityTokenHandlerConfiguration Declaration public SecurityTokenHandlerConfiguration Configuration { get; set; } Property Value Type Description SecurityTokenHandlerConfiguration ContainingCollection Gets or sets the SecurityTokenHandlerCollection that this SecurityTokenHandler is part of. This property should never be set directly. When the SecurityTokenHandler is added to a collection this property is automatically set. Declaration public SecurityTokenHandlerCollection ContainingCollection { get; } Property Value Type Description SecurityTokenHandlerCollection TokenType Gets the System.Type of the SecurityToken this instance handles. Declaration public abstract Type TokenType { get; } Property Value Type Description Type Methods CanReadKeyIdentifierClause(XmlReader) Indicates if the current XML element is pointing to a KeyIdentifierClause that can be serialized by this instance. Declaration public virtual bool CanReadKeyIdentifierClause(XmlReader reader) Parameters Type Name Description XmlReader reader An XML reader positioned at the start element. The reader should not be advanced. Returns Type Description Boolean true if the ReadKeyIdentifierClause can read the element. CanReadToken(String) Indicates whether the current token string can be read as a token of the type handled by this instance. Declaration public virtual bool CanReadToken(string tokenString) Parameters Type Name Description String tokenString The token string thats needs to be read. Returns Type Description Boolean 'True' if the ReadToken method can parse the token string. CanReadToken(XmlReader) Indicates whether the current XML element can be read as a token of the type handled by this instance. Declaration public virtual bool CanReadToken(XmlReader reader) Parameters Type Name Description XmlReader reader An XML reader positioned at a start element. The reader should not be advanced. Returns Type Description Boolean 'True' if the ReadToken method can the element. CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause) Indicates if the given SecurityKeyIdentifierClause can be serialized by this instance. Declaration public virtual bool CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause securityKeyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause securityKeyIdentifierClause SecurityKeyIdentifierClause to be serialized. Returns Type Description Boolean true if the given SecurityKeyIdentifierClause can be serialized. CreateSecurityTokenReference(SecurityToken, Boolean) Creates the security token reference for tokens handled by this instance. Declaration public virtual SecurityKeyIdentifierClause CreateSecurityTokenReference(SecurityToken token, bool attached) Parameters Type Name Description SecurityToken token The SecurityToken instance for which the references needs to be created. Boolean attached Boolean that indicates if a attached or unattached reference needs to be created. Returns Type Description SecurityKeyIdentifierClause A SecurityKeyIdentifierClause that identifies the given token. CreateToken(SecurityTokenDescriptor) Called by the STS to create a token given a token descriptor. Declaration public virtual SecurityToken CreateToken(SecurityTokenDescriptor tokenDescriptor) Parameters Type Name Description SecurityTokenDescriptor tokenDescriptor Describes the token; properties such as ValidFrom, AppliesTo, EncryptingCredentials, Claims, etc., are filled in before the call to create token. Returns Type Description SecurityToken A SecurityToken that matches the properties of the token descriptor. DetectReplayedToken(SecurityToken) Throws if a token is detected as being replayed. Override this method in your derived class to detect replays. Declaration protected virtual void DetectReplayedToken(SecurityToken token) Parameters Type Name Description SecurityToken token The token to check for replay. GetTokenTypeIdentifiers() The URI used in requests to identify a token of the type handled by this instance. Declaration public abstract string[] GetTokenTypeIdentifiers() Returns Type Description String [] The set of URIs that identify the token this handler supports. Remarks For example, this should be the URI value used in the RequestSecurityToken's TokenType element to request this sort of token. ReadKeyIdentifierClause(XmlReader) Deserializes the XML to a KeyIdentifierClause that references a token handled by this instance. Declaration public virtual SecurityKeyIdentifierClause ReadKeyIdentifierClause(XmlReader reader) Parameters Type Name Description XmlReader reader An XML reader positioned at the KeyIdentifierClause start element. Returns Type Description SecurityKeyIdentifierClause SecurityKeyIdentifierClause instance. ReadToken(String) Deserializes from string a token of the type handled by this instance. Declaration public virtual SecurityToken ReadToken(string tokenString) Parameters Type Name Description String tokenString The string to be deserialized. Returns Type Description SecurityToken SecurityToken instance which represents the serialized token. ReadToken(XmlReader) Deserializes from XML a token of the type handled by this instance. Declaration public virtual SecurityToken ReadToken(XmlReader reader) Parameters Type Name Description XmlReader reader An XML reader positioned at the token's start element. Returns Type Description SecurityToken SecurityToken instance. ReadToken(XmlReader, SecurityTokenResolver) Deserializes from XML a token of the type handled by this instance. Declaration public virtual SecurityToken ReadToken(XmlReader reader, SecurityTokenResolver tokenResolver) Parameters Type Name Description XmlReader reader An XML reader positioned at the token's start element. SecurityTokenResolver tokenResolver The SecrityTokenResolver that contains out-of-band and cached tokens. Returns Type Description SecurityToken SecurityToken instance. ValidateToken(SecurityToken) Validates a SecurityToken . Declaration public virtual ReadOnlyCollection<ClaimsIdentity> ValidateToken(SecurityToken token) Parameters Type Name Description SecurityToken token The SecurityToken to validate. Returns Type Description ReadOnlyCollection < ClaimsIdentity > The ReadOnlyCollection<T> of ClaimsIdentity representing the identities contained in the token. Remarks Derived types will validate specific tokens. WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause) Serializes to XML a SecurityKeyIdentifierClause that this instance supports. Declaration public virtual void WriteKeyIdentifierClause(XmlWriter writer, SecurityKeyIdentifierClause securityKeyIdentifierClause) Parameters Type Name Description XmlWriter writer The XML writer. SecurityKeyIdentifierClause securityKeyIdentifierClause The SecurityKeyIdentifierClause to be used to serialize the token. WriteToken(SecurityToken) Serializes to string a token of the type handled by this instance. Declaration public virtual string WriteToken(SecurityToken token) Parameters Type Name Description SecurityToken token A token of type TokenType. Returns Type Description String The serialized token. WriteToken(XmlWriter, SecurityToken) Serializes to XML a token of the type handled by this instance. Declaration public virtual void WriteToken(XmlWriter writer, SecurityToken token) Parameters Type Name Description XmlWriter writer The XML writer. SecurityToken token A token of type TokenType."
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollection.html",
    "title": "Class SecurityTokenHandlerCollection",
    "keywords": "Class SecurityTokenHandlerCollection Defines a collection of SecurityTokenHandlers. Inheritance Object SecurityTokenHandlerCollection Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SecurityTokenHandlerCollection : Collection<SecurityTokenHandler> Constructors SecurityTokenHandlerCollection() Creates an instance of SecurityTokenHandlerCollection . Creates an empty set. Declaration public SecurityTokenHandlerCollection() SecurityTokenHandlerCollection(SecurityTokenHandlerConfiguration) Creates an instance of SecurityTokenHandlerCollection . Creates an empty set. Declaration public SecurityTokenHandlerCollection(SecurityTokenHandlerConfiguration configuration) Parameters Type Name Description SecurityTokenHandlerConfiguration configuration The configuration to associate with the collection. SecurityTokenHandlerCollection(IEnumerable<SecurityTokenHandler>) Creates an instance of SecurityTokenHandlerCollection Declaration public SecurityTokenHandlerCollection(IEnumerable<SecurityTokenHandler> handlers) Parameters Type Name Description IEnumerable < SecurityTokenHandler > handlers List of SecurityTokenHandlers to initialize from. Remarks Do not use this constructor to attempt to clone an instance of a SecurityTokenHandlerCollection, use the Clone method instead. SecurityTokenHandlerCollection(IEnumerable<SecurityTokenHandler>, SecurityTokenHandlerConfiguration) Creates an instance of SecurityTokenHandlerCollection Declaration public SecurityTokenHandlerCollection(IEnumerable<SecurityTokenHandler> handlers, SecurityTokenHandlerConfiguration configuration) Parameters Type Name Description IEnumerable < SecurityTokenHandler > handlers List of SecurityTokenHandlers to initialize from. SecurityTokenHandlerConfiguration configuration The SecurityTokenHandlerConfiguration in effect. Remarks Do not use this constructor to attempt to clone an instance of a SecurityTokenHandlerCollection, use the Clone method instead. Properties Configuration Gets an instance of SecurityTokenHandlerConfiguration Declaration public SecurityTokenHandlerConfiguration Configuration { get; } Property Value Type Description SecurityTokenHandlerConfiguration Item[SecurityToken] Declaration public SecurityTokenHandler this[SecurityToken token] { get; } Parameters Type Name Description SecurityToken token Property Value Type Description SecurityTokenHandler Item[String] Gets a Token Handler by its Token Type Identifier. Declaration public SecurityTokenHandler this[string tokenTypeIdentifier] { get; } Parameters Type Name Description String tokenTypeIdentifier The Token Type Identfier string to search for. Property Value Type Description SecurityTokenHandler Instance of a SecurityTokenHandler. Item[Type] Gets a Token Handler based on the System.Type of the token. Declaration public SecurityTokenHandler this[Type tokenType] { get; } Parameters Type Name Description Type tokenType System.Type of the Token that needs to be handled. Property Value Type Description SecurityTokenHandler Instance of SecurityTokenHandler. TokenTypeIdentifiers Gets the list of Token type Identifier of the Token Handlers. Declaration public IEnumerable<string> TokenTypeIdentifiers { get; } Property Value Type Description IEnumerable < String > TokenTypes Gets the List of System.Type of the Token Handlers in this collection. Declaration public IEnumerable<Type> TokenTypes { get; } Property Value Type Description IEnumerable < Type > Methods AddOrReplace(SecurityTokenHandler) Adds a new handler or replace the existing handler with the same token type identifier with with the new handler. Declaration public void AddOrReplace(SecurityTokenHandler handler) Parameters Type Name Description SecurityTokenHandler handler The SecurityTokenHandler to add or replace Exceptions Type Condition ArgumentNullException When the input parameter is null. CanReadKeyIdentifierClause(XmlReader) Declaration public bool CanReadKeyIdentifierClause(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description Boolean CanReadKeyIdentifierClauseCore(XmlReader) Declaration protected virtual bool CanReadKeyIdentifierClauseCore(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description Boolean CanReadToken(String) Checks if a token can be read using the SecurityTokenHandlers. Declaration public bool CanReadToken(string tokenString) Parameters Type Name Description String tokenString The token string thats needs to be read. Returns Type Description Boolean True if the token can be read, false otherwise Exceptions Type Condition ArgumentException The input argument 'tokenString' is null or empty. CanReadToken(XmlReader) Declaration public bool CanReadToken(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description Boolean CanWriteToken(SecurityToken) Declaration public bool CanWriteToken(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description Boolean ClearItems() Override. (Inherited from Collection<T>\"/> Declaration protected override void ClearItems() InsertItem(Int32, SecurityTokenHandler) Override. (Inherited from Collection<T>\"/> Declaration protected override void InsertItem(int index, SecurityTokenHandler item) Parameters Type Name Description Int32 index The zero-based index at which item should be inserted. SecurityTokenHandler item The object to insert. The value can be null for reference types. ReadKeyIdentifierClause(XmlReader) Declaration public SecurityKeyIdentifierClause ReadKeyIdentifierClause(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description SecurityKeyIdentifierClause ReadKeyIdentifierClauseCore(XmlReader) Declaration protected virtual SecurityKeyIdentifierClause ReadKeyIdentifierClauseCore(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description SecurityKeyIdentifierClause ReadToken(String) Reads a token using the TokenHandlers. Declaration public SecurityToken ReadToken(string tokenString) Parameters Type Name Description String tokenString The token string to be deserialized. Returns Type Description SecurityToken Instance of SecurityToken Exceptions Type Condition ArgumentException The input argument 'tokenString' is null or empty. ReadToken(XmlReader) Declaration public SecurityToken ReadToken(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description SecurityToken RemoveItem(Int32) Override. (Inherited from Collection<T>\"/> Declaration protected override void RemoveItem(int index) Parameters Type Name Description Int32 index The zero-based index of the element to remove. SetItem(Int32, SecurityTokenHandler) Override. (Inherited from Collection<T>\"/> Declaration protected override void SetItem(int index, SecurityTokenHandler item) Parameters Type Name Description Int32 index The zero-based index of the element to replace. SecurityTokenHandler item The new value for the element at the specified index. The value can be null for reference types. ValidateToken(SecurityToken) Declaration public ReadOnlyCollection<ClaimsIdentity> ValidateToken(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description ReadOnlyCollection < ClaimsIdentity > WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause) Declaration public void WriteKeyIdentifierClause(XmlWriter writer, SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description XmlWriter writer SecurityKeyIdentifierClause keyIdentifierClause WriteKeyIdentifierClauseCore(XmlWriter, SecurityKeyIdentifierClause) Serializes the given SecurityKeyIdentifierClause in a XmlWriter. Declaration protected virtual void WriteKeyIdentifierClauseCore(XmlWriter writer, SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description XmlWriter writer XmlWriter to write into. SecurityKeyIdentifierClause keyIdentifierClause SecurityKeyIdentifierClause to be written. Exceptions Type Condition ArgumentNullException The input parameter 'writer' or 'keyIdentifierClause' is null. WriteToken(SecurityToken) Declaration public string WriteToken(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description String WriteToken(XmlWriter, SecurityToken) Declaration public void WriteToken(XmlWriter writer, SecurityToken token) Parameters Type Name Description XmlWriter writer SecurityToken token"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.html",
    "title": "Class SecurityTokenHandlerCollectionManager",
    "keywords": "Class SecurityTokenHandlerCollectionManager A class which manages multiple named SecurityTokenHandlerCollection . Inheritance Object SecurityTokenHandlerCollectionManager Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SecurityTokenHandlerCollectionManager : Object Constructors SecurityTokenHandlerCollectionManager(String) Initialize an instance of SecurityTokenHandlerCollectionManager for a given named service. Declaration public SecurityTokenHandlerCollectionManager(string serviceName) Parameters Type Name Description String serviceName A String indicating the name of the associated service. Properties Count Gets a count of the number of SecurityTokenHandlerCollections in this SecurityTokenHandlerCollectionManager. Declaration public int Count { get; } Property Value Type Description Int32 Item[String] Declaration public SecurityTokenHandlerCollection this[string usage] { get; set; } Parameters Type Name Description String usage Property Value Type Description SecurityTokenHandlerCollection SecurityTokenHandlerCollections Gets an enumeration over the SecurityTokenHandlerCollection list. Declaration public IEnumerable<SecurityTokenHandlerCollection> SecurityTokenHandlerCollections { get; } Property Value Type Description IEnumerable < SecurityTokenHandlerCollection > ServiceName Gets the service name. Declaration public string ServiceName { get; } Property Value Type Description String Methods ContainsKey(String) Declaration public bool ContainsKey(string usage) Parameters Type Name Description String usage Returns Type Description Boolean CreateEmptySecurityTokenHandlerCollectionManager() No token handlers are created. Declaration public static SecurityTokenHandlerCollectionManager CreateEmptySecurityTokenHandlerCollectionManager() Returns Type Description SecurityTokenHandlerCollectionManager An empty token handler collection manager."
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.Usage.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerCollectionManager.Usage.html",
    "title": "Class SecurityTokenHandlerCollectionManager.Usage",
    "keywords": "Class SecurityTokenHandlerCollectionManager.Usage Defines standard collection names used by the framework. Inheritance Object SecurityTokenHandlerCollectionManager.Usage Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public static class Usage : Object Fields ActAs Used to reference a collection of handlers for ActAs element processing. Declaration public const string ActAs = \"ActAs\" Field Value Type Description String Default Used to reference the default collection of handlers. Declaration public const string Default = \"\" Field Value Type Description String OnBehalfOf Used to reference a collection of handlers for OnBehalfOf element processing. Declaration public const string OnBehalfOf = \"OnBehalfOf\" Field Value Type Description String"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.html",
    "title": "Class SecurityTokenHandlerConfiguration",
    "keywords": "Class SecurityTokenHandlerConfiguration Configuration common to all SecurityTokenHandlers. Inheritance Object SecurityTokenHandlerConfiguration Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SecurityTokenHandlerConfiguration : Object Constructors SecurityTokenHandlerConfiguration() Creates an instance of SecurityTokenHandlerConfiguration Declaration public SecurityTokenHandlerConfiguration() Fields DefaultCertificateValidationMode Gets the default X.509 certificate validation mode. Declaration public static readonly X509CertificateValidationMode DefaultCertificateValidationMode Field Value Type Description X509CertificateValidationMode DefaultCertificateValidator Gets the default X.509 certificate validator instance. Declaration public static readonly X509CertificateValidator DefaultCertificateValidator Field Value Type Description X509CertificateValidator DefaultDetectReplayedTokens Gets a value indicating whether or not to detect replay tokens by default. Declaration public static readonly bool DefaultDetectReplayedTokens Field Value Type Description Boolean DefaultIssuerNameRegistry Gets the default issuer name registry. Declaration public static readonly IssuerNameRegistry DefaultIssuerNameRegistry Field Value Type Description IssuerNameRegistry DefaultIssuerTokenResolver Gets the default issuer token resolver. Declaration public static readonly SecurityTokenResolver DefaultIssuerTokenResolver Field Value Type Description SecurityTokenResolver DefaultMaxClockSkew Gets the default maximum clock skew. Declaration public static readonly TimeSpan DefaultMaxClockSkew Field Value Type Description TimeSpan DefaultRevocationMode Gets the default X.509 certificate revocation validation mode. Declaration public static readonly X509RevocationMode DefaultRevocationMode Field Value Type Description X509RevocationMode DefaultSaveBootstrapContext Gets a value indicating whether or not to save bootstrap tokens by default. Declaration public static readonly bool DefaultSaveBootstrapContext Field Value Type Description Boolean DefaultTokenReplayCacheExpirationPeriod Gets the default token replay cache expiration period. Declaration public static readonly TimeSpan DefaultTokenReplayCacheExpirationPeriod Field Value Type Description TimeSpan DefaultTrustedStoreLocation Gets the default X.509 certificate trusted store location. Declaration public static readonly StoreLocation DefaultTrustedStoreLocation Field Value Type Description StoreLocation Properties AudienceRestriction Gets or sets the AudienceRestriction. Declaration public AudienceRestriction AudienceRestriction { get; set; } Property Value Type Description AudienceRestriction Caches Gets or sets the Caches that are used. Declaration public IdentityModelCaches Caches { get; set; } Property Value Type Description IdentityModelCaches CertificateValidationMode Gets or sets the certificate validation mode used by handlers to validate issuer certificates Declaration public X509CertificateValidationMode CertificateValidationMode { get; set; } Property Value Type Description X509CertificateValidationMode CertificateValidator Gets or sets the certificate validator used by handlers to validate issuer certificates Declaration public X509CertificateValidator CertificateValidator { get; set; } Property Value Type Description X509CertificateValidator DetectReplayedTokens Gets or sets a value indicating whether to detect replaying of tokens by handlers in this configuration. Declaration public bool DetectReplayedTokens { get; set; } Property Value Type Description Boolean IssuerNameRegistry Gets or sets the IssuerNameRegistry. Declaration public IssuerNameRegistry IssuerNameRegistry { get; set; } Property Value Type Description IssuerNameRegistry IssuerTokenResolver Gets or sets the IssuerTokenResolver. Declaration public SecurityTokenResolver IssuerTokenResolver { get; set; } Property Value Type Description SecurityTokenResolver MaxClockSkew Gets or sets the maximum clock skew for handlers using this config. Declaration public TimeSpan MaxClockSkew { get; set; } Property Value Type Description TimeSpan RevocationMode Declaration public X509RevocationMode RevocationMode { get; set; } Property Value Type Description X509RevocationMode SaveBootstrapContext Gets or sets a value indicating whether BootstrapContext is saved in the ClaimsIdentity and Sessions after token validation. Declaration public bool SaveBootstrapContext { get; set; } Property Value Type Description Boolean ServiceTokenResolver Gets or sets the TokenResolver that resolves Service tokens. Declaration public SecurityTokenResolver ServiceTokenResolver { get; set; } Property Value Type Description SecurityTokenResolver TokenReplayCacheExpirationPeriod Gets or sets the expiration period for items placed in the TokenReplayCache. Declaration public TimeSpan TokenReplayCacheExpirationPeriod { get; set; } Property Value Type Description TimeSpan TrustedStoreLocation Gets or sets the trusted store location used by handlers to validate issuer certificates Declaration public StoreLocation TrustedStoreLocation { get; set; } Property Value Type Description StoreLocation"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityTokenNotYetValidException.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityTokenNotYetValidException.html",
    "title": "Class SecurityTokenNotYetValidException",
    "keywords": "Class SecurityTokenNotYetValidException Throw this exception when a received Security token has an effective time in the future. Inheritance Object SecurityTokenException SecurityTokenValidationException SecurityTokenNotYetValidException Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SecurityTokenNotYetValidException : SecurityTokenValidationException Constructors SecurityTokenNotYetValidException() Initializes a new instance of SecurityTokenNotYetValidException Declaration public SecurityTokenNotYetValidException() SecurityTokenNotYetValidException(SerializationInfo, StreamingContext) Initializes a new instance of SecurityTokenNotYetValidException Declaration protected SecurityTokenNotYetValidException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context SecurityTokenNotYetValidException(String) Initializes a new instance of SecurityTokenNotYetValidException Declaration public SecurityTokenNotYetValidException(string message) Parameters Type Name Description String message SecurityTokenNotYetValidException(String, Exception) Initializes a new instance of SecurityTokenNotYetValidException Declaration public SecurityTokenNotYetValidException(string message, Exception inner) Parameters Type Name Description String message Exception inner"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityTokenReplayDetectedException.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityTokenReplayDetectedException.html",
    "title": "Class SecurityTokenReplayDetectedException",
    "keywords": "Class SecurityTokenReplayDetectedException Throw this exception when a received Security Token has been replayed. Inheritance Object SecurityTokenException SecurityTokenValidationException SecurityTokenReplayDetectedException Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SecurityTokenReplayDetectedException : SecurityTokenValidationException Constructors SecurityTokenReplayDetectedException() Initializes a new instance of SecurityTokenReplayDetectedException Declaration public SecurityTokenReplayDetectedException() SecurityTokenReplayDetectedException(SerializationInfo, StreamingContext) Initializes a new instance of SecurityTokenReplayDetectedException Declaration protected SecurityTokenReplayDetectedException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context SecurityTokenReplayDetectedException(String) Initializes a new instance of SecurityTokenReplayDetectedException Declaration public SecurityTokenReplayDetectedException(string message) Parameters Type Name Description String message SecurityTokenReplayDetectedException(String, Exception) Initializes a new instance of SecurityTokenReplayDetectedException Declaration public SecurityTokenReplayDetectedException(string message, Exception inner) Parameters Type Name Description String message Exception inner"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityTokenValidationException.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SecurityTokenValidationException.html",
    "title": "Class SecurityTokenValidationException",
    "keywords": "Class SecurityTokenValidationException The exception that is thrown when a received security token is invalid. Inheritance Object SecurityTokenException SecurityTokenValidationException AudienceUriValidationFailedException SecurityTokenExpiredException SecurityTokenNotYetValidException SecurityTokenReplayDetectedException Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SecurityTokenValidationException : SecurityTokenException Remarks The <xref:System.IdentityModel.Tokens.SecurityTokenValidationException> is typically thrown by the <xref:System.IdentityModel.Selectors.SecurityTokenAuthenticator.ValidateToken%2A> method. Constructors SecurityTokenValidationException() Declaration public SecurityTokenValidationException() SecurityTokenValidationException(SerializationInfo, StreamingContext) Declaration protected SecurityTokenValidationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context SecurityTokenValidationException(String) Declaration public SecurityTokenValidationException(string message) Parameters Type Name Description String message SecurityTokenValidationException(String, Exception) Declaration public SecurityTokenValidationException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SessionSecurityToken.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SessionSecurityToken.html",
    "title": "Class SessionSecurityToken",
    "keywords": "Class SessionSecurityToken Defines a SessionSecurityToken that contains data associated with a session. Inheritance Object SecurityToken SessionSecurityToken Implements ISerializable Inherited Members SecurityToken.CanCreateKeyIdentifierClause<T>() SecurityToken.CreateKeyIdentifierClause<T>() SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause) SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause) Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SessionSecurityToken : SecurityToken Constructors SessionSecurityToken(SerializationInfo, StreamingContext) Declaration protected SessionSecurityToken(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context SessionSecurityToken(ClaimsPrincipal) Create session security token from a principal. Declaration public SessionSecurityToken(ClaimsPrincipal claimsPrincipal) Parameters Type Name Description ClaimsPrincipal claimsPrincipal The ClaimsPrincipal . SessionSecurityToken(ClaimsPrincipal, String) Create session security token from principal and bootstrap token. Declaration public SessionSecurityToken(ClaimsPrincipal claimsPrincipal, string context) Parameters Type Name Description ClaimsPrincipal claimsPrincipal The ClaimsPrincipal that generated from the bootstrap token. String context Session specific context string SessionSecurityToken(ClaimsPrincipal, String, Nullable<DateTime>, Nullable<DateTime>) Create session security token from principal and bootstrap token. Declaration public SessionSecurityToken(ClaimsPrincipal claimsPrincipal, string context, Nullable<DateTime> validFrom, Nullable<DateTime> validTo) Parameters Type Name Description ClaimsPrincipal claimsPrincipal The ClaimsPrincipal that generated from the bootstrap token. String context Session specific context string Nullable < DateTime > validFrom DateTime specifying the time the token becomes valid. Nullable < DateTime > validTo DateTime specifying the time the token becomes invalid. SessionSecurityToken(ClaimsPrincipal, String, String, Nullable<DateTime>, Nullable<DateTime>) Create session security token from principal and bootstrap token. Declaration public SessionSecurityToken(ClaimsPrincipal claimsPrincipal, string context, string endpointId, Nullable<DateTime> validFrom, Nullable<DateTime> validTo) Parameters Type Name Description ClaimsPrincipal claimsPrincipal The ClaimsPrincipal that generated from the bootstrap token. String context Session specific context string String endpointId The endpoint to which this token is bound. String.Empty would create a unscoped token. Nullable < DateTime > validFrom DateTime specifying the time the token becomes valid. Nullable < DateTime > validTo DateTime specifying the time the token becomes invalid. SessionSecurityToken(ClaimsPrincipal, TimeSpan) Create session security token from a principal. Declaration public SessionSecurityToken(ClaimsPrincipal claimsPrincipal, TimeSpan lifetime) Parameters Type Name Description ClaimsPrincipal claimsPrincipal The ClaimsPrincipal . TimeSpan lifetime The Timespan the token is valid. SessionSecurityToken(ClaimsPrincipal, UniqueId, String, String, DateTime, TimeSpan, SymmetricSecurityKey) Initializes a new instance of the SessionSecurityToken class. Declaration public SessionSecurityToken(ClaimsPrincipal claimsPrincipal, UniqueId contextId, string context, string endpointId, DateTime validFrom, TimeSpan lifetime, SymmetricSecurityKey key) Parameters Type Name Description ClaimsPrincipal claimsPrincipal ClaimsPrincipal associated with this session. UniqueId contextId Optional context identifier associated with this token. If null a new identifier will be generated. String context Optional context information associated with the session. String endpointId The endpoint to which this token is bound. String.Empty would create a unscoped token. DateTime validFrom DateTime specifying the time the token becomes valid. TimeSpan lifetime The lifetime of the session token. ValidTo will be set to ValidFrom + lifetime. SymmetricSecurityKey key Optional symmetric session key. Exceptions Type Condition InvalidOperationException The value of lifetime <= TimeSpan.Zero.\" SessionSecurityToken(ClaimsPrincipal, UniqueId, String, String, Nullable<DateTime>, Nullable<DateTime>, SymmetricSecurityKey) Initializes a new instance of the SessionSecurityToken class. Declaration public SessionSecurityToken(ClaimsPrincipal claimsPrincipal, UniqueId contextId, string context, string endpointId, Nullable<DateTime> validFrom, Nullable<DateTime> validTo, SymmetricSecurityKey key) Parameters Type Name Description ClaimsPrincipal claimsPrincipal ClaimsPrincipal associated with this session. UniqueId contextId Context Identifier that identifies the session String context Optional context information associated with the session. String endpointId The endpoint to which this token is bound. String.Empty would create a unscoped token. Nullable < DateTime > validFrom DateTime specifying the time the token becomes valid. Nullable < DateTime > validTo DateTime specifying the time the token becomes invalid. SymmetricSecurityKey key Optional symmetric session key. Remarks If no key is supplied, a 128bit key is generated. KeyEffectiveTime is set to validFrom, KeyExpirationTime is set to validTo. A key generation identifier is created. Exceptions Type Condition ArgumentNullException The input parameter 'claimsPrincipal' is null. ArgumentNullException The input parameter 'contextId' is null. ArgumentOutOfRangeException validFrom is greater than or equal to validTo. ArgumentOutOfRangeException validTo is less than current time. SessionSecurityToken(ClaimsPrincipal, UniqueId, String, String, TimeSpan, SymmetricSecurityKey) Initializes a new instance of the SessionSecurityToken class. Declaration public SessionSecurityToken(ClaimsPrincipal claimsPrincipal, UniqueId contextId, string context, string endpointId, TimeSpan lifetime, SymmetricSecurityKey key) Parameters Type Name Description ClaimsPrincipal claimsPrincipal ClaimsPrincipal associated with this session. UniqueId contextId Optional context identifier associated with this token. If null a new identifier will be generated. String context Optional context information associated with the session. String endpointId The endpoint to which this token is bound. String.Empty would create a unscoped token. TimeSpan lifetime The lifetime of the session token. ValidFrom will be set to DateTime.UtcNow, ValidTo will be set to ValidFrom + lifetime. SymmetricSecurityKey key Optional symmetric session key. Exceptions Type Condition InvalidOperationException The value of lifetime <= TimeSpan.Zero.\" Properties ClaimsPrincipal The ClaimsPrincipal associated with the session. Declaration public ClaimsPrincipal ClaimsPrincipal { get; } Property Value Type Description ClaimsPrincipal Context Gets the user specified value. Declaration public string Context { get; } Property Value Type Description String ContextId The Session Context Identifier Declaration public UniqueId ContextId { get; } Property Value Type Description UniqueId EndpointId Gets the Id of the endpoint to which this token is scoped. Declaration public string EndpointId { get; } Property Value Type Description String Id Gets the id of this token. Declaration public override string Id { get; } Property Value Type Description String Overrides SecurityToken.Id IsPersistent If true, cookie is written as a persistent cookie. Declaration public bool IsPersistent { get; set; } Property Value Type Description Boolean IsReferenceMode If true, the SessionSecurityToken is operating in reference mode. Declaration public bool IsReferenceMode { get; set; } Property Value Type Description Boolean Remarks In reference mode, a simple artifact is produced during serialization and the real token is stored in the token cache associated with the token handler. For Web Farm scenarios, the token cache must operate across all nodes in teh farm. KeyEffectiveTime The effective date/time of the key in this token Declaration public DateTime KeyEffectiveTime { get; } Property Value Type Description DateTime KeyExpirationTime The expiration date/time of the key in this token Declaration public DateTime KeyExpirationTime { get; } Property Value Type Description DateTime KeyGeneration The identifier for the key generation in this token Declaration public UniqueId KeyGeneration { get; } Property Value Type Description UniqueId SecureConversationVersion Gets the SecureConversationVersion used for this token. Declaration public Uri SecureConversationVersion { get; } Property Value Type Description Uri SecurityKeys Gets the keys associated with this session, usually a single key Declaration public override ReadOnlyCollection<SecurityKey> SecurityKeys { get; } Property Value Type Description ReadOnlyCollection < SecurityKey > Overrides SecurityToken.SecurityKeys ValidFrom Gets the begining DateTime before which token is invalid. Declaration public override DateTime ValidFrom { get; } Property Value Type Description DateTime Overrides SecurityToken.ValidFrom ValidTo Gets the ending DateTime after which the token is invalid. Declaration public override DateTime ValidTo { get; } Property Value Type Description DateTime Overrides SecurityToken.ValidTo Methods GetObjectData(SerializationInfo, StreamingContext) Declaration public virtual void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context Implements System.Runtime.Serialization.ISerializable"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SessionSecurityTokenCache.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SessionSecurityTokenCache.html",
    "title": "Class SessionSecurityTokenCache",
    "keywords": "Class SessionSecurityTokenCache Defines a simple interface to a cache of security tokens. Inheritance Object SessionSecurityTokenCache Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public abstract class SessionSecurityTokenCache : Object Constructors SessionSecurityTokenCache() Declaration protected SessionSecurityTokenCache() Methods AddOrUpdate(SessionSecurityTokenCacheKey, SessionSecurityToken, DateTime) Attempts to add an entry to the cache or update an existing one. Declaration public abstract void AddOrUpdate(SessionSecurityTokenCacheKey key, SessionSecurityToken value, DateTime expiryTime) Parameters Type Name Description SessionSecurityTokenCacheKey key The key of the entry to be added. SessionSecurityToken value The associated SessionSecurityToken to be added. DateTime expiryTime The expiration time of the entry. Get(SessionSecurityTokenCacheKey) Attempts to retrieve an entry from the cache. Declaration public abstract SessionSecurityToken Get(SessionSecurityTokenCacheKey key) Parameters Type Name Description SessionSecurityTokenCacheKey key The key of the entry to be retrieved. Returns Type Description SessionSecurityToken The SessionSecurityToken associated with the input key, null if not match is found. GetAll(String, UniqueId) Retrieves all tokens associated with a given key. Declaration public abstract IEnumerable<SessionSecurityToken> GetAll(string endpointId, UniqueId contextId) Parameters Type Name Description String endpointId The endpointId to search for. UniqueId contextId The contextId to search for. Returns Type Description IEnumerable < SessionSecurityToken > In the derived class returns, the collection of tokens associated with the key. Remove(SessionSecurityTokenCacheKey) Attempts to remove an entry from the cache. Declaration public abstract void Remove(SessionSecurityTokenCacheKey key) Parameters Type Name Description SessionSecurityTokenCacheKey key The key of the entry to be removed. RemoveAll(String) Attempts to remove all entries with a matching endpoint Id from the cache. Declaration public abstract void RemoveAll(string endpointId) Parameters Type Name Description String endpointId The endpoint id for the entry to be removed. RemoveAll(String, UniqueId) Attempts to remove all matching entries from cache. Declaration public abstract void RemoveAll(string endpointId, UniqueId contextId) Parameters Type Name Description String endpointId The endpoint id for the entry to be removed. UniqueId contextId The context Id for the entry to be removed."
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SessionSecurityTokenCacheKey.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SessionSecurityTokenCacheKey.html",
    "title": "Class SessionSecurityTokenCacheKey",
    "keywords": "Class SessionSecurityTokenCacheKey When caching an SessionSecurityToken there are two indexes required. One is the ContextId that is unique across all SessionSecurityToken and the next is KeyGeneration which is unique within a session. When an SessionSecurityToken is issued it has only a ContextId. When the SessionSecurityToken is renewed the KeyGeneration is added as an second index to the SessionSecurityToken . Now the renewed SessionSecurityToken is uniquely identifiable via the ContextId and KeyGeneration. The class SessionSecurityTokenCacheKey is used as the index to the SessionSecurityToken cache. This index will always have a valid ContextId specified but the KeyGeneration may be null. There is also an optional EndpointId which gives the endpoint to which the token is scoped. Inheritance Object SessionSecurityTokenCacheKey Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SessionSecurityTokenCacheKey : Object Constructors SessionSecurityTokenCacheKey(String, UniqueId, UniqueId) Creates an instance of SessionSecurityTokenCacheKey which is used as an index while caching SessionSecurityToken . Declaration public SessionSecurityTokenCacheKey(string endpointId, UniqueId contextId, UniqueId keyGeneration) Parameters Type Name Description String endpointId The endpoint Id to which the SessionSecurityToken is scoped. UniqueId contextId UniqueId of the SessionSecurityToken . UniqueId keyGeneration UniqueId which is available when the SessionSecurityToken is renewed. Will be null when caching a new SessionSecurityToken . Properties ContextId Gets the ContextId of the SessionSecurityToken Declaration public UniqueId ContextId { get; } Property Value Type Description UniqueId EndpointId Gets the EndpointId to which this cache entry is scoped. Declaration public string EndpointId { get; } Property Value Type Description String IgnoreKeyGeneration Gets or sets a value indicating whether KeyGeneration can be ignored while doing index comparison. Declaration public bool IgnoreKeyGeneration { get; set; } Property Value Type Description Boolean KeyGeneration Gets the KeyGeneration of the SessionSecurityToken Declaration public UniqueId KeyGeneration { get; } Property Value Type Description UniqueId Methods Equals(Object) Checks if the given object is the same as the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to be compared. Returns Type Description Boolean 'true' if both are the same object else false. GetHashCode() Returns a Hash code for this object. Declaration public override int GetHashCode() Returns Type Description Int32 Hash code for the object as a Integer. ToString() Implements ToString() to provide a unique identifier. Declaration public override string ToString() Returns Type Description String This key, in string form. Operators Equality(SessionSecurityTokenCacheKey, SessionSecurityTokenCacheKey) Implements the equality operator for SessionSecurityTokenCacheKey . Declaration public static bool operator ==(SessionSecurityTokenCacheKey first, SessionSecurityTokenCacheKey second) Parameters Type Name Description SessionSecurityTokenCacheKey first First object to compare. SessionSecurityTokenCacheKey second Second object to compare. Returns Type Description Boolean 'true' if both objects are equal. Inequality(SessionSecurityTokenCacheKey, SessionSecurityTokenCacheKey) Implements the inequality operator for SessionSecurityTokenCacheKey . Declaration public static bool operator !=(SessionSecurityTokenCacheKey first, SessionSecurityTokenCacheKey second) Parameters Type Name Description SessionSecurityTokenCacheKey first First object to compare. SessionSecurityTokenCacheKey second Second object to compare. Returns Type Description Boolean 'true' if both the objects are different."
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SessionSecurityTokenHandler.html",
    "title": "Class SessionSecurityTokenHandler",
    "keywords": "Class SessionSecurityTokenHandler A SecurityTokenHandler that processes SessionSecurityToken . Inheritance Object SecurityTokenHandler SessionSecurityTokenHandler Inherited Members SecurityTokenHandler.CanReadToken(String) SecurityTokenHandler.ReadToken(String) SecurityTokenHandler.WriteToken(SecurityToken) SecurityTokenHandler.CanReadKeyIdentifierClause(XmlReader) SecurityTokenHandler.ReadKeyIdentifierClause(XmlReader) SecurityTokenHandler.CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause) SecurityTokenHandler.WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause) SecurityTokenHandler.CreateSecurityTokenReference(SecurityToken, Boolean) SecurityTokenHandler.DetectReplayedToken(SecurityToken) SecurityTokenHandler.Configuration SecurityTokenHandler.ContainingCollection Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SessionSecurityTokenHandler : SecurityTokenHandler Constructors SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>) Initializes an instance of SessionSecurityTokenHandler Declaration public SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform> transforms) Parameters Type Name Description ReadOnlyCollection < CookieTransform > transforms The transforms to apply when encoding the cookie. Remarks Properties are used for the remaining defaults: DefaultLifetime SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>, TimeSpan) Initializes an instance of SessionSecurityTokenHandler Declaration public SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform> transforms, TimeSpan tokenLifetime) Parameters Type Name Description ReadOnlyCollection < CookieTransform > transforms The transforms to apply when encoding the cookie. TimeSpan tokenLifetime The default for a token. Exceptions Type Condition ArgumentNullException Is thrown if 'transforms' is null. InvalidOperationException Is thrown if 'tokenLifetime' is less than or equal to TimeSpan.Zero. Fields DefaultLifetime Declaration public static readonly TimeSpan DefaultLifetime Field Value Type Description TimeSpan Properties CanValidateToken Indicates whether this handler supports validation of tokens. Declaration public override bool CanValidateToken { get; } Property Value Type Description Boolean 'True' if the class is capable of SecurityToken validation. Overrides SecurityTokenHandler.CanValidateToken CanWriteToken Gets information on whether this Token Handler can write tokens. Declaration public override bool CanWriteToken { get; } Property Value Type Description Boolean Overrides SecurityTokenHandler.CanWriteToken CookieElementName Gets the name for the cookie element. Declaration public virtual string CookieElementName { get; } Property Value Type Description String CookieNamespace Gets the namspace for the cookie element. Declaration public virtual string CookieNamespace { get; } Property Value Type Description String DefaultTokenLifetime Gets the default token lifetime Declaration public static TimeSpan DefaultTokenLifetime { get; } Property Value Type Description TimeSpan TokenLifetime Gets or sets the TokenLifetime. Declaration public virtual TimeSpan TokenLifetime { get; set; } Property Value Type Description TimeSpan TokenType Gets the type of token this handler can work with. Declaration public override Type TokenType { get; } Property Value Type Description Type Overrides SecurityTokenHandler.TokenType Transforms Gets the transforms that will be applied to the cookie. Declaration public ReadOnlyCollection<CookieTransform> Transforms { get; } Property Value Type Description ReadOnlyCollection < CookieTransform > Methods ApplyTransforms(Byte[], Boolean) Applies Transforms to the cookie. Declaration protected virtual byte[] ApplyTransforms(byte[] cookie, bool outbound) Parameters Type Name Description Byte [] cookie The cookie that will be transformed. Boolean outbound Controls if the cookie should be encoded (true) or decoded (false) Returns Type Description Byte [] Encoded cookie. CanReadToken(XmlReader) Declaration public override bool CanReadToken(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description Boolean Overrides SecurityTokenHandler.CanReadToken(XmlReader) CreateSessionSecurityToken(ClaimsPrincipal, String, String, DateTime, DateTime) Creates a SessionSecurityToken based on an ClaimsPrincipal and a valid time range. Declaration public virtual SessionSecurityToken CreateSessionSecurityToken(ClaimsPrincipal principal, string context, string endpointId, DateTime validFrom, DateTime validTo) Parameters Type Name Description ClaimsPrincipal principal ClaimsPrincipal String context Caller defined context string String endpointId Identifier of the endpoint to which the token is scoped. DateTime validFrom Earliest valid time. DateTime validTo Latest valid time. Returns Type Description SessionSecurityToken CreateToken(SecurityTokenDescriptor) Declaration public override SecurityToken CreateToken(SecurityTokenDescriptor tokenDescriptor) Parameters Type Name Description SecurityTokenDescriptor tokenDescriptor Returns Type Description SecurityToken Overrides SecurityTokenHandler.CreateToken(SecurityTokenDescriptor) GetTokenTypeIdentifiers() Gets the token type URIs Declaration public override string[] GetTokenTypeIdentifiers() Returns Type Description String [] Overrides SecurityTokenHandler.GetTokenTypeIdentifiers() ReadToken(Byte[], SecurityTokenResolver) Declaration public virtual SecurityToken ReadToken(byte[] token, SecurityTokenResolver tokenResolver) Parameters Type Name Description Byte [] token SecurityTokenResolver tokenResolver Returns Type Description SecurityToken ReadToken(XmlReader) Declaration public override SecurityToken ReadToken(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description SecurityToken Overrides SecurityTokenHandler.ReadToken(XmlReader) ReadToken(XmlReader, SecurityTokenResolver) Declaration public override SecurityToken ReadToken(XmlReader reader, SecurityTokenResolver tokenResolver) Parameters Type Name Description XmlReader reader SecurityTokenResolver tokenResolver Returns Type Description SecurityToken Overrides SecurityTokenHandler.ReadToken(XmlReader, SecurityTokenResolver) SetTransforms(IEnumerable<CookieTransform>) Sets the transforms that will be applied to cookies. Declaration protected void SetTransforms(IEnumerable<CookieTransform> transforms) Parameters Type Name Description IEnumerable < CookieTransform > transforms The CookieTransform objects to use. ValidateSession(SessionSecurityToken) Declaration protected virtual void ValidateSession(SessionSecurityToken securityToken) Parameters Type Name Description SessionSecurityToken securityToken ValidateToken(SecurityToken) Declaration public override ReadOnlyCollection<ClaimsIdentity> ValidateToken(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description ReadOnlyCollection < ClaimsIdentity > Overrides SecurityTokenHandler.ValidateToken(SecurityToken) ValidateToken(SessionSecurityToken, String) Declaration public virtual ReadOnlyCollection<ClaimsIdentity> ValidateToken(SessionSecurityToken token, string endpointId) Parameters Type Name Description SessionSecurityToken token String endpointId Returns Type Description ReadOnlyCollection < ClaimsIdentity > WriteToken(SessionSecurityToken) Writes the token into a byte array. Declaration public virtual byte[] WriteToken(SessionSecurityToken sessionToken) Parameters Type Name Description SessionSecurityToken sessionToken The SessionSecurityToken to write. Returns Type Description Byte [] An encoded byte array. Exceptions Type Condition ArgumentNullException Thrown if 'sessiontoken' is null. WriteToken(XmlWriter, SecurityToken) Declaration public override void WriteToken(XmlWriter writer, SecurityToken token) Parameters Type Name Description XmlWriter writer SecurityToken token Overrides SecurityTokenHandler.WriteToken(XmlWriter, SecurityToken)"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SigningCredentials.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SigningCredentials.html",
    "title": "Class SigningCredentials",
    "keywords": "Class SigningCredentials Represents the cryptographic key and security algorithms that are used to generate a digital signature. Inheritance Object SigningCredentials Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SigningCredentials : Object Remarks Use the <xref:System.IdentityModel.Tokens.SigningCredentials> class to specify the signing key, signing key identifier, and security algorithms that are used by WCF to generate the digital signature for a <xref:System.IdentityModel.Tokens.SamlAssertion>. To set the digital signature details, set the <xref:System.IdentityModel.Tokens.SamlAssertion.SigningCredentials%2A> property of the <xref:System.IdentityModel.Tokens.SamlAssertion> class. Constructors SigningCredentials(SecurityKey, String, String) Declaration public SigningCredentials(SecurityKey signingKey, string signatureAlgorithm, string digestAlgorithm) Parameters Type Name Description SecurityKey signingKey String signatureAlgorithm String digestAlgorithm SigningCredentials(SecurityKey, String, String, SecurityKeyIdentifier) Declaration public SigningCredentials(SecurityKey signingKey, string signatureAlgorithm, string digestAlgorithm, SecurityKeyIdentifier signingKeyIdentifier) Parameters Type Name Description SecurityKey signingKey String signatureAlgorithm String digestAlgorithm SecurityKeyIdentifier signingKeyIdentifier Properties DigestAlgorithm Declaration public string DigestAlgorithm { get; } Property Value Type Description String SignatureAlgorithm Declaration public string SignatureAlgorithm { get; } Property Value Type Description String SigningKey Declaration public SecurityKey SigningKey { get; } Property Value Type Description SecurityKey SigningKeyIdentifier Declaration public SecurityKeyIdentifier SigningKeyIdentifier { get; } Property Value Type Description SecurityKeyIdentifier"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.SymmetricSecurityKey.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.SymmetricSecurityKey.html",
    "title": "Class SymmetricSecurityKey",
    "keywords": "Class SymmetricSecurityKey Represents the abstract base class for all keys that are generated using symmetric algorithms. Inheritance Object SecurityKey SymmetricSecurityKey Inherited Members SecurityKey.DecryptKey(String, Byte[]) SecurityKey.EncryptKey(String, Byte[]) SecurityKey.IsSupportedAlgorithm(String) SecurityKey.KeySize Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public abstract class SymmetricSecurityKey : SecurityKey Remarks Typically, this class is used by the infrastructure to transform XML using a symmetric key. Constructors SymmetricSecurityKey() Declaration protected SymmetricSecurityKey() Methods GenerateDerivedKey(String, Byte[], Byte[], Int32, Int32) Declaration public abstract byte[] GenerateDerivedKey(string algorithm, byte[] label, byte[] nonce, int derivedKeyLength, int offset) Parameters Type Name Description String algorithm Byte [] label Byte [] nonce Int32 derivedKeyLength Int32 offset Returns Type Description Byte [] GetDecryptionTransform(String, Byte[]) Declaration public abstract ICryptoTransform GetDecryptionTransform(string algorithm, byte[] iv) Parameters Type Name Description String algorithm Byte [] iv Returns Type Description ICryptoTransform GetEncryptionTransform(String, Byte[]) Declaration public abstract ICryptoTransform GetEncryptionTransform(string algorithm, byte[] iv) Parameters Type Name Description String algorithm Byte [] iv Returns Type Description ICryptoTransform GetIVSize(String) Declaration public abstract int GetIVSize(string algorithm) Parameters Type Name Description String algorithm Returns Type Description Int32 GetKeyedHashAlgorithm(String) Declaration public abstract KeyedHashAlgorithm GetKeyedHashAlgorithm(string algorithm) Parameters Type Name Description String algorithm Returns Type Description KeyedHashAlgorithm GetSymmetricAlgorithm(String) Declaration public abstract SymmetricAlgorithm GetSymmetricAlgorithm(string algorithm) Parameters Type Name Description String algorithm Returns Type Description SymmetricAlgorithm GetSymmetricKey() Declaration public abstract byte[] GetSymmetricKey() Returns Type Description Byte []"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.TokenReplayCache.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.TokenReplayCache.html",
    "title": "Class TokenReplayCache",
    "keywords": "Class TokenReplayCache This class defines the API for a cache that stores tokens for and purges them on a schedule time interval. Inheritance Object TokenReplayCache Implements ITokenReplayCache Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public abstract class TokenReplayCache : Object Constructors TokenReplayCache() Declaration protected TokenReplayCache() Methods Contains(String) Attempt to find if a matching entry exists in the cache. Declaration public abstract bool Contains(string key) Parameters Type Name Description String key The key to search for. Returns Type Description Boolean true if a matching entry is ifound in the cache, false otherwise Remove(String) Attempt to remove an entry from the cache Declaration public abstract void Remove(string key) Parameters Type Name Description String key The key to the entry to remove TryAdd(String, DateTime) Declaration public abstract bool TryAdd(string securityToken, DateTime expiresOn) Parameters Type Name Description String securityToken DateTime expiresOn Returns Type Description Boolean TryFind(String) Declaration public abstract bool TryFind(string securityToken) Parameters Type Name Description String securityToken Returns Type Description Boolean Implements Microsoft.IdentityModel.Tokens.ITokenReplayCache"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.UserNameSecurityTokenHandler.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.UserNameSecurityTokenHandler.html",
    "title": "Class UserNameSecurityTokenHandler",
    "keywords": "Class UserNameSecurityTokenHandler Defines a SecurityTokenHandler for Username Password Tokens. Inheritance Object SecurityTokenHandler UserNameSecurityTokenHandler Inherited Members SecurityTokenHandler.CanReadToken(String) SecurityTokenHandler.ReadToken(XmlReader, SecurityTokenResolver) SecurityTokenHandler.ReadToken(String) SecurityTokenHandler.WriteToken(SecurityToken) SecurityTokenHandler.CanReadKeyIdentifierClause(XmlReader) SecurityTokenHandler.ReadKeyIdentifierClause(XmlReader) SecurityTokenHandler.CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause) SecurityTokenHandler.WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause) SecurityTokenHandler.CreateToken(SecurityTokenDescriptor) SecurityTokenHandler.CreateSecurityTokenReference(SecurityToken, Boolean) SecurityTokenHandler.ValidateToken(SecurityToken) SecurityTokenHandler.DetectReplayedToken(SecurityToken) SecurityTokenHandler.CanValidateToken SecurityTokenHandler.Configuration SecurityTokenHandler.ContainingCollection Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public abstract class UserNameSecurityTokenHandler : SecurityTokenHandler Constructors UserNameSecurityTokenHandler() Initializes an instance of UserNameSecurityTokenHandler Declaration protected UserNameSecurityTokenHandler() Properties CanWriteToken Returns true to indicate that the handler can write UsernameSecurityToken. Declaration public override bool CanWriteToken { get; } Property Value Type Description Boolean Overrides SecurityTokenHandler.CanWriteToken RetainPassword Controls if the password will be retained in the bootstrap token that is attached to the ClaimsIdentity in ValidateToken. The default is false. Declaration public virtual bool RetainPassword { get; set; } Property Value Type Description Boolean TokenType Get the System.Type of the SecurityToken that this handler can handle. Declaration public override Type TokenType { get; } Property Value Type Description Type Overrides SecurityTokenHandler.TokenType Methods CanReadToken(XmlReader) Declaration public override bool CanReadToken(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description Boolean Overrides SecurityTokenHandler.CanReadToken(XmlReader) GetTokenTypeIdentifiers() Get the TokenTypeIdentifier of the token that this handler can work with. Declaration public override string[] GetTokenTypeIdentifiers() Returns Type Description String [] Overrides SecurityTokenHandler.GetTokenTypeIdentifiers() ReadToken(XmlReader) Reads the UsernameSecurityToken from the given XmlReader. Declaration public override SecurityToken ReadToken(XmlReader reader) Parameters Type Name Description XmlReader reader XmlReader pointing to the SecurityToken. Returns Type Description SecurityToken An instance of CoreWCF.IdentityModel.Tokens.UserNameSecurityToken . Overrides SecurityTokenHandler.ReadToken(XmlReader) Exceptions Type Condition ArgumentNullException The parameter 'reader' is null. XmlException The token cannot be read. NotSupportedException The Password was not in plain text format. InvalidOperationException An unknown element was found in the SecurityToken or the username was not specified. WriteToken(XmlWriter, SecurityToken) Declaration public override void WriteToken(XmlWriter writer, SecurityToken token) Parameters Type Name Description XmlWriter writer SecurityToken token Overrides SecurityTokenHandler.WriteToken(XmlWriter, SecurityToken)"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.WindowsSecurityToken.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.WindowsSecurityToken.html",
    "title": "Class WindowsSecurityToken",
    "keywords": "Class WindowsSecurityToken Represents a security token that is based on the identity of a Windows domain or user account. Inheritance Object SecurityToken WindowsSecurityToken Implements IDisposable Inherited Members SecurityToken.CanCreateKeyIdentifierClause<T>() SecurityToken.CreateKeyIdentifierClause<T>() SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause) SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause) Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class WindowsSecurityToken : SecurityToken Remarks Typically, application developers do not need to use the <xref:System.IdentityModel.Tokens.WindowsSecurityToken> class, unless a Web service must gain access to details about the Windows domain or user account associated with the <xref:System.IdentityModel.Tokens.WindowsSecurityToken> security token. To get the details of the Windows domain or user account, access the <xref:System.IdentityModel.Tokens.WindowsSecurityToken.WindowsIdentity%2A> property. Constructors WindowsSecurityToken() Declaration protected WindowsSecurityToken() WindowsSecurityToken(WindowsIdentity) Declaration public WindowsSecurityToken(WindowsIdentity windowsIdentity) Parameters Type Name Description WindowsIdentity windowsIdentity WindowsSecurityToken(WindowsIdentity, String) Declaration public WindowsSecurityToken(WindowsIdentity windowsIdentity, string id) Parameters Type Name Description WindowsIdentity windowsIdentity String id WindowsSecurityToken(WindowsIdentity, String, String) Declaration public WindowsSecurityToken(WindowsIdentity windowsIdentity, string id, string authenticationType) Parameters Type Name Description WindowsIdentity windowsIdentity String id String authenticationType Properties AuthenticationType Declaration public string AuthenticationType { get; } Property Value Type Description String Id Declaration public override string Id { get; } Property Value Type Description String Overrides SecurityToken.Id SecurityKeys Declaration public override ReadOnlyCollection<SecurityKey> SecurityKeys { get; } Property Value Type Description ReadOnlyCollection < SecurityKey > Overrides SecurityToken.SecurityKeys ValidFrom Declaration public override DateTime ValidFrom { get; } Property Value Type Description DateTime Overrides SecurityToken.ValidFrom ValidTo Declaration public override DateTime ValidTo { get; } Property Value Type Description DateTime Overrides SecurityToken.ValidTo WindowsIdentity Declaration public virtual WindowsIdentity WindowsIdentity { get; } Property Value Type Description WindowsIdentity Methods Dispose() Declaration public virtual void Dispose() Initialize(String, DateTime, DateTime, WindowsIdentity, Boolean) Declaration protected void Initialize(string id, DateTime effectiveTime, DateTime expirationTime, WindowsIdentity windowsIdentity, bool clone) Parameters Type Name Description String id DateTime effectiveTime DateTime expirationTime WindowsIdentity windowsIdentity Boolean clone Initialize(String, String, DateTime, DateTime, WindowsIdentity, Boolean) Declaration protected void Initialize(string id, string authenticationType, DateTime effectiveTime, DateTime expirationTime, WindowsIdentity windowsIdentity, bool clone) Parameters Type Name Description String id String authenticationType DateTime effectiveTime DateTime expirationTime WindowsIdentity windowsIdentity Boolean clone ThrowIfDisposed() Declaration protected void ThrowIfDisposed() Implements System.IDisposable"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.X509AsymmetricSecurityKey.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.X509AsymmetricSecurityKey.html",
    "title": "Class X509AsymmetricSecurityKey",
    "keywords": "Class X509AsymmetricSecurityKey Represents an asymmetric key for X.509 certificates. Inheritance Object SecurityKey AsymmetricSecurityKey X509AsymmetricSecurityKey Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class X509AsymmetricSecurityKey : AsymmetricSecurityKey Remarks To be added. Constructors X509AsymmetricSecurityKey(X509Certificate2) Declaration public X509AsymmetricSecurityKey(X509Certificate2 certificate) Parameters Type Name Description X509Certificate2 certificate Properties KeySize Declaration public override int KeySize { get; } Property Value Type Description Int32 Overrides SecurityKey.KeySize Methods DecryptKey(String, Byte[]) Declaration public override byte[] DecryptKey(string algorithm, byte[] keyData) Parameters Type Name Description String algorithm Byte [] keyData Returns Type Description Byte [] Overrides SecurityKey.DecryptKey(String, Byte[]) EncryptKey(String, Byte[]) Declaration public override byte[] EncryptKey(string algorithm, byte[] keyData) Parameters Type Name Description String algorithm Byte [] keyData Returns Type Description Byte [] Overrides SecurityKey.EncryptKey(String, Byte[]) GetAsymmetricAlgorithm(String, Boolean) Declaration public override AsymmetricAlgorithm GetAsymmetricAlgorithm(string algorithm, bool privateKey) Parameters Type Name Description String algorithm Boolean privateKey Returns Type Description AsymmetricAlgorithm Overrides AsymmetricSecurityKey.GetAsymmetricAlgorithm(String, Boolean) GetHashAlgorithmForSignature(String) Declaration public override HashAlgorithm GetHashAlgorithmForSignature(string algorithm) Parameters Type Name Description String algorithm Returns Type Description HashAlgorithm Overrides AsymmetricSecurityKey.GetHashAlgorithmForSignature(String) GetSignatureDeformatter(String) Declaration public override AsymmetricSignatureDeformatter GetSignatureDeformatter(string algorithm) Parameters Type Name Description String algorithm Returns Type Description AsymmetricSignatureDeformatter Overrides AsymmetricSecurityKey.GetSignatureDeformatter(String) GetSignatureFormatter(String) Declaration public override AsymmetricSignatureFormatter GetSignatureFormatter(string algorithm) Parameters Type Name Description String algorithm Returns Type Description AsymmetricSignatureFormatter Overrides AsymmetricSecurityKey.GetSignatureFormatter(String) HasPrivateKey() Declaration public override bool HasPrivateKey() Returns Type Description Boolean Overrides AsymmetricSecurityKey.HasPrivateKey() IsSupportedAlgorithm(String) Declaration public override bool IsSupportedAlgorithm(string algorithm) Parameters Type Name Description String algorithm Returns Type Description Boolean Overrides SecurityKey.IsSupportedAlgorithm(String)"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.X509CertificateStoreTokenResolver.html",
    "title": "Class X509CertificateStoreTokenResolver",
    "keywords": "Class X509CertificateStoreTokenResolver Token Resolver that can resolve X509SecurityTokens against a given X.509 Certificate Store. Inheritance Object SecurityTokenResolver X509CertificateStoreTokenResolver Inherited Members SecurityTokenResolver.ResolveToken(SecurityKeyIdentifier) SecurityTokenResolver.TryResolveToken(SecurityKeyIdentifier, SecurityToken) SecurityTokenResolver.ResolveToken(SecurityKeyIdentifierClause) SecurityTokenResolver.TryResolveToken(SecurityKeyIdentifierClause, SecurityToken) SecurityTokenResolver.ResolveSecurityKey(SecurityKeyIdentifierClause) SecurityTokenResolver.TryResolveSecurityKey(SecurityKeyIdentifierClause, SecurityKey) SecurityTokenResolver.CreateDefaultSecurityTokenResolver(ReadOnlyCollection<SecurityToken>, Boolean) Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class X509CertificateStoreTokenResolver : SecurityTokenResolver Constructors X509CertificateStoreTokenResolver() Initializes an instance of X509CertificateStoreTokenResolver Declaration public X509CertificateStoreTokenResolver() X509CertificateStoreTokenResolver(StoreName, StoreLocation) Initializes an instance of X509CertificateStoreTokenResolver Declaration public X509CertificateStoreTokenResolver(StoreName storeName, StoreLocation storeLocation) Parameters Type Name Description StoreName storeName StoreName of the X.509 Certificate Store. StoreLocation storeLocation StoreLocation of the X.509 Certificate store. X509CertificateStoreTokenResolver(String, StoreLocation) Initializes an instance of X509CertificateStoreTokenResolver Declaration public X509CertificateStoreTokenResolver(string storeName, StoreLocation storeLocation) Parameters Type Name Description String storeName StoreName of the X.509 Certificate Store. StoreLocation storeLocation StoreLocation of the X.509 Certificate store. Properties StoreLocation Gets the StoreLocation used by this TokenResolver. Declaration public StoreLocation StoreLocation { get; } Property Value Type Description StoreLocation StoreName Gets the StoreName used by this TokenResolver. Declaration public string StoreName { get; } Property Value Type Description String Methods TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, out SecurityKey) Resolves the given SecurityKeyIdentifierClause to a SecurityKey. Declaration protected override bool TryResolveSecurityKeyCore(SecurityKeyIdentifierClause keyIdentifierClause, out SecurityKey key) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause SecurityKeyIdentifierClause to resolve SecurityKey key The resolved SecurityKey. Returns Type Description Boolean True if successfully resolved. Overrides SecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, out SecurityKey) Exceptions Type Condition ArgumentNullException The input argument 'keyIdentifierClause' is null. TryResolveTokenCore(SecurityKeyIdentifierClause, out SecurityToken) Resolves the given SecurityKeyIdentifierClause to a SecurityToken. Declaration protected override bool TryResolveTokenCore(SecurityKeyIdentifierClause keyIdentifierClause, out SecurityToken token) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause SecurityKeyIdentifierClause to resolve. SecurityToken token The resolved SecurityToken. Returns Type Description Boolean True if successfully resolved. Overrides SecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause, out SecurityToken) Exceptions Type Condition ArgumentNullException The input argument 'keyIdentifierClause' is null. TryResolveTokenCore(SecurityKeyIdentifier, out SecurityToken) Resolves the given SecurityKeyIdentifier to a SecurityToken. Declaration protected override bool TryResolveTokenCore(SecurityKeyIdentifier keyIdentifier, out SecurityToken token) Parameters Type Name Description SecurityKeyIdentifier keyIdentifier SecurityKeyIdentifier to resolve. SecurityToken token The resolved SecurityToken. Returns Type Description Boolean True if successfully resolved. Overrides SecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier, out SecurityToken) Exceptions Type Condition ArgumentNullException The input argument 'keyIdentifier' is null."
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.X509DataSecurityKeyIdentifierClauseSerializer.html",
    "title": "Class X509DataSecurityKeyIdentifierClauseSerializer",
    "keywords": "Class X509DataSecurityKeyIdentifierClauseSerializer Implementation of SecurityKeyIdentifierClauseSerializer that handles X.509 Certificate reference types. Inheritance Object SecurityKeyIdentifierClauseSerializer X509DataSecurityKeyIdentifierClauseSerializer Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class X509DataSecurityKeyIdentifierClauseSerializer : SecurityKeyIdentifierClauseSerializer Constructors X509DataSecurityKeyIdentifierClauseSerializer() Declaration public X509DataSecurityKeyIdentifierClauseSerializer() Methods CanReadKeyIdentifierClause(XmlReader) Declaration public override bool CanReadKeyIdentifierClause(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description Boolean Overrides SecurityKeyIdentifierClauseSerializer.CanReadKeyIdentifierClause(XmlReader) CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause) Checks if the given SecurityKeyIdentifierClause can be serialized. The supported SecurityKeyIdentifierClause are, Declaration public override bool CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause securityKeyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause securityKeyIdentifierClause SecurityKeyIdentifierClause to be serialized. Returns Type Description Boolean True if the 'securityKeyIdentifierClause' is supported. Overrides SecurityKeyIdentifierClauseSerializer.CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause) Exceptions Type Condition ArgumentNullException The parameter 'securityKeyIdentifierClause' is null. ReadKeyIdentifierClause(XmlReader) Deserializes a SecurityKeyIdentifierClause from a given XmlReader. Declaration public override SecurityKeyIdentifierClause ReadKeyIdentifierClause(XmlReader reader) Parameters Type Name Description XmlReader reader XmlReader that references a SecurityKeyIdentifierClause. Returns Type Description SecurityKeyIdentifierClause Instance of SecurityKeyIdentifierClause Overrides SecurityKeyIdentifierClauseSerializer.ReadKeyIdentifierClause(XmlReader) Exceptions Type Condition ArgumentNullException The input parameter 'reader' is null. InvalidOperationException The XmlReader is not positioned at a valid X.509 SecurityTokenReference. WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause) Serialize a SecurityKeyIdentifierClause to the given XmlWriter. Declaration public override void WriteKeyIdentifierClause(XmlWriter writer, SecurityKeyIdentifierClause securityKeyIdentifierClause) Parameters Type Name Description XmlWriter writer XmlWriter to which the SecurityKeyIdentifierClause is serialized. SecurityKeyIdentifierClause securityKeyIdentifierClause SecurityKeyIdentifierClause to serialize. Overrides SecurityKeyIdentifierClauseSerializer.WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause) Exceptions Type Condition ArgumentNullException The input parameter 'reader' or 'securityKeyIdentifierClause' is null. ArgumentException The parameter 'securityKeyIdentifierClause' is not a supported clause type."
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.html",
    "title": "Class X509IssuerSerialKeyIdentifierClause",
    "keywords": "Class X509IssuerSerialKeyIdentifierClause Represents a key identifier clause that identifies a security tokens using the distinguished name of the certificate issuer and the X.509 certificate's serial number. Inheritance Object SecurityKeyIdentifierClause X509IssuerSerialKeyIdentifierClause Inherited Members SecurityKeyIdentifierClause.CreateKey() SecurityKeyIdentifierClause.GetDerivationNonce() SecurityKeyIdentifierClause.CanCreateKey SecurityKeyIdentifierClause.ClauseType SecurityKeyIdentifierClause.Id SecurityKeyIdentifierClause.DerivationLength Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class X509IssuerSerialKeyIdentifierClause : SecurityKeyIdentifierClause Remarks Typically, the <xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause> is not used, other than when a custom security token service is created. When a security token service returns a security token, the issued security token contains references to attached and unattached security. Attached references refer to security tokens that are contained within the security header of a SOAP message and unattached references are security tokens that are not included within the security header of a SOAP message. These references typically affirm the authenticity of the issued security token. Use the <xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause> class to reference a <xref:System.IdentityModel.Tokens.X509SecurityToken> security token using the distinguished name of the certificate issuer and the X.509 certificate's serial number. The <xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.IssuerName%2A> and <xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause.IssuerSerialNumber%2A> properties represent the distinguished name of the certificate issuer and the X.509 certificate's serial number, respectively. Windows Communication Foundation supports the following types of security token references for <xref:System.IdentityModel.Tokens.X509SecurityToken> security tokens. <xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause> <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause> <xref:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause> <xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause> Constructors X509IssuerSerialKeyIdentifierClause(X509Certificate2) Declaration public X509IssuerSerialKeyIdentifierClause(X509Certificate2 certificate) Parameters Type Name Description X509Certificate2 certificate X509IssuerSerialKeyIdentifierClause(String, String) Declaration public X509IssuerSerialKeyIdentifierClause(string issuerName, string issuerSerialNumber) Parameters Type Name Description String issuerName String issuerSerialNumber Properties IssuerName Declaration public string IssuerName { get; } Property Value Type Description String IssuerSerialNumber Declaration public string IssuerSerialNumber { get; } Property Value Type Description String Methods Matches(SecurityKeyIdentifierClause) Declaration public override bool Matches(SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause Returns Type Description Boolean Overrides SecurityKeyIdentifierClause.Matches(SecurityKeyIdentifierClause) Matches(X509Certificate2) Declaration public bool Matches(X509Certificate2 certificate) Parameters Type Name Description X509Certificate2 certificate Returns Type Description Boolean Matches(String, String) Declaration public bool Matches(string issuerName, string issuerSerialNumber) Parameters Type Name Description String issuerName String issuerSerialNumber Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.X509RawDataKeyIdentifierClause.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.X509RawDataKeyIdentifierClause.html",
    "title": "Class X509RawDataKeyIdentifierClause",
    "keywords": "Class X509RawDataKeyIdentifierClause Represents a key identifier clause that identifies a security token using the X.509 certificate's raw data. Inheritance Object SecurityKeyIdentifierClause BinaryKeyIdentifierClause X509RawDataKeyIdentifierClause Inherited Members BinaryKeyIdentifierClause.GetBuffer() BinaryKeyIdentifierClause.GetRawBuffer() BinaryKeyIdentifierClause.Matches(SecurityKeyIdentifierClause) BinaryKeyIdentifierClause.Matches(Byte[]) BinaryKeyIdentifierClause.Matches(Byte[], Int32) SecurityKeyIdentifierClause.GetDerivationNonce() SecurityKeyIdentifierClause.ClauseType SecurityKeyIdentifierClause.Id SecurityKeyIdentifierClause.DerivationLength Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class X509RawDataKeyIdentifierClause : BinaryKeyIdentifierClause Remarks Typically, the <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause> does not need to be used, other than when a custom security token service is created. When a security token service returns a security token, the issued security token contains references to attached and unattached security tokens. Attached references refer to security tokens that are contained within the security header of a SOAP message and unattached references are security tokens that are not included within the security header of a SOAP message. These references typically affirm the authenticity of the issued security token. Use the <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause> class to reference a <xref:System.IdentityModel.Tokens.X509SecurityToken> security token using the X.509 certificate's raw data. The <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause.GetX509RawData%2A> method returns the raw data. Windows Communication Foundation (WCF) supports the following types of security token references for <xref:System.IdentityModel.Tokens.X509SecurityToken> security tokens. <xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause> <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause> <xref:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause> <xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause> Constructors X509RawDataKeyIdentifierClause(Byte[]) Declaration public X509RawDataKeyIdentifierClause(byte[] certificateRawData) Parameters Type Name Description Byte [] certificateRawData X509RawDataKeyIdentifierClause(X509Certificate2) Declaration public X509RawDataKeyIdentifierClause(X509Certificate2 certificate) Parameters Type Name Description X509Certificate2 certificate Properties CanCreateKey Declaration public override bool CanCreateKey { get; } Property Value Type Description Boolean Overrides SecurityKeyIdentifierClause.CanCreateKey Methods CreateKey() Declaration public override SecurityKey CreateKey() Returns Type Description SecurityKey Overrides SecurityKeyIdentifierClause.CreateKey() GetX509RawData() Declaration public byte[] GetX509RawData() Returns Type Description Byte [] Matches(X509Certificate2) Declaration public bool Matches(X509Certificate2 certificate) Parameters Type Name Description X509Certificate2 certificate Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.X509SecurityToken.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.X509SecurityToken.html",
    "title": "Class X509SecurityToken",
    "keywords": "Class X509SecurityToken Represents a security token that is based upon an X.509 certificate. Inheritance Object SecurityToken X509SecurityToken Implements IDisposable Inherited Members SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause) Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class X509SecurityToken : SecurityToken Remarks To get the details of the X.509 certificate, access the <xref:System.IdentityModel.Tokens.X509SecurityToken.Certificate%2A> property. Constructors X509SecurityToken(X509Certificate2) Declaration public X509SecurityToken(X509Certificate2 certificate) Parameters Type Name Description X509Certificate2 certificate X509SecurityToken(X509Certificate2, String) Declaration public X509SecurityToken(X509Certificate2 certificate, string id) Parameters Type Name Description X509Certificate2 certificate String id Properties Certificate Declaration public X509Certificate2 Certificate { get; } Property Value Type Description X509Certificate2 Id Declaration public override string Id { get; } Property Value Type Description String Overrides SecurityToken.Id SecurityKeys Declaration public override ReadOnlyCollection<SecurityKey> SecurityKeys { get; } Property Value Type Description ReadOnlyCollection < SecurityKey > Overrides SecurityToken.SecurityKeys ValidFrom Declaration public override DateTime ValidFrom { get; } Property Value Type Description DateTime Overrides SecurityToken.ValidFrom ValidTo Declaration public override DateTime ValidTo { get; } Property Value Type Description DateTime Overrides SecurityToken.ValidTo Methods CanCreateKeyIdentifierClause<T>() Declaration public override bool CanCreateKeyIdentifierClause<T>() where T : SecurityKeyIdentifierClause Returns Type Description Boolean Type Parameters Name Description T Overrides SecurityToken.CanCreateKeyIdentifierClause<T>() CreateKeyIdentifierClause<T>() Declaration public override T CreateKeyIdentifierClause<T>() where T : SecurityKeyIdentifierClause Returns Type Description T Type Parameters Name Description T Overrides SecurityToken.CreateKeyIdentifierClause<T>() Dispose() Declaration public virtual void Dispose() MatchesKeyIdentifierClause(SecurityKeyIdentifierClause) Declaration public override bool MatchesKeyIdentifierClause(SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause Returns Type Description Boolean Overrides SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause) ThrowIfDisposed() Declaration protected void ThrowIfDisposed() Implements System.IDisposable"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.X509SecurityTokenHandler.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.X509SecurityTokenHandler.html",
    "title": "Class X509SecurityTokenHandler",
    "keywords": "Class X509SecurityTokenHandler SecurityTokenHandler for X509SecurityToken. By default, the handler will do chain-trust validation of the Certificate. Inheritance Object SecurityTokenHandler X509SecurityTokenHandler Inherited Members SecurityTokenHandler.CanReadToken(String) SecurityTokenHandler.ReadToken(XmlReader, SecurityTokenResolver) SecurityTokenHandler.ReadToken(String) SecurityTokenHandler.WriteToken(SecurityToken) SecurityTokenHandler.CreateToken(SecurityTokenDescriptor) SecurityTokenHandler.CreateSecurityTokenReference(SecurityToken, Boolean) SecurityTokenHandler.DetectReplayedToken(SecurityToken) SecurityTokenHandler.Configuration SecurityTokenHandler.ContainingCollection Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class X509SecurityTokenHandler : SecurityTokenHandler Constructors X509SecurityTokenHandler() Creates an instance of X509SecurityTokenHandler . MapToWindows is defaulted to false. Uses PeerOrChainTrust as the default certificate validator. Declaration public X509SecurityTokenHandler() X509SecurityTokenHandler(X509CertificateValidator) Creates an instance of X509SecurityTokenHandler with an X509 certificate validator. MapToWindows is to false by default. Declaration public X509SecurityTokenHandler(X509CertificateValidator certificateValidator) Parameters Type Name Description X509CertificateValidator certificateValidator The certificate validator. X509SecurityTokenHandler(Boolean) Creates an instance of X509SecurityTokenHandler . Uses PeerOrChainTrust as the default certificate validator. Declaration public X509SecurityTokenHandler(bool mapToWindows) Parameters Type Name Description Boolean mapToWindows Boolean to indicate if the certificate should be mapped to a windows account. Default is false. X509SecurityTokenHandler(Boolean, X509CertificateValidator) Creates an instance of X509SecurityTokenHandler . Declaration public X509SecurityTokenHandler(bool mapToWindows, X509CertificateValidator certificateValidator) Parameters Type Name Description Boolean mapToWindows Boolean to indicate if the certificate should be mapped to a windows account. X509CertificateValidator certificateValidator The certificate validator. Properties CanValidateToken Gets a boolean indicating if the handler can validate tokens. Returns true by default. Declaration public override bool CanValidateToken { get; } Property Value Type Description Boolean Overrides SecurityTokenHandler.CanValidateToken CanWriteToken Gets a boolean indicating if the handler can write tokens. Returns true by default. Declaration public override bool CanWriteToken { get; } Property Value Type Description Boolean Overrides SecurityTokenHandler.CanWriteToken CertificateValidator Gets or sets the X509CeritificateValidator that is used by the current instance. Declaration public X509CertificateValidator CertificateValidator { get; set; } Property Value Type Description X509CertificateValidator MapToWindows Gets or sets a value indicating whether if the validating token should be mapped to a Windows account. Declaration public bool MapToWindows { get; set; } Property Value Type Description Boolean TokenType Gets X509SecurityToken type. Declaration public override Type TokenType { get; } Property Value Type Description Type Overrides SecurityTokenHandler.TokenType WriteXmlDSigDefinedClauseTypes Gets or sets a value indicating whether XmlDsig defined clause types are preferred. Supported XmlDSig defined SecurityKeyIdentifierClause types are, X509IssuerSerial X509SKI X509Certificate Declaration public bool WriteXmlDSigDefinedClauseTypes { get; set; } Property Value Type Description Boolean Methods CanReadKeyIdentifierClause(XmlReader) Declaration public override bool CanReadKeyIdentifierClause(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description Boolean Overrides SecurityTokenHandler.CanReadKeyIdentifierClause(XmlReader) CanReadToken(XmlReader) Declaration public override bool CanReadToken(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description Boolean Overrides SecurityTokenHandler.CanReadToken(XmlReader) CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause) Declaration public override bool CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause securityKeyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause securityKeyIdentifierClause Returns Type Description Boolean Overrides SecurityTokenHandler.CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause) GetTokenTypeIdentifiers() Gets the X.509 Security Token Type defined in WS-Security X.509 Token profile. Declaration public override string[] GetTokenTypeIdentifiers() Returns Type Description String [] The token type identifier. Overrides SecurityTokenHandler.GetTokenTypeIdentifiers() ReadKeyIdentifierClause(XmlReader) Declaration public override SecurityKeyIdentifierClause ReadKeyIdentifierClause(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description SecurityKeyIdentifierClause Overrides SecurityTokenHandler.ReadKeyIdentifierClause(XmlReader) ReadToken(XmlReader) Declaration public override SecurityToken ReadToken(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description SecurityToken Overrides SecurityTokenHandler.ReadToken(XmlReader) ValidateToken(SecurityToken) Validates an X509SecurityToken . Declaration public override ReadOnlyCollection<ClaimsIdentity> ValidateToken(SecurityToken token) Parameters Type Name Description SecurityToken token The X509SecurityToken to validate. Returns Type Description ReadOnlyCollection < ClaimsIdentity > A ReadOnlyCollection<T> of ClaimsIdentity representing the identities contained in the token. Overrides SecurityTokenHandler.ValidateToken(SecurityToken) Exceptions Type Condition ArgumentNullException The parameter 'token' is null. ArgumentException The token is not assignable from X509SecurityToken . InvalidOperationException Configuration SecurityTokenHandlerConfiguration is null. SecurityTokenValidationException The current X509CertificateValidator was unable to validate the certificate in the Token. InvalidOperationException Configuration.IssuerNameRegistry is null. SecurityTokenException Configuration.IssuerNameRegistry return null when resolving the issuer of the certificate in the Token. WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause) Declaration public override void WriteKeyIdentifierClause(XmlWriter writer, SecurityKeyIdentifierClause securityKeyIdentifierClause) Parameters Type Name Description XmlWriter writer SecurityKeyIdentifierClause securityKeyIdentifierClause Overrides SecurityTokenHandler.WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause) WriteToken(XmlWriter, SecurityToken) Writes the X509SecurityToken to the given XmlWriter. Declaration public override void WriteToken(XmlWriter writer, SecurityToken token) Parameters Type Name Description XmlWriter writer XmlWriter to write the token into. SecurityToken token The SecurityToken of type X509SecurityToken to be written. Overrides SecurityTokenHandler.WriteToken(XmlWriter, SecurityToken) Exceptions Type Condition ArgumentNullException The parameter 'writer' or 'token' is null. ArgumentException The token is not of type X509SecurityToken."
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.X509SubjectKeyIdentifierClause.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.X509SubjectKeyIdentifierClause.html",
    "title": "Class X509SubjectKeyIdentifierClause",
    "keywords": "Class X509SubjectKeyIdentifierClause Represents a key identifier clause that identifies a security token using the X.509 certificate's subject key identifier extension. Inheritance Object SecurityKeyIdentifierClause BinaryKeyIdentifierClause X509SubjectKeyIdentifierClause Inherited Members BinaryKeyIdentifierClause.GetBuffer() BinaryKeyIdentifierClause.GetRawBuffer() BinaryKeyIdentifierClause.Matches(SecurityKeyIdentifierClause) BinaryKeyIdentifierClause.Matches(Byte[]) BinaryKeyIdentifierClause.Matches(Byte[], Int32) SecurityKeyIdentifierClause.CreateKey() SecurityKeyIdentifierClause.GetDerivationNonce() SecurityKeyIdentifierClause.CanCreateKey SecurityKeyIdentifierClause.ClauseType SecurityKeyIdentifierClause.Id SecurityKeyIdentifierClause.DerivationLength Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class X509SubjectKeyIdentifierClause : BinaryKeyIdentifierClause Remarks Typically, the <xref:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause> does not need to be used, other than when a custom security token service is created. When a security token service returns a security token, the issued security token contains references to attached and unattached security tokens. Attached references refer to security tokens that are contained within the security header of a SOAP message and unattached references are security tokens that are not included within the security header of a SOAP message. These references typically affirm the authenticity of the issued security token. Use the <xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause> class to reference a <xref:System.IdentityModel.Tokens.X509SecurityToken> security token using the X.509 certificate's subject key identifier extension. The <xref:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause.GetX509SubjectKeyIdentifier%2A> method returns the subject key identifier extension. Windows Communication Foundation supports the following types of security token references for <xref:System.IdentityModel.Tokens.X509SecurityToken> security tokens. <xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause> <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause> <xref:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause> <xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause> Constructors X509SubjectKeyIdentifierClause(Byte[]) Declaration public X509SubjectKeyIdentifierClause(byte[] ski) Parameters Type Name Description Byte [] ski Methods CanCreateFrom(X509Certificate2) Declaration public static bool CanCreateFrom(X509Certificate2 certificate) Parameters Type Name Description X509Certificate2 certificate Returns Type Description Boolean GetX509SubjectKeyIdentifier() Declaration public byte[] GetX509SubjectKeyIdentifier() Returns Type Description Byte [] Matches(X509Certificate2) Declaration public bool Matches(X509Certificate2 certificate) Parameters Type Name Description X509Certificate2 certificate Returns Type Description Boolean TryCreateFrom(X509Certificate2, out X509SubjectKeyIdentifierClause) Declaration public static bool TryCreateFrom(X509Certificate2 certificate, out X509SubjectKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description X509Certificate2 certificate X509SubjectKeyIdentifierClause keyIdentifierClause Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause.html": {
    "href": "api-corewcf/CoreWCF.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause.html",
    "title": "Class X509ThumbprintKeyIdentifierClause",
    "keywords": "Class X509ThumbprintKeyIdentifierClause Represents a key identifier clause that identifies a security tokens using the X.509 certificate's thumbprint. Inheritance Object SecurityKeyIdentifierClause BinaryKeyIdentifierClause X509ThumbprintKeyIdentifierClause Inherited Members BinaryKeyIdentifierClause.GetBuffer() BinaryKeyIdentifierClause.GetRawBuffer() BinaryKeyIdentifierClause.Matches(SecurityKeyIdentifierClause) BinaryKeyIdentifierClause.Matches(Byte[]) BinaryKeyIdentifierClause.Matches(Byte[], Int32) SecurityKeyIdentifierClause.CreateKey() SecurityKeyIdentifierClause.GetDerivationNonce() SecurityKeyIdentifierClause.CanCreateKey SecurityKeyIdentifierClause.ClauseType SecurityKeyIdentifierClause.Id SecurityKeyIdentifierClause.DerivationLength Namespace : CoreWCF.IdentityModel.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class X509ThumbprintKeyIdentifierClause : BinaryKeyIdentifierClause Remarks Typically, the <xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause> does not need to be used, other than when a custom security token service is created. When a security token service returns a security token, the issued security token contains references to attached and unattached security tokens. Attached references refer to security tokens that are contained within the security header of a SOAP message token and unattached references reference security tokens that are not included within the security header of a SOAP message. These references typically affirm the authenticity of the issued security token. Use the <xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause> class to reference a <xref:System.IdentityModel.Tokens.X509SecurityToken> security token using the X.509 certificate's thumbprint. The <xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause.GetX509Thumbprint%2A> method returns the thumbprint. Windows Communication Foundation supports the following types of security token references for <xref:System.IdentityModel.Tokens.X509SecurityToken> security tokens. <xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause> <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause> <xref:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause> <xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause> Constructors X509ThumbprintKeyIdentifierClause(Byte[]) Declaration public X509ThumbprintKeyIdentifierClause(byte[] thumbprint) Parameters Type Name Description Byte [] thumbprint X509ThumbprintKeyIdentifierClause(X509Certificate2) Declaration public X509ThumbprintKeyIdentifierClause(X509Certificate2 certificate) Parameters Type Name Description X509Certificate2 certificate Methods GetX509Thumbprint() Declaration public byte[] GetX509Thumbprint() Returns Type Description Byte [] Matches(X509Certificate2) Declaration public bool Matches(X509Certificate2 certificate) Parameters Type Name Description X509Certificate2 certificate Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api-corewcf/CoreWCF.IExtensibleObject-1.html": {
    "href": "api-corewcf/CoreWCF.IExtensibleObject-1.html",
    "title": "Interface IExtensibleObject<T>",
    "keywords": "Interface IExtensibleObject<T> Enable an object to participate in custom behavior, such as registering for events, or watching state transitions. Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public interface IExtensibleObject<T> where T : IExtensibleObject<T> Type Parameters Name Description T Remarks Implement <xref:CoreWCF.IExtensibleObject%601> to enable aggregation of extensions. For example, if you are implementing a TreeNode class and want to allow external code to add annotations and methods to some instances of TreeNode , you can have TreeNode implement IExtensibleObject&lt;TreeNode> . This enables code that uses TreeNode to add objects that implement IExtensibleObject&lt;TreeNode> to the <xref:CoreWCF.IExtensibleObject%601.Extensions%2A> collection. There are four extensible objects in Windows Communication Foundation (WCF): <xref:CoreWCF.ServiceHostBase?displayProperty=nameWithType> <xref:CoreWCF.InstanceContext?displayProperty=nameWithType> <xref:CoreWCF.IContextChannel?displayProperty=nameWithType> <xref:CoreWCF.OperationContext?displayProperty=nameWithType> For a discussion about how to create extension to work with these objects, see Extensible Objects . Properties Extensions Declaration IExtensionCollection<T> Extensions { get; } Property Value Type Description IExtensionCollection <T>"
  },
  "api-corewcf/CoreWCF.IExtension-1.html": {
    "href": "api-corewcf/CoreWCF.IExtension-1.html",
    "title": "Interface IExtension<T>",
    "keywords": "Interface IExtension<T> Enables an object to extend another object through aggregation. Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public interface IExtension<T> where T : IExtensibleObject<T> Type Parameters Name Description T Remarks WCF allows you to extend <xref:CoreWCF.IExtensibleObject%601?displayProperty=nameWithType> objects (the <xref:CoreWCF.IContextChannel?displayProperty=nameWithType>, <xref:CoreWCF.ServiceHost?displayProperty=nameWithType>, <xref:CoreWCF.InstanceContext?displayProperty=nameWithType>, and <xref:CoreWCF.OperationContext?displayProperty=nameWithType> classes) by adding a new state or behavior by using its extensible object pattern. The extensible object pattern is used in WCF to either extend existing run-time classes with new functionality or to add new state features to an object. Methods Attach(T) Declaration void Attach(T owner) Parameters Type Name Description T owner Detach(T) Declaration void Detach(T owner) Parameters Type Name Description T owner"
  },
  "api-corewcf/CoreWCF.IExtensionCollection-1.html": {
    "href": "api-corewcf/CoreWCF.IExtensionCollection-1.html",
    "title": "Interface IExtensionCollection<T>",
    "keywords": "Interface IExtensionCollection<T> A collection of the objects that allow for retrieving the by its type. Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public interface IExtensionCollection<T> where T : IExtensibleObject<T> Type Parameters Name Description T Remarks To be added. Methods Find<E>() Declaration E Find<E>() Returns Type Description E Type Parameters Name Description E FindAll<E>() Declaration Collection<E> FindAll<E>() Returns Type Description Collection <E> Type Parameters Name Description E"
  },
  "api-corewcf/CoreWCF.ImpersonationOption.html": {
    "href": "api-corewcf/CoreWCF.ImpersonationOption.html",
    "title": "Class ImpersonationOption",
    "keywords": "Class ImpersonationOption Specifies the impersonation behavior for a service operation on a service instance. Inheritance Object ImpersonationOption Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class ImpersonationOption : Enum Remarks Use the <xref:CoreWCF.ImpersonationOption> enumeration to control impersonation in Windows Communication Foundation (WCF) applications. This setting interacts with a configuration property on <xref:CoreWCF.Configuration.ServiceAuthorizationElement.ImpersonateCallerForAllOperations%2A> in the following table. Fields Allowed Declaration public const ImpersonationOption Allowed Field Value Type Description ImpersonationOption NotAllowed Declaration public const ImpersonationOption NotAllowed Field Value Type Description ImpersonationOption Required Declaration public const ImpersonationOption Required Field Value Type Description ImpersonationOption value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.InjectedAttribute.html": {
    "href": "api-corewcf/CoreWCF.InjectedAttribute.html",
    "title": "Class InjectedAttribute",
    "keywords": "Class InjectedAttribute Inheritance Object InjectedAttribute Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class InjectedAttribute : Attribute Constructors InjectedAttribute() Declaration public InjectedAttribute()"
  },
  "api-corewcf/CoreWCF.InstanceContext.html": {
    "href": "api-corewcf/CoreWCF.InstanceContext.html",
    "title": "Class InstanceContext",
    "keywords": "Class InstanceContext Represents the context information for a service instance. Inheritance Object CommunicationObject InstanceContext Implements ICommunicationObject IExtensibleObject < InstanceContext > Inherited Members CommunicationObject.Abort() CommunicationObject.CloseAsync() CommunicationObject.CloseAsync(CancellationToken) CommunicationObject.OpenAsync() CommunicationObject.OpenAsync(CancellationToken) CommunicationObject.Fault(Exception) CommunicationObject.Fault() CommunicationObject.GetCommunicationObjectType() CommunicationObject.OnClosing() CommunicationObject.ThrowIfDisposed() CommunicationObject.ThrowIfDisposedOrImmutable() CommunicationObject.ThrowIfDisposedOrNotOpen() CommunicationObject.ThrowIfNotOpened() CommunicationObject.ThrowPending() CommunicationObject.IsDisposed CommunicationObject.State CommunicationObject.ThisLock CommunicationObject.Closed CommunicationObject.Closing CommunicationObject.Faulted CommunicationObject.Opened CommunicationObject.Opening Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class InstanceContext : CommunicationObject, ICommunicationObject, IExtensibleObject<InstanceContext> Constructors InstanceContext(ServiceHostBase, Object) Declaration public InstanceContext(ServiceHostBase host, object implementation) Parameters Type Name Description ServiceHostBase host Object implementation InstanceContext(Object) Declaration public InstanceContext(object implementation) Parameters Type Name Description Object implementation Properties DefaultCloseTimeout Declaration protected override TimeSpan DefaultCloseTimeout { get; } Property Value Type Description TimeSpan Overrides CommunicationObject.DefaultCloseTimeout DefaultOpenTimeout Declaration protected override TimeSpan DefaultOpenTimeout { get; } Property Value Type Description TimeSpan Overrides CommunicationObject.DefaultOpenTimeout Extensions Declaration public IExtensionCollection<InstanceContext> Extensions { get; } Property Value Type Description IExtensionCollection < InstanceContext > Host Declaration public ServiceHostBase Host { get; } Property Value Type Description ServiceHostBase IsSingleton Declaration public bool IsSingleton { get; } Property Value Type Description Boolean ManualFlowControlLimit Declaration public int ManualFlowControlLimit { get; set; } Property Value Type Description Int32 SynchronizationContext Declaration public SynchronizationContext SynchronizationContext { get; set; } Property Value Type Description SynchronizationContext Methods GetServiceInstance() Declaration public object GetServiceInstance() Returns Type Description Object GetServiceInstance(Message) Declaration public object GetServiceInstance(Message message) Parameters Type Name Description Message message Returns Type Description Object OnAbort() Declaration protected override void OnAbort() Overrides CommunicationObject.OnAbort() OnCloseAsync(CancellationToken) Declaration protected override Task OnCloseAsync(CancellationToken token) Parameters Type Name Description CancellationToken token Returns Type Description Task Overrides CommunicationObject.OnCloseAsync(CancellationToken) OnClosed() Declaration protected override void OnClosed() Overrides CommunicationObject.OnClosed() OnFaulted() Declaration protected override void OnFaulted() Overrides CommunicationObject.OnFaulted() OnOpenAsync(CancellationToken) Declaration protected override Task OnOpenAsync(CancellationToken token) Parameters Type Name Description CancellationToken token Returns Type Description Task Overrides CommunicationObject.OnOpenAsync(CancellationToken) OnOpened() Declaration protected override void OnOpened() Overrides CommunicationObject.OnOpened() OnOpening() Declaration protected override void OnOpening() Overrides CommunicationObject.OnOpening() Implements ICommunicationObject IExtensibleObject<T>"
  },
  "api-corewcf/CoreWCF.InstanceContextMode.html": {
    "href": "api-corewcf/CoreWCF.InstanceContextMode.html",
    "title": "Class InstanceContextMode",
    "keywords": "Class InstanceContextMode Specifies the number of service instances available for handling calls that are contained in incoming messages. Inheritance Object InstanceContextMode Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class InstanceContextMode : Enum Remarks The <xref:CoreWCF.InstanceContext?displayProperty=nameWithType> class manages the association between the channel and the user-defined service objects. Use the InstanceContextMode enumeration with the <xref:CoreWCF.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> property to specify the lifetime of the <xref:CoreWCF.InstanceContext> object. Windows Communication Foundation (WCF) can create a new <xref:CoreWCF.InstanceContext> object for every call, every session, or specify that the <xref:CoreWCF.InstanceContext> object is bound to a single service object. For a working example, see Instancing . The Single value specifies that a single <xref:CoreWCF.InstanceContext> object should be used for the lifetime of the service. Several caveats are associated with the Single value: If the <xref:CoreWCF.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> value is set to Single , your service can only process one message at a time unless you also set the <xref:CoreWCF.ServiceBehaviorAttribute.ConcurrencyMode%2A?displayProperty=nameWithtype> value to <xref:CoreWCF.ConcurrencyMode.Multiple?displayProperty=nameWithType>. For singleton lifetime behavior (for example, if the host application calls the <xref:CoreWCF.ServiceHost.%23ctor%2A?displayProperty=nameWithType> constructor and passes an object to use as the service), the service class must set <xref:CoreWCF.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> to Single , or an exception is thrown when the service host is opened. Fields PerCall Declaration public const InstanceContextMode PerCall Field Value Type Description InstanceContextMode PerSession Declaration public const InstanceContextMode PerSession Field Value Type Description InstanceContextMode Single Declaration public const InstanceContextMode Single Field Value Type Description InstanceContextMode value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.IOperationContractAttributeProvider.html": {
    "href": "api-corewcf/CoreWCF.IOperationContractAttributeProvider.html",
    "title": "Interface IOperationContractAttributeProvider",
    "keywords": "Interface IOperationContractAttributeProvider Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public interface IOperationContractAttributeProvider Methods GetOperationContractAttribute() Declaration OperationContractAttribute GetOperationContractAttribute() Returns Type Description OperationContractAttribute"
  },
  "api-corewcf/CoreWCF.MessageBodyMemberAttribute.html": {
    "href": "api-corewcf/CoreWCF.MessageBodyMemberAttribute.html",
    "title": "Class MessageBodyMemberAttribute",
    "keywords": "Class MessageBodyMemberAttribute Specifies that a member is serialized as an element inside the SOAP body. Inheritance Object MessageContractMemberAttribute MessageBodyMemberAttribute Inherited Members MessageContractMemberAttribute.Namespace MessageContractMemberAttribute.Name Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class MessageBodyMemberAttribute : MessageContractMemberAttribute Remarks Use the <xref:CoreWCF.MessageBodyMemberAttribute> attribute to specify that a data member is serialized into the SOAP body and to control some serialization items. The <xref:CoreWCF.MessageBodyMemberAttribute.Order%2A> property is used to specify the order of body parts in cases where the default alphabetical order is not appropriate. The other properties are inherited from the base class, <xref:CoreWCF.MessageContractMemberAttribute?displayProperty=nameWithType>. For more information about controlling the serialization of the contents of a SOAP body without modifying the default SOAP envelope itself, see <xref:System.Runtime.Serialization.DataContractAttribute?displayProperty=nameWithType>, Specifying Data Transfer in Service Contracts , and Using Data Contracts . For more information, see Using Message Contracts . Constructors MessageBodyMemberAttribute() Declaration public MessageBodyMemberAttribute() Properties Order Declaration public int Order { get; set; } Property Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.MessageContractAttribute.html": {
    "href": "api-corewcf/CoreWCF.MessageContractAttribute.html",
    "title": "Class MessageContractAttribute",
    "keywords": "Class MessageContractAttribute Defines a strongly-typed class that corresponds to a SOAP message. Inheritance Object MessageContractAttribute Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class MessageContractAttribute : Attribute Remarks Use the <xref:CoreWCF.MessageContractAttribute> attribute to specify the structure of the SOAP envelope for a particular message. Your service can then use the message as a parameter or return type in service operations. For information about controlling the serialization of the contents of a SOAP body without modifying the default SOAP envelope itself, see <xref:System.Runtime.Serialization.DataContractAttribute?displayProperty=nameWithType>, Specifying Data Transfer in Service Contracts , and Using Data Contracts . Note You cannot use custom message types in your service operation with regular serializable parameters. Either use custom message types or serializable parameters that are not <xref:CoreWCF.Channels.Message> objects. For details, see , Specifying Data Transfer in Service Contracts . To implement a message contract for a type, annotate it with <xref:CoreWCF.MessageContractAttribute> and annotate one or more of the class's fields or properties with <xref:CoreWCF.MessageBodyMemberAttribute>, <xref:CoreWCF.MessageHeaderAttribute>, or <xref:CoreWCF.MessageHeaderArrayAttribute>. Note <xref:CoreWCF.MessageParameterAttribute?displayProperty=nameWithType> is not a message contract attribute and cannot be used in conjunction with <xref:CoreWCF.MessageContractAttribute>. Use the <xref:CoreWCF.OperationContractAttribute.Action%2A> and <xref:CoreWCF.OperationContractAttribute.ReplyAction%2A> properties to specify the value of the &lt;Action> element in the SOAP message. Use the <xref:CoreWCF.MessageContractAttribute.HasProtectionLevel%2A> and <xref:CoreWCF.MessageContractAttribute.ProtectionLevel%2A> properties to indicate whether the SOAP message type has a protection level, and if so, what it is. Use the <xref:CoreWCF.MessageContractAttribute.IsWrapped%2A> property to indicate whether the message body has a wrapper element, and if so, use the <xref:CoreWCF.MessageContractAttribute.WrapperName%2A> and <xref:CoreWCF.MessageContractAttribute.WrapperNamespace%2A> properties to specify the name and namespace, respectively, of the wrapping element. For more information, see Using Message Contracts . Constructors MessageContractAttribute() Declaration public MessageContractAttribute() Properties IsWrapped Declaration public bool IsWrapped { get; set; } Property Value Type Description Boolean WrapperName Declaration public string WrapperName { get; set; } Property Value Type Description String WrapperNamespace Declaration public string WrapperNamespace { get; set; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.MessageContractMemberAttribute.html": {
    "href": "api-corewcf/CoreWCF.MessageContractMemberAttribute.html",
    "title": "Class MessageContractMemberAttribute",
    "keywords": "Class MessageContractMemberAttribute Declares the base members for and . Inheritance Object MessageContractMemberAttribute MessageBodyMemberAttribute MessageHeaderAttribute Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public abstract class MessageContractMemberAttribute : Attribute Remarks This class contains properties common to all parts of a SOAP message. For example, all parts have a name and a namespace, and potentially a level of security applied. For information on controlling the serialization of the contents of a SOAP body without modifying the default SOAP envelope itself, see <xref:System.Runtime.Serialization.DataContractAttribute?displayProperty=nameWithType>, Specifying Data Transfer in Service Contracts , and Using Data Contracts . For more information about creating message contracts, see Using Message Contracts . Constructors MessageContractMemberAttribute() Declaration protected MessageContractMemberAttribute() Properties Name Declaration public string Name { get; set; } Property Value Type Description String Namespace Declaration public string Namespace { get; set; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.MessageCredentialType.html": {
    "href": "api-corewcf/CoreWCF.MessageCredentialType.html",
    "title": "Class MessageCredentialType",
    "keywords": "Class MessageCredentialType Enumerates the valid message credential types. Inheritance Object MessageCredentialType Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class MessageCredentialType : Enum Remarks This enumeration is used to specify the credential type required by a binding for authentication. It is used by all standard bindings except the <xref:CoreWCF.BasicHttpBinding>, which uses <xref:CoreWCF.BasicHttpMessageCredentialType>. Fields Certificate Declaration public const MessageCredentialType Certificate Field Value Type Description MessageCredentialType IssuedToken Declaration public const MessageCredentialType IssuedToken Field Value Type Description MessageCredentialType None Declaration public const MessageCredentialType None Field Value Type Description MessageCredentialType UserName Declaration public const MessageCredentialType UserName Field Value Type Description MessageCredentialType value__ Declaration public int value__ Field Value Type Description Int32 Windows Declaration public const MessageCredentialType Windows Field Value Type Description MessageCredentialType"
  },
  "api-corewcf/CoreWCF.MessageHeader-1.html": {
    "href": "api-corewcf/CoreWCF.MessageHeader-1.html",
    "title": "Class MessageHeader<T>",
    "keywords": "Class MessageHeader<T> Represents the content of a SOAP header. Inheritance Object MessageHeader<T> Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class MessageHeader<T> : Object Type Parameters Name Description T Remarks A message header contains optional metadata that describe a message, encapsulated by the <xref:CoreWCF.Channels.Message> class. Constructors MessageHeader() Declaration public MessageHeader() MessageHeader(T) Declaration public MessageHeader(T content) Parameters Type Name Description T content MessageHeader(T, Boolean, String, Boolean) Declaration public MessageHeader(T content, bool mustUnderstand, string actor, bool relay) Parameters Type Name Description T content Boolean mustUnderstand String actor Boolean relay Properties Actor Declaration public string Actor { get; set; } Property Value Type Description String Content Declaration public T Content { get; set; } Property Value Type Description T MustUnderstand Declaration public bool MustUnderstand { get; set; } Property Value Type Description Boolean Relay Declaration public bool Relay { get; set; } Property Value Type Description Boolean Methods GetUntypedHeader(String, String) Declaration public MessageHeader GetUntypedHeader(string name, string ns) Parameters Type Name Description String name String ns Returns Type Description MessageHeader"
  },
  "api-corewcf/CoreWCF.MessageHeaderArrayAttribute.html": {
    "href": "api-corewcf/CoreWCF.MessageHeaderArrayAttribute.html",
    "title": "Class MessageHeaderArrayAttribute",
    "keywords": "Class MessageHeaderArrayAttribute Specifies that the default wrapper element in the SOAP message must not be written around array types in a header element. Inheritance Object MessageContractMemberAttribute MessageHeaderAttribute MessageHeaderArrayAttribute Inherited Members MessageHeaderAttribute.MustUnderstand MessageHeaderAttribute.Relay MessageHeaderAttribute.Actor MessageContractMemberAttribute.Namespace MessageContractMemberAttribute.Name Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class MessageHeaderArrayAttribute : MessageHeaderAttribute Remarks Use the <xref:CoreWCF.MessageHeaderArrayAttribute> attribute to turn off the standard array wrapper element when you want to emit an unbounded number of identical elements either inside the &lt;soap:Header> directly or inside the first and only child of &lt;soap:Header> without the default wrapper element for array types. <xref:CoreWCF.MessageHeaderArrayAttribute> can be applied only to members of an array type. If specified, the <xref:CoreWCF.MessageContractMemberAttribute.Name%2A> and <xref:CoreWCF.MessageContractMemberAttribute.Namespace%2A> are used as the name and namespace of the element of each array item. If not specified, the array item elements are named using the same convention used for naming non-repeating body parts. For more information, see <xref:CoreWCF.MessageContractMemberAttribute.Name%2A> and <xref:CoreWCF.MessageContractMemberAttribute.Namespace%2A>. For information about controlling the serialization of the contents of a SOAP body without modifying the default SOAP envelope itself, see <xref:System.Runtime.Serialization.DataContractAttribute?displayProperty=nameWithType>, Specifying Data Transfer in Service Contracts , and Using Data Contracts . For more information about creating message contracts, see Using Message Contracts . Constructors MessageHeaderArrayAttribute() Declaration public MessageHeaderArrayAttribute()"
  },
  "api-corewcf/CoreWCF.MessageHeaderAttribute.html": {
    "href": "api-corewcf/CoreWCF.MessageHeaderAttribute.html",
    "title": "Class MessageHeaderAttribute",
    "keywords": "Class MessageHeaderAttribute Specifies that a data member is a SOAP message header. Inheritance Object MessageContractMemberAttribute MessageHeaderAttribute MessageHeaderArrayAttribute Inherited Members MessageContractMemberAttribute.Namespace MessageContractMemberAttribute.Name Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class MessageHeaderAttribute : MessageContractMemberAttribute Remarks The <xref:CoreWCF.MessageHeaderAttribute> attribute allows you to map fields and properties of a type marked with the <xref:CoreWCF.MessageContractAttribute> attribute to SOAP message headers. The field or property can be of a simple type or a composite type that can be serialized. For information on controlling the serialization of the contents of a SOAP body without modifying the default SOAP envelope itself, see <xref:System.Runtime.Serialization.DataContractAttribute?displayProperty=nameWithType>, Specifying Data Transfer in Service Contracts , and Using Data Contracts . For more information about creating message contracts, see Using Message Contracts . The SOAP standard defines the following attributes that can exist on a header: Actor or Role ( Actor in SOAP 1.1, Role in SOAP 1.2) MustUnderstand Relay The Actor or Role attribute specifies the URI of the node for which a given header is intended. The MustUnderstand attribute specifies whether the header understands the node processing. The Relay attribute specifies whether the header is to be relayed to downstream nodes. Windows Communication Foundation (WCF) does not perform any processing of these attributes on incoming messages, except for the MustUnderstand attribute. You can, however, read and write these attributes, even though they are not sent by default. You can set the attribute values in two ways. First, you can change the <xref:CoreWCF.MessageHeaderAttribute.Actor%2A>, <xref:CoreWCF.MessageHeaderAttribute.MustUnderstand%2A> and <xref:CoreWCF.MessageHeaderAttribute.Relay%2A> properties on the <xref:CoreWCF.MessageHeaderAttribute>. (There is no Role property - set the <xref:CoreWCF.MessageHeaderAttribute.Actor%2A> property and Role is passed if SOAP 1.2 is used). For example: The second way to control these attributes is by making the desired header type the type parameter of the <xref:CoreWCF.MessageHeader%601> class and using the resulting type together with the <xref:CoreWCF.MessageHeaderAttribute>. Then use the <xref:CoreWCF.MessageHeader%601> properties programmatically to set the SOAP attributes. For example: If both the dynamic and the static control mechanisms are used, the static settings are the default but can be overridden using the dynamic mechanism. For example: Creating repeated headers with dynamic attribute control is allowed. For example: [MessageHeaderArray] public MessageHeader&lt;Person> documentApprovers[]; On the receiving side, reading these SOAP attributes can only be done if the generic <xref:CoreWCF.MessageHeader%601> class is used. Examine the <xref:CoreWCF.MessageHeader%601.Actor%2A>, <xref:CoreWCF.MessageHeader%601.Relay%2A> or <xref:CoreWCF.MessageHeader%601.MustUnderstand%2A> properties of a header of the <xref:CoreWCF.MessageHeader%601> type to discover the attribute settings on the received message. When a message is received and then sent back, the SOAP attribute settings only roundtrip for headers of the <xref:CoreWCF.MessageHeader%601> type. Constructors MessageHeaderAttribute() Declaration public MessageHeaderAttribute() Properties Actor Declaration public string Actor { get; set; } Property Value Type Description String MustUnderstand Declaration public bool MustUnderstand { get; set; } Property Value Type Description Boolean Relay Declaration public bool Relay { get; set; } Property Value Type Description Boolean"
  },
  "api-corewcf/CoreWCF.MessageHeaderException.html": {
    "href": "api-corewcf/CoreWCF.MessageHeaderException.html",
    "title": "Class MessageHeaderException",
    "keywords": "Class MessageHeaderException The exception that is thrown when the expectations regarding headers of a SOAP message are not satisfied when the message is processed. Inheritance Object CommunicationException ProtocolException MessageHeaderException Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class MessageHeaderException : ProtocolException Remarks This exception is typically thrown when there are too many headers or headers are missing from the message. This can include infrastructure headers such as the Action and Reliable Message headers. This exception derives from <xref:CoreWCF.ProtocolException>, which in turn derives from <xref:CoreWCF.CommunicationException>. The <xref:CoreWCF.CommunicationException> class represents a class of recoverable errors that may be thrown during communication between endpoints and that robust Windows Communication Foundation (WCF) client and service applications are expected to handle. To prevent the more generic <xref:CoreWCF.CommunicationException> handler from catching the more specific <xref:CoreWCF.ProtocolException>, catch this exception prior to handling <xref:CoreWCF.CommunicationException>. Constructors MessageHeaderException() Declaration public MessageHeaderException() MessageHeaderException(SerializationInfo, StreamingContext) Declaration protected MessageHeaderException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context MessageHeaderException(String) Declaration public MessageHeaderException(string message) Parameters Type Name Description String message MessageHeaderException(String, Boolean) Declaration public MessageHeaderException(string message, bool isDuplicate) Parameters Type Name Description String message Boolean isDuplicate MessageHeaderException(String, Exception) Declaration public MessageHeaderException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException MessageHeaderException(String, String, String) Declaration public MessageHeaderException(string message, string headerName, string ns) Parameters Type Name Description String message String headerName String ns MessageHeaderException(String, String, String, Boolean) Declaration public MessageHeaderException(string message, string headerName, string ns, bool isDuplicate) Parameters Type Name Description String message String headerName String ns Boolean isDuplicate MessageHeaderException(String, String, String, Boolean, Exception) Declaration public MessageHeaderException(string message, string headerName, string ns, bool isDuplicate, Exception innerException) Parameters Type Name Description String message String headerName String ns Boolean isDuplicate Exception innerException MessageHeaderException(String, String, String, Exception) Declaration public MessageHeaderException(string message, string headerName, string ns, Exception innerException) Parameters Type Name Description String message String headerName String ns Exception innerException Properties Context Declaration public StreamingContext Context { get; } Property Value Type Description StreamingContext HeaderName Declaration public string HeaderName { get; } Property Value Type Description String HeaderNamespace Declaration public string HeaderNamespace { get; } Property Value Type Description String IsDuplicate Declaration public bool IsDuplicate { get; } Property Value Type Description Boolean"
  },
  "api-corewcf/CoreWCF.MessageParameterAttribute.html": {
    "href": "api-corewcf/CoreWCF.MessageParameterAttribute.html",
    "title": "Class MessageParameterAttribute",
    "keywords": "Class MessageParameterAttribute Controls the name of the request and response parameter names. Cannot be used with or message contracts. Inheritance Object MessageParameterAttribute Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class MessageParameterAttribute : Attribute Remarks Use the <xref:CoreWCF.MessageParameterAttribute> to control the name of the parameter or the return value. This attribute has no effect if the parameters are marked by the <xref:CoreWCF.MessageContractAttribute> attribute. Note The value of the parameter names in the operation signature are part of the contract and are case sensitive. Use this attribute when you need to distinguish between the local parameter name and the metadata that describes the operation for client applications. For more information about controlling the serialization of the contents of a SOAP body without modifying the default SOAP envelope itself, see <xref:System.Runtime.Serialization.DataContractAttribute?displayProperty=nameWithType>, Specifying Data Transfer in Service Contracts , and Using Data Contracts . For more information about creating message contracts, see Using Message Contracts . Constructors MessageParameterAttribute() Declaration public MessageParameterAttribute() Properties Name Declaration public string Name { get; set; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.MessageSecurityOverHttp.html": {
    "href": "api-corewcf/CoreWCF.MessageSecurityOverHttp.html",
    "title": "Class MessageSecurityOverHttp",
    "keywords": "Class MessageSecurityOverHttp Enables setting message-level security properties on the wsDualHttpBinding binding. Inheritance Object MessageSecurityOverHttp NonDualMessageSecurityOverHttp Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class MessageSecurityOverHttp : Object Remarks This object is accessed from the binding by means of the <xref:CoreWCF.WSDualHttpBinding.Security%2A> property, which returns a <xref:CoreWCF.WSDualHttpSecurity> object. The <xref:CoreWCF.WSDualHttpSecurity.Message%2A> property provides a reference to the <xref:CoreWCF.MessageSecurityOverHttp> object. Constructors MessageSecurityOverHttp() Declaration public MessageSecurityOverHttp() Properties AlgorithmSuite Declaration public SecurityAlgorithmSuite AlgorithmSuite { get; set; } Property Value Type Description SecurityAlgorithmSuite ClientCredentialType Declaration public MessageCredentialType ClientCredentialType { get; set; } Property Value Type Description MessageCredentialType NegotiateServiceCredential Declaration public bool NegotiateServiceCredential { get; set; } Property Value Type Description Boolean Methods CreateSecurityBindingElement(Boolean, Boolean, MessageSecurityVersion) Declaration public SecurityBindingElement CreateSecurityBindingElement(bool isSecureTransportMode, bool isReliableSession, MessageSecurityVersion version) Parameters Type Name Description Boolean isSecureTransportMode Boolean isReliableSession MessageSecurityVersion version Returns Type Description SecurityBindingElement IsSecureConversationEnabled() Declaration protected virtual bool IsSecureConversationEnabled() Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.MessageSecurityVersion.html": {
    "href": "api-corewcf/CoreWCF.MessageSecurityVersion.html",
    "title": "Class MessageSecurityVersion",
    "keywords": "Class MessageSecurityVersion An abstract container class that, when implemented by several of its static properties, contains version information for security components. Inheritance Object MessageSecurityVersion Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public abstract class MessageSecurityVersion : Object Remarks This class is the extensibility point for customizing token serialization. This class is a singleton that provides information about the versions of the security specifications, (WS-Security, WS-Trust, WS-Secure Conversation and WS-Security Policy), that must be supported by a binding. The class contains seven static properties, each of which returns an instance of this class. Each of these properties represents a different combination of security specification versions. The instances of this class are used as parameters in the Create…CertificateBindingElement method calls on the <xref:CoreWCF.Channels.SecurityBindingElement> class. If you pass the <xref:CoreWCF.MessageSecurityVersion.Default%2A> property, you create a standard version of the binding element. To create a non-standard version, pass the property that matches your version. The class also contains abstract properties that are implemented by the previous instances. Properties BasicSecurityProfileVersion Declaration public abstract BasicSecurityProfileVersion BasicSecurityProfileVersion { get; } Property Value Type Description BasicSecurityProfileVersion Default Declaration public static MessageSecurityVersion Default { get; } Property Value Type Description MessageSecurityVersion SecureConversationVersion Declaration public SecureConversationVersion SecureConversationVersion { get; } Property Value Type Description SecureConversationVersion SecurityPolicyVersion Declaration public abstract SecurityPolicyVersion SecurityPolicyVersion { get; } Property Value Type Description SecurityPolicyVersion SecurityTokenVersion Declaration public SecurityTokenVersion SecurityTokenVersion { get; } Property Value Type Description SecurityTokenVersion SecurityVersion Declaration public SecurityVersion SecurityVersion { get; } Property Value Type Description SecurityVersion TrustVersion Declaration public TrustVersion TrustVersion { get; } Property Value Type Description TrustVersion WSSecurity10WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10 Declaration public static MessageSecurityVersion WSSecurity10WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10 { get; } Property Value Type Description MessageSecurityVersion WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10 Declaration public static MessageSecurityVersion WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10 { get; } Property Value Type Description MessageSecurityVersion WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12 Declaration public static MessageSecurityVersion WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12 { get; } Property Value Type Description MessageSecurityVersion WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10 Declaration public static MessageSecurityVersion WSSecurity11WSTrust13WSSecureConversation13WSSecurityPolicy12BasicSecurityProfile10 { get; } Property Value Type Description MessageSecurityVersion WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11 Declaration public static MessageSecurityVersion WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11 { get; } Property Value Type Description MessageSecurityVersion WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10 Declaration public static MessageSecurityVersion WSSecurity11WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10 { get; } Property Value Type Description MessageSecurityVersion"
  },
  "api-corewcf/CoreWCF.NetHttpBinding.html": {
    "href": "api-corewcf/CoreWCF.NetHttpBinding.html",
    "title": "Class NetHttpBinding",
    "keywords": "Class NetHttpBinding Specifies settings for . Inheritance Object Binding HttpBindingBase NetHttpBinding Implements IDefaultCommunicationTimeouts Inherited Members HttpBindingBase.MaxReceivedMessageSize HttpBindingBase.MaxBufferSize HttpBindingBase.ReaderQuotas HttpBindingBase.Scheme HttpBindingBase.TextEncoding HttpBindingBase.TransferMode Binding.CanBuildServiceDispatcher<TChannel>(BindingParameterCollection) Binding.BuildServiceDispatcher<TChannel>(BindingParameterCollection, IServiceDispatcher) Binding.BuildServiceDispatcher<TChannel>(Uri, BindingParameterCollection, IServiceDispatcher) Binding.BuildServiceDispatcher<TChannel>(Uri, String, BindingParameterCollection, IServiceDispatcher) Binding.GetProperty<T>(BindingParameterCollection) Binding.CloseTimeout Binding.Name Binding.Namespace Binding.OpenTimeout Binding.ReceiveTimeout Binding.MessageVersion Binding.SendTimeout Namespace : CoreWCF Assembly : CoreWCF.Http.dll Syntax public class NetHttpBinding : HttpBindingBase, IDefaultCommunicationTimeouts Remarks <xref:CoreWCF.NetHttpBinding> is a binding designed for consuming HTTP or WebSocket services and uses binary encoding by default. Note: WebSockets are only supported on Windows 8. <xref:CoreWCF.NetHttpBinding> will detect whether it is used with a request-reply contract or duplex contract and change its behavior to match - it will use HTTP for request-reply and WebSockets for duplex (only on Windows 8). This behavior can be overridden by setting the <xref:CoreWCF.Channels.WebSocketTransportUsage> property to one of the following values: WhenDuplex- This is the default value and behaves as described above. Never - This prevents WebSockets from being used. Attempting to use a duplex contract with this setting will result in an exception. Always - This forces WebSockets to be used even for request-reply contracts. <xref:CoreWCF.NetHttpBinding> supports reliable sessions in both HTTP mode and WebSocket mode. In WebSocket mode sessions are provided by the transport. Constructors NetHttpBinding() Declaration public NetHttpBinding() NetHttpBinding(BasicHttpSecurityMode) Declaration public NetHttpBinding(BasicHttpSecurityMode securityMode) Parameters Type Name Description BasicHttpSecurityMode securityMode Properties MessageEncoding Declaration public NetHttpMessageEncoding MessageEncoding { get; set; } Property Value Type Description NetHttpMessageEncoding Security Declaration public BasicHttpSecurity Security { get; set; } Property Value Type Description BasicHttpSecurity WebSocketSettings Declaration public WebSocketTransportSettings WebSocketSettings { get; } Property Value Type Description WebSocketTransportSettings Methods CreateBindingElements() Declaration public override BindingElementCollection CreateBindingElements() Returns Type Description BindingElementCollection Overrides Binding.CreateBindingElements() Implements IDefaultCommunicationTimeouts"
  },
  "api-corewcf/CoreWCF.NetHttpMessageEncoding.html": {
    "href": "api-corewcf/CoreWCF.NetHttpMessageEncoding.html",
    "title": "Class NetHttpMessageEncoding",
    "keywords": "Class NetHttpMessageEncoding Specifies the Net Http message encoding. Inheritance Object NetHttpMessageEncoding Namespace : CoreWCF Assembly : CoreWCF.Http.dll Syntax public sealed class NetHttpMessageEncoding : Enum Remarks To be added. Fields Binary Indicates using Binary message encoder. Declaration public const NetHttpMessageEncoding Binary Field Value Type Description NetHttpMessageEncoding Mtom Indicates using Mtom message encoder. Declaration public const NetHttpMessageEncoding Mtom Field Value Type Description NetHttpMessageEncoding Text Indicates using Text message encoder. Declaration public const NetHttpMessageEncoding Text Field Value Type Description NetHttpMessageEncoding value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.NetTcpBinding.html": {
    "href": "api-corewcf/CoreWCF.NetTcpBinding.html",
    "title": "Class NetTcpBinding",
    "keywords": "Class NetTcpBinding A secure, reliable binding suitable for cross-machine communication. Inheritance Object Binding NetTcpBinding Implements IDefaultCommunicationTimeouts Inherited Members Binding.CanBuildServiceDispatcher<TChannel>(BindingParameterCollection) Binding.BuildServiceDispatcher<TChannel>(BindingParameterCollection, IServiceDispatcher) Binding.BuildServiceDispatcher<TChannel>(Uri, BindingParameterCollection, IServiceDispatcher) Binding.BuildServiceDispatcher<TChannel>(Uri, String, BindingParameterCollection, IServiceDispatcher) Binding.GetProperty<T>(BindingParameterCollection) Binding.CloseTimeout Binding.Name Binding.Namespace Binding.OpenTimeout Binding.ReceiveTimeout Binding.MessageVersion Binding.SendTimeout Namespace : CoreWCF Assembly : CoreWCF.NetTcp.dll Syntax public class NetTcpBinding : Binding, IDefaultCommunicationTimeouts Remarks The <xref:CoreWCF.NetTcpBinding> generates a run-time communication stack by default, which uses transport security, TCP for message delivery, and a binary message encoding. This binding is an appropriate Windows Communication Foundation (WCF) system-provided choice for communicating over an Intranet. The default configuration for the <xref:CoreWCF.NetTcpBinding> is faster than the configuration provided by the <xref:CoreWCF.WSHttpBinding>, but it is intended only for WCF communication. The security behavior is configurable using the optional securityMode parameter in the constructor. The use of WS-ReliableMessaging is configurable using the optional reliableSessionEnabled parameter. But reliable messaging is off by default. More generally, the HTTP system-provided bindings such as <xref:CoreWCF.WSHttpBinding> and <xref:CoreWCF.BasicHttpBinding> are configured to turn things on by default, whereas the <xref:CoreWCF.NetTcpBinding> binding turns things off by default so that you have to opt-in to get support, for example, for one of the WS-* specifications. This means that the default configuration for TCP is faster at exchanging messages between endpoints than that configured for the HTTP bindings by default. Warning The <xref:CoreWCF.NetTcpBinding> uses TCP connection pooling based on the service's host DNS name and the port number the service is listening on. This works well when a client makes calls to different services on different ports, or services are hosted in a single process and share a port. If a single client calls multiple services sharing a port that are hosted in different processes, or are WAS/IIS hosted, the client side pooling may lead to problems where a connection to Service A is reused for Service B, resulting in an exception being thrown, the connection aborted, and a new channel created. To avoid this problem, use a CustomBinding and specify a different ConnectionPoolSettings.GroupName for each service the client communicates with. Constructors NetTcpBinding() Declaration public NetTcpBinding() NetTcpBinding(SecurityMode) Declaration public NetTcpBinding(SecurityMode securityMode) Parameters Type Name Description SecurityMode securityMode Properties EnvelopeVersion Declaration public EnvelopeVersion EnvelopeVersion { get; } Property Value Type Description EnvelopeVersion HostNameComparisonMode Declaration public HostNameComparisonMode HostNameComparisonMode { get; set; } Property Value Type Description HostNameComparisonMode ListenBacklog Declaration public int ListenBacklog { get; set; } Property Value Type Description Int32 MaxBufferPoolSize Declaration public long MaxBufferPoolSize { get; set; } Property Value Type Description Int64 MaxBufferSize Declaration public int MaxBufferSize { get; set; } Property Value Type Description Int32 MaxConnections Declaration public int MaxConnections { get; set; } Property Value Type Description Int32 MaxReceivedMessageSize Declaration public long MaxReceivedMessageSize { get; set; } Property Value Type Description Int64 ReaderQuotas Declaration public XmlDictionaryReaderQuotas ReaderQuotas { get; set; } Property Value Type Description XmlDictionaryReaderQuotas Scheme Declaration public override string Scheme { get; } Property Value Type Description String Overrides Binding.Scheme Security Declaration public NetTcpSecurity Security { get; set; } Property Value Type Description NetTcpSecurity TransferMode Declaration public TransferMode TransferMode { get; set; } Property Value Type Description TransferMode Methods CreateBindingElements() Declaration public override BindingElementCollection CreateBindingElements() Returns Type Description BindingElementCollection Overrides Binding.CreateBindingElements() Implements IDefaultCommunicationTimeouts"
  },
  "api-corewcf/CoreWCF.NetTcpSecurity.html": {
    "href": "api-corewcf/CoreWCF.NetTcpSecurity.html",
    "title": "Class NetTcpSecurity",
    "keywords": "Class NetTcpSecurity Specifies the types of transport-level and message-level security used by an endpoint configured with a . Inheritance Object NetTcpSecurity Namespace : CoreWCF Assembly : CoreWCF.NetTcp.dll Syntax public sealed class NetTcpSecurity : Object Remarks Each of the standard bindings provides parameters for controlling the transfer security requirements. These parameters typically include the security mode that specified whether message-level or transport-level security is used and the choice of client credential type. Based on the choice of options these parameters present, a channel stack is constructed with appropriate security. The system-provided bindings supplied by Windows Communication Foundation (WCF) are a set designed to meet some of the most common scenario requirements. Each of these bindings allows the specification of security requirements for some specific targeted scenarios. <xref:CoreWCF.NetTcpSecurity> provides the security specifications for <xref:CoreWCF.NetTcpBinding>. This is a secure, reliable, optimized binding suitable for cross-machine communication. By default it generates a run-time communication stack that supports TCP for message delivery and Windows Security for message security and authentication, WS-ReliableMessaging for reliability, and binary message encoding. This class is instantiated by the <xref:CoreWCF.NetTcpBinding>, and can be accessed by a read-only property called <xref:CoreWCF.NetTcpBinding.Security%2A>. Because this property is read-only you cannot make changes to the returned object. If you want to control the creation of the <xref:CoreWCF.NetTcpSecurity> object, you can derive a class from <xref:CoreWCF.NetTcpBinding>. Constructors NetTcpSecurity() Declaration public NetTcpSecurity() Properties Message Declaration public MessageSecurityOverTcp Message { get; set; } Property Value Type Description MessageSecurityOverTcp Mode Declaration public SecurityMode Mode { get; set; } Property Value Type Description SecurityMode Transport Declaration public TcpTransportSecurity Transport { get; set; } Property Value Type Description TcpTransportSecurity"
  },
  "api-corewcf/CoreWCF.NonDualMessageSecurityOverHttp.html": {
    "href": "api-corewcf/CoreWCF.NonDualMessageSecurityOverHttp.html",
    "title": "Class NonDualMessageSecurityOverHttp",
    "keywords": "Class NonDualMessageSecurityOverHttp Represents the security settings of the wsHttpBinding binding. Inheritance Object MessageSecurityOverHttp NonDualMessageSecurityOverHttp Inherited Members MessageSecurityOverHttp.CreateSecurityBindingElement(Boolean, Boolean, MessageSecurityVersion) MessageSecurityOverHttp.ClientCredentialType MessageSecurityOverHttp.NegotiateServiceCredential MessageSecurityOverHttp.AlgorithmSuite Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class NonDualMessageSecurityOverHttp : MessageSecurityOverHttp Remarks To be added. Constructors NonDualMessageSecurityOverHttp() Declaration public NonDualMessageSecurityOverHttp() Properties EstablishSecurityContext Declaration public bool EstablishSecurityContext { get; set; } Property Value Type Description Boolean Methods IsSecureConversationEnabled() Declaration protected override bool IsSecureConversationEnabled() Returns Type Description Boolean Overrides MessageSecurityOverHttp.IsSecureConversationEnabled()"
  },
  "api-corewcf/CoreWCF.OpenApi.Attributes.html": {
    "href": "api-corewcf/CoreWCF.OpenApi.Attributes.html",
    "title": "Namespace CoreWCF.OpenApi.Attributes",
    "keywords": "Namespace CoreWCF.OpenApi.Attributes Classes OpenApiBasePathAttribute Attribute to denote base path for the API. OpenApiHiddenAttribute Attribute to denote that something is hidden. OpenApiOperationAttribute Attribute to denote information about an operation. OpenApiParameterAttribute Attribute to denote information about a parameter to an operation. OpenApiPropertyAttribute Attribute to denote a information about a property in a request or response object. OpenApiResponseAttribute Attribute to denote information about a response from an operation. OpenApiTagAttribute Attribute to denote a tag for a method."
  },
  "api-corewcf/CoreWCF.OpenApi.Attributes.OpenApiBasePathAttribute.html": {
    "href": "api-corewcf/CoreWCF.OpenApi.Attributes.OpenApiBasePathAttribute.html",
    "title": "Class OpenApiBasePathAttribute",
    "keywords": "Class OpenApiBasePathAttribute Attribute to denote base path for the API. Inheritance Object OpenApiBasePathAttribute Namespace : CoreWCF.OpenApi.Attributes Assembly : CoreWCF.WebHttp.dll Syntax public sealed class OpenApiBasePathAttribute : Attribute Constructors OpenApiBasePathAttribute(String) Constructor. Declaration public OpenApiBasePathAttribute(string basePath) Parameters Type Name Description String basePath Base path for the API. Properties BasePath Base path for the API. Declaration public string BasePath { get; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.OpenApi.Attributes.OpenApiHiddenAttribute.html": {
    "href": "api-corewcf/CoreWCF.OpenApi.Attributes.OpenApiHiddenAttribute.html",
    "title": "Class OpenApiHiddenAttribute",
    "keywords": "Class OpenApiHiddenAttribute Attribute to denote that something is hidden. Inheritance Object OpenApiHiddenAttribute Namespace : CoreWCF.OpenApi.Attributes Assembly : CoreWCF.WebHttp.dll Syntax public sealed class OpenApiHiddenAttribute : Attribute Constructors OpenApiHiddenAttribute() Declaration public OpenApiHiddenAttribute()"
  },
  "api-corewcf/CoreWCF.OpenApi.Attributes.OpenApiOperationAttribute.html": {
    "href": "api-corewcf/CoreWCF.OpenApi.Attributes.OpenApiOperationAttribute.html",
    "title": "Class OpenApiOperationAttribute",
    "keywords": "Class OpenApiOperationAttribute Attribute to denote information about an operation. Inheritance Object OpenApiOperationAttribute Namespace : CoreWCF.OpenApi.Attributes Assembly : CoreWCF.WebHttp.dll Syntax public sealed class OpenApiOperationAttribute : Attribute Constructors OpenApiOperationAttribute() Declaration public OpenApiOperationAttribute() Properties Description Description of an operation Declaration public string Description { get; set; } Property Value Type Description String Summary A short summary about an operation. Declaration public string Summary { get; set; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.OpenApi.Attributes.OpenApiParameterAttribute.html": {
    "href": "api-corewcf/CoreWCF.OpenApi.Attributes.OpenApiParameterAttribute.html",
    "title": "Class OpenApiParameterAttribute",
    "keywords": "Class OpenApiParameterAttribute Attribute to denote information about a parameter to an operation. Inheritance Object OpenApiParameterAttribute Namespace : CoreWCF.OpenApi.Attributes Assembly : CoreWCF.WebHttp.dll Syntax public sealed class OpenApiParameterAttribute : Attribute Constructors OpenApiParameterAttribute() Declaration public OpenApiParameterAttribute() Properties ContentTypes Content types the parameter can be provided as. Declaration public string[] ContentTypes { get; set; } Property Value Type Description String [] Description A description of the parameter. Declaration public string Description { get; set; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.OpenApi.Attributes.OpenApiPropertyAttribute.html": {
    "href": "api-corewcf/CoreWCF.OpenApi.Attributes.OpenApiPropertyAttribute.html",
    "title": "Class OpenApiPropertyAttribute",
    "keywords": "Class OpenApiPropertyAttribute Attribute to denote a information about a property in a request or response object. Inheritance Object OpenApiPropertyAttribute Namespace : CoreWCF.OpenApi.Attributes Assembly : CoreWCF.WebHttp.dll Syntax public sealed class OpenApiPropertyAttribute : Attribute Constructors OpenApiPropertyAttribute() Declaration public OpenApiPropertyAttribute() Properties Description Description of the property. Declaration public string Description { get; set; } Property Value Type Description String Format How the property should be formatted. Declaration public string Format { get; set; } Property Value Type Description String IsRequired Whether the property is required or not. Declaration public bool IsRequired { get; set; } Property Value Type Description Boolean MaxLength Maximum length of the property. Declaration public int MaxLength { get; set; } Property Value Type Description Int32 MinLength Minimum length of the property. Declaration public int MinLength { get; set; } Property Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.OpenApi.Attributes.OpenApiResponseAttribute.html": {
    "href": "api-corewcf/CoreWCF.OpenApi.Attributes.OpenApiResponseAttribute.html",
    "title": "Class OpenApiResponseAttribute",
    "keywords": "Class OpenApiResponseAttribute Attribute to denote information about a response from an operation. Inheritance Object OpenApiResponseAttribute Namespace : CoreWCF.OpenApi.Attributes Assembly : CoreWCF.WebHttp.dll Syntax public sealed class OpenApiResponseAttribute : Attribute Constructors OpenApiResponseAttribute() Declaration public OpenApiResponseAttribute() Properties ContentTypes Content types this response can be returned as. Declaration public string[] ContentTypes { get; set; } Property Value Type Description String [] Description A description of why this type and status code would be returned by an operation. Declaration public string Description { get; set; } Property Value Type Description String StatusCode A status code that can be returned by an operation. Declaration public HttpStatusCode StatusCode { get; set; } Property Value Type Description HttpStatusCode Type A type that can be returned by an operation. Declaration public Type Type { get; set; } Property Value Type Description Type"
  },
  "api-corewcf/CoreWCF.OpenApi.Attributes.OpenApiTagAttribute.html": {
    "href": "api-corewcf/CoreWCF.OpenApi.Attributes.OpenApiTagAttribute.html",
    "title": "Class OpenApiTagAttribute",
    "keywords": "Class OpenApiTagAttribute Attribute to denote a tag for a method. Inheritance Object OpenApiTagAttribute Namespace : CoreWCF.OpenApi.Attributes Assembly : CoreWCF.WebHttp.dll Syntax public sealed class OpenApiTagAttribute : Attribute Constructors OpenApiTagAttribute(String) Constructor. Declaration public OpenApiTagAttribute(string tag) Parameters Type Name Description String tag The tag name. Properties Tag The tag name. Declaration public string Tag { get; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.OpenApi.html": {
    "href": "api-corewcf/CoreWCF.OpenApi.html",
    "title": "Namespace CoreWCF.OpenApi",
    "keywords": "Namespace CoreWCF.OpenApi Classes OpenApiContractInfo Captures information about a WCF contract needed by OpenAPI. OpenApiOptions Top level information about the API. OpenApiSchemaBuilder This class builds an OpenAPI specification file out of attributes applied to WCF service interfaces."
  },
  "api-corewcf/CoreWCF.OpenApi.OpenApiContractInfo.html": {
    "href": "api-corewcf/CoreWCF.OpenApi.OpenApiContractInfo.html",
    "title": "Class OpenApiContractInfo",
    "keywords": "Class OpenApiContractInfo Captures information about a WCF contract needed by OpenAPI. Inheritance Object OpenApiContractInfo Namespace : CoreWCF.OpenApi Assembly : CoreWCF.WebHttp.dll Syntax public class OpenApiContractInfo : Object Constructors OpenApiContractInfo() Declaration public OpenApiContractInfo() Properties Contract The actual contract. Declaration public Type Contract { get; set; } Property Value Type Description Type ResponseFormat Default format of the response. Declaration public WebMessageFormat ResponseFormat { get; set; } Property Value Type Description WebMessageFormat"
  },
  "api-corewcf/CoreWCF.OpenApi.OpenApiOptions.html": {
    "href": "api-corewcf/CoreWCF.OpenApi.OpenApiOptions.html",
    "title": "Class OpenApiOptions",
    "keywords": "Class OpenApiOptions Top level information about the API. Inheritance Object OpenApiOptions Namespace : CoreWCF.OpenApi Assembly : CoreWCF.WebHttp.dll Syntax public sealed class OpenApiOptions : Object Constructors OpenApiOptions() Declaration public OpenApiOptions() Properties ContactEmail Url with contact information. Declaration public string ContactEmail { get; set; } Property Value Type Description String ContactName Name of the contact. Declaration public string ContactName { get; set; } Property Value Type Description String ContactUrl Email used for contact. Declaration public Uri ContactUrl { get; set; } Property Value Type Description Uri Description Description of the API. Declaration public string Description { get; set; } Property Value Type Description String ExternalDocumentDescription Description of an external document for the API. Declaration public string ExternalDocumentDescription { get; set; } Property Value Type Description String ExternalDocumentUrl URL of an external document for an API. Declaration public Uri ExternalDocumentUrl { get; set; } Property Value Type Description Uri LiceneUrl URL of the license for the API. Declaration public Uri LiceneUrl { get; set; } Property Value Type Description Uri LicenseName Name of the license used for the API. Declaration public string LicenseName { get; set; } Property Value Type Description String TagsSorter Optional callback to sort tags. Declaration public IComparer<OpenApiTag> TagsSorter { get; set; } Property Value Type Description IComparer < Microsoft.OpenApi.Models.OpenApiTag > TagsToHide Any tags to hide. Declaration public IEnumerable<string> TagsToHide { get; set; } Property Value Type Description IEnumerable < String > TermsOfService Terms of service of the API. Declaration public Uri TermsOfService { get; set; } Property Value Type Description Uri Title Title of the API. Declaration public string Title { get; set; } Property Value Type Description String Version Version of the API. Declaration public string Version { get; set; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.OpenApi.OpenApiSchemaBuilder.html": {
    "href": "api-corewcf/CoreWCF.OpenApi.OpenApiSchemaBuilder.html",
    "title": "Class OpenApiSchemaBuilder",
    "keywords": "Class OpenApiSchemaBuilder This class builds an OpenAPI specification file out of attributes applied to WCF service interfaces. Inheritance Object OpenApiSchemaBuilder Namespace : CoreWCF.OpenApi Assembly : CoreWCF.WebHttp.dll Syntax public static class OpenApiSchemaBuilder : Object Methods BuildOpenApiSpecificationDocument(OpenApiOptions, IEnumerable<OpenApiContractInfo>) Build the OpenAPI specification file. Declaration public static OpenApiDocument BuildOpenApiSpecificationDocument(OpenApiOptions info, IEnumerable<OpenApiContractInfo> contracts) Parameters Type Name Description OpenApiOptions info Top level information about the API. IEnumerable < OpenApiContractInfo > contracts One or more service contracts. Returns Type Description Microsoft.OpenApi.Models.OpenApiDocument An OpenAPI specification file. Exceptions Type Condition ArgumentNullException"
  },
  "api-corewcf/CoreWCF.OperationBehaviorAttribute.html": {
    "href": "api-corewcf/CoreWCF.OperationBehaviorAttribute.html",
    "title": "Class OperationBehaviorAttribute",
    "keywords": "Class OperationBehaviorAttribute Specifies the local execution behavior of a service method. Inheritance Object OperationBehaviorAttribute Implements IOperationBehavior Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class OperationBehaviorAttribute : Attribute, IOperationBehavior Remarks Use the <xref:CoreWCF.OperationBehaviorAttribute> attribute to indicate what operation-specific execution behavior the operation has when executed. (To specify execution behavior at the service level, use the <xref:CoreWCF.ServiceBehaviorAttribute> attribute.) Note You can also use <xref:CoreWCF.OperationBehaviorAttribute> to configure a callback contract operation in a duplex client application. When used on a callback operation, the <xref:CoreWCF.OperationBehaviorAttribute.ReleaseInstanceMode%2A> property must be <xref:CoreWCF.ReleaseInstanceMode.None> or an <xref:System.InvalidOperationException> exception is thrown at runtime. The <xref:CoreWCF.OperationBehaviorAttribute> attribute is a Windows Communication Foundation (WCF) programming model feature that enables common features that developers otherwise must implement themselves. The <xref:CoreWCF.OperationBehaviorAttribute.AutoDisposeParameters%2A> property controls whether parameter objects passed to an operation are disposed when the operation completes. The <xref:CoreWCF.OperationBehaviorAttribute.TransactionAutoComplete%2A> property specifies whether the transaction in which the method executes is automatically committed if no unhandled exceptions occur. The <xref:CoreWCF.OperationBehaviorAttribute.TransactionScopeRequired%2A> property specifies whether a method must execute within a transaction. The <xref:CoreWCF.OperationBehaviorAttribute.Impersonation%2A> property specifies whether the service operation can, must, or cannot impersonate the caller's identity. The <xref:CoreWCF.OperationBehaviorAttribute.ReleaseInstanceMode%2A> property specifies when service objects are recycled during the method invocation process. Constructors OperationBehaviorAttribute() Declaration public OperationBehaviorAttribute() Properties AutoDisposeParameters Declaration public bool AutoDisposeParameters { get; set; } Property Value Type Description Boolean Impersonation Declaration public ImpersonationOption Impersonation { get; set; } Property Value Type Description ImpersonationOption ReleaseInstanceMode Declaration public ReleaseInstanceMode ReleaseInstanceMode { get; set; } Property Value Type Description ReleaseInstanceMode Explicit Interface Implementations IOperationBehavior.AddBindingParameters(OperationDescription, BindingParameterCollection) Declaration void IOperationBehavior.AddBindingParameters(OperationDescription operationDescription, BindingParameterCollection bindingParameters) Parameters Type Name Description OperationDescription operationDescription BindingParameterCollection bindingParameters IOperationBehavior.ApplyClientBehavior(OperationDescription, ClientOperation) Declaration void IOperationBehavior.ApplyClientBehavior(OperationDescription description, ClientOperation proxy) Parameters Type Name Description OperationDescription description ClientOperation proxy IOperationBehavior.ApplyDispatchBehavior(OperationDescription, DispatchOperation) Declaration void IOperationBehavior.ApplyDispatchBehavior(OperationDescription description, DispatchOperation dispatch) Parameters Type Name Description OperationDescription description DispatchOperation dispatch IOperationBehavior.Validate(OperationDescription) Declaration void IOperationBehavior.Validate(OperationDescription operationDescription) Parameters Type Name Description OperationDescription operationDescription Implements IOperationBehavior"
  },
  "api-corewcf/CoreWCF.OperationContext.html": {
    "href": "api-corewcf/CoreWCF.OperationContext.html",
    "title": "Class OperationContext",
    "keywords": "Class OperationContext Provides access to the execution context of a service method. Inheritance Object OperationContext Implements IExtensibleObject < OperationContext > Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class OperationContext : Object, IExtensibleObject<OperationContext> Remarks Use the <xref:CoreWCF.OperationContext> from within a service operation to access the current operation execution environment. In particular, the operation context is used to access callback channels in duplex services, to store extra state data across portions of the operations, and to access incoming message headers and properties as well as add outgoing message headers and properties. For more information about using extensions to store state data, see Extensible Objects . The <xref:CoreWCF.OperationContext> has the following properties and methods. The <xref:CoreWCF.OperationContext.Current%2A> property returns the <xref:CoreWCF.OperationContext> object representing the current execution context. The <xref:CoreWCF.OperationContext.ServiceSecurityContext%2A> property returns the security environment under which the method executes. The <xref:CoreWCF.OperationContext.EndpointDispatcher%2A> property gets the operation's <xref:CoreWCF.Dispatcher.EndpointDispatcher?displayProperty=nameWithType>. The <xref:CoreWCF.OperationContext.Extensions%2A> property returns an extension collection for the current <xref:CoreWCF.OperationContext>. The <xref:CoreWCF.OperationContext.Host%2A> property returns the <xref:CoreWCF.ServiceHostBase> object that manages the service. The <xref:CoreWCF.OperationContext.HasSupportingTokens%2A> property returns a value that indicates whether the method has supporting tokens, if so, the <xref:CoreWCF.OperationContext.SupportingTokens%2A> property gets them. The <xref:CoreWCF.OperationContext.IncomingMessageHeaders%2A>, <xref:CoreWCF.OperationContext.IncomingMessageProperties%2A>, and <xref:CoreWCF.OperationContext.IncomingMessageVersion%2A> properties get these items from the incoming message. The <xref:CoreWCF.OperationContext.OperationCompleted> event is fired when the operation has completed. The <xref:CoreWCF.OperationContext.OutgoingMessageHeaders%2A> and <xref:CoreWCF.OperationContext.OutgoingMessageProperties%2A> properties get these items for the outbound message. The <xref:CoreWCF.OperationContext.RequestContext%2A> property returns the <xref:CoreWCF.Channels.RequestContext> implementation for the method. The <xref:CoreWCF.OperationContext.InstanceContext%2A> property returns the <xref:CoreWCF.InstanceContext> associated with the operation. The <xref:CoreWCF.OperationContext.SessionId%2A> property returns the session identifier for the current channel and object. The <xref:CoreWCF.OperationContext.GetCallbackChannel%2A> method returns a callback channel to the caller in the case of duplex communication. The <xref:CoreWCF.OperationContext.SetTransactionComplete%2A> method commits the current transaction. Constructors OperationContext(IContextChannel) Declaration public OperationContext(IContextChannel channel) Parameters Type Name Description IContextChannel channel Properties ClaimsPrincipal Declaration public ClaimsPrincipal ClaimsPrincipal { get; } Property Value Type Description ClaimsPrincipal Current Declaration public static OperationContext Current { get; set; } Property Value Type Description OperationContext EndpointDispatcher Declaration public EndpointDispatcher EndpointDispatcher { get; set; } Property Value Type Description EndpointDispatcher Extensions Declaration public IExtensionCollection<OperationContext> Extensions { get; } Property Value Type Description IExtensionCollection < OperationContext > Host Declaration public ServiceHostBase Host { get; } Property Value Type Description ServiceHostBase IncomingMessageHeaders Declaration public MessageHeaders IncomingMessageHeaders { get; } Property Value Type Description MessageHeaders IncomingMessageProperties Declaration public MessageProperties IncomingMessageProperties { get; } Property Value Type Description MessageProperties IncomingMessageVersion Declaration public MessageVersion IncomingMessageVersion { get; } Property Value Type Description MessageVersion InstanceContext Declaration public InstanceContext InstanceContext { get; } Property Value Type Description InstanceContext IsUserContext Declaration public bool IsUserContext { get; } Property Value Type Description Boolean OutgoingMessageHeaders Declaration public MessageHeaders OutgoingMessageHeaders { get; } Property Value Type Description MessageHeaders OutgoingMessageProperties Declaration public MessageProperties OutgoingMessageProperties { get; } Property Value Type Description MessageProperties RequestContext Declaration public RequestContext RequestContext { get; set; } Property Value Type Description RequestContext ServiceSecurityContext Declaration public ServiceSecurityContext ServiceSecurityContext { get; } Property Value Type Description ServiceSecurityContext SessionId Declaration public string SessionId { get; } Property Value Type Description String Methods GetCallbackChannel<T>() Declaration public T GetCallbackChannel<T>() Returns Type Description T Type Parameters Name Description T Events OperationCompleted Declaration public event EventHandler OperationCompleted Event Type Type Description EventHandler Implements IExtensibleObject<T>"
  },
  "api-corewcf/CoreWCF.OperationContractAttribute.html": {
    "href": "api-corewcf/CoreWCF.OperationContractAttribute.html",
    "title": "Class OperationContractAttribute",
    "keywords": "Class OperationContractAttribute Indicates that a method defines an operation that is part of a service contract in a Windows Communication Foundation (WCF) application. Inheritance Object OperationContractAttribute Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class OperationContractAttribute : Attribute Remarks Apply the <xref:CoreWCF.OperationContractAttribute> to a method to indicate that the method implements a service operation as part of a service contract (specified by a <xref:CoreWCF.ServiceContractAttribute> attribute). Use the <xref:CoreWCF.OperationContractAttribute> properties to control the structure of the operation and the values expressed in metadata: The <xref:CoreWCF.OperationContractAttribute.Action%2A> property specifies the action that uniquely identifies this operation. WCF dispatches request messages to methods based on their action. The <xref:CoreWCF.OperationContractAttribute.AsyncPattern%2A> property indicates that the operation is implemented or can be called asynchronously using a Begin/End method pair. The <xref:CoreWCF.OperationContractAttribute.HasProtectionLevel%2A> property indicates whether the <xref:CoreWCF.OperationContractAttribute.ProtectionLevel%2A> property has been explicitly set. The <xref:CoreWCF.OperationContractAttribute.IsOneWay%2A> property indicates that the operation only consists of a single input message. The operation has no associated output message. The <xref:CoreWCF.OperationContractAttribute.IsInitiating%2A> property specifies whether this operation can be the initial operation in a session. The <xref:CoreWCF.OperationContractAttribute.IsTerminating%2A> property specifies whether WCF attempts to terminate the current session after the operation completes. The <xref:CoreWCF.OperationContractAttribute.ProtectionLevel%2A> property specifies the message-level security that an operation requires at run time. The <xref:CoreWCF.OperationContractAttribute.ReplyAction%2A> property specifies the action of the reply message for the operation. The <xref:CoreWCF.OperationContractAttribute> attribute declares that a method is an operation in a service contract. Only methods attributed with the <xref:CoreWCF.OperationContractAttribute> are exposed as service operations. A service contract without any methods marked with the <xref:CoreWCF.OperationContractAttribute> exposes no operations. The <xref:CoreWCF.OperationContractAttribute.AsyncPattern%2A> property indicates that a pair of Begin &lt; methodName > and End &lt; methodName > methods form a single operation implemented asynchronously (whether on the client or the service). The ability of a service to implement operations asynchronously is a service implementation detail and is not exposed in metadata (such as Web Services Description Language (WSDL)). Similarly, clients can choose to invoke operations asynchronously independent of how the service method is implemented. Calling service operations asynchronously in the client is recommended when a service method takes some time but must return information directly to the client. For details, see <xref:CoreWCF.OperationContractAttribute.AsyncPattern%2A>. The <xref:CoreWCF.OperationContractAttribute.IsOneWay%2A> property indicates that a method does not return any value at all, including an empty underlying response message. This type of method is useful for notifications or event-style communication. Methods of this kind cannot return a reply message so the method's declaration must return void . Important When programmatically retrieving the information store in this attribute, use the <xref:CoreWCF.Description.ContractDescription> class instead of reflection. Note If the <xref:CoreWCF.OperationContractAttribute.IsOneWay%2A> property is set to false , (the default), even methods that return void are two-way methods at the underlying message level. In this case, the infrastructure creates and sends an empty message to indicate to the caller that the method has returned. Using this approach enables the application and the infrastructure to send error information (such as a SOAP fault) back to the client. Setting <xref:CoreWCF.OperationContractAttribute.IsOneWay%2A> to true is the only way to prevent the creation and dispatch of a reply message. For more information, see One-Way Services . The <xref:CoreWCF.OperationContractAttribute.Action%2A> and <xref:CoreWCF.OperationContractAttribute.ReplyAction%2A> properties can be used not only to modify the default action of SOAP messages but also to create handlers for unrecognized messages or to disable adding actions for direct message programming. Use the <xref:CoreWCF.OperationContractAttribute.IsInitiating%2A> property to prevent clients from calling a particular service operation prior to other operations. Use the <xref:CoreWCF.OperationContractAttribute.IsTerminating%2A> property to have WCF close the channel after clients call a particular service operation. For more information, see Using Sessions . The <xref:CoreWCF.OperationContractAttribute.ProtectionLevel%2A> property enables you to specify on the operation contract whether the operation messages are signed, encrypted, or signed and encrypted. If a binding cannot provide the security level required by the contract, an exception is thrown at run time. For more information, see <xref:CoreWCF.OperationContractAttribute.ProtectionLevel%2A> and Understanding Protection Level . Constructors OperationContractAttribute() Declaration public OperationContractAttribute() Properties Action Declaration public string Action { get; set; } Property Value Type Description String AsyncPattern Declaration public bool AsyncPattern { get; set; } Property Value Type Description Boolean IsOneWay Declaration public bool IsOneWay { get; set; } Property Value Type Description Boolean Name Declaration public string Name { get; set; } Property Value Type Description String ReplyAction Declaration public string ReplyAction { get; set; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.OperationFormatStyle.html": {
    "href": "api-corewcf/CoreWCF.OperationFormatStyle.html",
    "title": "Class OperationFormatStyle",
    "keywords": "Class OperationFormatStyle Represents the SOAP style that determines how the WSDL metadata for the service is formatted. Inheritance Object OperationFormatStyle Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class OperationFormatStyle : Enum Remarks By default, the message body is formatted with the Style set to Document. The style RPC means that the WSDL representation of messages exchanged for an operation contains parameters as if it were a remote procedure call. The following is an example. &lt;wsdl:message name=&quot;IUseAndStyleCalculator_Add_InputMessage&quot;> &lt;wsdl:part name=&quot;n1&quot; type=&quot;xsd:double&quot;/> &lt;wsdl:part name=&quot;n2&quot; type=&quot;xsd:double&quot;/> &lt;/wsdl:message> Setting the style to Document means that the WSDL representation contains a single element that represents the document that is exchanged for an operation as shown in the following example. &lt;wsdl:message name=&quot;IUseAndStyleCalculator_Add_InputMessage&quot;> &lt;wsdl:part name=&quot;parameters&quot; element=&quot;tns:Add&quot;/> &lt;/wsdl:message> Use the <xref:CoreWCF.XmlSerializerFormatAttribute?displayProperty=nameWithType> to set this value. Fields Document Declaration public const OperationFormatStyle Document Field Value Type Description OperationFormatStyle Rpc Declaration public const OperationFormatStyle Rpc Field Value Type Description OperationFormatStyle value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.OperationFormatUse.html": {
    "href": "api-corewcf/CoreWCF.OperationFormatUse.html",
    "title": "Class OperationFormatUse",
    "keywords": "Class OperationFormatUse Determines the format of the message. Inheritance Object OperationFormatUse Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class OperationFormatUse : Enum Remarks The default value is Literal. Literal means that the message is a literal instance of the schema in the WSDL as shown in the following Document/Literal example. &lt;Add xmlns=&quot;http://Microsoft.ServiceModel.Samples&quot;> &lt;n1>100&lt;/n1> &lt;n2>15.99&lt;/n2> &lt;/Add> Encoded means that the schemas in the WSDL are abstract specifications that are encoded according to the rules found in SOAP 1.1 section 5. The following is an RPC/Encoded example. &lt;q1:Add xmlns:q1=&quot;http://Microsoft.ServiceModel.Samples&quot;> &lt;n1 xsi:type=&quot;xsd:double&quot; xmlns=&quot;&quot;>100&lt;/n1> &lt;n2 xsi:type=&quot;xsd:double&quot; xmlns=&quot;&quot;>15.99&lt;/n2> &lt;/q1:Add> Use the <xref:CoreWCF.XmlSerializerFormatAttribute?displayProperty=nameWithType> to set this value. Fields Encoded Declaration public const OperationFormatUse Encoded Field Value Type Description OperationFormatUse Literal Declaration public const OperationFormatUse Literal Field Value Type Description OperationFormatUse value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.ProtocolException.html": {
    "href": "api-corewcf/CoreWCF.ProtocolException.html",
    "title": "Class ProtocolException",
    "keywords": "Class ProtocolException The exception seen on the client that is thrown when communication with the remote party is impossible due to mismatched data transfer protocols. Inheritance Object CommunicationException ProtocolException MessageHeaderException Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class ProtocolException : CommunicationException Remarks The <xref:CoreWCF.ProtocolException> can be caused by incompatible bindings between endpoints, the use of an incorrect remote endpoint address, or similar incorrect configuration. This exception derives from <xref:CoreWCF.CommunicationException> that represents a class of recoverable errors that may be thrown during communication between endpoints and that robust client and service Windows Communication Foundation (WCF) applications are expected to handle. To prevent a handler for <xref:CoreWCF.CommunicationException> from catching the more specific <xref:CoreWCF.ProtocolException>, catch this exception prior to handling <xref:CoreWCF.CommunicationException>. Constructors ProtocolException() Declaration public ProtocolException() ProtocolException(SerializationInfo, StreamingContext) Declaration protected ProtocolException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context ProtocolException(String) Declaration public ProtocolException(string message) Parameters Type Name Description String message ProtocolException(String, Exception) Declaration public ProtocolException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException"
  },
  "api-corewcf/CoreWCF.QuotaExceededException.html": {
    "href": "api-corewcf/CoreWCF.QuotaExceededException.html",
    "title": "Class QuotaExceededException",
    "keywords": "Class QuotaExceededException The exception that is thrown when a message quota has been exceeded. Inheritance Object QuotaExceededException Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class QuotaExceededException : Exception Remarks To be added. Constructors QuotaExceededException() Declaration public QuotaExceededException() QuotaExceededException(String) Declaration public QuotaExceededException(string message) Parameters Type Name Description String message QuotaExceededException(String, Exception) Declaration public QuotaExceededException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException"
  },
  "api-corewcf/CoreWCF.ReleaseInstanceMode.html": {
    "href": "api-corewcf/CoreWCF.ReleaseInstanceMode.html",
    "title": "Class ReleaseInstanceMode",
    "keywords": "Class ReleaseInstanceMode Specifies when the system recycles the service object in the operation invocation process. Inheritance Object ReleaseInstanceMode Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class ReleaseInstanceMode : Enum Remarks Use the <xref:CoreWCF.ReleaseInstanceMode> with the <xref:CoreWCF.OperationBehaviorAttribute.ReleaseInstanceMode%2A> property to inform Windows Communication Foundation (WCF) that the current service object must be recycled at a particular point in the invocation process. The default behavior is to recycle a service object according to the <xref:CoreWCF.ServiceBehaviorAttribute.InstanceContextMode%2A> value. Fields AfterCall Declaration public const ReleaseInstanceMode AfterCall Field Value Type Description ReleaseInstanceMode BeforeAndAfterCall Declaration public const ReleaseInstanceMode BeforeAndAfterCall Field Value Type Description ReleaseInstanceMode BeforeCall Declaration public const ReleaseInstanceMode BeforeCall Field Value Type Description ReleaseInstanceMode None Declaration public const ReleaseInstanceMode None Field Value Type Description ReleaseInstanceMode value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.Runtime.ActionItem.html": {
    "href": "api-corewcf/CoreWCF.Runtime.ActionItem.html",
    "title": "Class ActionItem",
    "keywords": "Class ActionItem Inheritance Object ActionItem Namespace : CoreWCF.Runtime Assembly : CoreWCF.Primitives.dll Syntax public abstract class ActionItem : Object Constructors ActionItem() Declaration protected ActionItem() Fields IOTaskScheduler Declaration public static TaskScheduler IOTaskScheduler Field Value Type Description TaskScheduler Properties LowPriority Declaration public bool LowPriority { get; protected set; } Property Value Type Description Boolean Methods Invoke() Declaration protected abstract void Invoke() Schedule() Declaration protected void Schedule() Schedule(Action<Object>, Object) Declaration public static void Schedule(Action<object> callback, object state) Parameters Type Name Description Action < Object > callback Object state Schedule(Action<Object>, Object, Boolean) Declaration public static void Schedule(Action<object> callback, object state, bool lowPriority) Parameters Type Name Description Action < Object > callback Object state Boolean lowPriority ScheduleWithoutContext() Declaration protected void ScheduleWithoutContext()"
  },
  "api-corewcf/CoreWCF.Runtime.AsyncManualResetEvent.html": {
    "href": "api-corewcf/CoreWCF.Runtime.AsyncManualResetEvent.html",
    "title": "Class AsyncManualResetEvent",
    "keywords": "Class AsyncManualResetEvent Inheritance Object AsyncManualResetEvent Implements IDisposable Namespace : CoreWCF.Runtime Assembly : CoreWCF.Primitives.dll Syntax public class AsyncManualResetEvent : Object Constructors AsyncManualResetEvent() Declaration public AsyncManualResetEvent() Methods Dispose() Declaration public void Dispose() Reset() Declaration public void Reset() Set() Declaration public void Set() WaitAsync() Declaration public Task WaitAsync() Returns Type Description Task WaitAsync(CancellationToken) Declaration public Task<bool> WaitAsync(CancellationToken token) Parameters Type Name Description CancellationToken token Returns Type Description Task < Boolean > Implements System.IDisposable"
  },
  "api-corewcf/CoreWCF.Runtime.html": {
    "href": "api-corewcf/CoreWCF.Runtime.html",
    "title": "Namespace CoreWCF.Runtime",
    "keywords": "Namespace CoreWCF.Runtime Classes ActionItem AsyncManualResetEvent ReflectionExtensions"
  },
  "api-corewcf/CoreWCF.Runtime.ReflectionExtensions.html": {
    "href": "api-corewcf/CoreWCF.Runtime.ReflectionExtensions.html",
    "title": "Class ReflectionExtensions",
    "keywords": "Class ReflectionExtensions Inheritance Object ReflectionExtensions Namespace : CoreWCF.Runtime Assembly : CoreWCF.Primitives.dll Syntax public static class ReflectionExtensions : Object Methods GetTypeCode(Type) Declaration public static TypeCode GetTypeCode(this Type type) Parameters Type Name Description Type type Returns Type Description TypeCode"
  },
  "api-corewcf/CoreWCF.SecureConversationDec2005Dictionary.html": {
    "href": "api-corewcf/CoreWCF.SecureConversationDec2005Dictionary.html",
    "title": "Class SecureConversationDec2005Dictionary",
    "keywords": "Class SecureConversationDec2005Dictionary Inheritance Object SecureConversationDictionary SecureConversationDec2005Dictionary Inherited Members SecureConversationDictionary.Namespace SecureConversationDictionary.DerivedKeyToken SecureConversationDictionary.Nonce SecureConversationDictionary.Length SecureConversationDictionary.SecurityContextToken SecureConversationDictionary.AlgorithmAttribute SecureConversationDictionary.Generation SecureConversationDictionary.Label SecureConversationDictionary.Offset SecureConversationDictionary.Properties SecureConversationDictionary.Identifier SecureConversationDictionary.Cookie SecureConversationDictionary.Prefix SecureConversationDictionary.DerivedKeyTokenType SecureConversationDictionary.SecurityContextTokenType SecureConversationDictionary.SecurityContextTokenReferenceValueType SecureConversationDictionary.RequestSecurityContextIssuance SecureConversationDictionary.RequestSecurityContextIssuanceResponse SecureConversationDictionary.RenewNeededFaultCode SecureConversationDictionary.BadContextTokenFaultCode Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class SecureConversationDec2005Dictionary : SecureConversationDictionary Constructors SecureConversationDec2005Dictionary(XmlDictionary) Declaration public SecureConversationDec2005Dictionary(XmlDictionary dictionary) Parameters Type Name Description XmlDictionary dictionary Fields Instance Declaration public XmlDictionaryString Instance Field Value Type Description XmlDictionaryString RequestSecurityContextClose Declaration public XmlDictionaryString RequestSecurityContextClose Field Value Type Description XmlDictionaryString RequestSecurityContextCloseResponse Declaration public XmlDictionaryString RequestSecurityContextCloseResponse Field Value Type Description XmlDictionaryString RequestSecurityContextRenew Declaration public XmlDictionaryString RequestSecurityContextRenew Field Value Type Description XmlDictionaryString RequestSecurityContextRenewResponse Declaration public XmlDictionaryString RequestSecurityContextRenewResponse Field Value Type Description XmlDictionaryString SecureConversationDictionaryStrings Declaration public List<XmlDictionaryString> SecureConversationDictionaryStrings Field Value Type Description List < XmlDictionaryString > Methods PopulateSecureConversationDec2005() Declaration public void PopulateSecureConversationDec2005()"
  },
  "api-corewcf/CoreWCF.SecureConversationDictionary.html": {
    "href": "api-corewcf/CoreWCF.SecureConversationDictionary.html",
    "title": "Class SecureConversationDictionary",
    "keywords": "Class SecureConversationDictionary Inheritance Object SecureConversationDictionary SecureConversationDec2005Dictionary Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class SecureConversationDictionary : Object Constructors SecureConversationDictionary() Declaration public SecureConversationDictionary() Fields AlgorithmAttribute Declaration public XmlDictionaryString AlgorithmAttribute Field Value Type Description XmlDictionaryString BadContextTokenFaultCode Declaration public XmlDictionaryString BadContextTokenFaultCode Field Value Type Description XmlDictionaryString Cookie Declaration public XmlDictionaryString Cookie Field Value Type Description XmlDictionaryString DerivedKeyToken Declaration public XmlDictionaryString DerivedKeyToken Field Value Type Description XmlDictionaryString DerivedKeyTokenType Declaration public XmlDictionaryString DerivedKeyTokenType Field Value Type Description XmlDictionaryString Generation Declaration public XmlDictionaryString Generation Field Value Type Description XmlDictionaryString Identifier Declaration public XmlDictionaryString Identifier Field Value Type Description XmlDictionaryString Label Declaration public XmlDictionaryString Label Field Value Type Description XmlDictionaryString Length Declaration public XmlDictionaryString Length Field Value Type Description XmlDictionaryString Namespace Declaration public XmlDictionaryString Namespace Field Value Type Description XmlDictionaryString Nonce Declaration public XmlDictionaryString Nonce Field Value Type Description XmlDictionaryString Offset Declaration public XmlDictionaryString Offset Field Value Type Description XmlDictionaryString Prefix Declaration public XmlDictionaryString Prefix Field Value Type Description XmlDictionaryString Properties Declaration public XmlDictionaryString Properties Field Value Type Description XmlDictionaryString RenewNeededFaultCode Declaration public XmlDictionaryString RenewNeededFaultCode Field Value Type Description XmlDictionaryString RequestSecurityContextIssuance Declaration public XmlDictionaryString RequestSecurityContextIssuance Field Value Type Description XmlDictionaryString RequestSecurityContextIssuanceResponse Declaration public XmlDictionaryString RequestSecurityContextIssuanceResponse Field Value Type Description XmlDictionaryString SecurityContextToken Declaration public XmlDictionaryString SecurityContextToken Field Value Type Description XmlDictionaryString SecurityContextTokenReferenceValueType Declaration public XmlDictionaryString SecurityContextTokenReferenceValueType Field Value Type Description XmlDictionaryString SecurityContextTokenType Declaration public XmlDictionaryString SecurityContextTokenType Field Value Type Description XmlDictionaryString"
  },
  "api-corewcf/CoreWCF.Security.Basic128SecurityAlgorithmSuite.html": {
    "href": "api-corewcf/CoreWCF.Security.Basic128SecurityAlgorithmSuite.html",
    "title": "Class Basic128SecurityAlgorithmSuite",
    "keywords": "Class Basic128SecurityAlgorithmSuite The basic 128-bit security algorithm suite. Inheritance Object SecurityAlgorithmSuite Basic128SecurityAlgorithmSuite Inherited Members SecurityAlgorithmSuite.IsCanonicalizationAlgorithmSupported(String) SecurityAlgorithmSuite.IsDigestAlgorithmSupported(String) SecurityAlgorithmSuite.IsEncryptionAlgorithmSupported(String) SecurityAlgorithmSuite.IsEncryptionKeyDerivationAlgorithmSupported(String) SecurityAlgorithmSuite.IsSymmetricKeyWrapAlgorithmSupported(String) SecurityAlgorithmSuite.IsAsymmetricKeyWrapAlgorithmSupported(String) SecurityAlgorithmSuite.IsSymmetricSignatureAlgorithmSupported(String) SecurityAlgorithmSuite.IsAsymmetricSignatureAlgorithmSupported(String) SecurityAlgorithmSuite.IsSignatureKeyDerivationAlgorithmSupported(String) SecurityAlgorithmSuite.Default SecurityAlgorithmSuite.Basic256 SecurityAlgorithmSuite.Basic192 SecurityAlgorithmSuite.Basic128 SecurityAlgorithmSuite.TripleDes SecurityAlgorithmSuite.Basic256Rsa15 SecurityAlgorithmSuite.Basic192Rsa15 SecurityAlgorithmSuite.Basic128Rsa15 SecurityAlgorithmSuite.TripleDesRsa15 SecurityAlgorithmSuite.Basic256Sha256 SecurityAlgorithmSuite.Basic192Sha256 SecurityAlgorithmSuite.Basic128Sha256 SecurityAlgorithmSuite.TripleDesSha256 SecurityAlgorithmSuite.Basic256Sha256Rsa15 SecurityAlgorithmSuite.Basic192Sha256Rsa15 SecurityAlgorithmSuite.Basic128Sha256Rsa15 SecurityAlgorithmSuite.TripleDesSha256Rsa15 Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public class Basic128SecurityAlgorithmSuite : SecurityAlgorithmSuite Remarks To be added. Constructors Basic128SecurityAlgorithmSuite() Declaration public Basic128SecurityAlgorithmSuite() Properties DefaultAsymmetricKeyWrapAlgorithm Declaration public override string DefaultAsymmetricKeyWrapAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultAsymmetricKeyWrapAlgorithm DefaultAsymmetricSignatureAlgorithm Declaration public override string DefaultAsymmetricSignatureAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultAsymmetricSignatureAlgorithm DefaultCanonicalizationAlgorithm Declaration public override string DefaultCanonicalizationAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultCanonicalizationAlgorithm DefaultDigestAlgorithm Declaration public override string DefaultDigestAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultDigestAlgorithm DefaultEncryptionAlgorithm Declaration public override string DefaultEncryptionAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultEncryptionAlgorithm DefaultEncryptionKeyDerivationLength Declaration public override int DefaultEncryptionKeyDerivationLength { get; } Property Value Type Description Int32 Overrides SecurityAlgorithmSuite.DefaultEncryptionKeyDerivationLength DefaultSignatureKeyDerivationLength Declaration public override int DefaultSignatureKeyDerivationLength { get; } Property Value Type Description Int32 Overrides SecurityAlgorithmSuite.DefaultSignatureKeyDerivationLength DefaultSymmetricKeyLength Declaration public override int DefaultSymmetricKeyLength { get; } Property Value Type Description Int32 Overrides SecurityAlgorithmSuite.DefaultSymmetricKeyLength DefaultSymmetricKeyWrapAlgorithm Declaration public override string DefaultSymmetricKeyWrapAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultSymmetricKeyWrapAlgorithm DefaultSymmetricSignatureAlgorithm Declaration public override string DefaultSymmetricSignatureAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultSymmetricSignatureAlgorithm Methods IsAsymmetricKeyLengthSupported(Int32) Declaration public override bool IsAsymmetricKeyLengthSupported(int length) Parameters Type Name Description Int32 length Returns Type Description Boolean Overrides SecurityAlgorithmSuite.IsAsymmetricKeyLengthSupported(Int32) IsSymmetricKeyLengthSupported(Int32) Declaration public override bool IsSymmetricKeyLengthSupported(int length) Parameters Type Name Description Int32 length Returns Type Description Boolean Overrides SecurityAlgorithmSuite.IsSymmetricKeyLengthSupported(Int32) ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api-corewcf/CoreWCF.Security.Basic192SecurityAlgorithmSuite.html": {
    "href": "api-corewcf/CoreWCF.Security.Basic192SecurityAlgorithmSuite.html",
    "title": "Class Basic192SecurityAlgorithmSuite",
    "keywords": "Class Basic192SecurityAlgorithmSuite The basic 192-bit security algorithm suite. Inheritance Object SecurityAlgorithmSuite Basic192SecurityAlgorithmSuite Inherited Members SecurityAlgorithmSuite.IsCanonicalizationAlgorithmSupported(String) SecurityAlgorithmSuite.IsDigestAlgorithmSupported(String) SecurityAlgorithmSuite.IsEncryptionAlgorithmSupported(String) SecurityAlgorithmSuite.IsEncryptionKeyDerivationAlgorithmSupported(String) SecurityAlgorithmSuite.IsSymmetricKeyWrapAlgorithmSupported(String) SecurityAlgorithmSuite.IsAsymmetricKeyWrapAlgorithmSupported(String) SecurityAlgorithmSuite.IsSymmetricSignatureAlgorithmSupported(String) SecurityAlgorithmSuite.IsAsymmetricSignatureAlgorithmSupported(String) SecurityAlgorithmSuite.IsSignatureKeyDerivationAlgorithmSupported(String) SecurityAlgorithmSuite.Default SecurityAlgorithmSuite.Basic256 SecurityAlgorithmSuite.Basic192 SecurityAlgorithmSuite.Basic128 SecurityAlgorithmSuite.TripleDes SecurityAlgorithmSuite.Basic256Rsa15 SecurityAlgorithmSuite.Basic192Rsa15 SecurityAlgorithmSuite.Basic128Rsa15 SecurityAlgorithmSuite.TripleDesRsa15 SecurityAlgorithmSuite.Basic256Sha256 SecurityAlgorithmSuite.Basic192Sha256 SecurityAlgorithmSuite.Basic128Sha256 SecurityAlgorithmSuite.TripleDesSha256 SecurityAlgorithmSuite.Basic256Sha256Rsa15 SecurityAlgorithmSuite.Basic192Sha256Rsa15 SecurityAlgorithmSuite.Basic128Sha256Rsa15 SecurityAlgorithmSuite.TripleDesSha256Rsa15 Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public class Basic192SecurityAlgorithmSuite : SecurityAlgorithmSuite Remarks To be added. Constructors Basic192SecurityAlgorithmSuite() Declaration public Basic192SecurityAlgorithmSuite() Properties DefaultAsymmetricKeyWrapAlgorithm Declaration public override string DefaultAsymmetricKeyWrapAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultAsymmetricKeyWrapAlgorithm DefaultAsymmetricSignatureAlgorithm Declaration public override string DefaultAsymmetricSignatureAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultAsymmetricSignatureAlgorithm DefaultCanonicalizationAlgorithm Declaration public override string DefaultCanonicalizationAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultCanonicalizationAlgorithm DefaultDigestAlgorithm Declaration public override string DefaultDigestAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultDigestAlgorithm DefaultEncryptionAlgorithm Declaration public override string DefaultEncryptionAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultEncryptionAlgorithm DefaultEncryptionKeyDerivationLength Declaration public override int DefaultEncryptionKeyDerivationLength { get; } Property Value Type Description Int32 Overrides SecurityAlgorithmSuite.DefaultEncryptionKeyDerivationLength DefaultSignatureKeyDerivationLength Declaration public override int DefaultSignatureKeyDerivationLength { get; } Property Value Type Description Int32 Overrides SecurityAlgorithmSuite.DefaultSignatureKeyDerivationLength DefaultSymmetricKeyLength Declaration public override int DefaultSymmetricKeyLength { get; } Property Value Type Description Int32 Overrides SecurityAlgorithmSuite.DefaultSymmetricKeyLength DefaultSymmetricKeyWrapAlgorithm Declaration public override string DefaultSymmetricKeyWrapAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultSymmetricKeyWrapAlgorithm DefaultSymmetricSignatureAlgorithm Declaration public override string DefaultSymmetricSignatureAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultSymmetricSignatureAlgorithm Methods IsAsymmetricKeyLengthSupported(Int32) Declaration public override bool IsAsymmetricKeyLengthSupported(int length) Parameters Type Name Description Int32 length Returns Type Description Boolean Overrides SecurityAlgorithmSuite.IsAsymmetricKeyLengthSupported(Int32) IsSymmetricKeyLengthSupported(Int32) Declaration public override bool IsSymmetricKeyLengthSupported(int length) Parameters Type Name Description Int32 length Returns Type Description Boolean Overrides SecurityAlgorithmSuite.IsSymmetricKeyLengthSupported(Int32) ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api-corewcf/CoreWCF.Security.Basic256SecurityAlgorithmSuite.html": {
    "href": "api-corewcf/CoreWCF.Security.Basic256SecurityAlgorithmSuite.html",
    "title": "Class Basic256SecurityAlgorithmSuite",
    "keywords": "Class Basic256SecurityAlgorithmSuite The basic 256-bit security algorithm suite. Inheritance Object SecurityAlgorithmSuite Basic256SecurityAlgorithmSuite Inherited Members SecurityAlgorithmSuite.IsCanonicalizationAlgorithmSupported(String) SecurityAlgorithmSuite.IsDigestAlgorithmSupported(String) SecurityAlgorithmSuite.IsEncryptionAlgorithmSupported(String) SecurityAlgorithmSuite.IsEncryptionKeyDerivationAlgorithmSupported(String) SecurityAlgorithmSuite.IsSymmetricKeyWrapAlgorithmSupported(String) SecurityAlgorithmSuite.IsAsymmetricKeyWrapAlgorithmSupported(String) SecurityAlgorithmSuite.IsSymmetricSignatureAlgorithmSupported(String) SecurityAlgorithmSuite.IsAsymmetricSignatureAlgorithmSupported(String) SecurityAlgorithmSuite.IsSignatureKeyDerivationAlgorithmSupported(String) SecurityAlgorithmSuite.Default SecurityAlgorithmSuite.Basic256 SecurityAlgorithmSuite.Basic192 SecurityAlgorithmSuite.Basic128 SecurityAlgorithmSuite.TripleDes SecurityAlgorithmSuite.Basic256Rsa15 SecurityAlgorithmSuite.Basic192Rsa15 SecurityAlgorithmSuite.Basic128Rsa15 SecurityAlgorithmSuite.TripleDesRsa15 SecurityAlgorithmSuite.Basic256Sha256 SecurityAlgorithmSuite.Basic192Sha256 SecurityAlgorithmSuite.Basic128Sha256 SecurityAlgorithmSuite.TripleDesSha256 SecurityAlgorithmSuite.Basic256Sha256Rsa15 SecurityAlgorithmSuite.Basic192Sha256Rsa15 SecurityAlgorithmSuite.Basic128Sha256Rsa15 SecurityAlgorithmSuite.TripleDesSha256Rsa15 Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public class Basic256SecurityAlgorithmSuite : SecurityAlgorithmSuite Remarks To be added. Constructors Basic256SecurityAlgorithmSuite() Declaration public Basic256SecurityAlgorithmSuite() Properties DefaultAsymmetricKeyWrapAlgorithm Declaration public override string DefaultAsymmetricKeyWrapAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultAsymmetricKeyWrapAlgorithm DefaultAsymmetricSignatureAlgorithm Declaration public override string DefaultAsymmetricSignatureAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultAsymmetricSignatureAlgorithm DefaultCanonicalizationAlgorithm Declaration public override string DefaultCanonicalizationAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultCanonicalizationAlgorithm DefaultDigestAlgorithm Declaration public override string DefaultDigestAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultDigestAlgorithm DefaultEncryptionAlgorithm Declaration public override string DefaultEncryptionAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultEncryptionAlgorithm DefaultEncryptionKeyDerivationLength Declaration public override int DefaultEncryptionKeyDerivationLength { get; } Property Value Type Description Int32 Overrides SecurityAlgorithmSuite.DefaultEncryptionKeyDerivationLength DefaultSignatureKeyDerivationLength Declaration public override int DefaultSignatureKeyDerivationLength { get; } Property Value Type Description Int32 Overrides SecurityAlgorithmSuite.DefaultSignatureKeyDerivationLength DefaultSymmetricKeyLength Declaration public override int DefaultSymmetricKeyLength { get; } Property Value Type Description Int32 Overrides SecurityAlgorithmSuite.DefaultSymmetricKeyLength DefaultSymmetricKeyWrapAlgorithm Declaration public override string DefaultSymmetricKeyWrapAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultSymmetricKeyWrapAlgorithm DefaultSymmetricSignatureAlgorithm Declaration public override string DefaultSymmetricSignatureAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultSymmetricSignatureAlgorithm Methods IsAsymmetricKeyLengthSupported(Int32) Declaration public override bool IsAsymmetricKeyLengthSupported(int length) Parameters Type Name Description Int32 length Returns Type Description Boolean Overrides SecurityAlgorithmSuite.IsAsymmetricKeyLengthSupported(Int32) IsSymmetricKeyLengthSupported(Int32) Declaration public override bool IsSymmetricKeyLengthSupported(int length) Parameters Type Name Description Int32 length Returns Type Description Boolean Overrides SecurityAlgorithmSuite.IsSymmetricKeyLengthSupported(Int32) ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api-corewcf/CoreWCF.Security.BasicSecurityProfileVersion.html": {
    "href": "api-corewcf/CoreWCF.Security.BasicSecurityProfileVersion.html",
    "title": "Class BasicSecurityProfileVersion",
    "keywords": "Class BasicSecurityProfileVersion Provides a message version that corresponds to the Basic Security Profile specification. Inheritance Object BasicSecurityProfileVersion Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public abstract class BasicSecurityProfileVersion : Object Remarks To be added. Properties BasicSecurityProfile10 Declaration public static BasicSecurityProfileVersion BasicSecurityProfile10 { get; } Property Value Type Description BasicSecurityProfileVersion"
  },
  "api-corewcf/CoreWCF.Security.BinarySecretKeyIdentifierClause.html": {
    "href": "api-corewcf/CoreWCF.Security.BinarySecretKeyIdentifierClause.html",
    "title": "Class BinarySecretKeyIdentifierClause",
    "keywords": "Class BinarySecretKeyIdentifierClause Represents the key identifier clause in a binary secret security token. Inheritance Object SecurityKeyIdentifierClause BinaryKeyIdentifierClause BinarySecretKeyIdentifierClause Inherited Members BinaryKeyIdentifierClause.GetBuffer() BinaryKeyIdentifierClause.GetRawBuffer() BinaryKeyIdentifierClause.Matches(Byte[]) BinaryKeyIdentifierClause.Matches(Byte[], Int32) SecurityKeyIdentifierClause.GetDerivationNonce() SecurityKeyIdentifierClause.ClauseType SecurityKeyIdentifierClause.Id SecurityKeyIdentifierClause.DerivationLength Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public class BinarySecretKeyIdentifierClause : BinaryKeyIdentifierClause Remarks To be added. Constructors BinarySecretKeyIdentifierClause(Byte[]) Declaration public BinarySecretKeyIdentifierClause(byte[] key) Parameters Type Name Description Byte [] key BinarySecretKeyIdentifierClause(Byte[], Boolean) Declaration public BinarySecretKeyIdentifierClause(byte[] key, bool cloneBuffer) Parameters Type Name Description Byte [] key Boolean cloneBuffer BinarySecretKeyIdentifierClause(Byte[], Boolean, Byte[], Int32) Declaration public BinarySecretKeyIdentifierClause(byte[] key, bool cloneBuffer, byte[] derivationNonce, int derivationLength) Parameters Type Name Description Byte [] key Boolean cloneBuffer Byte [] derivationNonce Int32 derivationLength Properties CanCreateKey Declaration public override bool CanCreateKey { get; } Property Value Type Description Boolean Overrides SecurityKeyIdentifierClause.CanCreateKey Methods CreateKey() Declaration public override SecurityKey CreateKey() Returns Type Description SecurityKey Overrides SecurityKeyIdentifierClause.CreateKey() GetKeyBytes() Declaration public byte[] GetKeyBytes() Returns Type Description Byte [] Matches(SecurityKeyIdentifierClause) Declaration public override bool Matches(SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause Returns Type Description Boolean Overrides BinaryKeyIdentifierClause.Matches(SecurityKeyIdentifierClause)"
  },
  "api-corewcf/CoreWCF.Security.ChannelProtectionRequirements.html": {
    "href": "api-corewcf/CoreWCF.Security.ChannelProtectionRequirements.html",
    "title": "Class ChannelProtectionRequirements",
    "keywords": "Class ChannelProtectionRequirements Describes encryption and signature requirements that apply to different parts of messages that are transmitted on this channel. Inheritance Object ChannelProtectionRequirements Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public class ChannelProtectionRequirements : Object Remarks When extending the <xref:CoreWCF.Channels.BindingElement> class, you must implement the <xref:CoreWCF.Channels.BindingElement.GetProperty%60%601%28CoreWCF.Channels.BindingContext%29> so that it returns an instance of this class corresponding to the binding element. Constructors ChannelProtectionRequirements() Declaration public ChannelProtectionRequirements() ChannelProtectionRequirements(ChannelProtectionRequirements) Declaration public ChannelProtectionRequirements(ChannelProtectionRequirements other) Parameters Type Name Description ChannelProtectionRequirements other Properties IncomingEncryptionParts Declaration public ScopedMessagePartSpecification IncomingEncryptionParts { get; } Property Value Type Description ScopedMessagePartSpecification IncomingSignatureParts Declaration public ScopedMessagePartSpecification IncomingSignatureParts { get; } Property Value Type Description ScopedMessagePartSpecification IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean OutgoingEncryptionParts Declaration public ScopedMessagePartSpecification OutgoingEncryptionParts { get; } Property Value Type Description ScopedMessagePartSpecification OutgoingSignatureParts Declaration public ScopedMessagePartSpecification OutgoingSignatureParts { get; } Property Value Type Description ScopedMessagePartSpecification Methods Add(ChannelProtectionRequirements) Declaration public void Add(ChannelProtectionRequirements protectionRequirements) Parameters Type Name Description ChannelProtectionRequirements protectionRequirements Add(ChannelProtectionRequirements, Boolean) Declaration public void Add(ChannelProtectionRequirements protectionRequirements, bool channelScopeOnly) Parameters Type Name Description ChannelProtectionRequirements protectionRequirements Boolean channelScopeOnly MakeReadOnly() Declaration public void MakeReadOnly()"
  },
  "api-corewcf/CoreWCF.Security.Claims.AuthenticationTypes.html": {
    "href": "api-corewcf/CoreWCF.Security.Claims.AuthenticationTypes.html",
    "title": "Class AuthenticationTypes",
    "keywords": "Class AuthenticationTypes Defines types for WindowsIdentity AuthenticationType Inheritance Object AuthenticationTypes Namespace : CoreWCF.Security.Claims Assembly : CoreWCF.Primitives.dll Syntax public static class AuthenticationTypes : Object Fields Basic Declaration public const string Basic = \"Basic\" Field Value Type Description String Federation Declaration public const string Federation = \"Federation\" Field Value Type Description String Kerberos Declaration public const string Kerberos = \"Kerberos\" Field Value Type Description String Negotiate Declaration public const string Negotiate = \"Negotiate\" Field Value Type Description String Password Declaration public const string Password = \"Password\" Field Value Type Description String Signature Declaration public const string Signature = \"Signature\" Field Value Type Description String Windows Declaration public const string Windows = \"Windows\" Field Value Type Description String X509 Declaration public const string X509 = \"X509\" Field Value Type Description String"
  },
  "api-corewcf/CoreWCF.Security.Claims.ClaimProperties.html": {
    "href": "api-corewcf/CoreWCF.Security.Claims.ClaimProperties.html",
    "title": "Class ClaimProperties",
    "keywords": "Class ClaimProperties Defines the keys for properties contained in . Inheritance Object ClaimProperties Namespace : CoreWCF.Security.Claims Assembly : CoreWCF.Primitives.dll Syntax public static class ClaimProperties : Object Fields Namespace Declaration public const string Namespace = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties\" Field Value Type Description String SamlAttributeDisplayName Declaration public const string SamlAttributeDisplayName = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties/displayname\" Field Value Type Description String SamlAttributeNameFormat Declaration public const string SamlAttributeNameFormat = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties/attributename\" Field Value Type Description String SamlNameIdentifierFormat Declaration public const string SamlNameIdentifierFormat = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties/format\" Field Value Type Description String SamlNameIdentifierNameQualifier Declaration public const string SamlNameIdentifierNameQualifier = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties/namequalifier\" Field Value Type Description String SamlNameIdentifierSPNameQualifier Declaration public const string SamlNameIdentifierSPNameQualifier = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties/spnamequalifier\" Field Value Type Description String SamlNameIdentifierSPProvidedId Declaration public const string SamlNameIdentifierSPProvidedId = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties/spprovidedid\" Field Value Type Description String"
  },
  "api-corewcf/CoreWCF.Security.Claims.html": {
    "href": "api-corewcf/CoreWCF.Security.Claims.html",
    "title": "Namespace CoreWCF.Security.Claims",
    "keywords": "Namespace CoreWCF.Security.Claims Classes AuthenticationTypes Defines types for WindowsIdentity AuthenticationType ClaimProperties Defines the keys for properties contained in ."
  },
  "api-corewcf/CoreWCF.Security.DataProtectionSecurityStateEncoder.html": {
    "href": "api-corewcf/CoreWCF.Security.DataProtectionSecurityStateEncoder.html",
    "title": "Class DataProtectionSecurityStateEncoder",
    "keywords": "Class DataProtectionSecurityStateEncoder Provides encoding and decoding mechanisms for the security state using the Windows API functionality. Inheritance Object SecurityStateEncoder DataProtectionSecurityStateEncoder Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public class DataProtectionSecurityStateEncoder : SecurityStateEncoder Remarks This class is used for encoding the security state as represented by a Stateful Security Context Token when the message is sent, and for decoding the security context when the message arrives at a recipient. The encoding can either be in the current user scope (whereby only processes running as the user account can decode the security state) or it can be in the local machine scope (whereby all processes running on the machine can decode the security state). By default, the encoding is in the current user scope. This class is used by the server when sending the security state in the Stateful Security Context Token issued to the client. DataProtection based on the CurrentUser scope requires the current user to have a user profile. If the user has a roaming profile, then the security state encoded by the user process running on one machine can be decoded by a user process running on a different machine. Constructors DataProtectionSecurityStateEncoder() Declaration public DataProtectionSecurityStateEncoder() DataProtectionSecurityStateEncoder(Boolean) Declaration public DataProtectionSecurityStateEncoder(bool useCurrentUserProtectionScope) Parameters Type Name Description Boolean useCurrentUserProtectionScope DataProtectionSecurityStateEncoder(Boolean, Byte[]) Declaration public DataProtectionSecurityStateEncoder(bool useCurrentUserProtectionScope, byte[] entropy) Parameters Type Name Description Boolean useCurrentUserProtectionScope Byte [] entropy Properties UseCurrentUserProtectionScope Declaration public bool UseCurrentUserProtectionScope { get; } Property Value Type Description Boolean Methods DecodeSecurityState(Byte[]) Declaration protected override byte[] DecodeSecurityState(byte[] data) Parameters Type Name Description Byte [] data Returns Type Description Byte [] Overrides SecurityStateEncoder.DecodeSecurityState(Byte[]) EncodeSecurityState(Byte[]) Declaration protected override byte[] EncodeSecurityState(byte[] data) Parameters Type Name Description Byte [] data Returns Type Description Byte [] Overrides SecurityStateEncoder.EncodeSecurityState(Byte[]) GetEntropy() Declaration public byte[] GetEntropy() Returns Type Description Byte [] ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api-corewcf/CoreWCF.Security.FederatedMessageSecurityOverHttp.html": {
    "href": "api-corewcf/CoreWCF.Security.FederatedMessageSecurityOverHttp.html",
    "title": "Class FederatedMessageSecurityOverHttp",
    "keywords": "Class FederatedMessageSecurityOverHttp Configures the message-level security of the binding. Inheritance Object FederatedMessageSecurityOverHttp Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public sealed class FederatedMessageSecurityOverHttp : Object Remarks This class contains properties that provide control over various aspects of the security configuration between the client and the service, including details related to the issuer from which the service expects the client to retrieve a federated credential. Constructors FederatedMessageSecurityOverHttp() Declaration public FederatedMessageSecurityOverHttp() Properties AlgorithmSuite Declaration public SecurityAlgorithmSuite AlgorithmSuite { get; set; } Property Value Type Description SecurityAlgorithmSuite ClaimTypeRequirements Declaration public Collection<ClaimTypeRequirement> ClaimTypeRequirements { get; } Property Value Type Description Collection < ClaimTypeRequirement > EstablishSecurityContext Declaration public bool EstablishSecurityContext { get; set; } Property Value Type Description Boolean IssuedKeyType Declaration public SecurityKeyType IssuedKeyType { get; set; } Property Value Type Description SecurityKeyType IssuedTokenType Declaration public string IssuedTokenType { get; set; } Property Value Type Description String IssuerAddress Declaration public EndpointAddress IssuerAddress { get; set; } Property Value Type Description EndpointAddress IssuerBinding Declaration public Binding IssuerBinding { get; set; } Property Value Type Description Binding IssuerMetadataAddress Declaration public EndpointAddress IssuerMetadataAddress { get; set; } Property Value Type Description EndpointAddress NegotiateServiceCredential Declaration public bool NegotiateServiceCredential { get; set; } Property Value Type Description Boolean TokenRequestParameters Declaration public Collection<XmlElement> TokenRequestParameters { get; } Property Value Type Description Collection < XmlElement > Methods CreateSecurityBindingElement(Boolean, Boolean, MessageSecurityVersion) Declaration public SecurityBindingElement CreateSecurityBindingElement(bool isSecureTransportMode, bool isReliableSession, MessageSecurityVersion version) Parameters Type Name Description Boolean isSecureTransportMode Boolean isReliableSession MessageSecurityVersion version Returns Type Description SecurityBindingElement"
  },
  "api-corewcf/CoreWCF.Security.html": {
    "href": "api-corewcf/CoreWCF.Security.html",
    "title": "Namespace CoreWCF.Security",
    "keywords": "Namespace CoreWCF.Security Classes Basic128SecurityAlgorithmSuite The basic 128-bit security algorithm suite. Basic192SecurityAlgorithmSuite The basic 192-bit security algorithm suite. Basic256SecurityAlgorithmSuite The basic 256-bit security algorithm suite. BasicSecurityProfileVersion Provides a message version that corresponds to the Basic Security Profile specification. BinarySecretKeyIdentifierClause Represents the key identifier clause in a binary secret security token. ChannelProtectionRequirements Describes encryption and signature requirements that apply to different parts of messages that are transmitted on this channel. DataProtectionSecurityStateEncoder Provides encoding and decoding mechanisms for the security state using the Windows API functionality. FederatedMessageSecurityOverHttp Configures the message-level security of the binding. ImpersonateOnSerializingReplyMessageProperty The helper class to enable impersonation while serializing the body of the reply message. IssuedTokenServiceCredential Allows a service to configure properties associated with the federated credential presented by the client. LdapSettings MessagePartSpecification Specifies which parts are included in a message. MessageProtectionOrder Specifies the order of operations that protect a message. MessageSecurityException Represents an exception that occurred when there is something wrong with the security applied on a message. MessageSecurityOverTcp Configures the message-level security for a message sent using the TCP transport. NonceCache An abstract base class that represents a cache for nonces. SamlSerializer Serializes and deserializes objects into and from XML documents. ScopedMessagePartSpecification Specifies which parts are included in a message. SecureConversationServiceCredential Provides credential settings for a secure conversation service. SecureConversationVersion Contains the set of supported WS-SecureConversation versions. This is an abstract class. SecurityAlgorithmSuite Specifies properties of algorithms. This is an class. SecurityContextKeyIdentifierClause Represents the key identifier clause for a security context token. SecurityCredentialsManager Specifies an class that when implemented represents a security credentials manager. SecurityKeyEntropyMode Describes the source of entropy used for key generation. SecurityMessageProperty Contains security-related properties and is attached to a message. SecurityNegotiationException Indicates that an error occurred while negotiating the security context for a message. SecurityPolicyVersion Contains the set of supported WS-SecurityPolicy versions. This is an abstract class. SecurityProtocolFactory SecurityStateEncoder An abstract class that can be implemented to encode the security state. SecurityTokenAttachmentMode An enumeration that lists the ways in which security tokens are attached. SecurityTokenSpecification Represents a security token and its authorization policies. SecurityVersion Contains the set of supported WS-Security versions. This is an abstract class. SspiSecurityTokenProvider Represents a security token provider that provides an SSPI security token. SupportingTokenAuthenticatorSpecification SupportingTokenProviderSpecification SupportingTokenSpecification Represents a supporting security token and its authorization policies. TripleDesSecurityAlgorithmSuite The triple-DES security algorithm suite. TrustVersion Contains the set of supported WS-Trust versions. This is an abstract class. UserNamePasswordServiceCredential Represents a class that is used to configure how the service authenticates users that use user name/password authentication and to configure the caching of logon tokens. UserNamePasswordValidationMode Lists ways to validate in username/password mode. WindowsServiceCredential Provides properties that describe the service credentials used for Windows authentication. WSSecurityTokenSerializer The class used for serializing and deserializing security tokens, security key identifiers, and security key identifier clauses defined in the WS-Security, WS-Trust, and WS-SecureConversation security specifications. X509CertificateInitiatorServiceCredential Represents the settings used by the service to validate the certificate presented by the clients. It also contains a certificate for the service to use for encrypting responses or callbacks for clients when message security authentication mode is used. X509CertificateRecipientServiceCredential Defines a certificate used by a service to identify itself. X509CertificateValidationMode An enumeration that lists the ways of validating a certificate. X509ClientCertificateAuthentication Specifies authentication properties for validating the client certificate."
  },
  "api-corewcf/CoreWCF.Security.ImpersonateOnSerializingReplyMessageProperty.html": {
    "href": "api-corewcf/CoreWCF.Security.ImpersonateOnSerializingReplyMessageProperty.html",
    "title": "Class ImpersonateOnSerializingReplyMessageProperty",
    "keywords": "Class ImpersonateOnSerializingReplyMessageProperty The helper class to enable impersonation while serializing the body of the reply message. Inheritance Object ImpersonateOnSerializingReplyMessageProperty Implements IMessageProperty Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public class ImpersonateOnSerializingReplyMessageProperty : Object, IMessageProperty Properties Name Gets the name of the message property. Declaration public static string Name { get; } Property Value Type Description String Methods CreateCopy() Creates a copy of the message property. Declaration public IMessageProperty CreateCopy() Returns Type Description IMessageProperty Returns a copy of the message property. RunImpersonated<T>(Func<T>) Executes a Func T with the caller's context if impersonation is enabled on the service and sets the appropriate principal on the thread as per the service configuration. Declaration public T RunImpersonated<T>(Func<T> func) Parameters Type Name Description Func <T> func The function to execute under caller's impersonated context Returns Type Description T The return value from executing the func Type Parameters Name Description T TryGet(Message, out ImpersonateOnSerializingReplyMessageProperty) Gets the ImpersonateOnSerializingReplyMessageProperty property from a message. Declaration public static bool TryGet(Message message, out ImpersonateOnSerializingReplyMessageProperty property) Parameters Type Name Description Message message The message to extract the property from. ImpersonateOnSerializingReplyMessageProperty property An output paramter to hold the ImpersonateOnSerializingReplyMessageProperty property. Returns Type Description Boolean True if the ImpersonateOnSerializingReplyMessageProperty property was found. TryGet(MessageProperties, out ImpersonateOnSerializingReplyMessageProperty) Gets the ImpersonateOnSerializingReplyMessageProperty property from MessageProperties. Declaration public static bool TryGet(MessageProperties properties, out ImpersonateOnSerializingReplyMessageProperty property) Parameters Type Name Description MessageProperties properties The MessagePropeties object. ImpersonateOnSerializingReplyMessageProperty property An output paramter to hold the ImpersonateOnSerializingReplyMessageProperty property. Returns Type Description Boolean True if the ImpersonateOnSerializingReplyMessageProperty property was found. Implements IMessageProperty"
  },
  "api-corewcf/CoreWCF.Security.IssuedTokenServiceCredential.html": {
    "href": "api-corewcf/CoreWCF.Security.IssuedTokenServiceCredential.html",
    "title": "Class IssuedTokenServiceCredential",
    "keywords": "Class IssuedTokenServiceCredential Allows a service to configure properties associated with the federated credential presented by the client. Inheritance Object IssuedTokenServiceCredential Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public class IssuedTokenServiceCredential : Object Remarks This class allows the user to control how SAML tokens presented to the service get authenticated. Properties AllowedAudienceUris Declaration public IList<string> AllowedAudienceUris { get; } Property Value Type Description IList < String > AllowUntrustedRsaIssuers Declaration public bool AllowUntrustedRsaIssuers { get; set; } Property Value Type Description Boolean AudienceUriMode Declaration public AudienceUriMode AudienceUriMode { get; set; } Property Value Type Description AudienceUriMode CertificateValidationMode Declaration public X509CertificateValidationMode CertificateValidationMode { get; set; } Property Value Type Description X509CertificateValidationMode CustomCertificateValidator Declaration public X509CertificateValidator CustomCertificateValidator { get; set; } Property Value Type Description X509CertificateValidator KnownCertificates Declaration public IList<X509Certificate2> KnownCertificates { get; } Property Value Type Description IList < X509Certificate2 > RevocationMode Declaration public X509RevocationMode RevocationMode { get; set; } Property Value Type Description X509RevocationMode SamlSerializer Declaration public SamlSerializer SamlSerializer { get; set; } Property Value Type Description SamlSerializer TrustedStoreLocation Declaration public StoreLocation TrustedStoreLocation { get; set; } Property Value Type Description StoreLocation"
  },
  "api-corewcf/CoreWCF.Security.LdapSettings.html": {
    "href": "api-corewcf/CoreWCF.Security.LdapSettings.html",
    "title": "Class LdapSettings",
    "keywords": "Class LdapSettings Inheritance Object LdapSettings Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public class LdapSettings : Object Constructors LdapSettings(String, String, String) Default constructor. Declaration public LdapSettings(string server, string domain, string orgUnit) Parameters Type Name Description String server String domain domain name to search for String orgUnit org unit to search for. This is required per the issue https://github.com/dotnet/runtime/issues/44826 for CoreWCF to work cross platform, once upgraded to .NET6, this is not required anymore. LdapSettings(String, String, String, String, String) Constructor. Declaration public LdapSettings(string server, string domain, string machineAccountName, string machineAccountPassword, string orgUnit) Parameters Type Name Description String server String domain String machineAccountName String machineAccountPassword String orgUnit LdapSettings(String[], String, String) Default constructor. Declaration public LdapSettings(string[] servers, string domain, string orgUnit) Parameters Type Name Description String [] servers List of ldap servers String domain domain name to search for String orgUnit This is required LdapSettings(String[], String, String, String, String) Constructor to pass machine account name and machine account password. Declaration public LdapSettings(string[] servers, string domain, string machineAccountName, string machineAccountPassword, string orgUnit) Parameters Type Name Description String [] servers String domain String machineAccountName String machineAccountPassword String orgUnit Properties ClaimsCacheAbsoluteExpiration The absolute expiration that should be used for entries in the cache for user claims, defaults to 60 minutes. This is an absolute expiration that starts when a claims for a user is retrieved for the first time. Declaration public TimeSpan ClaimsCacheAbsoluteExpiration { get; set; } Property Value Type Description TimeSpan ClaimsCacheSize The maximum size of the claim results cache, defaults to 100 MB. Declaration public int ClaimsCacheSize { get; set; } Property Value Type Description Int32 ClaimsCacheSlidingExpiration The sliding expiration that should be used for entries in the cache for user claims, defaults to 10 minutes. This is a sliding expiration that will extend each time claims for a user is retrieved. Declaration public TimeSpan ClaimsCacheSlidingExpiration { get; set; } Property Value Type Description TimeSpan Domain The domain to use for the LDAP connection. This is a mandatory setting. Declaration public string Domain { get; } Property Value Type Description String Examples DOMAIN.com EnableLdapClaimResolution Configure whether LDAP connection should be used to resolve claims. This is mainly used on Linux. Declaration public bool EnableLdapClaimResolution { get; set; } Property Value Type Description Boolean IgnoreNestedGroups This option indicates whether nested groups should be ignored when resolving Roles. The default is false. Declaration public bool IgnoreNestedGroups { get; set; } Property Value Type Description Boolean MachineAccountName The machine account name to use when opening the LDAP connection. If this is not provided, the machine wide credentials of the domain joined machine will be used. Declaration public string MachineAccountName { get; } Property Value Type Description String MachineAccountPassword The machine account password to use when opening the LDAP connection. This must be provided if a MachineAccountName is provided. Declaration public string MachineAccountPassword { get; } Property Value Type Description String OrgUnit Organization unit to start with. If not provided, it will search from top domain. Declaration public string OrgUnit { get; } Property Value Type Description String Servers list of servers for ldap search Declaration public string[] Servers { get; } Property Value Type Description String [] Methods Validate() Validates the LdapSettings . Declaration public void Validate()"
  },
  "api-corewcf/CoreWCF.Security.MessagePartSpecification.html": {
    "href": "api-corewcf/CoreWCF.Security.MessagePartSpecification.html",
    "title": "Class MessagePartSpecification",
    "keywords": "Class MessagePartSpecification Specifies which parts are included in a message. Inheritance Object MessagePartSpecification Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public class MessagePartSpecification : Object Remarks This specification is used to indicate which message parts need to be signed and which parts need to be encrypted. Constructors MessagePartSpecification() Declaration public MessagePartSpecification() MessagePartSpecification(Boolean) Declaration public MessagePartSpecification(bool isBodyIncluded) Parameters Type Name Description Boolean isBodyIncluded MessagePartSpecification(Boolean, XmlQualifiedName[]) Declaration public MessagePartSpecification(bool isBodyIncluded, params XmlQualifiedName[] headerTypes) Parameters Type Name Description Boolean isBodyIncluded XmlQualifiedName [] headerTypes MessagePartSpecification(XmlQualifiedName[]) Declaration public MessagePartSpecification(params XmlQualifiedName[] headerTypes) Parameters Type Name Description XmlQualifiedName [] headerTypes Properties HeaderTypes Declaration public ICollection<XmlQualifiedName> HeaderTypes { get; } Property Value Type Description ICollection < XmlQualifiedName > IsBodyIncluded Declaration public bool IsBodyIncluded { get; set; } Property Value Type Description Boolean IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean NoParts Declaration public static MessagePartSpecification NoParts { get; } Property Value Type Description MessagePartSpecification Methods Clear() Declaration public void Clear() MakeReadOnly() Declaration public void MakeReadOnly() Union(MessagePartSpecification) Declaration public void Union(MessagePartSpecification specification) Parameters Type Name Description MessagePartSpecification specification"
  },
  "api-corewcf/CoreWCF.Security.MessageProtectionOrder.html": {
    "href": "api-corewcf/CoreWCF.Security.MessageProtectionOrder.html",
    "title": "Class MessageProtectionOrder",
    "keywords": "Class MessageProtectionOrder Specifies the order of operations that protect a message. Inheritance Object MessageProtectionOrder Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public sealed class MessageProtectionOrder : Enum Remarks This enumeration is used with the <xref:CoreWCF.Channels.AsymmetricSecurityBindingElement.MessageProtectionOrder%2A?displayProperty=nameWithType> property of the <xref:CoreWCF.Channels.AsymmetricSecurityBindingElement> and the <xref:CoreWCF.Channels.SymmetricSecurityBindingElement.MessageProtectionOrder%2A?displayProperty=nameWithType> property of the <xref:CoreWCF.Channels.SymmetricSecurityBindingElement> classes. If a message is vulnerable to a digest attack (for example, if the message is short or the entropy is low), you should use the SignBeforeEncryptAndEncryptSignature or EncryptBeforeSign option. ( Entropy is random data provided by a server, a client, or both, and is used to create a shared key for encrypting and decrypting data.) What Is Ordered? WCF offers three different protection levels that determine how messages are secured using SOAP message security. The default is SignBeforeEncryptAndEncryptSignature. This setting first signs the message, encrypts the message body, and then encrypts the XML signature. This reduces the likelihood of a successful cryptographic guessing attack against the signature. However, using the default has performance implications. In effect, there is a tradeoff of performance for increased security. Encrypting the signature can decrease performance between 10 percent and 40 percent. If the data content of the message is of low value, and performance throughput is more significant, use SignBeforeEncrypt. With this setting, the signature digest is sent in clear text, and thus the message is more vulnerable to guess-and-verify attacks on low entropy. Custom Bindings Only To change the MessageProtectionOrder property requires the creation of a custom security binding. For more information about creating custom bindings, see Creating User-Defined Bindings . For more information about creating a custom binding for a specific authentication mode, see How to: Create a SecurityBindingElement for a Specified Authentication Mode . Fields EncryptBeforeSign Declaration public const MessageProtectionOrder EncryptBeforeSign Field Value Type Description MessageProtectionOrder SignBeforeEncrypt Declaration public const MessageProtectionOrder SignBeforeEncrypt Field Value Type Description MessageProtectionOrder SignBeforeEncryptAndEncryptSignature Declaration public const MessageProtectionOrder SignBeforeEncryptAndEncryptSignature Field Value Type Description MessageProtectionOrder value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.Security.MessageSecurityException.html": {
    "href": "api-corewcf/CoreWCF.Security.MessageSecurityException.html",
    "title": "Class MessageSecurityException",
    "keywords": "Class MessageSecurityException Represents an exception that occurred when there is something wrong with the security applied on a message. Inheritance Object CommunicationException MessageSecurityException Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public class MessageSecurityException : CommunicationException Remarks An example where this exception happens is if signature verification fails. This exception usually happens during application message exchange (when security context is fully established). In addition, it can occur while establishing a security session on top of the initial security context. Constructors MessageSecurityException() Declaration public MessageSecurityException() MessageSecurityException(SerializationInfo, StreamingContext) Declaration protected MessageSecurityException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context MessageSecurityException(String) Declaration public MessageSecurityException(string message) Parameters Type Name Description String message MessageSecurityException(String, Exception) Declaration public MessageSecurityException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException"
  },
  "api-corewcf/CoreWCF.Security.MessageSecurityOverTcp.html": {
    "href": "api-corewcf/CoreWCF.Security.MessageSecurityOverTcp.html",
    "title": "Class MessageSecurityOverTcp",
    "keywords": "Class MessageSecurityOverTcp Configures the message-level security for a message sent using the TCP transport. Inheritance Object MessageSecurityOverTcp Namespace : CoreWCF.Security Assembly : CoreWCF.NetTcp.dll Syntax public sealed class MessageSecurityOverTcp : Object Remarks This object is accessed from the binding by using the <xref:CoreWCF.NetTcpBinding.Security%2A> property, which returns a <xref:CoreWCF.NetTcpSecurity> object. The <xref:CoreWCF.NetTcpSecurity.Message%2A> property provides a reference to the <xref:CoreWCF.MessageSecurityOverTcp> object. Constructors MessageSecurityOverTcp() Declaration public MessageSecurityOverTcp() Properties AlgorithmSuite Declaration public SecurityAlgorithmSuite AlgorithmSuite { get; set; } Property Value Type Description SecurityAlgorithmSuite ClientCredentialType Declaration public MessageCredentialType ClientCredentialType { get; set; } Property Value Type Description MessageCredentialType Methods CreateSecurityBindingElement(Boolean, Boolean, BindingElement) Declaration public SecurityBindingElement CreateSecurityBindingElement(bool isSecureTransportMode, bool isReliableSession, BindingElement transportBindingElement) Parameters Type Name Description Boolean isSecureTransportMode Boolean isReliableSession BindingElement transportBindingElement Returns Type Description SecurityBindingElement"
  },
  "api-corewcf/CoreWCF.Security.NonceCache.html": {
    "href": "api-corewcf/CoreWCF.Security.NonceCache.html",
    "title": "Class NonceCache",
    "keywords": "Class NonceCache An abstract base class that represents a cache for nonces. Inheritance Object NonceCache Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public abstract class NonceCache : Object Remarks To be added. Constructors NonceCache() Declaration protected NonceCache() Properties CacheSize The maximum size of the NonceCache. Declaration public int CacheSize { get; set; } Property Value Type Description Int32 CachingTimeSpan TThe max timespan after which a Nonce is deleted from the NonceCache. This value should be atleast twice the maxclock Skew added to the replayWindow size. Declaration public TimeSpan CachingTimeSpan { get; set; } Property Value Type Description TimeSpan Methods CheckNonce(Byte[]) Declaration public abstract bool CheckNonce(byte[] nonce) Parameters Type Name Description Byte [] nonce Returns Type Description Boolean TryAddNonce(Byte[]) Declaration public abstract bool TryAddNonce(byte[] nonce) Parameters Type Name Description Byte [] nonce Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.Security.SamlSerializer.html": {
    "href": "api-corewcf/CoreWCF.Security.SamlSerializer.html",
    "title": "Class SamlSerializer",
    "keywords": "Class SamlSerializer Serializes and deserializes objects into and from XML documents. Inheritance Object SamlSerializer Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public class SamlSerializer : Object Remarks XML serialization is the process of converting an object's public properties and fields to a serial format (in this case, XML) for storage or transport. Deserialization re-creates the object in its original state from the XML. The <xref:System.IdentityModel.Tokens.SamlSerializer> class serializes and deserializes SAML security tokens, which have an extensible format. Unlike many other security tokens, <xref:System.IdentityModel.Tokens.SamlSecurityToken> security tokens include XML elements and attributes that can be customized for an application's needs. Some of the extensibility points for a SAML assertion include the &lt;saml:Advice> , &lt;saml:Condition> , and &lt;saml:Statement> elements. For more details about overriding how each of these elements are read, see the <xref:System.IdentityModel.Tokens.SamlSerializer.LoadAdvice%28System.Xml.XmlDictionaryReader%2CSystem.IdentityModel.Selectors.SecurityTokenSerializer%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%29>, <xref:System.IdentityModel.Tokens.SamlSerializer.LoadCondition%28System.Xml.XmlDictionaryReader%2CSystem.IdentityModel.Selectors.SecurityTokenSerializer%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%29>, and <xref:System.IdentityModel.Tokens.SamlSerializer.LoadStatement%28System.Xml.XmlDictionaryReader%2CSystem.IdentityModel.Selectors.SecurityTokenSerializer%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%29> methods. Constructors SamlSerializer() Declaration public SamlSerializer() Methods ReadToken(XmlDictionaryReader, SecurityTokenSerializer, SecurityTokenResolver) Declaration public virtual SamlSecurityToken ReadToken(XmlDictionaryReader reader, SecurityTokenSerializer keyInfoSerializer, SecurityTokenResolver outOfBandTokenResolver) Parameters Type Name Description XmlDictionaryReader reader SecurityTokenSerializer keyInfoSerializer SecurityTokenResolver outOfBandTokenResolver Returns Type Description SamlSecurityToken"
  },
  "api-corewcf/CoreWCF.Security.ScopedMessagePartSpecification.html": {
    "href": "api-corewcf/CoreWCF.Security.ScopedMessagePartSpecification.html",
    "title": "Class ScopedMessagePartSpecification",
    "keywords": "Class ScopedMessagePartSpecification Specifies which parts are included in a message. Inheritance Object ScopedMessagePartSpecification Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public class ScopedMessagePartSpecification : Object Remarks This class contains the <xref:CoreWCF.Security.MessagePartSpecification> instances of different messages, each distinguished by the message Action. Constructors ScopedMessagePartSpecification() Declaration public ScopedMessagePartSpecification() ScopedMessagePartSpecification(ScopedMessagePartSpecification) Declaration public ScopedMessagePartSpecification(ScopedMessagePartSpecification other) Parameters Type Name Description ScopedMessagePartSpecification other Properties Actions Declaration public ICollection<string> Actions { get; } Property Value Type Description ICollection < String > ChannelParts Declaration public MessagePartSpecification ChannelParts { get; } Property Value Type Description MessagePartSpecification IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean Methods AddParts(MessagePartSpecification) Declaration public void AddParts(MessagePartSpecification parts) Parameters Type Name Description MessagePartSpecification parts AddParts(MessagePartSpecification, String) Declaration public void AddParts(MessagePartSpecification parts, string action) Parameters Type Name Description MessagePartSpecification parts String action MakeReadOnly() Declaration public void MakeReadOnly() TryGetParts(String, out MessagePartSpecification) Declaration public bool TryGetParts(string action, out MessagePartSpecification parts) Parameters Type Name Description String action MessagePartSpecification parts Returns Type Description Boolean TryGetParts(String, Boolean, out MessagePartSpecification) Declaration public bool TryGetParts(string action, bool excludeChannelScope, out MessagePartSpecification parts) Parameters Type Name Description String action Boolean excludeChannelScope MessagePartSpecification parts Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.Security.SecureConversationServiceCredential.html": {
    "href": "api-corewcf/CoreWCF.Security.SecureConversationServiceCredential.html",
    "title": "Class SecureConversationServiceCredential",
    "keywords": "Class SecureConversationServiceCredential Provides credential settings for a secure conversation service. Inheritance Object SecureConversationServiceCredential Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public sealed class SecureConversationServiceCredential : Object Remarks Secure conversations involve the exchange of multiple messages and use a Security Context Token (SCT) to ensure security. The SCT is shared among the communicating parties for the lifetime of a communications session. A service can issue two different kinds of SCTs: The first is a session-based SCT that contains a unique id. Messages carry only the id, and the service maintains a state-mapping cache that maps between the SCT ids and contents (such as claims, security keys, and so on). A well-behaved client must send an SCT cancellation to help the service optimize the cache resources. If you instantiate this class by calling <xref:CoreWCF.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A> with the requireCancellation parameter equal to true , the SCT is issued in this manner. The second is a self-contained SCT that resides in a cookie on the client. This SCT contains the entire state information, so requires neither state management from the service nor SCT cancellation from the client. This is sometimes called a \"cookie-mode\" SCT. Because the SCT contains the entire state information, its size is larger than in the session-based case. With session-based SCTs, the service stores much of the state information. However, because it is self-contained, it can be used across service lifetime and persists across service shutdown and restart. Properties SecurityContextClaimTypes Declaration public Collection<Type> SecurityContextClaimTypes { get; } Property Value Type Description Collection < Type > SecurityStateEncoder Declaration public SecurityStateEncoder SecurityStateEncoder { get; set; } Property Value Type Description SecurityStateEncoder"
  },
  "api-corewcf/CoreWCF.Security.SecureConversationVersion.html": {
    "href": "api-corewcf/CoreWCF.Security.SecureConversationVersion.html",
    "title": "Class SecureConversationVersion",
    "keywords": "Class SecureConversationVersion Contains the set of supported WS-SecureConversation versions. This is an abstract class. Inheritance Object SecureConversationVersion Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public abstract class SecureConversationVersion : Object Remarks To be added. Properties Default Declaration public static SecureConversationVersion Default { get; } Property Value Type Description SecureConversationVersion Namespace Declaration public XmlDictionaryString Namespace { get; } Property Value Type Description XmlDictionaryString Prefix Declaration public XmlDictionaryString Prefix { get; } Property Value Type Description XmlDictionaryString WSSecureConversation13 Declaration public static SecureConversationVersion WSSecureConversation13 { get; } Property Value Type Description SecureConversationVersion WSSecureConversationFeb2005 Declaration public static SecureConversationVersion WSSecureConversationFeb2005 { get; } Property Value Type Description SecureConversationVersion"
  },
  "api-corewcf/CoreWCF.Security.SecurityAlgorithmSuite.html": {
    "href": "api-corewcf/CoreWCF.Security.SecurityAlgorithmSuite.html",
    "title": "Class SecurityAlgorithmSuite",
    "keywords": "Class SecurityAlgorithmSuite Specifies properties of algorithms. This is an class. Inheritance Object SecurityAlgorithmSuite Basic128SecurityAlgorithmSuite Basic192SecurityAlgorithmSuite Basic256SecurityAlgorithmSuite TripleDesSecurityAlgorithmSuite Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public abstract class SecurityAlgorithmSuite : Object Remarks Instances of this class are used to specify the cryptographic characteristics of the algorithms used when securing messages. This class is used by derived classes to instantiate security algorithm suites, and contains properties that describe the security algorithms. For example, the wsBasicHttp binding uses an internal derived class to specify the properties of its security algorithms. Constructors SecurityAlgorithmSuite() Declaration protected SecurityAlgorithmSuite() Properties Basic128 Declaration public static SecurityAlgorithmSuite Basic128 { get; } Property Value Type Description SecurityAlgorithmSuite Basic128Rsa15 Declaration public static SecurityAlgorithmSuite Basic128Rsa15 { get; } Property Value Type Description SecurityAlgorithmSuite Basic128Sha256 Declaration public static SecurityAlgorithmSuite Basic128Sha256 { get; } Property Value Type Description SecurityAlgorithmSuite Basic128Sha256Rsa15 Declaration public static SecurityAlgorithmSuite Basic128Sha256Rsa15 { get; } Property Value Type Description SecurityAlgorithmSuite Basic192 Declaration public static SecurityAlgorithmSuite Basic192 { get; } Property Value Type Description SecurityAlgorithmSuite Basic192Rsa15 Declaration public static SecurityAlgorithmSuite Basic192Rsa15 { get; } Property Value Type Description SecurityAlgorithmSuite Basic192Sha256 Declaration public static SecurityAlgorithmSuite Basic192Sha256 { get; } Property Value Type Description SecurityAlgorithmSuite Basic192Sha256Rsa15 Declaration public static SecurityAlgorithmSuite Basic192Sha256Rsa15 { get; } Property Value Type Description SecurityAlgorithmSuite Basic256 Declaration public static SecurityAlgorithmSuite Basic256 { get; } Property Value Type Description SecurityAlgorithmSuite Basic256Rsa15 Declaration public static SecurityAlgorithmSuite Basic256Rsa15 { get; } Property Value Type Description SecurityAlgorithmSuite Basic256Sha256 Declaration public static SecurityAlgorithmSuite Basic256Sha256 { get; } Property Value Type Description SecurityAlgorithmSuite Basic256Sha256Rsa15 Declaration public static SecurityAlgorithmSuite Basic256Sha256Rsa15 { get; } Property Value Type Description SecurityAlgorithmSuite Default Declaration public static SecurityAlgorithmSuite Default { get; } Property Value Type Description SecurityAlgorithmSuite DefaultAsymmetricKeyWrapAlgorithm Declaration public abstract string DefaultAsymmetricKeyWrapAlgorithm { get; } Property Value Type Description String DefaultAsymmetricSignatureAlgorithm Declaration public abstract string DefaultAsymmetricSignatureAlgorithm { get; } Property Value Type Description String DefaultCanonicalizationAlgorithm Declaration public abstract string DefaultCanonicalizationAlgorithm { get; } Property Value Type Description String DefaultDigestAlgorithm Declaration public abstract string DefaultDigestAlgorithm { get; } Property Value Type Description String DefaultEncryptionAlgorithm Declaration public abstract string DefaultEncryptionAlgorithm { get; } Property Value Type Description String DefaultEncryptionKeyDerivationLength Declaration public abstract int DefaultEncryptionKeyDerivationLength { get; } Property Value Type Description Int32 DefaultSignatureKeyDerivationLength Declaration public abstract int DefaultSignatureKeyDerivationLength { get; } Property Value Type Description Int32 DefaultSymmetricKeyLength Declaration public abstract int DefaultSymmetricKeyLength { get; } Property Value Type Description Int32 DefaultSymmetricKeyWrapAlgorithm Declaration public abstract string DefaultSymmetricKeyWrapAlgorithm { get; } Property Value Type Description String DefaultSymmetricSignatureAlgorithm Declaration public abstract string DefaultSymmetricSignatureAlgorithm { get; } Property Value Type Description String TripleDes Declaration public static SecurityAlgorithmSuite TripleDes { get; } Property Value Type Description SecurityAlgorithmSuite TripleDesRsa15 Declaration public static SecurityAlgorithmSuite TripleDesRsa15 { get; } Property Value Type Description SecurityAlgorithmSuite TripleDesSha256 Declaration public static SecurityAlgorithmSuite TripleDesSha256 { get; } Property Value Type Description SecurityAlgorithmSuite TripleDesSha256Rsa15 Declaration public static SecurityAlgorithmSuite TripleDesSha256Rsa15 { get; } Property Value Type Description SecurityAlgorithmSuite Methods IsAsymmetricKeyLengthSupported(Int32) Declaration public abstract bool IsAsymmetricKeyLengthSupported(int length) Parameters Type Name Description Int32 length Returns Type Description Boolean IsAsymmetricKeyWrapAlgorithmSupported(String) Declaration public virtual bool IsAsymmetricKeyWrapAlgorithmSupported(string algorithm) Parameters Type Name Description String algorithm Returns Type Description Boolean IsAsymmetricSignatureAlgorithmSupported(String) Declaration public virtual bool IsAsymmetricSignatureAlgorithmSupported(string algorithm) Parameters Type Name Description String algorithm Returns Type Description Boolean IsCanonicalizationAlgorithmSupported(String) Declaration public virtual bool IsCanonicalizationAlgorithmSupported(string algorithm) Parameters Type Name Description String algorithm Returns Type Description Boolean IsDigestAlgorithmSupported(String) Declaration public virtual bool IsDigestAlgorithmSupported(string algorithm) Parameters Type Name Description String algorithm Returns Type Description Boolean IsEncryptionAlgorithmSupported(String) Declaration public virtual bool IsEncryptionAlgorithmSupported(string algorithm) Parameters Type Name Description String algorithm Returns Type Description Boolean IsEncryptionKeyDerivationAlgorithmSupported(String) Declaration public virtual bool IsEncryptionKeyDerivationAlgorithmSupported(string algorithm) Parameters Type Name Description String algorithm Returns Type Description Boolean IsSignatureKeyDerivationAlgorithmSupported(String) Declaration public virtual bool IsSignatureKeyDerivationAlgorithmSupported(string algorithm) Parameters Type Name Description String algorithm Returns Type Description Boolean IsSymmetricKeyLengthSupported(Int32) Declaration public abstract bool IsSymmetricKeyLengthSupported(int length) Parameters Type Name Description Int32 length Returns Type Description Boolean IsSymmetricKeyWrapAlgorithmSupported(String) Declaration public virtual bool IsSymmetricKeyWrapAlgorithmSupported(string algorithm) Parameters Type Name Description String algorithm Returns Type Description Boolean IsSymmetricSignatureAlgorithmSupported(String) Declaration public virtual bool IsSymmetricSignatureAlgorithmSupported(string algorithm) Parameters Type Name Description String algorithm Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.Security.SecurityContextKeyIdentifierClause.html": {
    "href": "api-corewcf/CoreWCF.Security.SecurityContextKeyIdentifierClause.html",
    "title": "Class SecurityContextKeyIdentifierClause",
    "keywords": "Class SecurityContextKeyIdentifierClause Represents the key identifier clause for a security context token. Inheritance Object SecurityKeyIdentifierClause SecurityContextKeyIdentifierClause Inherited Members SecurityKeyIdentifierClause.CreateKey() SecurityKeyIdentifierClause.GetDerivationNonce() SecurityKeyIdentifierClause.CanCreateKey SecurityKeyIdentifierClause.ClauseType SecurityKeyIdentifierClause.Id SecurityKeyIdentifierClause.DerivationLength Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public class SecurityContextKeyIdentifierClause : SecurityKeyIdentifierClause Remarks To be added. Constructors SecurityContextKeyIdentifierClause(UniqueId) Declaration public SecurityContextKeyIdentifierClause(UniqueId contextId) Parameters Type Name Description UniqueId contextId SecurityContextKeyIdentifierClause(UniqueId, UniqueId) Declaration public SecurityContextKeyIdentifierClause(UniqueId contextId, UniqueId generation) Parameters Type Name Description UniqueId contextId UniqueId generation SecurityContextKeyIdentifierClause(UniqueId, UniqueId, Byte[], Int32) Declaration public SecurityContextKeyIdentifierClause(UniqueId contextId, UniqueId generation, byte[] derivationNonce, int derivationLength) Parameters Type Name Description UniqueId contextId UniqueId generation Byte [] derivationNonce Int32 derivationLength Properties ContextId Declaration public UniqueId ContextId { get; } Property Value Type Description UniqueId Generation Declaration public UniqueId Generation { get; } Property Value Type Description UniqueId Methods Matches(SecurityKeyIdentifierClause) Declaration public override bool Matches(SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause Returns Type Description Boolean Overrides SecurityKeyIdentifierClause.Matches(SecurityKeyIdentifierClause) Matches(UniqueId, UniqueId) Declaration public bool Matches(UniqueId contextId, UniqueId generation) Parameters Type Name Description UniqueId contextId UniqueId generation Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api-corewcf/CoreWCF.Security.SecurityCredentialsManager.html": {
    "href": "api-corewcf/CoreWCF.Security.SecurityCredentialsManager.html",
    "title": "Class SecurityCredentialsManager",
    "keywords": "Class SecurityCredentialsManager Specifies an class that when implemented represents a security credentials manager. Inheritance Object SecurityCredentialsManager ServiceCredentials Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public abstract class SecurityCredentialsManager : Object Remarks This class is the extensibility point for providing a custom security token manager that WCF can use for customizing message and transport security. <xref:CoreWCF.Security.SecurityCredentialsManager> is a factory that creates instances of classes derived from <xref:System.IdentityModel.Selectors.SecurityTokenManager>. <xref:CoreWCF.Description.ClientCredentials> and <xref:CoreWCF.Description.ServiceCredentials> implement this class. Constructors SecurityCredentialsManager() Declaration protected SecurityCredentialsManager() Methods CreateSecurityTokenManager() Declaration public abstract SecurityTokenManager CreateSecurityTokenManager() Returns Type Description SecurityTokenManager"
  },
  "api-corewcf/CoreWCF.Security.SecurityKeyEntropyMode.html": {
    "href": "api-corewcf/CoreWCF.Security.SecurityKeyEntropyMode.html",
    "title": "Class SecurityKeyEntropyMode",
    "keywords": "Class SecurityKeyEntropyMode Describes the source of entropy used for key generation. Inheritance Object SecurityKeyEntropyMode Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public sealed class SecurityKeyEntropyMode : Enum Remarks This mode describes how the client and server compute a shared symmetric key to use with a token issued by the server. Fields ClientEntropy Declaration public const SecurityKeyEntropyMode ClientEntropy Field Value Type Description SecurityKeyEntropyMode CombinedEntropy Declaration public const SecurityKeyEntropyMode CombinedEntropy Field Value Type Description SecurityKeyEntropyMode ServerEntropy Declaration public const SecurityKeyEntropyMode ServerEntropy Field Value Type Description SecurityKeyEntropyMode value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.Security.SecurityMessageProperty.html": {
    "href": "api-corewcf/CoreWCF.Security.SecurityMessageProperty.html",
    "title": "Class SecurityMessageProperty",
    "keywords": "Class SecurityMessageProperty Contains security-related properties and is attached to a message. Inheritance Object SecurityMessageProperty Implements IMessageProperty IDisposable Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public class SecurityMessageProperty : Object, IMessageProperty Remarks Client authentication results are translated into an instance of <xref:CoreWCF.ServiceSecurityContext>, which is attached to the message using a <xref:CoreWCF.Security.SecurityMessageProperty>. This property can be used by higher layers to implement custom authorization logic. Constructors SecurityMessageProperty() Declaration public SecurityMessageProperty() Properties ExternalAuthorizationPolicies Declaration public ReadOnlyCollection<IAuthorizationPolicy> ExternalAuthorizationPolicies { get; set; } Property Value Type Description ReadOnlyCollection < IAuthorizationPolicy > HasIncomingSupportingTokens Declaration public bool HasIncomingSupportingTokens { get; } Property Value Type Description Boolean IncomingSupportingTokens Declaration public Collection<SupportingTokenSpecification> IncomingSupportingTokens { get; } Property Value Type Description Collection < SupportingTokenSpecification > InitiatorToken Declaration public SecurityTokenSpecification InitiatorToken { get; set; } Property Value Type Description SecurityTokenSpecification OutgoingSupportingTokens Declaration public Collection<SupportingTokenSpecification> OutgoingSupportingTokens { get; } Property Value Type Description Collection < SupportingTokenSpecification > ProtectionToken Declaration public SecurityTokenSpecification ProtectionToken { get; set; } Property Value Type Description SecurityTokenSpecification RecipientToken Declaration public SecurityTokenSpecification RecipientToken { get; set; } Property Value Type Description SecurityTokenSpecification SenderIdPrefix Declaration public string SenderIdPrefix { get; set; } Property Value Type Description String ServiceSecurityContext Declaration public ServiceSecurityContext ServiceSecurityContext { get; set; } Property Value Type Description ServiceSecurityContext TransportToken Declaration public SecurityTokenSpecification TransportToken { get; set; } Property Value Type Description SecurityTokenSpecification Methods CreateCopy() Declaration public IMessageProperty CreateCopy() Returns Type Description IMessageProperty Dispose() Declaration public void Dispose() GetOrCreate(Message) Declaration public static SecurityMessageProperty GetOrCreate(Message message) Parameters Type Name Description Message message Returns Type Description SecurityMessageProperty Implements IMessageProperty System.IDisposable"
  },
  "api-corewcf/CoreWCF.Security.SecurityNegotiationException.html": {
    "href": "api-corewcf/CoreWCF.Security.SecurityNegotiationException.html",
    "title": "Class SecurityNegotiationException",
    "keywords": "Class SecurityNegotiationException Indicates that an error occurred while negotiating the security context for a message. Inheritance Object CommunicationException SecurityNegotiationException Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public class SecurityNegotiationException : CommunicationException Remarks This exception can happen in the following cases: While negotiating the initial security context. The exact error depends on the negotiation technology used: either Simple and Protected GSS-API Negotiation (SPNEGO) or TLSNEGO. For more information, see Security Protocols . While establishing a security session on top of an initial security context. During key renewal for an existing security session. Security negotiation errors can occur as part of the Spnego / Sslnego security protocol or as part of the SecureConversation protocol. Constructors SecurityNegotiationException() Declaration public SecurityNegotiationException() SecurityNegotiationException(SerializationInfo, StreamingContext) Declaration protected SecurityNegotiationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context SecurityNegotiationException(String) Declaration public SecurityNegotiationException(string message) Parameters Type Name Description String message SecurityNegotiationException(String, Exception) Declaration public SecurityNegotiationException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException"
  },
  "api-corewcf/CoreWCF.Security.SecurityPolicyVersion.html": {
    "href": "api-corewcf/CoreWCF.Security.SecurityPolicyVersion.html",
    "title": "Class SecurityPolicyVersion",
    "keywords": "Class SecurityPolicyVersion Contains the set of supported WS-SecurityPolicy versions. This is an abstract class. Inheritance Object SecurityPolicyVersion Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public abstract class SecurityPolicyVersion : Object Remarks To be added. Properties Namespace Declaration public string Namespace { get; } Property Value Type Description String Prefix Declaration public string Prefix { get; } Property Value Type Description String WSSecurityPolicy11 Declaration public static SecurityPolicyVersion WSSecurityPolicy11 { get; } Property Value Type Description SecurityPolicyVersion WSSecurityPolicy12 Declaration public static SecurityPolicyVersion WSSecurityPolicy12 { get; } Property Value Type Description SecurityPolicyVersion"
  },
  "api-corewcf/CoreWCF.Security.SecurityProtocolFactory.html": {
    "href": "api-corewcf/CoreWCF.Security.SecurityProtocolFactory.html",
    "title": "Class SecurityProtocolFactory",
    "keywords": "Class SecurityProtocolFactory Inheritance Object SecurityProtocolFactory Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public abstract class SecurityProtocolFactory : Object Constructors SecurityProtocolFactory() Declaration protected SecurityProtocolFactory() Properties ActAsInitiator Declaration public bool ActAsInitiator { get; } Property Value Type Description Boolean AddTimestamp Declaration public bool AddTimestamp { get; set; } Property Value Type Description Boolean ChannelSupportingTokenAuthenticatorSpecification Declaration public ICollection<SupportingTokenAuthenticatorSpecification> ChannelSupportingTokenAuthenticatorSpecification { get; } Property Value Type Description ICollection < SupportingTokenAuthenticatorSpecification > DefaultCloseTimeout Declaration public TimeSpan DefaultCloseTimeout { get; } Property Value Type Description TimeSpan DefaultOpenTimeout Declaration public TimeSpan DefaultOpenTimeout { get; } Property Value Type Description TimeSpan DetectReplays Declaration public bool DetectReplays { get; set; } Property Value Type Description Boolean ExtendedProtectionPolicy Declaration public ExtendedProtectionPolicy ExtendedProtectionPolicy { get; set; } Property Value Type Description ExtendedProtectionPolicy IncomingAlgorithmSuite Declaration public SecurityAlgorithmSuite IncomingAlgorithmSuite { get; set; } Property Value Type Description SecurityAlgorithmSuite ListenUri Declaration public Uri ListenUri { get; set; } Property Value Type Description Uri MaxCachedNonces Declaration public int MaxCachedNonces { get; set; } Property Value Type Description Int32 MaxClockSkew Declaration public TimeSpan MaxClockSkew { get; set; } Property Value Type Description TimeSpan NonceCache Declaration public NonceCache NonceCache { get; set; } Property Value Type Description NonceCache OutgoingAlgorithmSuite Declaration public SecurityAlgorithmSuite OutgoingAlgorithmSuite { get; set; } Property Value Type Description SecurityAlgorithmSuite PrivacyNoticeUri Declaration public Uri PrivacyNoticeUri { get; set; } Property Value Type Description Uri PrivacyNoticeVersion Declaration public int PrivacyNoticeVersion { get; set; } Property Value Type Description Int32 ReplayWindow Declaration public TimeSpan ReplayWindow { get; set; } Property Value Type Description TimeSpan ScopedSupportingTokenAuthenticatorSpecification Declaration public Dictionary<string, ICollection<SupportingTokenAuthenticatorSpecification>> ScopedSupportingTokenAuthenticatorSpecification { get; } Property Value Type Description Dictionary < String , ICollection < SupportingTokenAuthenticatorSpecification >> SecurityBindingElement Declaration public SecurityBindingElement SecurityBindingElement { get; set; } Property Value Type Description SecurityBindingElement SecurityHeaderLayout Declaration public SecurityHeaderLayout SecurityHeaderLayout { get; set; } Property Value Type Description SecurityHeaderLayout StreamBufferManager Declaration public BufferManager StreamBufferManager { get; set; } Property Value Type Description BufferManager SupportsDuplex Declaration public virtual bool SupportsDuplex { get; } Property Value Type Description Boolean SupportsReplayDetection Declaration public virtual bool SupportsReplayDetection { get; } Property Value Type Description Boolean SupportsRequestReply Declaration public virtual bool SupportsRequestReply { get; } Property Value Type Description Boolean TimestampValidityDuration Declaration public TimeSpan TimestampValidityDuration { get; set; } Property Value Type Description TimeSpan Methods CreateListenerSecurityState() Declaration public virtual object CreateListenerSecurityState() Returns Type Description Object CreateRecipientSecurityTokenRequirement() Declaration protected RecipientServiceModelSecurityTokenRequirement CreateRecipientSecurityTokenRequirement() Returns Type Description RecipientServiceModelSecurityTokenRequirement GetIdentityOfSelf() Declaration public virtual EndpointIdentity GetIdentityOfSelf() Returns Type Description EndpointIdentity GetProperty<T>() Declaration public virtual T GetProperty<T>() Returns Type Description T Type Parameters Name Description T OnAbort() Declaration public virtual void OnAbort() OnClose(TimeSpan) Declaration public virtual void OnClose(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout OnCloseAsync(TimeSpan) Declaration public virtual Task OnCloseAsync(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout Returns Type Description Task OnClosed() Declaration public void OnClosed() OnClosing() Declaration public void OnClosing() OnFaulted() Declaration public void OnFaulted() OnOpenAsync(TimeSpan) Declaration public virtual Task OnOpenAsync(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout Returns Type Description Task OnOpened() Declaration public void OnOpened() OnOpening() Declaration public void OnOpening() OpenAsync(TimeSpan) Declaration public Task OpenAsync(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout Returns Type Description Task"
  },
  "api-corewcf/CoreWCF.Security.SecurityStateEncoder.html": {
    "href": "api-corewcf/CoreWCF.Security.SecurityStateEncoder.html",
    "title": "Class SecurityStateEncoder",
    "keywords": "Class SecurityStateEncoder An abstract class that can be implemented to encode the security state. Inheritance Object SecurityStateEncoder DataProtectionSecurityStateEncoder Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public abstract class SecurityStateEncoder : Object Remarks This class is used to encode and decode the content of the security context token when a binding with message security that uses a stateful security context token is used. For more information about stateful security context tokens, see How to: Create a Security Context Token for a Secure Session topic. Microsoft's version of <xref:CoreWCF.Security.SecurityStateEncoder> is <xref:CoreWCF.Security.DataProtectionSecurityStateEncoder>. It uses Microsoft's Windows Data Protection (DPAPI) technology to encrypt/decrypt the cookie. You can plug in a different mechanism for encrypting and decrypting cookies by implementing this class. The encoding of the security state must ensure that the state is signed and encrypted for the service. This class is used by the server when sending the security state as a cookie in the SecurityContextToken issued to the client. An example implementation of this class is an X509CertificateSecurityStateEncoder that uses the service's certificate to sign and encrypt the security state. Constructors SecurityStateEncoder() Declaration protected SecurityStateEncoder() Methods DecodeSecurityState(Byte[]) Declaration protected abstract byte[] DecodeSecurityState(byte[] data) Parameters Type Name Description Byte [] data Returns Type Description Byte [] EncodeSecurityState(Byte[]) Declaration protected abstract byte[] EncodeSecurityState(byte[] data) Parameters Type Name Description Byte [] data Returns Type Description Byte []"
  },
  "api-corewcf/CoreWCF.Security.SecurityTokenAttachmentMode.html": {
    "href": "api-corewcf/CoreWCF.Security.SecurityTokenAttachmentMode.html",
    "title": "Class SecurityTokenAttachmentMode",
    "keywords": "Class SecurityTokenAttachmentMode An enumeration that lists the ways in which security tokens are attached. Inheritance Object SecurityTokenAttachmentMode Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public sealed class SecurityTokenAttachmentMode : Enum Remarks This enumeration specifies the signing and encrypting relationships between a message and its signature. Fields Endorsing Declaration public const SecurityTokenAttachmentMode Endorsing Field Value Type Description SecurityTokenAttachmentMode Signed Declaration public const SecurityTokenAttachmentMode Signed Field Value Type Description SecurityTokenAttachmentMode SignedEncrypted Declaration public const SecurityTokenAttachmentMode SignedEncrypted Field Value Type Description SecurityTokenAttachmentMode SignedEndorsing Declaration public const SecurityTokenAttachmentMode SignedEndorsing Field Value Type Description SecurityTokenAttachmentMode value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.Security.SecurityTokenSpecification.html": {
    "href": "api-corewcf/CoreWCF.Security.SecurityTokenSpecification.html",
    "title": "Class SecurityTokenSpecification",
    "keywords": "Class SecurityTokenSpecification Represents a security token and its authorization policies. Inheritance Object SecurityTokenSpecification SupportingTokenSpecification Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public class SecurityTokenSpecification : Object Remarks This class is used for primary and transport tokens. It contains a security token and a corresponding collection of authorization policies. Constructors SecurityTokenSpecification(SecurityToken, ReadOnlyCollection<IAuthorizationPolicy>) Declaration public SecurityTokenSpecification(SecurityToken token, ReadOnlyCollection<IAuthorizationPolicy> tokenPolicies) Parameters Type Name Description SecurityToken token ReadOnlyCollection < IAuthorizationPolicy > tokenPolicies Properties SecurityToken Declaration public SecurityToken SecurityToken { get; } Property Value Type Description SecurityToken SecurityTokenPolicies Declaration public ReadOnlyCollection<IAuthorizationPolicy> SecurityTokenPolicies { get; } Property Value Type Description ReadOnlyCollection < IAuthorizationPolicy >"
  },
  "api-corewcf/CoreWCF.Security.SecurityVersion.html": {
    "href": "api-corewcf/CoreWCF.Security.SecurityVersion.html",
    "title": "Class SecurityVersion",
    "keywords": "Class SecurityVersion Contains the set of supported WS-Security versions. This is an abstract class. Inheritance Object SecurityVersion Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public abstract class SecurityVersion : Object Remarks To be added. Properties WSSecurity10 Declaration public static SecurityVersion WSSecurity10 { get; } Property Value Type Description SecurityVersion WSSecurity11 Declaration public static SecurityVersion WSSecurity11 { get; } Property Value Type Description SecurityVersion"
  },
  "api-corewcf/CoreWCF.Security.SspiSecurityTokenProvider.html": {
    "href": "api-corewcf/CoreWCF.Security.SspiSecurityTokenProvider.html",
    "title": "Class SspiSecurityTokenProvider",
    "keywords": "Class SspiSecurityTokenProvider Represents a security token provider that provides an SSPI security token. Inheritance Object SecurityTokenProvider SspiSecurityTokenProvider Inherited Members SecurityTokenProvider.GetToken(TimeSpan) SecurityTokenProvider.GetTokenAsync(CancellationToken) SecurityTokenProvider.RenewToken(TimeSpan, SecurityToken) SecurityTokenProvider.RenewTokenAsync(SecurityToken, TimeSpan) SecurityTokenProvider.CancelToken(TimeSpan, SecurityToken) SecurityTokenProvider.CancelTokenAsync(SecurityToken, TimeSpan) SecurityTokenProvider.RenewTokenCore(TimeSpan, SecurityToken) SecurityTokenProvider.CancelTokenCore(TimeSpan, SecurityToken) SecurityTokenProvider.GetTokenCoreAsync(CancellationToken) SecurityTokenProvider.RenewTokenCoreAsync(SecurityToken, TimeSpan) SecurityTokenProvider.CancelTokenCoreAsync(SecurityToken, TimeSpan) SecurityTokenProvider.SupportsTokenRenewal SecurityTokenProvider.SupportsTokenCancellation Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public class SspiSecurityTokenProvider : SecurityTokenProvider Remarks The SSPI security token is not capable of any cryptographic operations, but contains only the settings needed for Windows authentication. Constructors SspiSecurityTokenProvider(NetworkCredential, Boolean, Boolean) Declaration public SspiSecurityTokenProvider(NetworkCredential credential, bool extractGroupsForWindowsAccounts, bool allowUnauthenticatedCallers) Parameters Type Name Description NetworkCredential credential Boolean extractGroupsForWindowsAccounts Boolean allowUnauthenticatedCallers SspiSecurityTokenProvider(NetworkCredential, Boolean, TokenImpersonationLevel) Declaration public SspiSecurityTokenProvider(NetworkCredential credential, bool allowNtlm, TokenImpersonationLevel impersonationLevel) Parameters Type Name Description NetworkCredential credential Boolean allowNtlm TokenImpersonationLevel impersonationLevel Methods GetTokenCore(TimeSpan) Declaration protected override SecurityToken GetTokenCore(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout Returns Type Description SecurityToken Overrides SecurityTokenProvider.GetTokenCore(TimeSpan)"
  },
  "api-corewcf/CoreWCF.Security.SupportingTokenAuthenticatorSpecification.html": {
    "href": "api-corewcf/CoreWCF.Security.SupportingTokenAuthenticatorSpecification.html",
    "title": "Class SupportingTokenAuthenticatorSpecification",
    "keywords": "Class SupportingTokenAuthenticatorSpecification Inheritance Object SupportingTokenAuthenticatorSpecification Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public class SupportingTokenAuthenticatorSpecification : Object Constructors SupportingTokenAuthenticatorSpecification(SecurityTokenAuthenticator, SecurityTokenResolver, SecurityTokenAttachmentMode, SecurityTokenParameters) Declaration public SupportingTokenAuthenticatorSpecification(SecurityTokenAuthenticator tokenAuthenticator, SecurityTokenResolver securityTokenResolver, SecurityTokenAttachmentMode attachmentMode, SecurityTokenParameters tokenParameters) Parameters Type Name Description SecurityTokenAuthenticator tokenAuthenticator SecurityTokenResolver securityTokenResolver SecurityTokenAttachmentMode attachmentMode SecurityTokenParameters tokenParameters Properties SecurityTokenAttachmentMode Declaration public SecurityTokenAttachmentMode SecurityTokenAttachmentMode { get; } Property Value Type Description SecurityTokenAttachmentMode TokenAuthenticator Declaration public SecurityTokenAuthenticator TokenAuthenticator { get; } Property Value Type Description SecurityTokenAuthenticator TokenParameters Declaration public SecurityTokenParameters TokenParameters { get; } Property Value Type Description SecurityTokenParameters TokenResolver Declaration public SecurityTokenResolver TokenResolver { get; } Property Value Type Description SecurityTokenResolver"
  },
  "api-corewcf/CoreWCF.Security.SupportingTokenProviderSpecification.html": {
    "href": "api-corewcf/CoreWCF.Security.SupportingTokenProviderSpecification.html",
    "title": "Class SupportingTokenProviderSpecification",
    "keywords": "Class SupportingTokenProviderSpecification Inheritance Object SupportingTokenProviderSpecification Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public class SupportingTokenProviderSpecification : Object Constructors SupportingTokenProviderSpecification(SecurityTokenProvider, SecurityTokenAttachmentMode, SecurityTokenParameters) Declaration public SupportingTokenProviderSpecification(SecurityTokenProvider tokenProvider, SecurityTokenAttachmentMode attachmentMode, SecurityTokenParameters tokenParameters) Parameters Type Name Description SecurityTokenProvider tokenProvider SecurityTokenAttachmentMode attachmentMode SecurityTokenParameters tokenParameters Properties SecurityTokenAttachmentMode Declaration public SecurityTokenAttachmentMode SecurityTokenAttachmentMode { get; } Property Value Type Description SecurityTokenAttachmentMode TokenParameters Declaration public SecurityTokenParameters TokenParameters { get; } Property Value Type Description SecurityTokenParameters TokenProvider Declaration public SecurityTokenProvider TokenProvider { get; } Property Value Type Description SecurityTokenProvider"
  },
  "api-corewcf/CoreWCF.Security.SupportingTokenSpecification.html": {
    "href": "api-corewcf/CoreWCF.Security.SupportingTokenSpecification.html",
    "title": "Class SupportingTokenSpecification",
    "keywords": "Class SupportingTokenSpecification Represents a supporting security token and its authorization policies. Inheritance Object SecurityTokenSpecification SupportingTokenSpecification Inherited Members SecurityTokenSpecification.SecurityToken SecurityTokenSpecification.SecurityTokenPolicies Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public class SupportingTokenSpecification : SecurityTokenSpecification Remarks Supporting tokens augment the claims provided by the token associated with the message signature. There are 4 different kinds of supporting tokens, and the <xref:CoreWCF.Security.SupportingTokenSpecification.SecurityTokenAttachmentMode%2A> enumeration specifies which kind this instance is. Constructors SupportingTokenSpecification(SecurityToken, ReadOnlyCollection<IAuthorizationPolicy>, SecurityTokenAttachmentMode) Declaration public SupportingTokenSpecification(SecurityToken token, ReadOnlyCollection<IAuthorizationPolicy> tokenPolicies, SecurityTokenAttachmentMode attachmentMode) Parameters Type Name Description SecurityToken token ReadOnlyCollection < IAuthorizationPolicy > tokenPolicies SecurityTokenAttachmentMode attachmentMode SupportingTokenSpecification(SecurityToken, ReadOnlyCollection<IAuthorizationPolicy>, SecurityTokenAttachmentMode, SecurityTokenParameters) Declaration public SupportingTokenSpecification(SecurityToken token, ReadOnlyCollection<IAuthorizationPolicy> tokenPolicies, SecurityTokenAttachmentMode attachmentMode, SecurityTokenParameters tokenParameters) Parameters Type Name Description SecurityToken token ReadOnlyCollection < IAuthorizationPolicy > tokenPolicies SecurityTokenAttachmentMode attachmentMode SecurityTokenParameters tokenParameters Properties SecurityTokenAttachmentMode Declaration public SecurityTokenAttachmentMode SecurityTokenAttachmentMode { get; } Property Value Type Description SecurityTokenAttachmentMode"
  },
  "api-corewcf/CoreWCF.Security.Tokens.BinarySecretSecurityToken.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.BinarySecretSecurityToken.html",
    "title": "Class BinarySecretSecurityToken",
    "keywords": "Class BinarySecretSecurityToken Represents a binary secret security token. Inheritance Object SecurityToken BinarySecretSecurityToken Inherited Members SecurityToken.CanCreateKeyIdentifierClause<T>() SecurityToken.CreateKeyIdentifierClause<T>() SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause) SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause) Namespace : CoreWCF.Security.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class BinarySecretSecurityToken : SecurityToken Remarks To be added. Constructors BinarySecretSecurityToken(Byte[]) Declaration public BinarySecretSecurityToken(byte[] key) Parameters Type Name Description Byte [] key BinarySecretSecurityToken(Int32) Declaration public BinarySecretSecurityToken(int keySizeInBits) Parameters Type Name Description Int32 keySizeInBits BinarySecretSecurityToken(String, Byte[]) Declaration public BinarySecretSecurityToken(string id, byte[] key) Parameters Type Name Description String id Byte [] key BinarySecretSecurityToken(String, Byte[], Boolean) Declaration protected BinarySecretSecurityToken(string id, byte[] key, bool allowCrypto) Parameters Type Name Description String id Byte [] key Boolean allowCrypto BinarySecretSecurityToken(String, Int32) Declaration public BinarySecretSecurityToken(string id, int keySizeInBits) Parameters Type Name Description String id Int32 keySizeInBits BinarySecretSecurityToken(String, Int32, Boolean) Declaration protected BinarySecretSecurityToken(string id, int keySizeInBits, bool allowCrypto) Parameters Type Name Description String id Int32 keySizeInBits Boolean allowCrypto Properties Id Declaration public override string Id { get; } Property Value Type Description String Overrides SecurityToken.Id KeySize Declaration public int KeySize { get; } Property Value Type Description Int32 SecurityKeys Declaration public override ReadOnlyCollection<SecurityKey> SecurityKeys { get; } Property Value Type Description ReadOnlyCollection < SecurityKey > Overrides SecurityToken.SecurityKeys ValidFrom Declaration public override DateTime ValidFrom { get; } Property Value Type Description DateTime Overrides SecurityToken.ValidFrom ValidTo Declaration public override DateTime ValidTo { get; } Property Value Type Description DateTime Overrides SecurityToken.ValidTo Methods GetKeyBytes() Declaration public byte[] GetKeyBytes() Returns Type Description Byte []"
  },
  "api-corewcf/CoreWCF.Security.Tokens.ClaimTypeRequirement.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.ClaimTypeRequirement.html",
    "title": "Class ClaimTypeRequirement",
    "keywords": "Class ClaimTypeRequirement Specifies the types of required and optional claims expected to appear in the federated credential. Inheritance Object ClaimTypeRequirement Namespace : CoreWCF.Security.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class ClaimTypeRequirement : Object Remarks In a federated scenario, services state the requirements on incoming credentials. For example, the incoming credentials must possess a certain set of claim types. This requirement is manifested in a security policy. When a client requests a security token from a security token service (for example, CardSpace), it puts the requirements into a token request so that the security token service can issue the security token that satisfies the requirements accordingly. Constructors ClaimTypeRequirement(String) Declaration public ClaimTypeRequirement(string claimType) Parameters Type Name Description String claimType ClaimTypeRequirement(String, Boolean) Declaration public ClaimTypeRequirement(string claimType, bool isOptional) Parameters Type Name Description String claimType Boolean isOptional Properties ClaimType Declaration public string ClaimType { get; } Property Value Type Description String IsOptional Declaration public bool IsOptional { get; } Property Value Type Description Boolean"
  },
  "api-corewcf/CoreWCF.Security.Tokens.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.html",
    "title": "Namespace CoreWCF.Security.Tokens",
    "keywords": "Namespace CoreWCF.Security.Tokens Classes BinarySecretSecurityToken Represents a binary secret security token. ClaimTypeRequirement Specifies the types of required and optional claims expected to appear in the federated credential. IssuedSecurityTokenHandler This delegate points to a method that when implemented will be called by the Authenticators before the token is issued to the client. IssuedSecurityTokenParameters Represents the parameters for a security token issued in a Federated security scenario. RecipientServiceModelSecurityTokenRequirement Specifies security property requirements specific to the listener service in the Windows Communication Foundation (WCF). RenewedSecurityTokenHandler The delegate when implemented is called before a renewed token is returned to the client. SecureConversationSecurityTokenParameters Represents the parameters for a secure conversation security token. SecurityContextSecurityToken Represents the token defined by the WS-SecureConversation specification. SecurityContextSecurityTokenAuthenticator Validates tokens and extracts claims. SecurityContextSecurityTokenResolver Resolves security context tokens. SecurityTokenInclusionMode A list of token inclusion requirements for messages. SecurityTokenParameters Specifies an class that when implemented represents security token parameters. SecurityTokenReferenceStyle This enumeration sets the desired referencing style that is used to generate security token references (STR) to the security tokens from the signature and encryption elements in the message. ServiceModelSecurityTokenRequirement An abstract class that when implemented specifies security property requirements of the token being requested or authenticated that are specific to Windows Communication Foundation (WCF). The security token manager constructs security token providers and security token authenticators that are used by the WCF security processor based on the token requirement. SslSecurityTokenParameters Represents the parameters for an SSL security token that is obtained when doing the SOAP-level SSL protocol with the server. SspiSecurityToken Represents an SSPI security token. SspiSecurityTokenParameters Represents the parameters for an SSPI security token that is obtained during the SOAP-level SPNEGO protocol with the server. SupportingTokenParameters Represents the parameters for supporting security tokens required by the security binding element. UserNameSecurityTokenParameters Represents the parameters for a user name security token. WrappedKeySecurityToken Represents a security token whose key is wrapped inside another token. X509KeyIdentifierClauseType An enumeration listing the possible types of X.509 key identifier clauses. X509SecurityTokenParameters Represents the parameters for an X.509 security token. Interfaces IIssuanceSecurityTokenAuthenticator Specifies the contract that should be implemented by a custom security token authenticator that issues tokens to the client. ISecurityContextSecurityTokenCache When implemented, this interface specifies a contract for a security context token cache."
  },
  "api-corewcf/CoreWCF.Security.Tokens.IIssuanceSecurityTokenAuthenticator.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.IIssuanceSecurityTokenAuthenticator.html",
    "title": "Interface IIssuanceSecurityTokenAuthenticator",
    "keywords": "Interface IIssuanceSecurityTokenAuthenticator Specifies the contract that should be implemented by a custom security token authenticator that issues tokens to the client. Namespace : CoreWCF.Security.Tokens Assembly : CoreWCF.Primitives.dll Syntax public interface IIssuanceSecurityTokenAuthenticator Remarks The token authenticators used by WCF for issuing SSLNEGO/SPNEGO SecurityContextToken s or SecureConversation-based SecurityContextToken s are IIssuanceSecurityTokenAuthenticator s. Properties IssuedSecurityTokenHandler Declaration IssuedSecurityTokenHandler IssuedSecurityTokenHandler { get; set; } Property Value Type Description IssuedSecurityTokenHandler RenewedSecurityTokenHandler Declaration RenewedSecurityTokenHandler RenewedSecurityTokenHandler { get; set; } Property Value Type Description RenewedSecurityTokenHandler"
  },
  "api-corewcf/CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.ISecurityContextSecurityTokenCache.html",
    "title": "Interface ISecurityContextSecurityTokenCache",
    "keywords": "Interface ISecurityContextSecurityTokenCache When implemented, this interface specifies a contract for a security context token cache. Namespace : CoreWCF.Security.Tokens Assembly : CoreWCF.Primitives.dll Syntax public interface ISecurityContextSecurityTokenCache Remarks To be added. Methods AddContext(SecurityContextSecurityToken) Declaration void AddContext(SecurityContextSecurityToken token) Parameters Type Name Description SecurityContextSecurityToken token ClearContexts() Declaration void ClearContexts() GetAllContexts(UniqueId) Declaration Collection<SecurityContextSecurityToken> GetAllContexts(UniqueId contextId) Parameters Type Name Description UniqueId contextId Returns Type Description Collection < SecurityContextSecurityToken > GetContext(UniqueId, UniqueId) Declaration SecurityContextSecurityToken GetContext(UniqueId contextId, UniqueId generation) Parameters Type Name Description UniqueId contextId UniqueId generation Returns Type Description SecurityContextSecurityToken RemoveAllContexts(UniqueId) Declaration void RemoveAllContexts(UniqueId contextId) Parameters Type Name Description UniqueId contextId RemoveContext(UniqueId, UniqueId) Declaration void RemoveContext(UniqueId contextId, UniqueId generation) Parameters Type Name Description UniqueId contextId UniqueId generation TryAddContext(SecurityContextSecurityToken) Declaration bool TryAddContext(SecurityContextSecurityToken token) Parameters Type Name Description SecurityContextSecurityToken token Returns Type Description Boolean UpdateContextCachingTime(SecurityContextSecurityToken, DateTime) Declaration void UpdateContextCachingTime(SecurityContextSecurityToken context, DateTime expirationTime) Parameters Type Name Description SecurityContextSecurityToken context DateTime expirationTime"
  },
  "api-corewcf/CoreWCF.Security.Tokens.IssuedSecurityTokenHandler.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.IssuedSecurityTokenHandler.html",
    "title": "Class IssuedSecurityTokenHandler",
    "keywords": "Class IssuedSecurityTokenHandler This delegate points to a method that when implemented will be called by the Authenticators before the token is issued to the client. Inheritance Object IssuedSecurityTokenHandler Namespace : CoreWCF.Security.Tokens Assembly : CoreWCF.Primitives.dll Syntax public sealed class IssuedSecurityTokenHandler : MulticastDelegate Remarks To be added. Constructors IssuedSecurityTokenHandler(Object, IntPtr) Declaration public IssuedSecurityTokenHandler(object object, IntPtr method) Parameters Type Name Description Object object IntPtr method Methods BeginInvoke(SecurityToken, EndpointAddress, AsyncCallback, Object) Declaration public virtual IAsyncResult BeginInvoke(SecurityToken issuedToken, EndpointAddress tokenRequestor, AsyncCallback callback, object object) Parameters Type Name Description SecurityToken issuedToken EndpointAddress tokenRequestor AsyncCallback callback Object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(SecurityToken, EndpointAddress) Declaration public virtual void Invoke(SecurityToken issuedToken, EndpointAddress tokenRequestor) Parameters Type Name Description SecurityToken issuedToken EndpointAddress tokenRequestor"
  },
  "api-corewcf/CoreWCF.Security.Tokens.IssuedSecurityTokenParameters.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.IssuedSecurityTokenParameters.html",
    "title": "Class IssuedSecurityTokenParameters",
    "keywords": "Class IssuedSecurityTokenParameters Represents the parameters for a security token issued in a Federated security scenario. Inheritance Object SecurityTokenParameters IssuedSecurityTokenParameters Inherited Members SecurityTokenParameters.Clone() SecurityTokenParameters.MatchesKeyIdentifierClause(SecurityToken, SecurityKeyIdentifierClause, SecurityTokenReferenceStyle) SecurityTokenParameters.InclusionMode SecurityTokenParameters.ReferenceStyle SecurityTokenParameters.RequireDerivedKeys Namespace : CoreWCF.Security.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class IssuedSecurityTokenParameters : SecurityTokenParameters Remarks This class is a collection of token properties and methods, and is used in creating security binding elements and tokens. Constructors IssuedSecurityTokenParameters() Declaration public IssuedSecurityTokenParameters() IssuedSecurityTokenParameters(IssuedSecurityTokenParameters) Declaration protected IssuedSecurityTokenParameters(IssuedSecurityTokenParameters other) Parameters Type Name Description IssuedSecurityTokenParameters other IssuedSecurityTokenParameters(String) Declaration public IssuedSecurityTokenParameters(string tokenType) Parameters Type Name Description String tokenType IssuedSecurityTokenParameters(String, EndpointAddress) Declaration public IssuedSecurityTokenParameters(string tokenType, EndpointAddress issuerAddress) Parameters Type Name Description String tokenType EndpointAddress issuerAddress IssuedSecurityTokenParameters(String, EndpointAddress, Binding) Declaration public IssuedSecurityTokenParameters(string tokenType, EndpointAddress issuerAddress, Binding issuerBinding) Parameters Type Name Description String tokenType EndpointAddress issuerAddress Binding issuerBinding Properties AdditionalRequestParameters Declaration public Collection<XmlElement> AdditionalRequestParameters { get; } Property Value Type Description Collection < XmlElement > ClaimTypeRequirements Declaration public Collection<ClaimTypeRequirement> ClaimTypeRequirements { get; } Property Value Type Description Collection < ClaimTypeRequirement > DefaultMessageSecurityVersion Declaration public MessageSecurityVersion DefaultMessageSecurityVersion { get; set; } Property Value Type Description MessageSecurityVersion HasAsymmetricKey Declaration protected override bool HasAsymmetricKey { get; } Property Value Type Description Boolean Overrides SecurityTokenParameters.HasAsymmetricKey IssuerAddress Declaration public EndpointAddress IssuerAddress { get; set; } Property Value Type Description EndpointAddress IssuerBinding Declaration public Binding IssuerBinding { get; set; } Property Value Type Description Binding IssuerMetadataAddress Declaration public EndpointAddress IssuerMetadataAddress { get; set; } Property Value Type Description EndpointAddress KeySize Declaration public int KeySize { get; set; } Property Value Type Description Int32 KeyType Declaration public SecurityKeyType KeyType { get; set; } Property Value Type Description SecurityKeyType SupportsClientAuthentication Declaration protected override bool SupportsClientAuthentication { get; } Property Value Type Description Boolean Overrides SecurityTokenParameters.SupportsClientAuthentication SupportsClientWindowsIdentity Declaration protected override bool SupportsClientWindowsIdentity { get; } Property Value Type Description Boolean Overrides SecurityTokenParameters.SupportsClientWindowsIdentity SupportsServerAuthentication Declaration protected override bool SupportsServerAuthentication { get; } Property Value Type Description Boolean Overrides SecurityTokenParameters.SupportsServerAuthentication TokenType Declaration public string TokenType { get; set; } Property Value Type Description String UseStrTransform Declaration public bool UseStrTransform { get; set; } Property Value Type Description Boolean Methods CloneCore() Declaration protected override SecurityTokenParameters CloneCore() Returns Type Description SecurityTokenParameters Overrides SecurityTokenParameters.CloneCore() CreateKeyIdentifierClause(SecurityToken, SecurityTokenReferenceStyle) Declaration protected override SecurityKeyIdentifierClause CreateKeyIdentifierClause(SecurityToken token, SecurityTokenReferenceStyle referenceStyle) Parameters Type Name Description SecurityToken token SecurityTokenReferenceStyle referenceStyle Returns Type Description SecurityKeyIdentifierClause Overrides SecurityTokenParameters.CreateKeyIdentifierClause(SecurityToken, SecurityTokenReferenceStyle) CreateRequestParameters(MessageSecurityVersion, SecurityTokenSerializer) Declaration public Collection<XmlElement> CreateRequestParameters(MessageSecurityVersion messageSecurityVersion, SecurityTokenSerializer securityTokenSerializer) Parameters Type Name Description MessageSecurityVersion messageSecurityVersion SecurityTokenSerializer securityTokenSerializer Returns Type Description Collection < XmlElement > InitializeSecurityTokenRequirement(SecurityTokenRequirement) Declaration protected override void InitializeSecurityTokenRequirement(SecurityTokenRequirement requirement) Parameters Type Name Description SecurityTokenRequirement requirement Overrides SecurityTokenParameters.InitializeSecurityTokenRequirement(SecurityTokenRequirement) ToString() Declaration public override string ToString() Returns Type Description String Overrides SecurityTokenParameters.ToString()"
  },
  "api-corewcf/CoreWCF.Security.Tokens.RecipientServiceModelSecurityTokenRequirement.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.RecipientServiceModelSecurityTokenRequirement.html",
    "title": "Class RecipientServiceModelSecurityTokenRequirement",
    "keywords": "Class RecipientServiceModelSecurityTokenRequirement Specifies security property requirements specific to the listener service in the Windows Communication Foundation (WCF). Inheritance Object SecurityTokenRequirement ServiceModelSecurityTokenRequirement RecipientServiceModelSecurityTokenRequirement Inherited Members ServiceModelSecurityTokenRequirement.Namespace ServiceModelSecurityTokenRequirement.SecurityAlgorithmSuiteProperty ServiceModelSecurityTokenRequirement.SecurityBindingElementProperty ServiceModelSecurityTokenRequirement.IssuerAddressProperty ServiceModelSecurityTokenRequirement.IssuerBindingProperty ServiceModelSecurityTokenRequirement.SecureConversationSecurityBindingElementProperty ServiceModelSecurityTokenRequirement.SupportSecurityContextCancellationProperty ServiceModelSecurityTokenRequirement.MessageSecurityVersionProperty ServiceModelSecurityTokenRequirement.IssuerBindingContextProperty ServiceModelSecurityTokenRequirement.TransportSchemeProperty ServiceModelSecurityTokenRequirement.IsInitiatorProperty ServiceModelSecurityTokenRequirement.TargetAddressProperty ServiceModelSecurityTokenRequirement.ViaProperty ServiceModelSecurityTokenRequirement.ListenUriProperty ServiceModelSecurityTokenRequirement.AuditLogLocationProperty ServiceModelSecurityTokenRequirement.SuppressAuditFailureProperty ServiceModelSecurityTokenRequirement.MessageAuthenticationAuditLevelProperty ServiceModelSecurityTokenRequirement.IsOutOfBandTokenProperty ServiceModelSecurityTokenRequirement.PreferSslCertificateAuthenticatorProperty ServiceModelSecurityTokenRequirement.SupportingTokenAttachmentModeProperty ServiceModelSecurityTokenRequirement.MessageDirectionProperty ServiceModelSecurityTokenRequirement.HttpAuthenticationSchemeProperty ServiceModelSecurityTokenRequirement.IssuedSecurityTokenParametersProperty ServiceModelSecurityTokenRequirement.PrivacyNoticeUriProperty ServiceModelSecurityTokenRequirement.PrivacyNoticeVersionProperty ServiceModelSecurityTokenRequirement.DuplexClientLocalAddressProperty ServiceModelSecurityTokenRequirement.EndpointFilterTableProperty ServiceModelSecurityTokenRequirement.ChannelParametersCollectionProperty ServiceModelSecurityTokenRequirement.ExtendedProtectionPolicy ServiceModelSecurityTokenRequirement.IsInitiator ServiceModelSecurityTokenRequirement.SecurityAlgorithmSuite ServiceModelSecurityTokenRequirement.SecurityBindingElement ServiceModelSecurityTokenRequirement.IssuerAddress ServiceModelSecurityTokenRequirement.IssuerBinding ServiceModelSecurityTokenRequirement.SecureConversationSecurityBindingElement ServiceModelSecurityTokenRequirement.MessageSecurityVersion ServiceModelSecurityTokenRequirement.TransportScheme SecurityTokenRequirement.GetProperty<TValue>(String) SecurityTokenRequirement.TryGetProperty<TValue>(String, TValue) SecurityTokenRequirement.TokenTypeProperty SecurityTokenRequirement.KeyUsageProperty SecurityTokenRequirement.KeyTypeProperty SecurityTokenRequirement.KeySizeProperty SecurityTokenRequirement.RequireCryptographicTokenProperty SecurityTokenRequirement.PeerAuthenticationMode SecurityTokenRequirement.IsOptionalTokenProperty SecurityTokenRequirement.TokenType SecurityTokenRequirement.RequireCryptographicToken SecurityTokenRequirement.KeySize SecurityTokenRequirement.Properties Namespace : CoreWCF.Security.Tokens Assembly : CoreWCF.Primitives.dll Syntax public sealed class RecipientServiceModelSecurityTokenRequirement : ServiceModelSecurityTokenRequirement Remarks Token requirement classes are used by a security token manager to specify what is required of a security token, such as the key size, key type, and how the key can be used. When a security token can be identified that matches the specified criteria, a security token provider and security token authenticator can be created. This token requirement class specifies recipient-related requirements. Constructors RecipientServiceModelSecurityTokenRequirement() Declaration public RecipientServiceModelSecurityTokenRequirement() Properties ListenUri Declaration public Uri ListenUri { get; set; } Property Value Type Description Uri Methods ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api-corewcf/CoreWCF.Security.Tokens.RenewedSecurityTokenHandler.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.RenewedSecurityTokenHandler.html",
    "title": "Class RenewedSecurityTokenHandler",
    "keywords": "Class RenewedSecurityTokenHandler The delegate when implemented is called before a renewed token is returned to the client. Inheritance Object RenewedSecurityTokenHandler Namespace : CoreWCF.Security.Tokens Assembly : CoreWCF.Primitives.dll Syntax public sealed class RenewedSecurityTokenHandler : MulticastDelegate Remarks The client makes renewal requests for a token when the token is about to expire. The delegate provides an extensibility point to inspect the token being renewed. Constructors RenewedSecurityTokenHandler(Object, IntPtr) Declaration public RenewedSecurityTokenHandler(object object, IntPtr method) Parameters Type Name Description Object object IntPtr method Methods BeginInvoke(SecurityToken, SecurityToken, AsyncCallback, Object) Declaration public virtual IAsyncResult BeginInvoke(SecurityToken newSecurityToken, SecurityToken oldSecurityToken, AsyncCallback callback, object object) Parameters Type Name Description SecurityToken newSecurityToken SecurityToken oldSecurityToken AsyncCallback callback Object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual void EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Invoke(SecurityToken, SecurityToken) Declaration public virtual void Invoke(SecurityToken newSecurityToken, SecurityToken oldSecurityToken) Parameters Type Name Description SecurityToken newSecurityToken SecurityToken oldSecurityToken"
  },
  "api-corewcf/CoreWCF.Security.Tokens.SecureConversationSecurityTokenParameters.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.SecureConversationSecurityTokenParameters.html",
    "title": "Class SecureConversationSecurityTokenParameters",
    "keywords": "Class SecureConversationSecurityTokenParameters Represents the parameters for a secure conversation security token. Inheritance Object SecurityTokenParameters SecureConversationSecurityTokenParameters Inherited Members SecurityTokenParameters.Clone() SecurityTokenParameters.MatchesKeyIdentifierClause(SecurityToken, SecurityKeyIdentifierClause, SecurityTokenReferenceStyle) SecurityTokenParameters.InclusionMode SecurityTokenParameters.ReferenceStyle SecurityTokenParameters.RequireDerivedKeys Namespace : CoreWCF.Security.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SecureConversationSecurityTokenParameters : SecurityTokenParameters Remarks This class is a collection of token properties and methods, and is used in creating security binding elements and tokens. Secure conversations involve the exchange of multiple messages, and use a security context to ensure security. A security context is shared among the communicating parties for the lifetime of a communications session. Constructors SecureConversationSecurityTokenParameters() Declaration public SecureConversationSecurityTokenParameters() SecureConversationSecurityTokenParameters(SecurityBindingElement) Declaration public SecureConversationSecurityTokenParameters(SecurityBindingElement bootstrapSecurityBindingElement) Parameters Type Name Description SecurityBindingElement bootstrapSecurityBindingElement SecureConversationSecurityTokenParameters(SecurityBindingElement, Boolean) Declaration public SecureConversationSecurityTokenParameters(SecurityBindingElement bootstrapSecurityBindingElement, bool requireCancellation) Parameters Type Name Description SecurityBindingElement bootstrapSecurityBindingElement Boolean requireCancellation SecureConversationSecurityTokenParameters(SecurityBindingElement, Boolean, ChannelProtectionRequirements) Declaration public SecureConversationSecurityTokenParameters(SecurityBindingElement bootstrapSecurityBindingElement, bool requireCancellation, ChannelProtectionRequirements bootstrapProtectionRequirements) Parameters Type Name Description SecurityBindingElement bootstrapSecurityBindingElement Boolean requireCancellation ChannelProtectionRequirements bootstrapProtectionRequirements SecureConversationSecurityTokenParameters(SecurityBindingElement, Boolean, Boolean) Declaration public SecureConversationSecurityTokenParameters(SecurityBindingElement bootstrapSecurityBindingElement, bool requireCancellation, bool canRenewSession) Parameters Type Name Description SecurityBindingElement bootstrapSecurityBindingElement Boolean requireCancellation Boolean canRenewSession SecureConversationSecurityTokenParameters(SecurityBindingElement, Boolean, Boolean, ChannelProtectionRequirements) Declaration public SecureConversationSecurityTokenParameters(SecurityBindingElement bootstrapSecurityBindingElement, bool requireCancellation, bool canRenewSession, ChannelProtectionRequirements bootstrapProtectionRequirements) Parameters Type Name Description SecurityBindingElement bootstrapSecurityBindingElement Boolean requireCancellation Boolean canRenewSession ChannelProtectionRequirements bootstrapProtectionRequirements SecureConversationSecurityTokenParameters(SecureConversationSecurityTokenParameters) Declaration protected SecureConversationSecurityTokenParameters(SecureConversationSecurityTokenParameters other) Parameters Type Name Description SecureConversationSecurityTokenParameters other Properties BootstrapProtectionRequirements Declaration public ChannelProtectionRequirements BootstrapProtectionRequirements { get; } Property Value Type Description ChannelProtectionRequirements BootstrapSecurityBindingElement Declaration public SecurityBindingElement BootstrapSecurityBindingElement { get; set; } Property Value Type Description SecurityBindingElement CanRenewSession Declaration public bool CanRenewSession { get; set; } Property Value Type Description Boolean HasAsymmetricKey Declaration protected override bool HasAsymmetricKey { get; } Property Value Type Description Boolean Overrides SecurityTokenParameters.HasAsymmetricKey RequireCancellation Declaration public bool RequireCancellation { get; set; } Property Value Type Description Boolean SupportsClientAuthentication Declaration protected override bool SupportsClientAuthentication { get; } Property Value Type Description Boolean Overrides SecurityTokenParameters.SupportsClientAuthentication SupportsClientWindowsIdentity Declaration protected override bool SupportsClientWindowsIdentity { get; } Property Value Type Description Boolean Overrides SecurityTokenParameters.SupportsClientWindowsIdentity SupportsServerAuthentication Declaration protected override bool SupportsServerAuthentication { get; } Property Value Type Description Boolean Overrides SecurityTokenParameters.SupportsServerAuthentication Methods CloneCore() Declaration protected override SecurityTokenParameters CloneCore() Returns Type Description SecurityTokenParameters Overrides SecurityTokenParameters.CloneCore() CreateKeyIdentifierClause(SecurityToken, SecurityTokenReferenceStyle) Declaration protected override SecurityKeyIdentifierClause CreateKeyIdentifierClause(SecurityToken token, SecurityTokenReferenceStyle referenceStyle) Parameters Type Name Description SecurityToken token SecurityTokenReferenceStyle referenceStyle Returns Type Description SecurityKeyIdentifierClause Overrides SecurityTokenParameters.CreateKeyIdentifierClause(SecurityToken, SecurityTokenReferenceStyle) InitializeSecurityTokenRequirement(SecurityTokenRequirement) Declaration protected override void InitializeSecurityTokenRequirement(SecurityTokenRequirement requirement) Parameters Type Name Description SecurityTokenRequirement requirement Overrides SecurityTokenParameters.InitializeSecurityTokenRequirement(SecurityTokenRequirement) ToString() Declaration public override string ToString() Returns Type Description String Overrides SecurityTokenParameters.ToString()"
  },
  "api-corewcf/CoreWCF.Security.Tokens.SecurityContextSecurityToken.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.SecurityContextSecurityToken.html",
    "title": "Class SecurityContextSecurityToken",
    "keywords": "Class SecurityContextSecurityToken Represents the token defined by the WS-SecureConversation specification. Inheritance Object SecurityToken SecurityContextSecurityToken Implements IDisposable Inherited Members SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause) Namespace : CoreWCF.Security.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SecurityContextSecurityToken : SecurityToken Remarks An instance of this class contains key material along with authentication information that represents the client. The user selects the particular cryptographic algorithm to use with it. Constructors SecurityContextSecurityToken(UniqueId, Byte[], DateTime, DateTime) Declaration public SecurityContextSecurityToken(UniqueId contextId, byte[] key, DateTime validFrom, DateTime validTo) Parameters Type Name Description UniqueId contextId Byte [] key DateTime validFrom DateTime validTo SecurityContextSecurityToken(UniqueId, String, Byte[], DateTime, DateTime) Declaration public SecurityContextSecurityToken(UniqueId contextId, string id, byte[] key, DateTime validFrom, DateTime validTo) Parameters Type Name Description UniqueId contextId String id Byte [] key DateTime validFrom DateTime validTo SecurityContextSecurityToken(UniqueId, String, Byte[], DateTime, DateTime, ReadOnlyCollection<IAuthorizationPolicy>) Declaration public SecurityContextSecurityToken(UniqueId contextId, string id, byte[] key, DateTime validFrom, DateTime validTo, ReadOnlyCollection<IAuthorizationPolicy> authorizationPolicies) Parameters Type Name Description UniqueId contextId String id Byte [] key DateTime validFrom DateTime validTo ReadOnlyCollection < IAuthorizationPolicy > authorizationPolicies SecurityContextSecurityToken(UniqueId, String, Byte[], DateTime, DateTime, UniqueId, DateTime, DateTime, ReadOnlyCollection<IAuthorizationPolicy>) Declaration public SecurityContextSecurityToken(UniqueId contextId, string id, byte[] key, DateTime validFrom, DateTime validTo, UniqueId keyGeneration, DateTime keyEffectiveTime, DateTime keyExpirationTime, ReadOnlyCollection<IAuthorizationPolicy> authorizationPolicies) Parameters Type Name Description UniqueId contextId String id Byte [] key DateTime validFrom DateTime validTo UniqueId keyGeneration DateTime keyEffectiveTime DateTime keyExpirationTime ReadOnlyCollection < IAuthorizationPolicy > authorizationPolicies Properties AuthorizationPolicies Declaration public ReadOnlyCollection<IAuthorizationPolicy> AuthorizationPolicies { get; } Property Value Type Description ReadOnlyCollection < IAuthorizationPolicy > BootstrapMessageProperty Gets or Sets the SecurityMessageProperty extracted from the Bootstrap message. This will contain the original tokens that the client used to Authenticate with the service. By default, this is turned off. To turn this feature on, add a custom ServiceCredentialsSecurityTokenManager and override CreateSecurityTokenManager. Create the SecurityContextToken Authenticator by calling ServiceCredentialsSecurityTokenManager.CreateSecureConversationTokenAuthenticator with 'preserveBootstrapTokens' parameter to true. If there are any UserNameSecurityToken in the bootstrap message, the password in these tokens will be removed. When 'Cookie' mode SCT is enabled the BootstrapMessageProperty is not preserved in the Cookie. To preserve the bootstrap tokens in the CookieMode case write a custom Serializer and serialize the property as part of the cookie. Declaration public SecurityMessageProperty BootstrapMessageProperty { get; set; } Property Value Type Description SecurityMessageProperty ContextId Declaration public UniqueId ContextId { get; } Property Value Type Description UniqueId Id Declaration public override string Id { get; } Property Value Type Description String Overrides SecurityToken.Id IsCookieMode This is set by the issuer when creating the SCT to be sent in the RSTR The SecurityContextTokenManager examines this property to determine how to write out the SCT This field is set to true when the issuer reads in a cookie mode SCT Declaration public bool IsCookieMode { get; } Property Value Type Description Boolean KeyEffectiveTime Declaration public DateTime KeyEffectiveTime { get; } Property Value Type Description DateTime KeyExpirationTime Declaration public DateTime KeyExpirationTime { get; } Property Value Type Description DateTime KeyGeneration Declaration public UniqueId KeyGeneration { get; } Property Value Type Description UniqueId SecurityKeys Declaration public override ReadOnlyCollection<SecurityKey> SecurityKeys { get; } Property Value Type Description ReadOnlyCollection < SecurityKey > Overrides SecurityToken.SecurityKeys ValidFrom Declaration public override DateTime ValidFrom { get; } Property Value Type Description DateTime Overrides SecurityToken.ValidFrom ValidTo Declaration public override DateTime ValidTo { get; } Property Value Type Description DateTime Overrides SecurityToken.ValidTo Methods CanCreateKeyIdentifierClause<T>() Declaration public override bool CanCreateKeyIdentifierClause<T>() where T : SecurityKeyIdentifierClause Returns Type Description Boolean Type Parameters Name Description T Overrides SecurityToken.CanCreateKeyIdentifierClause<T>() CreateKeyIdentifierClause<T>() Declaration public override T CreateKeyIdentifierClause<T>() where T : SecurityKeyIdentifierClause Returns Type Description T Type Parameters Name Description T Overrides SecurityToken.CreateKeyIdentifierClause<T>() Dispose() Declaration public void Dispose() MatchesKeyIdentifierClause(SecurityKeyIdentifierClause) Declaration public override bool MatchesKeyIdentifierClause(SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause Returns Type Description Boolean Overrides SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause) ToString() Declaration public override string ToString() Returns Type Description String Implements System.IDisposable"
  },
  "api-corewcf/CoreWCF.Security.Tokens.SecurityContextSecurityTokenAuthenticator.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.SecurityContextSecurityTokenAuthenticator.html",
    "title": "Class SecurityContextSecurityTokenAuthenticator",
    "keywords": "Class SecurityContextSecurityTokenAuthenticator Validates tokens and extracts claims. Inheritance Object SecurityTokenAuthenticator SecurityContextSecurityTokenAuthenticator Inherited Members SecurityTokenAuthenticator.CanValidateToken(SecurityToken) SecurityTokenAuthenticator.ValidateToken(SecurityToken) SecurityTokenAuthenticator.ValidateTokenAsync(SecurityToken) SecurityTokenAuthenticator.ValidateTokenCore(SecurityToken) Namespace : CoreWCF.Security.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SecurityContextSecurityTokenAuthenticator : SecurityTokenAuthenticator Remarks This authenticator validates only SecurityContextSecurityTokens. Constructors SecurityContextSecurityTokenAuthenticator() Declaration public SecurityContextSecurityTokenAuthenticator() Methods CanValidateTokenCore(SecurityToken) Declaration protected override bool CanValidateTokenCore(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description Boolean Overrides SecurityTokenAuthenticator.CanValidateTokenCore(SecurityToken) ValidateTokenCoreAsync(SecurityToken) Declaration protected override ValueTask<ReadOnlyCollection<IAuthorizationPolicy>> ValidateTokenCoreAsync(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description ValueTask < ReadOnlyCollection < IAuthorizationPolicy >> Overrides SecurityTokenAuthenticator.ValidateTokenCoreAsync(SecurityToken)"
  },
  "api-corewcf/CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.SecurityContextSecurityTokenResolver.html",
    "title": "Class SecurityContextSecurityTokenResolver",
    "keywords": "Class SecurityContextSecurityTokenResolver Resolves security context tokens. Inheritance Object SecurityTokenResolver SecurityContextSecurityTokenResolver Implements ISecurityContextSecurityTokenCache Inherited Members SecurityTokenResolver.ResolveToken(SecurityKeyIdentifier) SecurityTokenResolver.TryResolveToken(SecurityKeyIdentifier, SecurityToken) SecurityTokenResolver.ResolveToken(SecurityKeyIdentifierClause) SecurityTokenResolver.TryResolveToken(SecurityKeyIdentifierClause, SecurityToken) SecurityTokenResolver.ResolveSecurityKey(SecurityKeyIdentifierClause) SecurityTokenResolver.TryResolveSecurityKey(SecurityKeyIdentifierClause, SecurityKey) SecurityTokenResolver.CreateDefaultSecurityTokenResolver(ReadOnlyCollection<SecurityToken>, Boolean) Namespace : CoreWCF.Security.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SecurityContextSecurityTokenResolver : SecurityTokenResolver, ISecurityContextSecurityTokenCache Remarks To be added. Constructors SecurityContextSecurityTokenResolver(Int32, Boolean) Declaration public SecurityContextSecurityTokenResolver(int securityContextCacheCapacity, bool removeOldestTokensOnCacheFull) Parameters Type Name Description Int32 securityContextCacheCapacity Boolean removeOldestTokensOnCacheFull SecurityContextSecurityTokenResolver(Int32, Boolean, TimeSpan) Declaration public SecurityContextSecurityTokenResolver(int securityContextCacheCapacity, bool removeOldestTokensOnCacheFull, TimeSpan clockSkew) Parameters Type Name Description Int32 securityContextCacheCapacity Boolean removeOldestTokensOnCacheFull TimeSpan clockSkew Properties ClockSkew Declaration public TimeSpan ClockSkew { get; } Property Value Type Description TimeSpan RemoveOldestTokensOnCacheFull Declaration public bool RemoveOldestTokensOnCacheFull { get; } Property Value Type Description Boolean SecurityContextTokenCacheCapacity Declaration public int SecurityContextTokenCacheCapacity { get; } Property Value Type Description Int32 Methods AddContext(SecurityContextSecurityToken) Declaration public void AddContext(SecurityContextSecurityToken token) Parameters Type Name Description SecurityContextSecurityToken token ClearContexts() Declaration public void ClearContexts() GetAllContexts(UniqueId) Declaration public Collection<SecurityContextSecurityToken> GetAllContexts(UniqueId contextId) Parameters Type Name Description UniqueId contextId Returns Type Description Collection < SecurityContextSecurityToken > GetContext(UniqueId, UniqueId) Declaration public SecurityContextSecurityToken GetContext(UniqueId contextId, UniqueId generation) Parameters Type Name Description UniqueId contextId UniqueId generation Returns Type Description SecurityContextSecurityToken RemoveAllContexts(UniqueId) Declaration public void RemoveAllContexts(UniqueId contextId) Parameters Type Name Description UniqueId contextId RemoveContext(UniqueId, UniqueId) Declaration public void RemoveContext(UniqueId contextId, UniqueId generation) Parameters Type Name Description UniqueId contextId UniqueId generation TryAddContext(SecurityContextSecurityToken) Declaration public bool TryAddContext(SecurityContextSecurityToken token) Parameters Type Name Description SecurityContextSecurityToken token Returns Type Description Boolean TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, out SecurityKey) Declaration protected override bool TryResolveSecurityKeyCore(SecurityKeyIdentifierClause keyIdentifierClause, out SecurityKey key) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause SecurityKey key Returns Type Description Boolean Overrides SecurityTokenResolver.TryResolveSecurityKeyCore(SecurityKeyIdentifierClause, out SecurityKey) TryResolveTokenCore(SecurityKeyIdentifierClause, out SecurityToken) Declaration protected override bool TryResolveTokenCore(SecurityKeyIdentifierClause keyIdentifierClause, out SecurityToken token) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause SecurityToken token Returns Type Description Boolean Overrides SecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifierClause, out SecurityToken) TryResolveTokenCore(SecurityKeyIdentifier, out SecurityToken) Declaration protected override bool TryResolveTokenCore(SecurityKeyIdentifier keyIdentifier, out SecurityToken token) Parameters Type Name Description SecurityKeyIdentifier keyIdentifier SecurityToken token Returns Type Description Boolean Overrides SecurityTokenResolver.TryResolveTokenCore(SecurityKeyIdentifier, out SecurityToken) UpdateContextCachingTime(SecurityContextSecurityToken, DateTime) Declaration public void UpdateContextCachingTime(SecurityContextSecurityToken context, DateTime expirationTime) Parameters Type Name Description SecurityContextSecurityToken context DateTime expirationTime Implements ISecurityContextSecurityTokenCache"
  },
  "api-corewcf/CoreWCF.Security.Tokens.SecurityTokenInclusionMode.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.SecurityTokenInclusionMode.html",
    "title": "Class SecurityTokenInclusionMode",
    "keywords": "Class SecurityTokenInclusionMode A list of token inclusion requirements for messages. Inheritance Object SecurityTokenInclusionMode Namespace : CoreWCF.Security.Tokens Assembly : CoreWCF.Primitives.dll Syntax public sealed class SecurityTokenInclusionMode : Enum Remarks SecurityTokenInclusionMode` enumeration members are used as parameters in many methods of the <xref:CoreWCF.Security.Tokens.SecurityTokenParameters> class and in its derived classes when creating binding elements and certificates. Fields AlwaysToInitiator Declaration public const SecurityTokenInclusionMode AlwaysToInitiator Field Value Type Description SecurityTokenInclusionMode AlwaysToRecipient Declaration public const SecurityTokenInclusionMode AlwaysToRecipient Field Value Type Description SecurityTokenInclusionMode Never Declaration public const SecurityTokenInclusionMode Never Field Value Type Description SecurityTokenInclusionMode Once Declaration public const SecurityTokenInclusionMode Once Field Value Type Description SecurityTokenInclusionMode value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.Security.Tokens.SecurityTokenParameters.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.SecurityTokenParameters.html",
    "title": "Class SecurityTokenParameters",
    "keywords": "Class SecurityTokenParameters Specifies an class that when implemented represents security token parameters. Inheritance Object SecurityTokenParameters IssuedSecurityTokenParameters SecureConversationSecurityTokenParameters SslSecurityTokenParameters SspiSecurityTokenParameters UserNameSecurityTokenParameters X509SecurityTokenParameters Namespace : CoreWCF.Security.Tokens Assembly : CoreWCF.Primitives.dll Syntax public abstract class SecurityTokenParameters : Object Remarks Security token parameters provide information about the tokens (for example, token type, issuer, and so on) required by the security binding element. The security token parameter classes derived from this one are a collection of token properties and methods, and are used in creating different kinds of security binding elements and tokens. Not all of the properties are relevant to all derived classes. For example, the <xref:CoreWCF.Security.Tokens.SecurityTokenParameters.ReferenceStyle%2A> has no relevance in an issued token (SAML token) case. Constructors SecurityTokenParameters() Declaration protected SecurityTokenParameters() SecurityTokenParameters(SecurityTokenParameters) Declaration protected SecurityTokenParameters(SecurityTokenParameters other) Parameters Type Name Description SecurityTokenParameters other Properties HasAsymmetricKey Declaration protected abstract bool HasAsymmetricKey { get; } Property Value Type Description Boolean InclusionMode Declaration public SecurityTokenInclusionMode InclusionMode { get; set; } Property Value Type Description SecurityTokenInclusionMode ReferenceStyle Declaration public SecurityTokenReferenceStyle ReferenceStyle { get; set; } Property Value Type Description SecurityTokenReferenceStyle RequireDerivedKeys Declaration public bool RequireDerivedKeys { get; set; } Property Value Type Description Boolean SupportsClientAuthentication Declaration protected abstract bool SupportsClientAuthentication { get; } Property Value Type Description Boolean SupportsClientWindowsIdentity Declaration protected abstract bool SupportsClientWindowsIdentity { get; } Property Value Type Description Boolean SupportsServerAuthentication Declaration protected abstract bool SupportsServerAuthentication { get; } Property Value Type Description Boolean Methods Clone() Declaration public SecurityTokenParameters Clone() Returns Type Description SecurityTokenParameters CloneCore() Declaration protected abstract SecurityTokenParameters CloneCore() Returns Type Description SecurityTokenParameters CreateKeyIdentifierClause(SecurityToken, SecurityTokenReferenceStyle) Declaration protected abstract SecurityKeyIdentifierClause CreateKeyIdentifierClause(SecurityToken token, SecurityTokenReferenceStyle referenceStyle) Parameters Type Name Description SecurityToken token SecurityTokenReferenceStyle referenceStyle Returns Type Description SecurityKeyIdentifierClause InitializeSecurityTokenRequirement(SecurityTokenRequirement) Declaration protected abstract void InitializeSecurityTokenRequirement(SecurityTokenRequirement requirement) Parameters Type Name Description SecurityTokenRequirement requirement MatchesKeyIdentifierClause(SecurityToken, SecurityKeyIdentifierClause, SecurityTokenReferenceStyle) Declaration protected virtual bool MatchesKeyIdentifierClause(SecurityToken token, SecurityKeyIdentifierClause keyIdentifierClause, SecurityTokenReferenceStyle referenceStyle) Parameters Type Name Description SecurityToken token SecurityKeyIdentifierClause keyIdentifierClause SecurityTokenReferenceStyle referenceStyle Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api-corewcf/CoreWCF.Security.Tokens.SecurityTokenReferenceStyle.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.SecurityTokenReferenceStyle.html",
    "title": "Class SecurityTokenReferenceStyle",
    "keywords": "Class SecurityTokenReferenceStyle This enumeration sets the desired referencing style that is used to generate security token references (STR) to the security tokens from the signature and encryption elements in the message. Inheritance Object SecurityTokenReferenceStyle Namespace : CoreWCF.Security.Tokens Assembly : CoreWCF.Primitives.dll Syntax public sealed class SecurityTokenReferenceStyle : Enum Remarks To be added. Fields External Declaration public const SecurityTokenReferenceStyle External Field Value Type Description SecurityTokenReferenceStyle Internal Declaration public const SecurityTokenReferenceStyle Internal Field Value Type Description SecurityTokenReferenceStyle value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.Security.Tokens.ServiceModelSecurityTokenRequirement.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.ServiceModelSecurityTokenRequirement.html",
    "title": "Class ServiceModelSecurityTokenRequirement",
    "keywords": "Class ServiceModelSecurityTokenRequirement An abstract class that when implemented specifies security property requirements of the token being requested or authenticated that are specific to Windows Communication Foundation (WCF). The security token manager constructs security token providers and security token authenticators that are used by the WCF security processor based on the token requirement. Inheritance Object SecurityTokenRequirement ServiceModelSecurityTokenRequirement RecipientServiceModelSecurityTokenRequirement Inherited Members SecurityTokenRequirement.GetProperty<TValue>(String) SecurityTokenRequirement.TryGetProperty<TValue>(String, TValue) SecurityTokenRequirement.TokenTypeProperty SecurityTokenRequirement.KeyUsageProperty SecurityTokenRequirement.KeyTypeProperty SecurityTokenRequirement.KeySizeProperty SecurityTokenRequirement.RequireCryptographicTokenProperty SecurityTokenRequirement.PeerAuthenticationMode SecurityTokenRequirement.IsOptionalTokenProperty SecurityTokenRequirement.TokenType SecurityTokenRequirement.RequireCryptographicToken SecurityTokenRequirement.KeySize SecurityTokenRequirement.Properties Namespace : CoreWCF.Security.Tokens Assembly : CoreWCF.Primitives.dll Syntax public abstract class ServiceModelSecurityTokenRequirement : SecurityTokenRequirement Remarks A security token is a cryptographically signed data unit that transfers authentication and authorization information, based on a credential. The derived class is used by a security token manager to specify what is required of a security token, such as the key size, key type, and how the key can be used. When a security token can be identified that matches the specified criteria, a <xref:System.IdentityModel.Selectors.SecurityTokenProvider> and <xref:System.IdentityModel.Selectors.SecurityTokenAuthenticator> can be created to provide security tokens for outgoing SOAP messages and to authenticate security tokens for incoming SOAP messages, respectively. For example, the default security token manager for outgoing SOAP messages has the CreateSecurityTokenProvider method that takes a <xref:System.IdentityModel.Selectors.SecurityTokenRequirement> parameter that can be called to obtain a security token provider that matches the security token provider. This class's base class, <xref:System.IdentityModel.Selectors.SecurityTokenRequirement>, contains a dictionary, <xref:System.IdentityModel.Selectors.SecurityTokenRequirement.Properties%2A>, which maps property names to their values. This class has numerous properties whose name ends in the word \"Property\". These properties return a string, which is the key used to get or set the corresponding value from the dictionary. For example, <xref:CoreWCF.Security.Tokens.ServiceModelSecurityTokenRequirement.AuditLogLocationProperty%2A> is the key for the value of the <xref:CoreWCF.Security.Tokens.RecipientServiceModelSecurityTokenRequirement.AuditLogLocation%2A> property. Constructors ServiceModelSecurityTokenRequirement() Declaration protected ServiceModelSecurityTokenRequirement() Fields Namespace Declaration protected const string Namespace = \"http://schemas.microsoft.com/ws/2006/05/servicemodel/securitytokenrequirement\" Field Value Type Description String Properties AuditLogLocationProperty Declaration public static string AuditLogLocationProperty { get; } Property Value Type Description String ChannelParametersCollectionProperty Declaration public static string ChannelParametersCollectionProperty { get; } Property Value Type Description String DuplexClientLocalAddressProperty Declaration public static string DuplexClientLocalAddressProperty { get; } Property Value Type Description String EndpointFilterTableProperty Declaration public static string EndpointFilterTableProperty { get; } Property Value Type Description String ExtendedProtectionPolicy Declaration public static string ExtendedProtectionPolicy { get; } Property Value Type Description String HttpAuthenticationSchemeProperty Declaration public static string HttpAuthenticationSchemeProperty { get; } Property Value Type Description String IsInitiator Declaration public bool IsInitiator { get; } Property Value Type Description Boolean IsInitiatorProperty Declaration public static string IsInitiatorProperty { get; } Property Value Type Description String IsOutOfBandTokenProperty Declaration public static string IsOutOfBandTokenProperty { get; } Property Value Type Description String IssuedSecurityTokenParametersProperty Declaration public static string IssuedSecurityTokenParametersProperty { get; } Property Value Type Description String IssuerAddress Declaration public EndpointAddress IssuerAddress { get; set; } Property Value Type Description EndpointAddress IssuerAddressProperty Declaration public static string IssuerAddressProperty { get; } Property Value Type Description String IssuerBinding Declaration public Binding IssuerBinding { get; set; } Property Value Type Description Binding IssuerBindingContextProperty Declaration public static string IssuerBindingContextProperty { get; } Property Value Type Description String IssuerBindingProperty Declaration public static string IssuerBindingProperty { get; } Property Value Type Description String ListenUriProperty Declaration public static string ListenUriProperty { get; } Property Value Type Description String MessageAuthenticationAuditLevelProperty Declaration public static string MessageAuthenticationAuditLevelProperty { get; } Property Value Type Description String MessageDirectionProperty Declaration public static string MessageDirectionProperty { get; } Property Value Type Description String MessageSecurityVersion Declaration public SecurityTokenVersion MessageSecurityVersion { get; set; } Property Value Type Description SecurityTokenVersion MessageSecurityVersionProperty Declaration public static string MessageSecurityVersionProperty { get; } Property Value Type Description String PreferSslCertificateAuthenticatorProperty Declaration public static string PreferSslCertificateAuthenticatorProperty { get; } Property Value Type Description String PrivacyNoticeUriProperty Declaration public static string PrivacyNoticeUriProperty { get; } Property Value Type Description String PrivacyNoticeVersionProperty Declaration public static string PrivacyNoticeVersionProperty { get; } Property Value Type Description String SecureConversationSecurityBindingElement Declaration public SecurityBindingElement SecureConversationSecurityBindingElement { get; set; } Property Value Type Description SecurityBindingElement SecureConversationSecurityBindingElementProperty Declaration public static string SecureConversationSecurityBindingElementProperty { get; } Property Value Type Description String SecurityAlgorithmSuite Declaration public SecurityAlgorithmSuite SecurityAlgorithmSuite { get; set; } Property Value Type Description SecurityAlgorithmSuite SecurityAlgorithmSuiteProperty Declaration public static string SecurityAlgorithmSuiteProperty { get; } Property Value Type Description String SecurityBindingElement Declaration public SecurityBindingElement SecurityBindingElement { get; set; } Property Value Type Description SecurityBindingElement SecurityBindingElementProperty Declaration public static string SecurityBindingElementProperty { get; } Property Value Type Description String SupportingTokenAttachmentModeProperty Declaration public static string SupportingTokenAttachmentModeProperty { get; } Property Value Type Description String SupportSecurityContextCancellationProperty Declaration public static string SupportSecurityContextCancellationProperty { get; } Property Value Type Description String SuppressAuditFailureProperty Declaration public static string SuppressAuditFailureProperty { get; } Property Value Type Description String TargetAddressProperty Declaration public static string TargetAddressProperty { get; } Property Value Type Description String TransportScheme Declaration public string TransportScheme { get; set; } Property Value Type Description String TransportSchemeProperty Declaration public static string TransportSchemeProperty { get; } Property Value Type Description String ViaProperty Declaration public static string ViaProperty { get; } Property Value Type Description String"
  },
  "api-corewcf/CoreWCF.Security.Tokens.SslSecurityTokenParameters.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.SslSecurityTokenParameters.html",
    "title": "Class SslSecurityTokenParameters",
    "keywords": "Class SslSecurityTokenParameters Represents the parameters for an SSL security token that is obtained when doing the SOAP-level SSL protocol with the server. Inheritance Object SecurityTokenParameters SslSecurityTokenParameters Inherited Members SecurityTokenParameters.Clone() SecurityTokenParameters.MatchesKeyIdentifierClause(SecurityToken, SecurityKeyIdentifierClause, SecurityTokenReferenceStyle) SecurityTokenParameters.InclusionMode SecurityTokenParameters.ReferenceStyle SecurityTokenParameters.RequireDerivedKeys Namespace : CoreWCF.Security.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SslSecurityTokenParameters : SecurityTokenParameters Remarks This class is a collection of token properties and methods, and is used in creating security binding elements and tokens. Constructors SslSecurityTokenParameters() Declaration public SslSecurityTokenParameters() SslSecurityTokenParameters(SslSecurityTokenParameters) Declaration protected SslSecurityTokenParameters(SslSecurityTokenParameters other) Parameters Type Name Description SslSecurityTokenParameters other SslSecurityTokenParameters(Boolean) Declaration public SslSecurityTokenParameters(bool requireClientCertificate) Parameters Type Name Description Boolean requireClientCertificate SslSecurityTokenParameters(Boolean, Boolean) Declaration public SslSecurityTokenParameters(bool requireClientCertificate, bool requireCancellation) Parameters Type Name Description Boolean requireClientCertificate Boolean requireCancellation Properties HasAsymmetricKey Declaration protected override bool HasAsymmetricKey { get; } Property Value Type Description Boolean Overrides SecurityTokenParameters.HasAsymmetricKey RequireCancellation Declaration public bool RequireCancellation { get; set; } Property Value Type Description Boolean RequireClientCertificate Declaration public bool RequireClientCertificate { get; set; } Property Value Type Description Boolean SupportsClientAuthentication Declaration protected override bool SupportsClientAuthentication { get; } Property Value Type Description Boolean Overrides SecurityTokenParameters.SupportsClientAuthentication SupportsClientWindowsIdentity Declaration protected override bool SupportsClientWindowsIdentity { get; } Property Value Type Description Boolean Overrides SecurityTokenParameters.SupportsClientWindowsIdentity SupportsServerAuthentication Declaration protected override bool SupportsServerAuthentication { get; } Property Value Type Description Boolean Overrides SecurityTokenParameters.SupportsServerAuthentication Methods CloneCore() Declaration protected override SecurityTokenParameters CloneCore() Returns Type Description SecurityTokenParameters Overrides SecurityTokenParameters.CloneCore() CreateKeyIdentifierClause(SecurityToken, SecurityTokenReferenceStyle) Declaration protected override SecurityKeyIdentifierClause CreateKeyIdentifierClause(SecurityToken token, SecurityTokenReferenceStyle referenceStyle) Parameters Type Name Description SecurityToken token SecurityTokenReferenceStyle referenceStyle Returns Type Description SecurityKeyIdentifierClause Overrides SecurityTokenParameters.CreateKeyIdentifierClause(SecurityToken, SecurityTokenReferenceStyle) InitializeSecurityTokenRequirement(SecurityTokenRequirement) Declaration protected override void InitializeSecurityTokenRequirement(SecurityTokenRequirement requirement) Parameters Type Name Description SecurityTokenRequirement requirement Overrides SecurityTokenParameters.InitializeSecurityTokenRequirement(SecurityTokenRequirement) ToString() Declaration public override string ToString() Returns Type Description String Overrides SecurityTokenParameters.ToString()"
  },
  "api-corewcf/CoreWCF.Security.Tokens.SspiSecurityToken.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.SspiSecurityToken.html",
    "title": "Class SspiSecurityToken",
    "keywords": "Class SspiSecurityToken Represents an SSPI security token. Inheritance Object SecurityToken SspiSecurityToken Inherited Members SecurityToken.CanCreateKeyIdentifierClause<T>() SecurityToken.CreateKeyIdentifierClause<T>() SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause) SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause) Namespace : CoreWCF.Security.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SspiSecurityToken : SecurityToken Remarks To be added. Constructors SspiSecurityToken(NetworkCredential, Boolean, Boolean) Declaration public SspiSecurityToken(NetworkCredential networkCredential, bool extractGroupsForWindowsAccounts, bool allowUnauthenticatedCallers) Parameters Type Name Description NetworkCredential networkCredential Boolean extractGroupsForWindowsAccounts Boolean allowUnauthenticatedCallers SspiSecurityToken(TokenImpersonationLevel, Boolean, NetworkCredential) Declaration public SspiSecurityToken(TokenImpersonationLevel impersonationLevel, bool allowNtlm, NetworkCredential networkCredential) Parameters Type Name Description TokenImpersonationLevel impersonationLevel Boolean allowNtlm NetworkCredential networkCredential Properties AllowNtlm Declaration public bool AllowNtlm { get; } Property Value Type Description Boolean AllowUnauthenticatedCallers Declaration public bool AllowUnauthenticatedCallers { get; } Property Value Type Description Boolean ExtractGroupsForWindowsAccounts Declaration public bool ExtractGroupsForWindowsAccounts { get; } Property Value Type Description Boolean Id Declaration public override string Id { get; } Property Value Type Description String Overrides SecurityToken.Id ImpersonationLevel Declaration public TokenImpersonationLevel ImpersonationLevel { get; } Property Value Type Description TokenImpersonationLevel NetworkCredential Declaration public NetworkCredential NetworkCredential { get; } Property Value Type Description NetworkCredential SecurityKeys Declaration public override ReadOnlyCollection<SecurityKey> SecurityKeys { get; } Property Value Type Description ReadOnlyCollection < SecurityKey > Overrides SecurityToken.SecurityKeys ValidFrom Declaration public override DateTime ValidFrom { get; } Property Value Type Description DateTime Overrides SecurityToken.ValidFrom ValidTo Declaration public override DateTime ValidTo { get; } Property Value Type Description DateTime Overrides SecurityToken.ValidTo"
  },
  "api-corewcf/CoreWCF.Security.Tokens.SspiSecurityTokenParameters.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.SspiSecurityTokenParameters.html",
    "title": "Class SspiSecurityTokenParameters",
    "keywords": "Class SspiSecurityTokenParameters Represents the parameters for an SSPI security token that is obtained during the SOAP-level SPNEGO protocol with the server. Inheritance Object SecurityTokenParameters SspiSecurityTokenParameters Inherited Members SecurityTokenParameters.Clone() SecurityTokenParameters.MatchesKeyIdentifierClause(SecurityToken, SecurityKeyIdentifierClause, SecurityTokenReferenceStyle) SecurityTokenParameters.InclusionMode SecurityTokenParameters.ReferenceStyle SecurityTokenParameters.RequireDerivedKeys Namespace : CoreWCF.Security.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SspiSecurityTokenParameters : SecurityTokenParameters Remarks This class is a collection of token properties and methods, and is used in creating security binding elements and tokens. Constructors SspiSecurityTokenParameters() Declaration public SspiSecurityTokenParameters() SspiSecurityTokenParameters(SspiSecurityTokenParameters) Declaration protected SspiSecurityTokenParameters(SspiSecurityTokenParameters other) Parameters Type Name Description SspiSecurityTokenParameters other SspiSecurityTokenParameters(Boolean) Declaration public SspiSecurityTokenParameters(bool requireCancellation) Parameters Type Name Description Boolean requireCancellation Properties HasAsymmetricKey Declaration protected override bool HasAsymmetricKey { get; } Property Value Type Description Boolean Overrides SecurityTokenParameters.HasAsymmetricKey RequireCancellation Declaration public bool RequireCancellation { get; set; } Property Value Type Description Boolean SupportsClientAuthentication Declaration protected override bool SupportsClientAuthentication { get; } Property Value Type Description Boolean Overrides SecurityTokenParameters.SupportsClientAuthentication SupportsClientWindowsIdentity Declaration protected override bool SupportsClientWindowsIdentity { get; } Property Value Type Description Boolean Overrides SecurityTokenParameters.SupportsClientWindowsIdentity SupportsServerAuthentication Declaration protected override bool SupportsServerAuthentication { get; } Property Value Type Description Boolean Overrides SecurityTokenParameters.SupportsServerAuthentication Methods CloneCore() Declaration protected override SecurityTokenParameters CloneCore() Returns Type Description SecurityTokenParameters Overrides SecurityTokenParameters.CloneCore() CreateKeyIdentifierClause(SecurityToken, SecurityTokenReferenceStyle) Declaration protected override SecurityKeyIdentifierClause CreateKeyIdentifierClause(SecurityToken token, SecurityTokenReferenceStyle referenceStyle) Parameters Type Name Description SecurityToken token SecurityTokenReferenceStyle referenceStyle Returns Type Description SecurityKeyIdentifierClause Overrides SecurityTokenParameters.CreateKeyIdentifierClause(SecurityToken, SecurityTokenReferenceStyle) InitializeSecurityTokenRequirement(SecurityTokenRequirement) Declaration protected override void InitializeSecurityTokenRequirement(SecurityTokenRequirement requirement) Parameters Type Name Description SecurityTokenRequirement requirement Overrides SecurityTokenParameters.InitializeSecurityTokenRequirement(SecurityTokenRequirement) ToString() Declaration public override string ToString() Returns Type Description String Overrides SecurityTokenParameters.ToString()"
  },
  "api-corewcf/CoreWCF.Security.Tokens.SupportingTokenParameters.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.SupportingTokenParameters.html",
    "title": "Class SupportingTokenParameters",
    "keywords": "Class SupportingTokenParameters Represents the parameters for supporting security tokens required by the security binding element. Inheritance Object SupportingTokenParameters Namespace : CoreWCF.Security.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class SupportingTokenParameters : Object Remarks This class is a collection of token properties and methods, and is used in creating security binding elements and tokens. Supporting tokens specify encryption and signing requirements. Constructors SupportingTokenParameters() Declaration public SupportingTokenParameters() Properties Endorsing Declaration public Collection<SecurityTokenParameters> Endorsing { get; } Property Value Type Description Collection < SecurityTokenParameters > Signed Declaration public Collection<SecurityTokenParameters> Signed { get; } Property Value Type Description Collection < SecurityTokenParameters > SignedEncrypted Declaration public Collection<SecurityTokenParameters> SignedEncrypted { get; } Property Value Type Description Collection < SecurityTokenParameters > SignedEndorsing Declaration public Collection<SecurityTokenParameters> SignedEndorsing { get; } Property Value Type Description Collection < SecurityTokenParameters > Methods Clone() Declaration public SupportingTokenParameters Clone() Returns Type Description SupportingTokenParameters CloneCore() Declaration protected virtual SupportingTokenParameters CloneCore() Returns Type Description SupportingTokenParameters SetKeyDerivation(Boolean) Declaration public void SetKeyDerivation(bool requireDerivedKeys) Parameters Type Name Description Boolean requireDerivedKeys ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api-corewcf/CoreWCF.Security.Tokens.UserNameSecurityTokenParameters.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.UserNameSecurityTokenParameters.html",
    "title": "Class UserNameSecurityTokenParameters",
    "keywords": "Class UserNameSecurityTokenParameters Represents the parameters for a user name security token. Inheritance Object SecurityTokenParameters UserNameSecurityTokenParameters Inherited Members SecurityTokenParameters.Clone() SecurityTokenParameters.MatchesKeyIdentifierClause(SecurityToken, SecurityKeyIdentifierClause, SecurityTokenReferenceStyle) SecurityTokenParameters.ToString() SecurityTokenParameters.InclusionMode SecurityTokenParameters.ReferenceStyle SecurityTokenParameters.RequireDerivedKeys Namespace : CoreWCF.Security.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class UserNameSecurityTokenParameters : SecurityTokenParameters Remarks This class is a collection of token properties and methods, and is used in creating security binding elements and tokens. Constructors UserNameSecurityTokenParameters() Declaration public UserNameSecurityTokenParameters() UserNameSecurityTokenParameters(UserNameSecurityTokenParameters) Declaration protected UserNameSecurityTokenParameters(UserNameSecurityTokenParameters other) Parameters Type Name Description UserNameSecurityTokenParameters other Properties HasAsymmetricKey Declaration protected override bool HasAsymmetricKey { get; } Property Value Type Description Boolean Overrides SecurityTokenParameters.HasAsymmetricKey SupportsClientAuthentication Declaration protected override bool SupportsClientAuthentication { get; } Property Value Type Description Boolean Overrides SecurityTokenParameters.SupportsClientAuthentication SupportsClientWindowsIdentity Declaration protected override bool SupportsClientWindowsIdentity { get; } Property Value Type Description Boolean Overrides SecurityTokenParameters.SupportsClientWindowsIdentity SupportsServerAuthentication Declaration protected override bool SupportsServerAuthentication { get; } Property Value Type Description Boolean Overrides SecurityTokenParameters.SupportsServerAuthentication Methods CloneCore() Declaration protected override SecurityTokenParameters CloneCore() Returns Type Description SecurityTokenParameters Overrides SecurityTokenParameters.CloneCore() CreateKeyIdentifierClause(SecurityToken, SecurityTokenReferenceStyle) Declaration protected override SecurityKeyIdentifierClause CreateKeyIdentifierClause(SecurityToken token, SecurityTokenReferenceStyle referenceStyle) Parameters Type Name Description SecurityToken token SecurityTokenReferenceStyle referenceStyle Returns Type Description SecurityKeyIdentifierClause Overrides SecurityTokenParameters.CreateKeyIdentifierClause(SecurityToken, SecurityTokenReferenceStyle) InitializeSecurityTokenRequirement(SecurityTokenRequirement) Declaration protected override void InitializeSecurityTokenRequirement(SecurityTokenRequirement requirement) Parameters Type Name Description SecurityTokenRequirement requirement Overrides SecurityTokenParameters.InitializeSecurityTokenRequirement(SecurityTokenRequirement)"
  },
  "api-corewcf/CoreWCF.Security.Tokens.WrappedKeySecurityToken.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.WrappedKeySecurityToken.html",
    "title": "Class WrappedKeySecurityToken",
    "keywords": "Class WrappedKeySecurityToken Represents a security token whose key is wrapped inside another token. Inheritance Object SecurityToken WrappedKeySecurityToken Inherited Members SecurityToken.ResolveKeyIdentifierClause(SecurityKeyIdentifierClause) Namespace : CoreWCF.Security.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class WrappedKeySecurityToken : SecurityToken Remarks This class represents an encrypted key that comes over the wire. The encrypted key is a symmetric key that is encrypted for the receiving party using the receiving party's public key. When such a key is received, the receiver's security token is resolved, the symmetric key is decrypted, and an instance of this class is created that contains these two pieces of information. Properties Id Declaration public override string Id { get; } Property Value Type Description String Overrides SecurityToken.Id SecurityKeys Declaration public override ReadOnlyCollection<SecurityKey> SecurityKeys { get; } Property Value Type Description ReadOnlyCollection < SecurityKey > Overrides SecurityToken.SecurityKeys ValidFrom Declaration public override DateTime ValidFrom { get; } Property Value Type Description DateTime Overrides SecurityToken.ValidFrom ValidTo Declaration public override DateTime ValidTo { get; } Property Value Type Description DateTime Overrides SecurityToken.ValidTo WrappingAlgorithm Declaration public string WrappingAlgorithm { get; } Property Value Type Description String WrappingToken Declaration public SecurityToken WrappingToken { get; } Property Value Type Description SecurityToken WrappingTokenReference Declaration public SecurityKeyIdentifier WrappingTokenReference { get; } Property Value Type Description SecurityKeyIdentifier Methods CanCreateKeyIdentifierClause<T>() Declaration public override bool CanCreateKeyIdentifierClause<T>() where T : SecurityKeyIdentifierClause Returns Type Description Boolean Type Parameters Name Description T Overrides SecurityToken.CanCreateKeyIdentifierClause<T>() CreateKeyIdentifierClause<T>() Declaration public override T CreateKeyIdentifierClause<T>() where T : SecurityKeyIdentifierClause Returns Type Description T Type Parameters Name Description T Overrides SecurityToken.CreateKeyIdentifierClause<T>() GetWrappedKey() Declaration public byte[] GetWrappedKey() Returns Type Description Byte [] MatchesKeyIdentifierClause(SecurityKeyIdentifierClause) Declaration public override bool MatchesKeyIdentifierClause(SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause Returns Type Description Boolean Overrides SecurityToken.MatchesKeyIdentifierClause(SecurityKeyIdentifierClause)"
  },
  "api-corewcf/CoreWCF.Security.Tokens.X509KeyIdentifierClauseType.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.X509KeyIdentifierClauseType.html",
    "title": "Class X509KeyIdentifierClauseType",
    "keywords": "Class X509KeyIdentifierClauseType An enumeration listing the possible types of X.509 key identifier clauses. Inheritance Object X509KeyIdentifierClauseType Namespace : CoreWCF.Security.Tokens Assembly : CoreWCF.Primitives.dll Syntax public sealed class X509KeyIdentifierClauseType : Enum Fields Any Declaration public const X509KeyIdentifierClauseType Any Field Value Type Description X509KeyIdentifierClauseType IssuerSerial Declaration public const X509KeyIdentifierClauseType IssuerSerial Field Value Type Description X509KeyIdentifierClauseType RawDataKeyIdentifier Declaration public const X509KeyIdentifierClauseType RawDataKeyIdentifier Field Value Type Description X509KeyIdentifierClauseType SubjectKeyIdentifier Declaration public const X509KeyIdentifierClauseType SubjectKeyIdentifier Field Value Type Description X509KeyIdentifierClauseType Thumbprint Declaration public const X509KeyIdentifierClauseType Thumbprint Field Value Type Description X509KeyIdentifierClauseType value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.Security.Tokens.X509SecurityTokenParameters.html": {
    "href": "api-corewcf/CoreWCF.Security.Tokens.X509SecurityTokenParameters.html",
    "title": "Class X509SecurityTokenParameters",
    "keywords": "Class X509SecurityTokenParameters Represents the parameters for an X.509 security token. Inheritance Object SecurityTokenParameters X509SecurityTokenParameters Inherited Members SecurityTokenParameters.Clone() SecurityTokenParameters.MatchesKeyIdentifierClause(SecurityToken, SecurityKeyIdentifierClause, SecurityTokenReferenceStyle) SecurityTokenParameters.InclusionMode SecurityTokenParameters.ReferenceStyle SecurityTokenParameters.RequireDerivedKeys Namespace : CoreWCF.Security.Tokens Assembly : CoreWCF.Primitives.dll Syntax public class X509SecurityTokenParameters : SecurityTokenParameters Remarks This class is a collection of token properties and methods, and is used in creating security binding elements and tokens. Constructors X509SecurityTokenParameters() Declaration public X509SecurityTokenParameters() X509SecurityTokenParameters(X509KeyIdentifierClauseType) Declaration public X509SecurityTokenParameters(X509KeyIdentifierClauseType x509ReferenceStyle) Parameters Type Name Description X509KeyIdentifierClauseType x509ReferenceStyle X509SecurityTokenParameters(X509KeyIdentifierClauseType, SecurityTokenInclusionMode) Declaration public X509SecurityTokenParameters(X509KeyIdentifierClauseType x509ReferenceStyle, SecurityTokenInclusionMode inclusionMode) Parameters Type Name Description X509KeyIdentifierClauseType x509ReferenceStyle SecurityTokenInclusionMode inclusionMode X509SecurityTokenParameters(X509SecurityTokenParameters) Declaration protected X509SecurityTokenParameters(X509SecurityTokenParameters other) Parameters Type Name Description X509SecurityTokenParameters other Properties HasAsymmetricKey Declaration protected override bool HasAsymmetricKey { get; } Property Value Type Description Boolean Overrides SecurityTokenParameters.HasAsymmetricKey SupportsClientAuthentication Declaration protected override bool SupportsClientAuthentication { get; } Property Value Type Description Boolean Overrides SecurityTokenParameters.SupportsClientAuthentication SupportsClientWindowsIdentity Declaration protected override bool SupportsClientWindowsIdentity { get; } Property Value Type Description Boolean Overrides SecurityTokenParameters.SupportsClientWindowsIdentity SupportsServerAuthentication Declaration protected override bool SupportsServerAuthentication { get; } Property Value Type Description Boolean Overrides SecurityTokenParameters.SupportsServerAuthentication X509ReferenceStyle Declaration public X509KeyIdentifierClauseType X509ReferenceStyle { get; set; } Property Value Type Description X509KeyIdentifierClauseType Methods CloneCore() Declaration protected override SecurityTokenParameters CloneCore() Returns Type Description SecurityTokenParameters Overrides SecurityTokenParameters.CloneCore() CreateKeyIdentifierClause(SecurityToken, SecurityTokenReferenceStyle) Declaration protected override SecurityKeyIdentifierClause CreateKeyIdentifierClause(SecurityToken token, SecurityTokenReferenceStyle referenceStyle) Parameters Type Name Description SecurityToken token SecurityTokenReferenceStyle referenceStyle Returns Type Description SecurityKeyIdentifierClause Overrides SecurityTokenParameters.CreateKeyIdentifierClause(SecurityToken, SecurityTokenReferenceStyle) InitializeSecurityTokenRequirement(SecurityTokenRequirement) Declaration protected override void InitializeSecurityTokenRequirement(SecurityTokenRequirement requirement) Parameters Type Name Description SecurityTokenRequirement requirement Overrides SecurityTokenParameters.InitializeSecurityTokenRequirement(SecurityTokenRequirement) ToString() Declaration public override string ToString() Returns Type Description String Overrides SecurityTokenParameters.ToString()"
  },
  "api-corewcf/CoreWCF.Security.TripleDesSecurityAlgorithmSuite.html": {
    "href": "api-corewcf/CoreWCF.Security.TripleDesSecurityAlgorithmSuite.html",
    "title": "Class TripleDesSecurityAlgorithmSuite",
    "keywords": "Class TripleDesSecurityAlgorithmSuite The triple-DES security algorithm suite. Inheritance Object SecurityAlgorithmSuite TripleDesSecurityAlgorithmSuite Inherited Members SecurityAlgorithmSuite.IsCanonicalizationAlgorithmSupported(String) SecurityAlgorithmSuite.IsDigestAlgorithmSupported(String) SecurityAlgorithmSuite.IsEncryptionAlgorithmSupported(String) SecurityAlgorithmSuite.IsEncryptionKeyDerivationAlgorithmSupported(String) SecurityAlgorithmSuite.IsSymmetricKeyWrapAlgorithmSupported(String) SecurityAlgorithmSuite.IsAsymmetricKeyWrapAlgorithmSupported(String) SecurityAlgorithmSuite.IsSymmetricSignatureAlgorithmSupported(String) SecurityAlgorithmSuite.IsAsymmetricSignatureAlgorithmSupported(String) SecurityAlgorithmSuite.IsSignatureKeyDerivationAlgorithmSupported(String) SecurityAlgorithmSuite.Default SecurityAlgorithmSuite.Basic256 SecurityAlgorithmSuite.Basic192 SecurityAlgorithmSuite.Basic128 SecurityAlgorithmSuite.TripleDes SecurityAlgorithmSuite.Basic256Rsa15 SecurityAlgorithmSuite.Basic192Rsa15 SecurityAlgorithmSuite.Basic128Rsa15 SecurityAlgorithmSuite.TripleDesRsa15 SecurityAlgorithmSuite.Basic256Sha256 SecurityAlgorithmSuite.Basic192Sha256 SecurityAlgorithmSuite.Basic128Sha256 SecurityAlgorithmSuite.TripleDesSha256 SecurityAlgorithmSuite.Basic256Sha256Rsa15 SecurityAlgorithmSuite.Basic192Sha256Rsa15 SecurityAlgorithmSuite.Basic128Sha256Rsa15 SecurityAlgorithmSuite.TripleDesSha256Rsa15 Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public class TripleDesSecurityAlgorithmSuite : SecurityAlgorithmSuite Remarks To be added. Constructors TripleDesSecurityAlgorithmSuite() Declaration public TripleDesSecurityAlgorithmSuite() Properties DefaultAsymmetricKeyWrapAlgorithm Declaration public override string DefaultAsymmetricKeyWrapAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultAsymmetricKeyWrapAlgorithm DefaultAsymmetricSignatureAlgorithm Declaration public override string DefaultAsymmetricSignatureAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultAsymmetricSignatureAlgorithm DefaultCanonicalizationAlgorithm Declaration public override string DefaultCanonicalizationAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultCanonicalizationAlgorithm DefaultDigestAlgorithm Declaration public override string DefaultDigestAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultDigestAlgorithm DefaultEncryptionAlgorithm Declaration public override string DefaultEncryptionAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultEncryptionAlgorithm DefaultEncryptionKeyDerivationLength Declaration public override int DefaultEncryptionKeyDerivationLength { get; } Property Value Type Description Int32 Overrides SecurityAlgorithmSuite.DefaultEncryptionKeyDerivationLength DefaultSignatureKeyDerivationLength Declaration public override int DefaultSignatureKeyDerivationLength { get; } Property Value Type Description Int32 Overrides SecurityAlgorithmSuite.DefaultSignatureKeyDerivationLength DefaultSymmetricKeyLength Declaration public override int DefaultSymmetricKeyLength { get; } Property Value Type Description Int32 Overrides SecurityAlgorithmSuite.DefaultSymmetricKeyLength DefaultSymmetricKeyWrapAlgorithm Declaration public override string DefaultSymmetricKeyWrapAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultSymmetricKeyWrapAlgorithm DefaultSymmetricSignatureAlgorithm Declaration public override string DefaultSymmetricSignatureAlgorithm { get; } Property Value Type Description String Overrides SecurityAlgorithmSuite.DefaultSymmetricSignatureAlgorithm Methods IsAsymmetricKeyLengthSupported(Int32) Declaration public override bool IsAsymmetricKeyLengthSupported(int length) Parameters Type Name Description Int32 length Returns Type Description Boolean Overrides SecurityAlgorithmSuite.IsAsymmetricKeyLengthSupported(Int32) IsSymmetricKeyLengthSupported(Int32) Declaration public override bool IsSymmetricKeyLengthSupported(int length) Parameters Type Name Description Int32 length Returns Type Description Boolean Overrides SecurityAlgorithmSuite.IsSymmetricKeyLengthSupported(Int32) ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api-corewcf/CoreWCF.Security.TrustVersion.html": {
    "href": "api-corewcf/CoreWCF.Security.TrustVersion.html",
    "title": "Class TrustVersion",
    "keywords": "Class TrustVersion Contains the set of supported WS-Trust versions. This is an abstract class. Inheritance Object TrustVersion Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public abstract class TrustVersion : Object Remarks To be added. Properties Default Declaration public static TrustVersion Default { get; } Property Value Type Description TrustVersion Namespace Declaration public XmlDictionaryString Namespace { get; } Property Value Type Description XmlDictionaryString Prefix Declaration public XmlDictionaryString Prefix { get; } Property Value Type Description XmlDictionaryString WSTrust13 Declaration public static TrustVersion WSTrust13 { get; } Property Value Type Description TrustVersion WSTrustFeb2005 Declaration public static TrustVersion WSTrustFeb2005 { get; } Property Value Type Description TrustVersion"
  },
  "api-corewcf/CoreWCF.Security.UserNamePasswordServiceCredential.html": {
    "href": "api-corewcf/CoreWCF.Security.UserNamePasswordServiceCredential.html",
    "title": "Class UserNamePasswordServiceCredential",
    "keywords": "Class UserNamePasswordServiceCredential Represents a class that is used to configure how the service authenticates users that use user name/password authentication and to configure the caching of logon tokens. Inheritance Object UserNamePasswordServiceCredential Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public sealed class UserNamePasswordServiceCredential : Object Remarks If none of the bindings used by a service is configured for user name/password-based authentication, the relevant properties for this class are ignored. These properties include the <xref:CoreWCF.Security.UserNamePasswordServiceCredential.CustomUserNamePasswordValidator%2A>, <xref:CoreWCF.Security.UserNamePasswordServiceCredential.IncludeWindowsGroups%2A>, <xref:CoreWCF.Security.UserNamePasswordServiceCredential.MembershipProvider%2A>, and <xref:CoreWCF.Security.UserNamePasswordServiceCredential.UserNamePasswordValidationMode%2A> properties. If none of the bindings used by a service is configured to use Windows authentication for user name/password, the settings related to caching of logon tokens are ignored. These settings include the <xref:CoreWCF.Security.UserNamePasswordServiceCredential.CachedLogonTokenLifetime%2A>, <xref:CoreWCF.Security.UserNamePasswordServiceCredential.CacheLogonTokens%2A>, and <xref:CoreWCF.Security.UserNamePasswordServiceCredential.MaxCachedLogonTokens%2A> properties. Properties CachedLogonTokenLifetime Declaration public TimeSpan CachedLogonTokenLifetime { get; set; } Property Value Type Description TimeSpan CacheLogonTokens Declaration public bool CacheLogonTokens { get; set; } Property Value Type Description Boolean CustomUserNamePasswordValidator Declaration public UserNamePasswordValidator CustomUserNamePasswordValidator { get; set; } Property Value Type Description UserNamePasswordValidator IncludeWindowsGroups Declaration public bool IncludeWindowsGroups { get; set; } Property Value Type Description Boolean MaxCachedLogonTokens Declaration public int MaxCachedLogonTokens { get; set; } Property Value Type Description Int32 UserNamePasswordValidationMode Declaration public UserNamePasswordValidationMode UserNamePasswordValidationMode { get; set; } Property Value Type Description UserNamePasswordValidationMode"
  },
  "api-corewcf/CoreWCF.Security.UserNamePasswordValidationMode.html": {
    "href": "api-corewcf/CoreWCF.Security.UserNamePasswordValidationMode.html",
    "title": "Class UserNamePasswordValidationMode",
    "keywords": "Class UserNamePasswordValidationMode Lists ways to validate in username/password mode. Inheritance Object UserNamePasswordValidationMode Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public sealed class UserNamePasswordValidationMode : Enum Remarks This enumeration is referenced by <xref:CoreWCF.Configuration.UserNameServiceElement>, <xref:CoreWCF.Security.ServiceCredentialsSecurityTokenManager>, and <xref:CoreWCF.Security.UserNamePasswordServiceCredential>. Fields Custom Declaration public const UserNamePasswordValidationMode Custom Field Value Type Description UserNamePasswordValidationMode MembershipProvider Declaration public const UserNamePasswordValidationMode MembershipProvider Field Value Type Description UserNamePasswordValidationMode value__ Declaration public int value__ Field Value Type Description Int32 Windows Declaration public const UserNamePasswordValidationMode Windows Field Value Type Description UserNamePasswordValidationMode"
  },
  "api-corewcf/CoreWCF.Security.WindowsServiceCredential.html": {
    "href": "api-corewcf/CoreWCF.Security.WindowsServiceCredential.html",
    "title": "Class WindowsServiceCredential",
    "keywords": "Class WindowsServiceCredential Provides properties that describe the service credentials used for Windows authentication. Inheritance Object WindowsServiceCredential Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public sealed class WindowsServiceCredential : Object Remarks This class provides two settings. You can use the <xref:CoreWCF.Security.WindowsServiceCredential.AllowAnonymousLogons%2A> property to allow the anonymous logon of clients by setting it to true . You can then avoid disclosing the client's identity to the service by setting <xref:CoreWCF.Security.WindowsClientCredential.AllowedImpersonationLevel%2A> to Anonymous . If the <xref:CoreWCF.Security.WindowsServiceCredential.IncludeWindowsGroups%2A> property is set to true (the default setting), the service can determine the Windows groups to which the client belongs. Properties AllowAnonymousLogons Declaration public bool AllowAnonymousLogons { get; set; } Property Value Type Description Boolean IncludeWindowsGroups Declaration public bool IncludeWindowsGroups { get; set; } Property Value Type Description Boolean LdapSetting Declaration public LdapSettings LdapSetting { get; set; } Property Value Type Description LdapSettings"
  },
  "api-corewcf/CoreWCF.Security.WSSecurityTokenSerializer.html": {
    "href": "api-corewcf/CoreWCF.Security.WSSecurityTokenSerializer.html",
    "title": "Class WSSecurityTokenSerializer",
    "keywords": "Class WSSecurityTokenSerializer The class used for serializing and deserializing security tokens, security key identifiers, and security key identifier clauses defined in the WS-Security, WS-Trust, and WS-SecureConversation security specifications. Inheritance Object SecurityTokenSerializer WSSecurityTokenSerializer Inherited Members SecurityTokenSerializer.CanReadToken(XmlReader) SecurityTokenSerializer.CanWriteToken(SecurityToken) SecurityTokenSerializer.CanReadKeyIdentifier(XmlReader) SecurityTokenSerializer.CanWriteKeyIdentifier(SecurityKeyIdentifier) SecurityTokenSerializer.CanReadKeyIdentifierClause(XmlReader) SecurityTokenSerializer.CanWriteKeyIdentifierClause(SecurityKeyIdentifierClause) SecurityTokenSerializer.ReadToken(XmlReader, SecurityTokenResolver) SecurityTokenSerializer.WriteToken(XmlWriter, SecurityToken) SecurityTokenSerializer.ReadKeyIdentifier(XmlReader) SecurityTokenSerializer.WriteKeyIdentifier(XmlWriter, SecurityKeyIdentifier) SecurityTokenSerializer.ReadKeyIdentifierClause(XmlReader) SecurityTokenSerializer.WriteKeyIdentifierClause(XmlWriter, SecurityKeyIdentifierClause) Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public class WSSecurityTokenSerializer : SecurityTokenSerializer Constructors WSSecurityTokenSerializer() Declaration public WSSecurityTokenSerializer() WSSecurityTokenSerializer(SecurityVersion) Declaration public WSSecurityTokenSerializer(SecurityVersion securityVersion) Parameters Type Name Description SecurityVersion securityVersion WSSecurityTokenSerializer(SecurityVersion, TrustVersion, SecureConversationVersion, Boolean, SamlSerializer, SecurityStateEncoder, IEnumerable<Type>) Declaration public WSSecurityTokenSerializer(SecurityVersion securityVersion, TrustVersion trustVersion, SecureConversationVersion secureConversationVersion, bool emitBspRequiredAttributes, SamlSerializer samlSerializer, SecurityStateEncoder securityStateEncoder, IEnumerable<Type> knownTypes) Parameters Type Name Description SecurityVersion securityVersion TrustVersion trustVersion SecureConversationVersion secureConversationVersion Boolean emitBspRequiredAttributes SamlSerializer samlSerializer SecurityStateEncoder securityStateEncoder IEnumerable < Type > knownTypes WSSecurityTokenSerializer(SecurityVersion, TrustVersion, SecureConversationVersion, Boolean, SamlSerializer, SecurityStateEncoder, IEnumerable<Type>, Int32, Int32, Int32) Declaration public WSSecurityTokenSerializer(SecurityVersion securityVersion, TrustVersion trustVersion, SecureConversationVersion secureConversationVersion, bool emitBspRequiredAttributes, SamlSerializer samlSerializer, SecurityStateEncoder securityStateEncoder, IEnumerable<Type> knownTypes, int maximumKeyDerivationOffset, int maximumKeyDerivationLabelLength, int maximumKeyDerivationNonceLength) Parameters Type Name Description SecurityVersion securityVersion TrustVersion trustVersion SecureConversationVersion secureConversationVersion Boolean emitBspRequiredAttributes SamlSerializer samlSerializer SecurityStateEncoder securityStateEncoder IEnumerable < Type > knownTypes Int32 maximumKeyDerivationOffset Int32 maximumKeyDerivationLabelLength Int32 maximumKeyDerivationNonceLength WSSecurityTokenSerializer(SecurityVersion, Boolean) Declaration public WSSecurityTokenSerializer(SecurityVersion securityVersion, bool emitBspRequiredAttributes) Parameters Type Name Description SecurityVersion securityVersion Boolean emitBspRequiredAttributes WSSecurityTokenSerializer(SecurityVersion, Boolean, SamlSerializer) Declaration public WSSecurityTokenSerializer(SecurityVersion securityVersion, bool emitBspRequiredAttributes, SamlSerializer samlSerializer) Parameters Type Name Description SecurityVersion securityVersion Boolean emitBspRequiredAttributes SamlSerializer samlSerializer WSSecurityTokenSerializer(SecurityVersion, Boolean, SamlSerializer, SecurityStateEncoder, IEnumerable<Type>) Declaration public WSSecurityTokenSerializer(SecurityVersion securityVersion, bool emitBspRequiredAttributes, SamlSerializer samlSerializer, SecurityStateEncoder securityStateEncoder, IEnumerable<Type> knownTypes) Parameters Type Name Description SecurityVersion securityVersion Boolean emitBspRequiredAttributes SamlSerializer samlSerializer SecurityStateEncoder securityStateEncoder IEnumerable < Type > knownTypes WSSecurityTokenSerializer(SecurityVersion, Boolean, SamlSerializer, SecurityStateEncoder, IEnumerable<Type>, Int32, Int32, Int32) Declaration public WSSecurityTokenSerializer(SecurityVersion securityVersion, bool emitBspRequiredAttributes, SamlSerializer samlSerializer, SecurityStateEncoder securityStateEncoder, IEnumerable<Type> knownTypes, int maximumKeyDerivationOffset, int maximumKeyDerivationLabelLength, int maximumKeyDerivationNonceLength) Parameters Type Name Description SecurityVersion securityVersion Boolean emitBspRequiredAttributes SamlSerializer samlSerializer SecurityStateEncoder securityStateEncoder IEnumerable < Type > knownTypes Int32 maximumKeyDerivationOffset Int32 maximumKeyDerivationLabelLength Int32 maximumKeyDerivationNonceLength WSSecurityTokenSerializer(Boolean) Declaration public WSSecurityTokenSerializer(bool emitBspRequiredAttributes) Parameters Type Name Description Boolean emitBspRequiredAttributes Properties DefaultInstance Declaration public static WSSecurityTokenSerializer DefaultInstance { get; } Property Value Type Description WSSecurityTokenSerializer EmitBspRequiredAttributes Declaration public bool EmitBspRequiredAttributes { get; } Property Value Type Description Boolean MaximumKeyDerivationLabelLength Declaration public int MaximumKeyDerivationLabelLength { get; } Property Value Type Description Int32 MaximumKeyDerivationNonceLength Declaration public int MaximumKeyDerivationNonceLength { get; } Property Value Type Description Int32 MaximumKeyDerivationOffset Declaration public int MaximumKeyDerivationOffset { get; } Property Value Type Description Int32 SecurityVersion Declaration public SecurityVersion SecurityVersion { get; } Property Value Type Description SecurityVersion Methods CanReadKeyIdentifierClauseCore(XmlReader) Declaration protected override bool CanReadKeyIdentifierClauseCore(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description Boolean Overrides SecurityTokenSerializer.CanReadKeyIdentifierClauseCore(XmlReader) CanReadKeyIdentifierCore(XmlReader) Declaration protected override bool CanReadKeyIdentifierCore(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description Boolean Overrides SecurityTokenSerializer.CanReadKeyIdentifierCore(XmlReader) CanReadTokenCore(XmlReader) Declaration protected override bool CanReadTokenCore(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description Boolean Overrides SecurityTokenSerializer.CanReadTokenCore(XmlReader) CanWriteKeyIdentifierClauseCore(SecurityKeyIdentifierClause) Declaration protected override bool CanWriteKeyIdentifierClauseCore(SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description SecurityKeyIdentifierClause keyIdentifierClause Returns Type Description Boolean Overrides SecurityTokenSerializer.CanWriteKeyIdentifierClauseCore(SecurityKeyIdentifierClause) CanWriteKeyIdentifierCore(SecurityKeyIdentifier) Declaration protected override bool CanWriteKeyIdentifierCore(SecurityKeyIdentifier keyIdentifier) Parameters Type Name Description SecurityKeyIdentifier keyIdentifier Returns Type Description Boolean Overrides SecurityTokenSerializer.CanWriteKeyIdentifierCore(SecurityKeyIdentifier) CanWriteTokenCore(SecurityToken) Declaration protected override bool CanWriteTokenCore(SecurityToken token) Parameters Type Name Description SecurityToken token Returns Type Description Boolean Overrides SecurityTokenSerializer.CanWriteTokenCore(SecurityToken) CreateKeyIdentifierClauseFromTokenXml(XmlElement, SecurityTokenReferenceStyle) Declaration public virtual SecurityKeyIdentifierClause CreateKeyIdentifierClauseFromTokenXml(XmlElement element, SecurityTokenReferenceStyle tokenReferenceStyle) Parameters Type Name Description XmlElement element SecurityTokenReferenceStyle tokenReferenceStyle Returns Type Description SecurityKeyIdentifierClause GetTokenTypeUri(Type) Declaration protected virtual string GetTokenTypeUri(Type tokenType) Parameters Type Name Description Type tokenType Returns Type Description String ReadKeyIdentifierClauseCore(XmlReader) Declaration protected override SecurityKeyIdentifierClause ReadKeyIdentifierClauseCore(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description SecurityKeyIdentifierClause Overrides SecurityTokenSerializer.ReadKeyIdentifierClauseCore(XmlReader) ReadKeyIdentifierCore(XmlReader) Declaration protected override SecurityKeyIdentifier ReadKeyIdentifierCore(XmlReader reader) Parameters Type Name Description XmlReader reader Returns Type Description SecurityKeyIdentifier Overrides SecurityTokenSerializer.ReadKeyIdentifierCore(XmlReader) ReadTokenCore(XmlReader, SecurityTokenResolver) Declaration protected override SecurityToken ReadTokenCore(XmlReader reader, SecurityTokenResolver tokenResolver) Parameters Type Name Description XmlReader reader SecurityTokenResolver tokenResolver Returns Type Description SecurityToken Overrides SecurityTokenSerializer.ReadTokenCore(XmlReader, SecurityTokenResolver) TryCreateKeyIdentifierClauseFromTokenXml(XmlElement, SecurityTokenReferenceStyle, out SecurityKeyIdentifierClause) Declaration public virtual bool TryCreateKeyIdentifierClauseFromTokenXml(XmlElement element, SecurityTokenReferenceStyle tokenReferenceStyle, out SecurityKeyIdentifierClause securityKeyIdentifierClause) Parameters Type Name Description XmlElement element SecurityTokenReferenceStyle tokenReferenceStyle SecurityKeyIdentifierClause securityKeyIdentifierClause Returns Type Description Boolean WriteKeyIdentifierClauseCore(XmlWriter, SecurityKeyIdentifierClause) Declaration protected override void WriteKeyIdentifierClauseCore(XmlWriter writer, SecurityKeyIdentifierClause keyIdentifierClause) Parameters Type Name Description XmlWriter writer SecurityKeyIdentifierClause keyIdentifierClause Overrides SecurityTokenSerializer.WriteKeyIdentifierClauseCore(XmlWriter, SecurityKeyIdentifierClause) WriteKeyIdentifierCore(XmlWriter, SecurityKeyIdentifier) Declaration protected override void WriteKeyIdentifierCore(XmlWriter writer, SecurityKeyIdentifier keyIdentifier) Parameters Type Name Description XmlWriter writer SecurityKeyIdentifier keyIdentifier Overrides SecurityTokenSerializer.WriteKeyIdentifierCore(XmlWriter, SecurityKeyIdentifier) WriteTokenCore(XmlWriter, SecurityToken) Declaration protected override void WriteTokenCore(XmlWriter writer, SecurityToken token) Parameters Type Name Description XmlWriter writer SecurityToken token Overrides SecurityTokenSerializer.WriteTokenCore(XmlWriter, SecurityToken)"
  },
  "api-corewcf/CoreWCF.Security.X509CertificateInitiatorServiceCredential.html": {
    "href": "api-corewcf/CoreWCF.Security.X509CertificateInitiatorServiceCredential.html",
    "title": "Class X509CertificateInitiatorServiceCredential",
    "keywords": "Class X509CertificateInitiatorServiceCredential Represents the settings used by the service to validate the certificate presented by the clients. It also contains a certificate for the service to use for encrypting responses or callbacks for clients when message security authentication mode is used. Inheritance Object X509CertificateInitiatorServiceCredential Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public sealed class X509CertificateInitiatorServiceCredential : Object Remarks The certificate set in this class is used to encrypt messages to the client only for bindings that are configured with MutualCertificateDuplex message security authentication mode. Properties Authentication Declaration public X509ClientCertificateAuthentication Authentication { get; } Property Value Type Description X509ClientCertificateAuthentication Certificate Declaration public X509Certificate2 Certificate { get; set; } Property Value Type Description X509Certificate2 Methods SetCertificate(StoreLocation, StoreName, X509FindType, Object) Declaration public void SetCertificate(StoreLocation storeLocation, StoreName storeName, X509FindType findType, object findValue) Parameters Type Name Description StoreLocation storeLocation StoreName storeName X509FindType findType Object findValue SetCertificate(String, StoreLocation, StoreName) Declaration public void SetCertificate(string subjectName, StoreLocation storeLocation, StoreName storeName) Parameters Type Name Description String subjectName StoreLocation storeLocation StoreName storeName"
  },
  "api-corewcf/CoreWCF.Security.X509CertificateRecipientServiceCredential.html": {
    "href": "api-corewcf/CoreWCF.Security.X509CertificateRecipientServiceCredential.html",
    "title": "Class X509CertificateRecipientServiceCredential",
    "keywords": "Class X509CertificateRecipientServiceCredential Defines a certificate used by a service to identify itself. Inheritance Object X509CertificateRecipientServiceCredential Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public sealed class X509CertificateRecipientServiceCredential : Object Properties Certificate Declaration public X509Certificate2 Certificate { get; set; } Property Value Type Description X509Certificate2 Methods SetCertificate(StoreLocation, StoreName, X509FindType, Object) Declaration public void SetCertificate(StoreLocation storeLocation, StoreName storeName, X509FindType findType, object findValue) Parameters Type Name Description StoreLocation storeLocation StoreName storeName X509FindType findType Object findValue SetCertificate(String) Declaration public void SetCertificate(string subjectName) Parameters Type Name Description String subjectName SetCertificate(String, StoreLocation, StoreName) Declaration public void SetCertificate(string subjectName, StoreLocation storeLocation, StoreName storeName) Parameters Type Name Description String subjectName StoreLocation storeLocation StoreName storeName"
  },
  "api-corewcf/CoreWCF.Security.X509CertificateValidationMode.html": {
    "href": "api-corewcf/CoreWCF.Security.X509CertificateValidationMode.html",
    "title": "Class X509CertificateValidationMode",
    "keywords": "Class X509CertificateValidationMode An enumeration that lists the ways of validating a certificate. Inheritance Object X509CertificateValidationMode Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public sealed class X509CertificateValidationMode : Enum Fields ChainTrust The certificate is valid if the chain builds to a certification authority in the trusted root store. Declaration public const X509CertificateValidationMode ChainTrust Field Value Type Description X509CertificateValidationMode Custom The user must plug in a custom X509CertificateValidator to validate the certificate. Declaration public const X509CertificateValidationMode Custom Field Value Type Description X509CertificateValidationMode None No validation of the certificate is performed. Declaration public const X509CertificateValidationMode None Field Value Type Description X509CertificateValidationMode PeerOrChainTrust The certificate is valid if it is in the trusted people store, or if the chain builds to a certification authority in the trusted root store. Declaration public const X509CertificateValidationMode PeerOrChainTrust Field Value Type Description X509CertificateValidationMode PeerTrust The certificate is valid if it is in the trusted people store. Declaration public const X509CertificateValidationMode PeerTrust Field Value Type Description X509CertificateValidationMode value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.Security.X509ClientCertificateAuthentication.html": {
    "href": "api-corewcf/CoreWCF.Security.X509ClientCertificateAuthentication.html",
    "title": "Class X509ClientCertificateAuthentication",
    "keywords": "Class X509ClientCertificateAuthentication Specifies authentication properties for validating the client certificate. Inheritance Object X509ClientCertificateAuthentication Namespace : CoreWCF.Security Assembly : CoreWCF.Primitives.dll Syntax public class X509ClientCertificateAuthentication : Object Remarks If the <xref:CoreWCF.Security.X509ClientCertificateAuthentication.CertificateValidationMode%2A> is set to <xref:CoreWCF.Security.X509CertificateValidationMode.Custom>, then you must create a custom certificate validator that inherits from the <xref:System.IdentityModel.Selectors.X509CertificateValidator> class. For more information, see How to: Create a Service that Employs a Custom Certificate Validator . Properties CertificateValidationMode Declaration public X509CertificateValidationMode CertificateValidationMode { get; set; } Property Value Type Description X509CertificateValidationMode CustomCertificateValidator Declaration public X509CertificateValidator CustomCertificateValidator { get; set; } Property Value Type Description X509CertificateValidator IncludeWindowsGroups Declaration public bool IncludeWindowsGroups { get; set; } Property Value Type Description Boolean MapClientCertificateToWindowsAccount Declaration public bool MapClientCertificateToWindowsAccount { get; set; } Property Value Type Description Boolean RevocationMode Declaration public X509RevocationMode RevocationMode { get; set; } Property Value Type Description X509RevocationMode TrustedStoreLocation Declaration public StoreLocation TrustedStoreLocation { get; set; } Property Value Type Description StoreLocation"
  },
  "api-corewcf/CoreWCF.SecurityMode.html": {
    "href": "api-corewcf/CoreWCF.SecurityMode.html",
    "title": "Class SecurityMode",
    "keywords": "Class SecurityMode Determines the security settings for a binding. Inheritance Object SecurityMode Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class SecurityMode : Enum Remarks Any ProtectionLevel settings of a transport are ignored if the <xref:CoreWCF.SecurityMode> is set to None. For more information about the ProtectionLevel property, see Understanding Protection Level . For more information about Windows Communication Foundation (WCF) security and how this property affects general security features, see Securing Services and Programming WCF Security . For more information about the transport mode, see Transport Security . Note that if you choose TransportWithMessageCredential, then the value set in <xref:CoreWCF.HttpClientCredentialType> or <xref:CoreWCF.TcpClientCredentialType> is ignored. Fields Message Declaration public const SecurityMode Message Field Value Type Description SecurityMode None Declaration public const SecurityMode None Field Value Type Description SecurityMode Transport Declaration public const SecurityMode Transport Field Value Type Description SecurityMode TransportWithMessageCredential Declaration public const SecurityMode TransportWithMessageCredential Field Value Type Description SecurityMode value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.ServerTooBusyException.html": {
    "href": "api-corewcf/CoreWCF.ServerTooBusyException.html",
    "title": "Class ServerTooBusyException",
    "keywords": "Class ServerTooBusyException The exception that is thrown when a server is too busy to accept a message. Inheritance Object CommunicationException ServerTooBusyException Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class ServerTooBusyException : CommunicationException Remarks This exception derives from <xref:CoreWCF.CommunicationException> that represents a class of recoverable errors that may be thrown during communication between endpoints. Robust client and service Windows Communication Foundation (WCF) applications are expected to handle these exceptions. To prevent a handler for <xref:CoreWCF.CommunicationException> from catching the more specific <xref:CoreWCF.ServerTooBusyException>, catch this exception prior to handling <xref:CoreWCF.CommunicationException>. Constructors ServerTooBusyException() Declaration public ServerTooBusyException() ServerTooBusyException(SerializationInfo, StreamingContext) Declaration protected ServerTooBusyException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context ServerTooBusyException(String) Declaration public ServerTooBusyException(string message) Parameters Type Name Description String message ServerTooBusyException(String, Exception) Declaration public ServerTooBusyException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException"
  },
  "api-corewcf/CoreWCF.ServiceActivationException.html": {
    "href": "api-corewcf/CoreWCF.ServiceActivationException.html",
    "title": "Class ServiceActivationException",
    "keywords": "Class ServiceActivationException The exception that is thrown when a service fails to activate. Inheritance Object CommunicationException ServiceActivationException Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class ServiceActivationException : CommunicationException Remarks This exception derives from <xref:CoreWCF.CommunicationException> that represents a class of recoverable errors that may be thrown during communication between endpoints and which Windows Communication Foundation (WCF) robust client and service applications are expected to handle. To prevent the more generic <xref:CoreWCF.CommunicationException> handler from catching the more specific <xref:CoreWCF.ActionNotSupportedException>, catch this exception prior to handling <xref:CoreWCF.CommunicationException>. Constructors ServiceActivationException() Declaration public ServiceActivationException() ServiceActivationException(SerializationInfo, StreamingContext) Declaration protected ServiceActivationException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context ServiceActivationException(String) Declaration public ServiceActivationException(string message) Parameters Type Name Description String message ServiceActivationException(String, Exception) Declaration public ServiceActivationException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException"
  },
  "api-corewcf/CoreWCF.ServiceAuthenticationManager.html": {
    "href": "api-corewcf/CoreWCF.ServiceAuthenticationManager.html",
    "title": "Class ServiceAuthenticationManager",
    "keywords": "Class ServiceAuthenticationManager Represents a service authentication manager. Inheritance Object ServiceAuthenticationManager Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class ServiceAuthenticationManager : Object Remarks To be added. Constructors ServiceAuthenticationManager() Declaration public ServiceAuthenticationManager() Methods Authenticate(ReadOnlyCollection<IAuthorizationPolicy>, Uri, ref Message) Declaration public virtual ReadOnlyCollection<IAuthorizationPolicy> Authenticate(ReadOnlyCollection<IAuthorizationPolicy> authPolicy, Uri listenUri, ref Message message) Parameters Type Name Description ReadOnlyCollection < IAuthorizationPolicy > authPolicy Uri listenUri Message message Returns Type Description ReadOnlyCollection < IAuthorizationPolicy > AuthenticateAsync(ReadOnlyCollection<IAuthorizationPolicy>, Uri, Message) Declaration public virtual ValueTask<(ReadOnlyCollection<IAuthorizationPolicy>, Message)> AuthenticateAsync(ReadOnlyCollection<IAuthorizationPolicy> authPolicy, Uri listenUri, Message message) Parameters Type Name Description ReadOnlyCollection < IAuthorizationPolicy > authPolicy Uri listenUri Message message Returns Type Description ValueTask < (, ) < ReadOnlyCollection < IAuthorizationPolicy >, Message >>"
  },
  "api-corewcf/CoreWCF.ServiceAuthorizationManager.html": {
    "href": "api-corewcf/CoreWCF.ServiceAuthorizationManager.html",
    "title": "Class ServiceAuthorizationManager",
    "keywords": "Class ServiceAuthorizationManager Provides authorization access checking for service operations. Inheritance Object ServiceAuthorizationManager Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class ServiceAuthorizationManager : Object Remarks This class is responsible for evaluating all policies (rules that define what a user is allowed to do), comparing the policies to claims made by a client, setting the resulting <xref:System.IdentityModel.Policy.AuthorizationContext> to the <xref:CoreWCF.ServiceSecurityContext>, and providing the authorization decision whether to allow or deny access for a given service operation for a caller. The <xref:CoreWCF.ServiceAuthorizationManager.CheckAccessCore%2A> method is called by the Windows Communication Foundation (WCF) infrastructure each time an attempt to access a resource is made. The method returns true or false to allow or deny access, respectively. The <xref:CoreWCF.ServiceAuthorizationManager> is part of the WCF Identity Model infrastructure. The Identity Model enables you to create custom authorization policies and custom authorization schemes. For more information about how the Identity Model works, see Managing Claims and Authorization with the Identity Model . Custom Authorization This class does not perform any authorization and allows users to access all service operations. To provide more restrictive authorization, you must create a custom authorization manager that checks custom policies. To do this, inherit from this class and override the <xref:CoreWCF.ServiceAuthorizationManager.CheckAccessCore%2A> method. Specify the instance of the derived class through the <xref:CoreWCF.Dispatcher.DispatchRuntime.ServiceAuthorizationManager%2A> property. In <xref:CoreWCF.ServiceAuthorizationManager.CheckAccessCore%2A>, the application can use the <xref:CoreWCF.OperationContext> object to access the caller identity (<xref:CoreWCF.OperationContext.ServiceSecurityContext%2A>). By getting the <xref:CoreWCF.OperationContext.IncomingMessageHeaders%2A> property, which returns a <xref:CoreWCF.Channels.MessageHeaders> object, the application can access the service (<xref:CoreWCF.Channels.MessageHeaders.To%2A>), and the operation (<xref:CoreWCF.Channels.MessageHeaders.Action%2A>). By getting the <xref:CoreWCF.OperationContext.RequestContext%2A> property, which returns a <xref:CoreWCF.Channels.RequestContext> object, the application can access the entire request message (<xref:CoreWCF.Channels.RequestContext.RequestMessage%2A>) and perform the authorization decision accordingly. For an example, see How to: Create a Custom Authorization Manager for a Service . To create custom authorization policies, implement the <xref:System.IdentityModel.Policy.IAuthorizationPolicy> class. For an example, see How to: Create a Custom Authorization Policy . To create a custom claim, use the <xref:System.IdentityModel.Claims.Claim> class. For an example, see How to: Create a Custom Claim . To compare custom claims, you must compare claims, as shown in How to: Compare Claims . For more information, see Custom Authorization . You can set the type of a custom authorization manager using the &lt;serviceAuthorization&gt; in a client application configuration file. Constructors ServiceAuthorizationManager() Declaration public ServiceAuthorizationManager() Methods CheckAccess(OperationContext) Declaration public virtual bool CheckAccess(OperationContext operationContext) Parameters Type Name Description OperationContext operationContext Returns Type Description Boolean CheckAccess(OperationContext, ref Message) Declaration public virtual bool CheckAccess(OperationContext operationContext, ref Message message) Parameters Type Name Description OperationContext operationContext Message message Returns Type Description Boolean CheckAccessAsync(OperationContext) Declaration public virtual ValueTask<bool> CheckAccessAsync(OperationContext operationContext) Parameters Type Name Description OperationContext operationContext Returns Type Description ValueTask < Boolean > CheckAccessAsync(OperationContext, Message) Declaration public virtual ValueTask<(bool, Message)> CheckAccessAsync(OperationContext operationContext, Message message) Parameters Type Name Description OperationContext operationContext Message message Returns Type Description ValueTask < (, ) < Boolean , Message >> CheckAccessCore(OperationContext) Declaration protected virtual bool CheckAccessCore(OperationContext operationContext) Parameters Type Name Description OperationContext operationContext Returns Type Description Boolean CheckAccessCoreAsync(OperationContext) Declaration protected virtual ValueTask<bool> CheckAccessCoreAsync(OperationContext operationContext) Parameters Type Name Description OperationContext operationContext Returns Type Description ValueTask < Boolean > GetAuthorizationPolicies(OperationContext) Declaration protected virtual ReadOnlyCollection<IAuthorizationPolicy> GetAuthorizationPolicies(OperationContext operationContext) Parameters Type Name Description OperationContext operationContext Returns Type Description ReadOnlyCollection < IAuthorizationPolicy >"
  },
  "api-corewcf/CoreWCF.ServiceBehaviorAttribute.html": {
    "href": "api-corewcf/CoreWCF.ServiceBehaviorAttribute.html",
    "title": "Class ServiceBehaviorAttribute",
    "keywords": "Class ServiceBehaviorAttribute Specifies the internal execution behavior of a service contract implementation. Inheritance Object ServiceBehaviorAttribute Implements IServiceBehavior Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class ServiceBehaviorAttribute : Attribute, IServiceBehavior Remarks Apply the <xref:CoreWCF.ServiceBehaviorAttribute> attribute to a service implementation to specify service-wide execution behavior. (To specify execution behavior at the method level, use the <xref:CoreWCF.OperationBehaviorAttribute> attribute.) This attribute can be applied only to service implementations. For working examples, see the Service: Behaviors Samples . <xref:CoreWCF.ServiceBehaviorAttribute> properties are a Windows Communication Foundation (WCF) programming model feature that enables common features that developers otherwise have to implement. For more information about these and other behaviors, see Specifying Service Run-Time Behavior . For more information about the underlying runtime properties that some of the following properties set, see Extending ServiceHost and the Service Model Layer . The <xref:CoreWCF.ServiceBehaviorAttribute.AddressFilterMode%2A> property specifies the type of filter that the dispatcher system uses to locate the endpoint that handles requests. The <xref:CoreWCF.ServiceBehaviorAttribute.AutomaticSessionShutdown%2A> property automatically closes the session when the channel is closed and the service has finished processing any remaining messages. The <xref:CoreWCF.ServiceBehaviorAttribute.ConcurrencyMode%2A> property controls the internal threading model, enabling support for reentrant or multithreaded services. The <xref:CoreWCF.ServiceBehaviorAttribute.ConfigurationName%2A> property is used to declare a name for use in the name attribute of the &lt;service> element in a configuration file. The <xref:CoreWCF.ServiceBehaviorAttribute.IgnoreExtensionDataObject%2A> property enables the run time to ignore extra serialization information that is not required to process the message. The <xref:CoreWCF.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A> property specifies whether unhandled exceptions in a service are returned as SOAP faults. This is for debugging purposes only. The <xref:CoreWCF.ServiceBehaviorAttribute.InstanceContextMode%2A> property specifies whether and when services and their service objects are to be recycled during an exchange with a client. The <xref:CoreWCF.ServiceBehaviorAttribute.MaxItemsInObjectGraph%2A> property to limit on the number of items in an object graph that are serialized. The <xref:CoreWCF.ServiceBehaviorAttribute.Name%2A> and <xref:CoreWCF.ServiceBehaviorAttribute.Namespace%2A> properties control the name and namespace for the WSDL expression of the service element. The <xref:CoreWCF.ServiceBehaviorAttribute.ReleaseServiceInstanceOnTransactionComplete%2A> property specifies whether the service object is recycled when a transaction completes. The <xref:CoreWCF.ServiceBehaviorAttribute.TransactionAutoCompleteOnSessionClose%2A> property specifies whether outstanding transactions are completed when the session closes. The <xref:CoreWCF.ServiceBehaviorAttribute.TransactionIsolationLevel%2A> property specifies the transaction isolation level that the contract supports. The <xref:CoreWCF.ServiceBehaviorAttribute.TransactionTimeout%2A> property specifies the time period within which a transaction must complete or it aborts. The <xref:CoreWCF.ServiceBehaviorAttribute.UseSynchronizationContext%2A> property indicates whether to synchronize inbound method calls with the user interface thread automatically. The <xref:CoreWCF.ServiceBehaviorAttribute.ValidateMustUnderstand%2A> property informs the system whether it should confirm that SOAP headers marked as MustUnderstand have, in fact, been understood. The <xref:CoreWCF.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A> property can also be set using an application configuration file. For details, see <xref:CoreWCF.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A>. Constructors ServiceBehaviorAttribute() Declaration public ServiceBehaviorAttribute() Properties AddressFilterMode Declaration public AddressFilterMode AddressFilterMode { get; set; } Property Value Type Description AddressFilterMode ConcurrencyMode Declaration public ConcurrencyMode ConcurrencyMode { get; set; } Property Value Type Description ConcurrencyMode ConfigurationName Declaration public string ConfigurationName { get; set; } Property Value Type Description String IncludeExceptionDetailInFaults Declaration public bool IncludeExceptionDetailInFaults { get; set; } Property Value Type Description Boolean InstanceContextMode Declaration public InstanceContextMode InstanceContextMode { get; set; } Property Value Type Description InstanceContextMode Name Declaration public string Name { get; set; } Property Value Type Description String Namespace Declaration public string Namespace { get; set; } Property Value Type Description String Methods GetWellKnownSingleton() Declaration public object GetWellKnownSingleton() Returns Type Description Object Explicit Interface Implementations IServiceBehavior.AddBindingParameters(ServiceDescription, ServiceHostBase, Collection<ServiceEndpoint>, BindingParameterCollection) Declaration void IServiceBehavior.AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters) Parameters Type Name Description ServiceDescription serviceDescription ServiceHostBase serviceHostBase Collection < ServiceEndpoint > endpoints BindingParameterCollection bindingParameters IServiceBehavior.ApplyDispatchBehavior(ServiceDescription, ServiceHostBase) Declaration void IServiceBehavior.ApplyDispatchBehavior(ServiceDescription description, ServiceHostBase serviceHostBase) Parameters Type Name Description ServiceDescription description ServiceHostBase serviceHostBase IServiceBehavior.Validate(ServiceDescription, ServiceHostBase) Declaration void IServiceBehavior.Validate(ServiceDescription description, ServiceHostBase serviceHostBase) Parameters Type Name Description ServiceDescription description ServiceHostBase serviceHostBase Implements IServiceBehavior"
  },
  "api-corewcf/CoreWCF.ServiceContractAttribute.html": {
    "href": "api-corewcf/CoreWCF.ServiceContractAttribute.html",
    "title": "Class ServiceContractAttribute",
    "keywords": "Class ServiceContractAttribute Indicates that an interface or a class defines a service contract in a Windows Communication Foundation (WCF) application. Inheritance Object ServiceContractAttribute Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class ServiceContractAttribute : Attribute Remarks Use the <xref:CoreWCF.ServiceContractAttribute> attribute on an interface (or class) to define a service contract. Then use the <xref:CoreWCF.OperationContractAttribute> attribute on one or more of the class (or interface) methods to define the contract's service operations. When the service contract is implemented and combined with a Bindings and an <xref:CoreWCF.EndpointAddress> object, the service contract is exposed for use by clients. For an overview of the process using simple examples, see Getting Started Tutorial . For more information about creating service contracts, see Designing and Implementing Services . The information expressed by a <xref:CoreWCF.ServiceContractAttribute> and its interface is loosely related to the Web Services Description Language (WSDL) &lt;portType> element. A service contract is used on the service side to specify what the service's endpoint exposes to callers. It is also used on the client side to specify the contract of the endpoint with which the client communicates and, in the case of duplex contracts, to specify the callback contract (using the <xref:CoreWCF.ServiceContractAttribute.CallbackContract%2A> property) that the client must implement in order to participate in a duplex conversation. Note An interface or class that is decorated with <xref:CoreWCF.ServiceContractAttribute> must also have at least one method marked with the <xref:CoreWCF.OperationContractAttribute> attribute to expose any functionality. See the Examples section for a code example of the simplest use of the two attributes to define and implement a service. Use the <xref:CoreWCF.ServiceContractAttribute> properties to modify the service contract. The <xref:CoreWCF.ServiceContractAttribute.ConfigurationName%2A> property specifies the name of the service element in the configuration file to use. The <xref:CoreWCF.ServiceContractAttribute.Name%2A> and <xref:CoreWCF.ServiceContractAttribute.Namespace%2A> properties control the name and namespace of the contract in the WSDL &lt;portType> element. The <xref:CoreWCF.ServiceContractAttribute.SessionMode%2A> property specifies whether the contract requires a binding that supports sessions. The <xref:CoreWCF.ServiceContractAttribute.CallbackContract%2A> property specifies the return contract in a two-way (duplex) conversation. The <xref:CoreWCF.ServiceContractAttribute.HasProtectionLevel%2A> and <xref:CoreWCF.ServiceContractAttribute.ProtectionLevel%2A> properties indicate whether all messages supporting the contract have a explicit <xref:CoreWCF.ServiceContractAttribute.ProtectionLevel%2A> value, and if so, what that level is. Services implement service contracts, which represent the data exchange that a service type supports. A service class can implement a service contract (by implementing an interface marked with <xref:CoreWCF.ServiceContractAttribute> that has methods marked with <xref:CoreWCF.OperationContractAttribute>) or it can be marked with the <xref:CoreWCF.ServiceContractAttribute> and apply the <xref:CoreWCF.OperationContractAttribute> attribute to its own methods. (If a class implements an interface marked with <xref:CoreWCF.ServiceContractAttribute>, it cannot be itself marked with <xref:CoreWCF.ServiceContractAttribute>.) Methods on service types that are marked with the <xref:CoreWCF.OperationContractAttribute> are treated as part of a default service contract specified by the service type itself. For details about service operations, see <xref:CoreWCF.OperationContractAttribute>. By default, the <xref:CoreWCF.ServiceContractAttribute.Name%2A> and <xref:CoreWCF.ServiceContractAttribute.Namespace%2A> properties are the name of the contract type and http://tempuri.org , respectively, and <xref:CoreWCF.ServiceContractAttribute.ProtectionLevel%2A> is <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>. It is recommended that service contracts explicitly set their names, namespaces, and protection levels using these properties. Doing so accomplishes two goals. First, it builds a contract that is not directly connected to the managed type information, enabling you to refactor your managed code and namespaces without breaking the contract as it is expressed in WSDL. Second, explicitly requiring a certain level of protection on the contract itself enables the runtime to validate whether the binding configuration supports that level of security, preventing poor configuration from exposing sensitive information. For more information about protection levels, see Understanding Protection Level . To expose a service for use by client applications, create a host application to register your service endpoint with Windows Communication Foundation (WCF). You can host WCF services using Windows Activation Services (WAS), in console applications, Windows Service applications, ASP.NET applications, Windows Forms applications, or any other kind of application domain. Hosting in the WAS is very similar to creating an ASP.NET application. For details, see How to: Host a WCF Service in IIS . Clients either use the service contract interface (the interface marked with <xref:CoreWCF.ServiceContractAttribute>) to create a channel to the service or they use the client objects (which combine the type information of the service contract interface with the <xref:CoreWCF.ClientBase%601> class) to communicate with your service. For details on client channels to services, see the <xref:CoreWCF.ChannelFactory%601> class and WCF Client Overview . Using a <xref:CoreWCF.ServiceContractAttribute> class or interface to inherit from another <xref:CoreWCF.ServiceContractAttribute> class or interface extends the parent contract. For example, if an IChildContract interface is marked with <xref:CoreWCF.ServiceContractAttribute> and inherited from another service contract interface, IParentContract , the IChildContract service contract contains the methods of both IParentContract and IChildContract . Extending contracts (whether on classes or interfaces) is very similar to extending managed classes and interfaces. The most flexible approach to creating services is to define service contract interfaces first and then have your service class implement that interface. (This is also the simplest way to build your services if you must implement service contracts that have been defined by others.) Building services directly by marking a class with <xref:CoreWCF.ServiceContractAttribute> and its methods with <xref:CoreWCF.OperationContractAttribute> works when the service exposes only one contract (but that contract can be exposed by more than one endpoint). Use the <xref:CoreWCF.ServiceContractAttribute.CallbackContract%2A> property to indicate another service contract that, when bound together with the original service contract, define a message exchange that can flow in two ways independently. For details, see <xref:CoreWCF.ServiceContractAttribute.CallbackContract%2A>. Constructors ServiceContractAttribute() Declaration public ServiceContractAttribute() Properties CallbackContract Declaration public Type CallbackContract { get; set; } Property Value Type Description Type ConfigurationName Declaration public string ConfigurationName { get; set; } Property Value Type Description String Name Declaration public string Name { get; set; } Property Value Type Description String Namespace Declaration public string Namespace { get; set; } Property Value Type Description String SessionMode Declaration public SessionMode SessionMode { get; set; } Property Value Type Description SessionMode"
  },
  "api-corewcf/CoreWCF.ServiceHostBase.html": {
    "href": "api-corewcf/CoreWCF.ServiceHostBase.html",
    "title": "Class ServiceHostBase",
    "keywords": "Class ServiceHostBase Extends the class to implement hosts that expose custom programming models. Inheritance Object CommunicationObject ServiceHostBase Implements ICommunicationObject IExtensibleObject < ServiceHostBase > IDisposable Inherited Members CommunicationObject.Abort() CommunicationObject.CloseAsync() CommunicationObject.CloseAsync(CancellationToken) CommunicationObject.OpenAsync() CommunicationObject.OpenAsync(CancellationToken) CommunicationObject.Fault(Exception) CommunicationObject.Fault() CommunicationObject.GetCommunicationObjectType() CommunicationObject.OnAbort() CommunicationObject.OnCloseAsync(CancellationToken) CommunicationObject.OnOpenAsync(CancellationToken) CommunicationObject.OnClosed() CommunicationObject.OnClosing() CommunicationObject.OnFaulted() CommunicationObject.OnOpened() CommunicationObject.OnOpening() CommunicationObject.ThrowIfDisposed() CommunicationObject.ThrowIfDisposedOrImmutable() CommunicationObject.ThrowIfDisposedOrNotOpen() CommunicationObject.ThrowIfNotOpened() CommunicationObject.ThrowPending() CommunicationObject.IsDisposed CommunicationObject.State CommunicationObject.ThisLock CommunicationObject.Closed CommunicationObject.Closing CommunicationObject.Faulted CommunicationObject.Opened CommunicationObject.Opening Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public abstract class ServiceHostBase : CommunicationObject, ICommunicationObject, IExtensibleObject<ServiceHostBase> Remarks Use the <xref:CoreWCF.ServiceHostBase> class to create hosts that provide a custom programming model. The Windows Communication Foundation (WCF) service programming model uses the <xref:CoreWCF.ServiceHost> class. Special note for Managed C++ users deriving from this class: Put your cleanup code in (On)(Begin)Close (and/or OnAbort), not in a destructor. Avoid destructors; they cause the compiler to auto-generate <xref:System.IDisposable>. Avoid non-reference members; they can cause the compiler to auto-generate <xref:System.IDisposable>. Avoid finalizers; but if you include one, you should suppress the build warning and call <xref:System.GC.SuppressFinalize%28System.Object%29> and the finalizer itself from (On)(Begin)Close (and/or OnAbort) to emulate what would have been the auto-generated <xref:System.IDisposable> behavior. Constructors ServiceHostBase() Declaration protected ServiceHostBase() Properties Authorization Declaration public ServiceAuthorizationBehavior Authorization { get; } Property Value Type Description ServiceAuthorizationBehavior BaseAddresses Declaration public ReadOnlyCollection<Uri> BaseAddresses { get; } Property Value Type Description ReadOnlyCollection < Uri > ChannelDispatchers Declaration public ChannelDispatcherCollection ChannelDispatchers { get; } Property Value Type Description ChannelDispatcherCollection CloseTimeout Declaration public TimeSpan CloseTimeout { get; set; } Property Value Type Description TimeSpan Credentials Declaration public ServiceCredentials Credentials { get; } Property Value Type Description ServiceCredentials DefaultCloseTimeout Declaration protected override TimeSpan DefaultCloseTimeout { get; } Property Value Type Description TimeSpan Overrides CommunicationObject.DefaultCloseTimeout DefaultOpenTimeout Declaration protected override TimeSpan DefaultOpenTimeout { get; } Property Value Type Description TimeSpan Overrides CommunicationObject.DefaultOpenTimeout Description Declaration public ServiceDescription Description { get; } Property Value Type Description ServiceDescription Extensions Declaration public IExtensionCollection<ServiceHostBase> Extensions { get; } Property Value Type Description IExtensionCollection < ServiceHostBase > ImplementedContracts Declaration protected IDictionary<string, ContractDescription> ImplementedContracts { get; } Property Value Type Description IDictionary < String , ContractDescription > ManualFlowControlLimit Declaration public int ManualFlowControlLimit { get; set; } Property Value Type Description Int32 OpenTimeout Declaration public TimeSpan OpenTimeout { get; set; } Property Value Type Description TimeSpan Methods AddBaseAddress(Uri) Declaration protected void AddBaseAddress(Uri baseAddress) Parameters Type Name Description Uri baseAddress ApplyConfiguration() Declaration protected virtual void ApplyConfiguration() CreateDescription(out IDictionary<String, ContractDescription>) Declaration protected abstract ServiceDescription CreateDescription(out IDictionary<string, ContractDescription> implementedContracts) Parameters Type Name Description IDictionary < String , ContractDescription > implementedContracts Returns Type Description ServiceDescription InitializeDescription(UriSchemeKeyedCollection) Declaration protected void InitializeDescription(UriSchemeKeyedCollection baseAddresses) Parameters Type Name Description UriSchemeKeyedCollection baseAddresses InitializeRuntime() Declaration protected virtual void InitializeRuntime() Events UnknownMessageReceived Declaration public event EventHandler<UnknownMessageReceivedEventArgs> UnknownMessageReceived Event Type Type Description EventHandler < UnknownMessageReceivedEventArgs > Implements ICommunicationObject IExtensibleObject<T> System.IDisposable"
  },
  "api-corewcf/CoreWCF.ServiceKnownTypeAttribute.html": {
    "href": "api-corewcf/CoreWCF.ServiceKnownTypeAttribute.html",
    "title": "Class ServiceKnownTypeAttribute",
    "keywords": "Class ServiceKnownTypeAttribute Specifies known types to be used by a service when serializing or deserializing. Inheritance Object ServiceKnownTypeAttribute Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class ServiceKnownTypeAttribute : Attribute Remarks The <xref:CoreWCF.ServiceKnownTypeAttribute> is intended for use when creating Windows Communication Foundation (WCF) service contracts (interfaces that define the service and its methods). The known types are types that may be present in an object graph when serialization or deserialization occurs. For more information about known types, see Data Contract Known Types . To use the <xref:CoreWCF.ServiceKnownTypeAttribute.MethodName%2A> property, create a class that contains a method (or methods) that returns an array of types (each being a known type). When applying the attribute, set the methodName to the name of a method that returns the list of types and set the declaringType to the type that contains the method. The method must return a type that implements the <xref:System.Collections.Generic.IEnumerable%601> interface. The method must also include a parameter of type <xref:System.Reflection.ICustomAttributeProvider>. You can also apply the attribute several times to an interface, class, or method, each time specifying a new known type. Note You can use the word ServiceKnownType in your Microsoft Visual Basic or C# code instead of the longer ServiceKnownTypeAttribute . Constructors ServiceKnownTypeAttribute(String) Declaration public ServiceKnownTypeAttribute(string methodName) Parameters Type Name Description String methodName ServiceKnownTypeAttribute(String, Type) Declaration public ServiceKnownTypeAttribute(string methodName, Type declaringType) Parameters Type Name Description String methodName Type declaringType ServiceKnownTypeAttribute(Type) Declaration public ServiceKnownTypeAttribute(Type type) Parameters Type Name Description Type type Properties DeclaringType Declaration public Type DeclaringType { get; } Property Value Type Description Type MethodName Declaration public string MethodName { get; } Property Value Type Description String Type Declaration public Type Type { get; } Property Value Type Description Type"
  },
  "api-corewcf/CoreWCF.ServiceRequestDelegate.html": {
    "href": "api-corewcf/CoreWCF.ServiceRequestDelegate.html",
    "title": "Class ServiceRequestDelegate",
    "keywords": "Class ServiceRequestDelegate Inheritance Object ServiceRequestDelegate Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class ServiceRequestDelegate : MulticastDelegate Constructors ServiceRequestDelegate(Object, IntPtr) Declaration public ServiceRequestDelegate(object object, IntPtr method) Parameters Type Name Description Object object IntPtr method Methods BeginInvoke(RequestContext, AsyncCallback, Object) Declaration public virtual IAsyncResult BeginInvoke(RequestContext context, AsyncCallback callback, object object) Parameters Type Name Description RequestContext context AsyncCallback callback Object object Returns Type Description IAsyncResult EndInvoke(IAsyncResult) Declaration public virtual Task EndInvoke(IAsyncResult result) Parameters Type Name Description IAsyncResult result Returns Type Description Task Invoke(RequestContext) Declaration public virtual Task Invoke(RequestContext context) Parameters Type Name Description RequestContext context Returns Type Description Task"
  },
  "api-corewcf/CoreWCF.ServiceSecurityContext.html": {
    "href": "api-corewcf/CoreWCF.ServiceSecurityContext.html",
    "title": "Class ServiceSecurityContext",
    "keywords": "Class ServiceSecurityContext Represents the security context of a remote party. On the client, represents the service identity and, on the service, represents the client identity. Inheritance Object ServiceSecurityContext Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class ServiceSecurityContext : Object Remarks The data is part of the <xref:CoreWCF.Security.SecurityMessageProperty> for a message. Use this class to obtain information about a remote security context at runtime. A security context is created when a client is successfully authenticated and authorized to access a method. When a message is successfully authenticated and authorized, the security information from the client and for the current service instance can be obtained from an instance of this class. You can retrieve an instance of the <xref:CoreWCF.ServiceSecurityContext> from the <xref:CoreWCF.OperationContext.Current%2A> property of the <xref:CoreWCF.OperationContext> class, or use it from within a service operation method, as shown in the following example. Parsing a ClaimSet A common use of the class is to retrieve the current set of claims for the purpose of identifying or authorizing a client when accessing a method. The <xref:System.IdentityModel.Claims.ClaimSet> class contains a collection of <xref:System.IdentityModel.Claims.Claim> objects, and each can be parsed to determine whether a specific claim is present. If the specified claim is provided, authorization can be granted. This functionality is provided by overriding the <xref:CoreWCF.ServiceAuthorizationManager.CheckAccessCore%2A> method of the <xref:CoreWCF.ServiceAuthorizationManager> class. For a complete example, see the Authorization Policy . Cookie Mode and IsAuthenticated Note that under some circumstances, the <xref:System.Security.Principal.IIdentity.IsAuthenticated%2A> property of the <xref:System.Security.Principal.IIdentity> interface returns true even if the remote client is authenticated as an anonymous user. (The <xref:CoreWCF.ServiceSecurityContext.PrimaryIdentity%2A> property returns an implementation of the <xref:System.Security.Principal.IIdentity> interface.) The following circumstances must be true for this to occur: The service uses Windows authentication. The service allows anonymous logons. The binding is a &lt;customBinding&gt; . The custom binding includes a &lt;security> element. The &lt;security> element includes a &lt;secureConversationBootstrap&gt; with the requireSecurityContextCancellation attribute set to false . Constructors ServiceSecurityContext(AuthorizationContext) Declaration public ServiceSecurityContext(AuthorizationContext authorizationContext) Parameters Type Name Description AuthorizationContext authorizationContext ServiceSecurityContext(AuthorizationContext, ReadOnlyCollection<IAuthorizationPolicy>) Declaration public ServiceSecurityContext(AuthorizationContext authorizationContext, ReadOnlyCollection<IAuthorizationPolicy> authorizationPolicies) Parameters Type Name Description AuthorizationContext authorizationContext ReadOnlyCollection < IAuthorizationPolicy > authorizationPolicies ServiceSecurityContext(ReadOnlyCollection<IAuthorizationPolicy>) Declaration public ServiceSecurityContext(ReadOnlyCollection<IAuthorizationPolicy> authorizationPolicies) Parameters Type Name Description ReadOnlyCollection < IAuthorizationPolicy > authorizationPolicies Properties Anonymous Declaration public static ServiceSecurityContext Anonymous { get; } Property Value Type Description ServiceSecurityContext AuthorizationContext Declaration public AuthorizationContext AuthorizationContext { get; } Property Value Type Description AuthorizationContext Current Declaration public static ServiceSecurityContext Current { get; } Property Value Type Description ServiceSecurityContext IdentityClaim Declaration public Claim IdentityClaim { get; } Property Value Type Description Claim IsAnonymous Declaration public bool IsAnonymous { get; } Property Value Type Description Boolean PrimaryIdentity Declaration public IIdentity PrimaryIdentity { get; } Property Value Type Description IIdentity WindowsIdentity Declaration public WindowsIdentity WindowsIdentity { get; } Property Value Type Description WindowsIdentity Methods GetIdentities() Declaration public IList<IIdentity> GetIdentities() Returns Type Description IList < IIdentity >"
  },
  "api-corewcf/CoreWCF.SessionMode.html": {
    "href": "api-corewcf/CoreWCF.SessionMode.html",
    "title": "Class SessionMode",
    "keywords": "Class SessionMode Specifies the values available to indicate the support for reliable sessions that a contract requires or supports. Inheritance Object SessionMode Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class SessionMode : Enum Remarks Use the <xref:CoreWCF.SessionMode> enumeration with the <xref:CoreWCF.ServiceContractAttribute.SessionMode%2A?displayProperty=nameWithType> property to require, allow, or prohibit bindings to use sessions between endpoints that connect to or support the service contract. A session is a way of correlating a set of messages exchanged between two or more endpoints. For more information about sessions, see Using Sessions . If your service supports sessions, you can then use the <xref:CoreWCF.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> property to specify the relationship between instances of your service contract implementation and the channel session. For example, if the <xref:CoreWCF.ServiceContractAttribute.SessionMode%2A?displayProperty=nameWithType> property is set to Allowed and the <xref:CoreWCF.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> property is set to <xref:CoreWCF.InstanceContextMode.PerSession?displayProperty=nameWithType>, a client can use a binding that supports reliable sessions to make repeated calls to the same service object. Because a session is a channel-level concept that the application model uses, there is an interaction between the <xref:CoreWCF.SessionMode> enumeration in a contract and the <xref:CoreWCF.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> property, which controls the association between channels and specific service objects. The following table shows the result of an incoming channel either supporting reliable sessions or not supporting reliable sessions given a service's combination of the values of the <xref:CoreWCF.ServiceContractAttribute.SessionMode%2A?displayProperty=nameWithType> property and the <xref:CoreWCF.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> property. InstanceContextMode Value Required Allowed NotAllowed PerCall - Behavior with sessionful channel: A session and <xref:CoreWCF.InstanceContext?displayProperty=nameWithType> for each call.<br />- Behavior with sessionless channel: An exception is thrown. - Behavior with sessionful channel: A session and <xref:CoreWCF.InstanceContext?displayProperty=nameWithType> for each call.<br />- Behavior with sessionless channel: An <xref:CoreWCF.InstanceContext?displayProperty=nameWithType> for each call. - Behavior with sessionful channel: An exception is thrown.<br />- Behavior with sessionless channel: An <xref:CoreWCF.InstanceContext?displayProperty=nameWithType> for each call. PerSession - Behavior with sessionful channel: A session and <xref:CoreWCF.InstanceContext?displayProperty=nameWithType> for each channel.<br />- Behavior with sessionless channel: An exception is thrown. - Behavior with sessionful channel: A session and <xref:CoreWCF.InstanceContext?displayProperty=nameWithType> for each channel.<br />- Behavior with sessionless channel: An <xref:CoreWCF.InstanceContext?displayProperty=nameWithType> for each call. - Behavior with sessionful channel: An exception is thrown.<br />- Behavior with sessionless channel: An <xref:CoreWCF.InstanceContext?displayProperty=nameWithType> for each call. Single - Behavior with sessionful channel: One session and one <xref:CoreWCF.InstanceContext?displayProperty=nameWithType> for all calls.<br />- Behavior with sessionless channel: An exception is thrown. - Behavior with sessionful channel: A session and <xref:CoreWCF.InstanceContext?displayProperty=nameWithType> for each created singleton or for the user-specified singleton.<br />- Behavior with sessionless channel: An <xref:CoreWCF.InstanceContext?displayProperty=nameWithType> for each created singleton or for the user-specified singleton. - Behavior with sessionful channel: An exception is thrown.<br />- Behavior with sessionless channel: An <xref:CoreWCF.InstanceContext?displayProperty=nameWithType> for each created singleton or for the user-specified singleton. Fields Allowed Declaration public const SessionMode Allowed Field Value Type Description SessionMode NotAllowed Declaration public const SessionMode NotAllowed Field Value Type Description SessionMode Required Declaration public const SessionMode Required Field Value Type Description SessionMode value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.SpnEndpointIdentity.html": {
    "href": "api-corewcf/CoreWCF.SpnEndpointIdentity.html",
    "title": "Class SpnEndpointIdentity",
    "keywords": "Class SpnEndpointIdentity Represents a service principal name (SPN) for an identity when the binding uses Kerberos. Inheritance Object EndpointIdentity SpnEndpointIdentity Inherited Members EndpointIdentity.CreateIdentity(Claim) EndpointIdentity.CreateX509CertificateIdentity(X509Certificate2) EndpointIdentity.Equals(Object) EndpointIdentity.GetHashCode() Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class SpnEndpointIdentity : EndpointIdentity Remarks An SPN is the name by which a client uniquely identifies an instance of a service. If you install multiple instances of a service on computers throughout a forest, each instance must have its own SPN. A given service instance can have multiple SPNs if there are multiple names that clients might use for authentication. When a client wants to connect to a service, it locates an instance of the service, composes an SPN for that instance, and sets the identity to a <xref:CoreWCF.SpnEndpointIdentity>. A check will be made that the message is intended for that service. The three authentication modes used under Kerberos are: SSPINegotiate Kerberos KerberosOverTransport. Constructors SpnEndpointIdentity(Claim) Declaration public SpnEndpointIdentity(Claim identity) Parameters Type Name Description Claim identity SpnEndpointIdentity(String) Declaration public SpnEndpointIdentity(string spnName) Parameters Type Name Description String spnName Properties SpnLookupTime Declaration public static TimeSpan SpnLookupTime { get; set; } Property Value Type Description TimeSpan"
  },
  "api-corewcf/CoreWCF.TcpClientCredentialType.html": {
    "href": "api-corewcf/CoreWCF.TcpClientCredentialType.html",
    "title": "Class TcpClientCredentialType",
    "keywords": "Class TcpClientCredentialType Enumerates the valid credential types for TCP clients. Inheritance Object TcpClientCredentialType Namespace : CoreWCF Assembly : CoreWCF.NetTcp.dll Syntax public sealed class TcpClientCredentialType : Enum Remarks This enumeration is used by <xref:CoreWCF.TcpTransportSecurity.ClientCredentialType%2A> to specify the type of client credential to be used for authentication. Note that if <xref:CoreWCF.SecurityMode> is set to <xref:CoreWCF.SecurityMode.TransportWithMessageCredential>, then the value of <xref:CoreWCF.TcpClientCredentialType> is ignored. Fields Certificate Declaration public const TcpClientCredentialType Certificate Field Value Type Description TcpClientCredentialType None Declaration public const TcpClientCredentialType None Field Value Type Description TcpClientCredentialType value__ Declaration public int value__ Field Value Type Description Int32 Windows Declaration public const TcpClientCredentialType Windows Field Value Type Description TcpClientCredentialType"
  },
  "api-corewcf/CoreWCF.TcpTransportSecurity.html": {
    "href": "api-corewcf/CoreWCF.TcpTransportSecurity.html",
    "title": "Class TcpTransportSecurity",
    "keywords": "Class TcpTransportSecurity Provides properties that control authentication parameters and protection level for the TCP transport. Inheritance Object TcpTransportSecurity Namespace : CoreWCF Assembly : CoreWCF.NetTcp.dll Syntax public sealed class TcpTransportSecurity : Object Remarks This class is used by <xref:CoreWCF.NetTcpSecurity.Transport%2A> to set the transport-level security settings for a binding. Constructors TcpTransportSecurity() Declaration public TcpTransportSecurity() Properties ClientCredentialType Declaration public TcpClientCredentialType ClientCredentialType { get; set; } Property Value Type Description TcpClientCredentialType ExtendedProtectionPolicy Declaration public ExtendedProtectionPolicy ExtendedProtectionPolicy { get; set; } Property Value Type Description ExtendedProtectionPolicy ProtectionLevel Declaration public ProtectionLevel ProtectionLevel { get; set; } Property Value Type Description ProtectionLevel SslProtocols Declaration public SslProtocols SslProtocols { get; set; } Property Value Type Description SslProtocols"
  },
  "api-corewcf/CoreWCF.TransferMode.html": {
    "href": "api-corewcf/CoreWCF.TransferMode.html",
    "title": "Class TransferMode",
    "keywords": "Class TransferMode Indicates whether a channel uses streamed or buffered modes for the transfer of request and response messages. Inheritance Object TransferMode Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class TransferMode : Enum Remarks Windows Communication Foundation (WCF) transports support two modes of transferring messages in each direction: Buffered transfers hold the entire message in a memory buffer until the transfer is complete. Streamed transfers only buffer the message headers and expose the message body as a stream, from which smaller portions can be read at a time. Setting the transfer mode to Streamed enables streaming communication in both directions. Setting the transfer mode to StreamedRequest or StreamedResponse enables streaming communication only in the indicated direction. Streamed transfers can improve the scalability of a service by eliminating the need for large memory buffers. Whether changing the transfer mode actually improves scalability in practice depends on the size of the messages being transferred. Improvements in scalability should be most evident when large messages use streamed instead of buffered transfers. By default, the HTTP, TCP/IP and named pipe transports use buffered message transfers. You can set the values of TransferMode on the <xref:CoreWCF.BasicHttpBinding>, <xref:CoreWCF.NetTcpBinding>, and <xref:CoreWCF.NetNamedPipeBinding> system-provided bindings using the transfer mode properties exposed on them. The mode can be set on the <xref:CoreWCF.NetTcpBinding> class, for example, by using the <xref:CoreWCF.NetTcpBinding.TransferMode%2A?displayProperty=nameWithType> property. It can also be set in the configuration section for the binding. For bindings that do not expose the transfer mode property, the transfer mode can be set on the binding element of the transport and this element can then be added to a custom binding. For example, create an <xref:CoreWCF.Channels.HttpTransportBindingElement> and use the <xref:CoreWCF.Channels.ConnectionOrientedTransportBindingElement.TransferMode%2A> property to set the transfer mode when creating a custom binding. The transfer mode can also be set in the configuration section for the custom binding. The decision to use either buffered or streamed transfers is a local decision of the endpoint for HTTP transports. For HTTP transports, the transfer mode does not propagate across a connection, or to proxy servers or other intermediaries. Setting the transfer mode is not reflected in the description of the service contract. After generating a proxy to a service, you can (it is allowed but not required) edit the configuration file for services intended to be used with streamed transfers to set the transfer mode. For TCP and named pipe transports, the transfer mode is propagated as a policy assertion. Using the Streamed transfer mode causes the WCF runtime to enforce some restrictions. Operations that occur across a streamed transport can have a contract with at most one input and/or one output parameter at the programming model layer. That parameter corresponds to the entire body of the message and must be a <xref:CoreWCF.Channels.Message>, be a subtype of <xref:System.IO.Stream>, or implement the <xref:System.Xml.Serialization.IXmlSerializable> interface. Having a return value for an operation is equivalent to having an output parameter. Some WCF features such as Reliable Messaging and SOAP message-level security rely on buffering messages for transmissions. Using these features may reduce or eliminate the performance benefits gained by using streaming. To secure a streamed transport, use transport level security only or use mixed-mode security, which combines WS-Security claims with transport security. SOAP headers are always buffered, even when the transfer mode is set to Streamed . The headers for a message must not exceed the size of the MaxBufferSize transport quota which is exposed on the various bindings and binding elements. Changing the transfer mode from Buffered to Streamed also changes the native channel shape of the TCP and named pipe transports. For buffered transfers, the native channel shape is <xref:CoreWCF.Channels.IDuplexSessionChannel>. For streamed transfers, the native channels are <xref:CoreWCF.Channels.IRequestChannel> and <xref:CoreWCF.Channels.IReplyChannel>. A consequence of this is that sessionful service contracts cannot be used with transport streaming. Fields Buffered Buffer messages in both directions. Declaration public const TransferMode Buffered Field Value Type Description TransferMode Streamed Stream messages in both directions. Declaration public const TransferMode Streamed Field Value Type Description TransferMode StreamedRequest Stream request messages, buffer response messages. Declaration public const TransferMode StreamedRequest Field Value Type Description TransferMode StreamedResponse Buffer request messages, stream response messages. Declaration public const TransferMode StreamedResponse Field Value Type Description TransferMode value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.UnknownMessageReceivedEventArgs.html": {
    "href": "api-corewcf/CoreWCF.UnknownMessageReceivedEventArgs.html",
    "title": "Class UnknownMessageReceivedEventArgs",
    "keywords": "Class UnknownMessageReceivedEventArgs Contains the message received by a channel and cannot be associated with any callback operation or pending request. Inheritance Object UnknownMessageReceivedEventArgs Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class UnknownMessageReceivedEventArgs : EventArgs Remarks To be added. Properties Message Declaration public Message Message { get; } Property Value Type Description Message"
  },
  "api-corewcf/CoreWCF.UpnEndpointIdentity.html": {
    "href": "api-corewcf/CoreWCF.UpnEndpointIdentity.html",
    "title": "Class UpnEndpointIdentity",
    "keywords": "Class UpnEndpointIdentity Represents a user principal name (UPN) for an identity which is used when the binding utilizes the SSPINegotiate authentication mode. Inheritance Object EndpointIdentity UpnEndpointIdentity Inherited Members EndpointIdentity.CreateIdentity(Claim) EndpointIdentity.CreateX509CertificateIdentity(X509Certificate2) EndpointIdentity.Equals(Object) EndpointIdentity.GetHashCode() Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class UpnEndpointIdentity : EndpointIdentity Remarks A user account name (UPN) is the user name (sometimes referred to as the user logon name) and a domain name that identifies the domain in which the user account is located. This is one of the standard ways to log on to a Windows domain. The format is: someone@example.com (as for an email address). A Down-Level Logon Name can also be used for creating a <xref:CoreWCF.UpnEndpointIdentity>. Constructors UpnEndpointIdentity(Claim) Declaration public UpnEndpointIdentity(Claim identity) Parameters Type Name Description Claim identity UpnEndpointIdentity(String) Declaration public UpnEndpointIdentity(string upnName) Parameters Type Name Description String upnName"
  },
  "api-corewcf/CoreWCF.UriSchemeKeyedCollection.html": {
    "href": "api-corewcf/CoreWCF.UriSchemeKeyedCollection.html",
    "title": "Class UriSchemeKeyedCollection",
    "keywords": "Class UriSchemeKeyedCollection Provides a thread-safe collection that contains URIs that are keyed by their transport scheme name. Inheritance Object SynchronizedCollection < Uri > SynchronizedKeyedCollection < String , Uri > UriSchemeKeyedCollection Implements IList < Uri > ICollection < Uri > IEnumerable < Uri > IEnumerable IList ICollection Inherited Members SynchronizedKeyedCollection<String, Uri>.ChangeItemKey(Uri, String) SynchronizedKeyedCollection<String, Uri>.ClearItems() SynchronizedKeyedCollection<String, Uri>.Contains(String) SynchronizedKeyedCollection<String, Uri>.GetKeyForItem(Uri) SynchronizedKeyedCollection<String, Uri>.InsertItem(Int32, Uri) SynchronizedKeyedCollection<String, Uri>.Remove(String) SynchronizedKeyedCollection<String, Uri>.RemoveItem(Int32) SynchronizedKeyedCollection<String, Uri>.SetItem(Int32, Uri) SynchronizedKeyedCollection<String, Uri>.Item[String] SynchronizedKeyedCollection<String, Uri>.Dictionary SynchronizedCollection<Uri>.Add(Uri) SynchronizedCollection<Uri>.Clear() SynchronizedCollection<Uri>.CopyTo(Uri[], Int32) SynchronizedCollection<Uri>.Contains(Uri) SynchronizedCollection<Uri>.GetEnumerator() SynchronizedCollection<Uri>.IndexOf(Uri) SynchronizedCollection<Uri>.Insert(Int32, Uri) SynchronizedCollection<Uri>.Remove(Uri) SynchronizedCollection<Uri>.RemoveAt(Int32) SynchronizedCollection<Uri>.ClearItems() SynchronizedCollection<Uri>.RemoveItem(Int32) SynchronizedCollection<Uri>.Count SynchronizedCollection<Uri>.Items SynchronizedCollection<Uri>.SyncRoot SynchronizedCollection<Uri>.Item[Int32] Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class UriSchemeKeyedCollection : SynchronizedKeyedCollection<string, Uri> Remarks This collection is used by hosts to store base addresses for a service by scheme name. Constructors UriSchemeKeyedCollection(Uri[]) Declaration public UriSchemeKeyedCollection(params Uri[] addresses) Parameters Type Name Description Uri [] addresses Methods GetKeyForItem(Uri) Declaration protected override string GetKeyForItem(Uri item) Parameters Type Name Description Uri item Returns Type Description String Overrides CoreWCF.Collections.Generic.SynchronizedKeyedCollection<System.String, System.Uri>.GetKeyForItem(System.Uri) InsertItem(Int32, Uri) Declaration protected override void InsertItem(int index, Uri item) Parameters Type Name Description Int32 index Uri item Overrides CoreWCF.Collections.Generic.SynchronizedKeyedCollection<System.String, System.Uri>.InsertItem(System.Int32, System.Uri) SetItem(Int32, Uri) Declaration protected override void SetItem(int index, Uri item) Parameters Type Name Description Int32 index Uri item Overrides CoreWCF.Collections.Generic.SynchronizedKeyedCollection<System.String, System.Uri>.SetItem(System.Int32, System.Uri) Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable System.Collections.IList System.Collections.ICollection"
  },
  "api-corewcf/CoreWCF.UriTemplate.html": {
    "href": "api-corewcf/CoreWCF.UriTemplate.html",
    "title": "Class UriTemplate",
    "keywords": "Class UriTemplate A class that represents a Uniform Resource Identifier (URI) template. Inheritance Object UriTemplate Namespace : CoreWCF Assembly : CoreWCF.WebHttp.dll Syntax public class UriTemplate : Object Remarks A URI template allows you to define a set of structurally similar URIs. Templates are composed of two parts, a path and a query. A path consists of a series of segments delimited by a slash (/). Each segment can have a literal value, a variable value (written within curly braces [{ }], constrained to match the contents of exactly one segment), or a wildcard (written as an asterisk [*], which matches \"the rest of the path\"), which must appear at the end of the path. The query expression can be omitted entirely. If present, it specifies an unordered series of name/value pairs. Elements of the query expression can be either literal pairs (?x=2) or variable pairs (?x={val}). Unpaired values are not permitted. The following examples show valid template strings: \"weather/WA/Seattle\" \"weather/{state}/{city}\" \"weather/*\" \"weather/{state}/{city}?forecast=today \"weather/{state}/{city}?forecast={day} The preceding URI templates might be used for organizing weather reports. Segments enclosed in curly braces are variables, everything else is a literal. You can convert a <xref:System.UriTemplate> instance into a <xref:System.Uri> by replacing variables with actual values. For example, taking the template \"weather/{state}/{city}\" and putting in values for the variables \"{state}\" and \"{city}\" gives you \"weather/WA/Seattle\". Given a candidate URI, you can test whether it matches a given URI template by calling <xref:System.UriTemplate.Match%28System.Uri%2CSystem.Uri%29>. You can also use <xref:System.UriTemplate> instances to create a <xref:System.Uri> from a set of variable values by calling <xref:System.UriTemplate.BindByName%28System.Uri%2CSystem.Collections.Specialized.NameValueCollection%29> or <xref:System.UriTemplate.BindByPosition%28System.Uri%2CSystem.String%5B%5D%29>. Constructors UriTemplate(String) Declaration public UriTemplate(string template) Parameters Type Name Description String template UriTemplate(String, Boolean) Declaration public UriTemplate(string template, bool ignoreTrailingSlash) Parameters Type Name Description String template Boolean ignoreTrailingSlash UriTemplate(String, Boolean, IDictionary<String, String>) Declaration public UriTemplate(string template, bool ignoreTrailingSlash, IDictionary<string, string> additionalDefaults) Parameters Type Name Description String template Boolean ignoreTrailingSlash IDictionary < String , String > additionalDefaults UriTemplate(String, IDictionary<String, String>) Declaration public UriTemplate(string template, IDictionary<string, string> additionalDefaults) Parameters Type Name Description String template IDictionary < String , String > additionalDefaults Properties Defaults Declaration public IDictionary<string, string> Defaults { get; } Property Value Type Description IDictionary < String , String > IgnoreTrailingSlash Declaration public bool IgnoreTrailingSlash { get; } Property Value Type Description Boolean PathSegmentVariableNames Declaration public ReadOnlyCollection<string> PathSegmentVariableNames { get; } Property Value Type Description ReadOnlyCollection < String > QueryValueVariableNames Declaration public ReadOnlyCollection<string> QueryValueVariableNames { get; } Property Value Type Description ReadOnlyCollection < String > Methods BindByName(Uri, IDictionary<String, String>) Declaration public Uri BindByName(Uri baseAddress, IDictionary<string, string> parameters) Parameters Type Name Description Uri baseAddress IDictionary < String , String > parameters Returns Type Description Uri BindByName(Uri, IDictionary<String, String>, Boolean) Declaration public Uri BindByName(Uri baseAddress, IDictionary<string, string> parameters, bool omitDefaults) Parameters Type Name Description Uri baseAddress IDictionary < String , String > parameters Boolean omitDefaults Returns Type Description Uri BindByName(Uri, NameValueCollection) Declaration public Uri BindByName(Uri baseAddress, NameValueCollection parameters) Parameters Type Name Description Uri baseAddress NameValueCollection parameters Returns Type Description Uri BindByName(Uri, NameValueCollection, Boolean) Declaration public Uri BindByName(Uri baseAddress, NameValueCollection parameters, bool omitDefaults) Parameters Type Name Description Uri baseAddress NameValueCollection parameters Boolean omitDefaults Returns Type Description Uri BindByPosition(Uri, String[]) Declaration public Uri BindByPosition(Uri baseAddress, params string[] values) Parameters Type Name Description Uri baseAddress String [] values Returns Type Description Uri IsEquivalentTo(UriTemplate) Declaration public bool IsEquivalentTo(UriTemplate other) Parameters Type Name Description UriTemplate other Returns Type Description Boolean Match(Uri, Uri) Declaration public UriTemplateMatch Match(Uri baseAddress, Uri candidate) Parameters Type Name Description Uri baseAddress Uri candidate Returns Type Description UriTemplateMatch ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "api-corewcf/CoreWCF.UriTemplateEquivalenceComparer.html": {
    "href": "api-corewcf/CoreWCF.UriTemplateEquivalenceComparer.html",
    "title": "Class UriTemplateEquivalenceComparer",
    "keywords": "Class UriTemplateEquivalenceComparer A class used to compare instances for structural (instead of reference) equivalence. Inheritance Object UriTemplateEquivalenceComparer Implements IEqualityComparer < UriTemplate > Namespace : CoreWCF Assembly : CoreWCF.WebHttp.dll Syntax public class UriTemplateEquivalenceComparer : Object Remarks <xref:System.UriTemplate> instances are compared using reference equality by default. The <xref:System.UriTemplateEquivalenceComparer> class evaluates equivalence using <xref:System.UriTemplate.IsEquivalentTo%28System.UriTemplate%29> instead of the default reference equality check. This class is useful when you wish to compare two <xref:System.UriTemplate> instances based on the URIs they match instead of strict reference equality. Constructors UriTemplateEquivalenceComparer() Declaration public UriTemplateEquivalenceComparer() Methods Equals(UriTemplate, UriTemplate) Declaration public bool Equals(UriTemplate x, UriTemplate y) Parameters Type Name Description UriTemplate x UriTemplate y Returns Type Description Boolean GetHashCode(UriTemplate) Declaration public int GetHashCode(UriTemplate obj) Parameters Type Name Description UriTemplate obj Returns Type Description Int32 Implements System.Collections.Generic.IEqualityComparer<T>"
  },
  "api-corewcf/CoreWCF.UriTemplateMatch.html": {
    "href": "api-corewcf/CoreWCF.UriTemplateMatch.html",
    "title": "Class UriTemplateMatch",
    "keywords": "Class UriTemplateMatch A class that represents the results of a match operation on a instance. Inheritance Object UriTemplateMatch Namespace : CoreWCF Assembly : CoreWCF.WebHttp.dll Syntax public class UriTemplateMatch : Object Remarks The <xref:System.UriTemplateMatch> class represents the results of calling the <xref:System.UriTemplate.Match%28System.Uri%2CSystem.Uri%29> method. This class is not thread safe. Constructors UriTemplateMatch() Declaration public UriTemplateMatch() Properties BaseUri Declaration public Uri BaseUri { get; set; } Property Value Type Description Uri BoundVariables Declaration public NameValueCollection BoundVariables { get; } Property Value Type Description NameValueCollection Data Declaration public object Data { get; set; } Property Value Type Description Object QueryParameters Declaration public NameValueCollection QueryParameters { get; } Property Value Type Description NameValueCollection RelativePathSegments Declaration public Collection<string> RelativePathSegments { get; } Property Value Type Description Collection < String > RequestUri Declaration public Uri RequestUri { get; set; } Property Value Type Description Uri Template Declaration public UriTemplate Template { get; set; } Property Value Type Description UriTemplate WildcardPathSegments Declaration public Collection<string> WildcardPathSegments { get; } Property Value Type Description Collection < String >"
  },
  "api-corewcf/CoreWCF.UriTemplateMatchException.html": {
    "href": "api-corewcf/CoreWCF.UriTemplateMatchException.html",
    "title": "Class UriTemplateMatchException",
    "keywords": "Class UriTemplateMatchException Represents an error when matching a to a . Inheritance Object UriTemplateMatchException Namespace : CoreWCF Assembly : CoreWCF.WebHttp.dll Syntax public class UriTemplateMatchException : SystemException Remarks To be added. Constructors UriTemplateMatchException() Declaration public UriTemplateMatchException() UriTemplateMatchException(SerializationInfo, StreamingContext) Declaration protected UriTemplateMatchException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context UriTemplateMatchException(String) Declaration public UriTemplateMatchException(string message) Parameters Type Name Description String message UriTemplateMatchException(String, Exception) Declaration public UriTemplateMatchException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException"
  },
  "api-corewcf/CoreWCF.UriTemplateTable.html": {
    "href": "api-corewcf/CoreWCF.UriTemplateTable.html",
    "title": "Class UriTemplateTable",
    "keywords": "Class UriTemplateTable A class that represents an associative set of objects. Inheritance Object UriTemplateTable Namespace : CoreWCF Assembly : CoreWCF.WebHttp.dll Syntax public class UriTemplateTable : Object Remarks A <xref:System.UriTemplateTable> is an associative set of <xref:System.UriTemplate> objects bound to an object of the developer's choosing. It allows you to match candidate Uniform Resource Identifiers (URIs) against the templates in the set and retrieve the data associated with the matching templates. The contents of <xref:System.UriTemplateTable> can be changed until the <xref:System.UriTemplateTable.MakeReadOnly%28System.Boolean%29> method is called, at which time one of following types of validation occurs: When <xref:System.UriTemplateTable.MakeReadOnly%28System.Boolean%29> is called passing in false , the <xref:System.UriTemplateTable> checks to make sure the table contains no multiple structurally-equivalent templates. If it finds such templates, it throws an exception. This type of validation is used in conjunction with <xref:System.UriTemplateTable.MatchSingle%28System.Uri%29> when you want to ensure only one template matches an incoming URI. When <xref:System.UriTemplateTable.MakeReadOnly%28System.Boolean%29> is called passing in true , multiple structurally-equivalent templates can be contained within a <xref:System.UriTemplateTable>. However, any query strings in the templates must not be ambiguous; identical query strings are allowed. For more information about ambiguous query strings, see UriTemplate and UriTemplateTable . Constructors UriTemplateTable() Declaration public UriTemplateTable() UriTemplateTable(IEnumerable<KeyValuePair<UriTemplate, Object>>) Declaration public UriTemplateTable(IEnumerable<KeyValuePair<UriTemplate, object>> keyValuePairs) Parameters Type Name Description IEnumerable < KeyValuePair < UriTemplate , Object >> keyValuePairs UriTemplateTable(Uri) Declaration public UriTemplateTable(Uri baseAddress) Parameters Type Name Description Uri baseAddress UriTemplateTable(Uri, IEnumerable<KeyValuePair<UriTemplate, Object>>) Declaration public UriTemplateTable(Uri baseAddress, IEnumerable<KeyValuePair<UriTemplate, object>> keyValuePairs) Parameters Type Name Description Uri baseAddress IEnumerable < KeyValuePair < UriTemplate , Object >> keyValuePairs Properties BaseAddress Declaration public Uri BaseAddress { get; set; } Property Value Type Description Uri IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean KeyValuePairs Declaration public IList<KeyValuePair<UriTemplate, object>> KeyValuePairs { get; } Property Value Type Description IList < KeyValuePair < UriTemplate , Object >> OriginalBaseAddress Declaration public Uri OriginalBaseAddress { get; } Property Value Type Description Uri Methods MakeReadOnly(Boolean) Declaration public void MakeReadOnly(bool allowDuplicateEquivalentUriTemplates) Parameters Type Name Description Boolean allowDuplicateEquivalentUriTemplates Match(Uri) Declaration public Collection<UriTemplateMatch> Match(Uri uri) Parameters Type Name Description Uri uri Returns Type Description Collection < UriTemplateMatch > MatchSingle(Uri) Declaration public UriTemplateMatch MatchSingle(Uri uri) Parameters Type Name Description Uri uri Returns Type Description UriTemplateMatch"
  },
  "api-corewcf/CoreWCF.Web.html": {
    "href": "api-corewcf/CoreWCF.Web.html",
    "title": "Namespace CoreWCF.Web",
    "keywords": "Namespace CoreWCF.Web Classes IncomingWebRequestContext Provides programmatic access to the context of the incoming Web request. OutgoingWebResponseContext Provides programmatic access to the context of the outgoing Web response. WebFaultException Represents a fault that can have an associated HTTP status code. WebFaultException<T> Represents a fault that can have an associated HTTP status code. WebGetAttribute Represents an attribute indicating that a service operation is logically a retrieval operation and that it can be called by the WCF REST programming model. WebInvokeAttribute Represents an attribute indicating that a service operation is logically an invoke operation and that it can be called by the WCF REST programming model. WebMessageBodyStyle An enumeration that specifies whether to wrap parameter and return values. WebMessageFormat An enumeration that specifies the format of Web messages. WebOperationContext A helper class that provides easy access to contextual properties of Web requests and responses."
  },
  "api-corewcf/CoreWCF.Web.IncomingWebRequestContext.html": {
    "href": "api-corewcf/CoreWCF.Web.IncomingWebRequestContext.html",
    "title": "Class IncomingWebRequestContext",
    "keywords": "Class IncomingWebRequestContext Provides programmatic access to the context of the incoming Web request. Inheritance Object IncomingWebRequestContext Namespace : CoreWCF.Web Assembly : CoreWCF.WebHttp.dll Syntax public class IncomingWebRequestContext : Object Remarks To be added. Properties Accept Gets the Accept header value from the incoming Web request Declaration public string Accept { get; } Property Value Type Description String The Accept header from the incoming Web request. ContentLength Declaration public long ContentLength { get; } Property Value Type Description Int64 The ContentLength header of the incoming Web request. ContentType Gets the ContentType header value from the incoming Web request. Declaration public string ContentType { get; } Property Value Type Description String The ContentType header from the incoming Web request. Headers Gets the headers for the incoming Web request. Declaration public WebHeaderCollection Headers { get; } Property Value Type Description WebHeaderCollection A WebHeaderCollection instance that contains the headers of the incoming Web request. IfMatch Gets a collection of the items contained in the requests If-Match header Declaration public IEnumerable<string> IfMatch { get; } Property Value Type Description IEnumerable < String > A collection of items contained in the requests If-Match header IfModifiedSince Gets the value of the request's If-Modified-Since header. Declaration public Nullable<DateTime> IfModifiedSince { get; } Property Value Type Description Nullable < DateTime > The request's If-Modified-Since header value. IfNoneMatch Gets the values contained in the request's If-None-Match header. Declaration public IEnumerable<string> IfNoneMatch { get; } Property Value Type Description IEnumerable < String > The values contained in the request's If-None-Match header IfUnmodifiedSince Gets the value of the request's If-Unmatched-Since header. Declaration public Nullable<DateTime> IfUnmodifiedSince { get; } Property Value Type Description Nullable < DateTime > The request's If-Unmatched-Since header. Method Gets the HTTP method of the incoming Web request. Declaration public string Method { get; } Property Value Type Description String The HTTP method of the incoming Web request UriTemplateMatch Gets or sets the UriTemplateMatch instance created during the dispatch of the incoming Web request. Declaration public UriTemplateMatch UriTemplateMatch { get; set; } Property Value Type Description UriTemplateMatch A UriTemplateMatch instance UserAgent Gets the UserAgent header value from the incoming Web request. Declaration public string UserAgent { get; } Property Value Type Description String The UserAgent header from the incoming Web request. Methods CheckConditionalRetrieve(DateTime) Called when a conditional receive request is made for a resource Declaration public void CheckConditionalRetrieve(DateTime lastModified) Parameters Type Name Description DateTime lastModified The time at which the resource was last modified. CheckConditionalRetrieve(Guid) Called when a conditional receive request is made for a resource Declaration public void CheckConditionalRetrieve(Guid entityTag) Parameters Type Name Description Guid entityTag An entity tag CheckConditionalRetrieve(Int32) Called when a conditional receive request is made for a resource Declaration public void CheckConditionalRetrieve(int entityTag) Parameters Type Name Description Int32 entityTag An entity tag. CheckConditionalRetrieve(Int64) Called when a conditional receive request is made for a resource Declaration public void CheckConditionalRetrieve(long entityTag) Parameters Type Name Description Int64 entityTag The entity tag. CheckConditionalRetrieve(String) Called when a conditional receive request is made for a resource Declaration public void CheckConditionalRetrieve(string entityTag) Parameters Type Name Description String entityTag The entity tag. CheckConditionalUpdate(Guid) Called when a conditional receive request is made for a resource Declaration public void CheckConditionalUpdate(Guid entityTag) Parameters Type Name Description Guid entityTag The entity tag CheckConditionalUpdate(Int32) Called when a conditional update request is made for a resource Declaration public void CheckConditionalUpdate(int entityTag) Parameters Type Name Description Int32 entityTag The entity tag CheckConditionalUpdate(Int64) Called when a conditional update request is made for a resource Declaration public void CheckConditionalUpdate(long entityTag) Parameters Type Name Description Int64 entityTag The entity tag CheckConditionalUpdate(String) Called when a conditional update request is made for a resource. Declaration public void CheckConditionalUpdate(string entityTag) Parameters Type Name Description String entityTag The entity tag GetAcceptHeaderElements() Gets a collection of the Accept header elements Declaration public Collection<ContentType> GetAcceptHeaderElements() Returns Type Description Collection < ContentType > A collection of the Accept header elements."
  },
  "api-corewcf/CoreWCF.Web.OutgoingWebResponseContext.html": {
    "href": "api-corewcf/CoreWCF.Web.OutgoingWebResponseContext.html",
    "title": "Class OutgoingWebResponseContext",
    "keywords": "Class OutgoingWebResponseContext Provides programmatic access to the context of the outgoing Web response. Inheritance Object OutgoingWebResponseContext Namespace : CoreWCF.Web Assembly : CoreWCF.WebHttp.dll Syntax public class OutgoingWebResponseContext : Object Remarks To be added. Properties BindingWriteEncoding Gets the encoding set on the binding. Declaration public Encoding BindingWriteEncoding { get; } Property Value Type Description Encoding The encoding. ContentLength Gets or sets the content length header from the outgoing Web response. Declaration public long ContentLength { get; set; } Property Value Type Description Int64 The content length header of the outgoing Web response. ContentType Gets or sets the content type header from the outgoing Web response. Declaration public string ContentType { get; set; } Property Value Type Description String The content type header of the outgoing Web response. ETag Gets or sets the etag header from the outgoing Web response. Declaration public string ETag { get; set; } Property Value Type Description String The etag header of the outgoing Web response Format Gets or sets the web message format. Declaration public Nullable<WebMessageFormat> Format { get; set; } Property Value Type Description Nullable < WebMessageFormat > The web message format. Headers Gets the headers from the outgoing Web response. Declaration public WebHeaderCollection Headers { get; } Property Value Type Description WebHeaderCollection A WebHeaderCollection instance that contains the headers from the outgoing Web response. LastModified Gets or sets the last modified header of the outgoing Web response. Declaration public DateTime LastModified { get; set; } Property Value Type Description DateTime A DateTime instance that contains the time the requested resource was last modified. Location Gets or sets the location header from the outgoing Web response. Declaration public string Location { get; set; } Property Value Type Description String The location header from the outgoing Web response. StatusCode Gets or sets the status code of the outgoing Web response. Declaration public HttpStatusCode StatusCode { get; set; } Property Value Type Description HttpStatusCode An HttpStatusCode instance that contains the status code of the outgoing Web response. StatusDescription Gets or sets the status description of the outgoing Web response. Declaration public string StatusDescription { get; set; } Property Value Type Description String The status description of the outgoing Web response. SuppressEntityBody Gets or sets a value that indicates whether Windows Communication Foundation (WCF) omits data that is normally written to the entity body of the response and forces an empty response to be returned. Declaration public bool SuppressEntityBody { get; set; } Property Value Type Description Boolean If true, WCF omits any data that is normally written to the entity body of the response and forces an empty response to be returned. The default value is false. Methods SetETag(Guid) Sets the specified ETag. Declaration public void SetETag(Guid entityTag) Parameters Type Name Description Guid entityTag The ETag to set. SetETag(Int32) Sets the specified ETag. Declaration public void SetETag(int entityTag) Parameters Type Name Description Int32 entityTag The ETag to set. SetETag(Int64) Sets the specified ETag. Declaration public void SetETag(long entityTag) Parameters Type Name Description Int64 entityTag The ETag to set. SetETag(String) Sets the specified ETag. Declaration public void SetETag(string entityTag) Parameters Type Name Description String entityTag The ETag to set. SetStatusAsCreated(Uri) Sets the HTTP status code of the outgoing Web response to Created and sets the Location header to the provided URI. Declaration public void SetStatusAsCreated(Uri locationUri) Parameters Type Name Description Uri locationUri The Uri instance to the requested resource. SetStatusAsNotFound() Sets the HTTP status code of the outgoing Web response to NotFound . Declaration public void SetStatusAsNotFound() SetStatusAsNotFound(String) Sets the HTTP status code of the outgoing Web response to NotFound with the specified description. Declaration public void SetStatusAsNotFound(string description) Parameters Type Name Description String description"
  },
  "api-corewcf/CoreWCF.Web.WebFaultException.html": {
    "href": "api-corewcf/CoreWCF.Web.WebFaultException.html",
    "title": "Class WebFaultException",
    "keywords": "Class WebFaultException Represents a fault that can have an associated HTTP status code. Inheritance Object CommunicationException FaultException WebFaultException Inherited Members FaultException.CreateFault(MessageFault, Type[]) FaultException.CreateFault(MessageFault, String, Type[]) FaultException.CreateMessageFault() FaultException.Action FaultException.Code FaultException.Message FaultException.Reason Namespace : CoreWCF.Web Assembly : CoreWCF.WebHttp.dll Syntax public class WebFaultException : FaultException Remarks When using a WCF REST endpoint ( WebHttpBinding and WebHttpBehavior or <xref:CoreWCF.Description.WebScriptEnablingBehavior>) the HTTP status code on the response is set accordingly. However, WebFaultException can be used with non-REST endpoints and behaves like a regular FaultException . When using a WCF REST endpoint, the response format of the serialized fault is determined in the same way as a non-fault response. For more information about WCF REST formatting, see WCF Web HTTP Formatting . Constructors WebFaultException(HttpStatusCode) Initializes a new instance of the WebFaultException class with the specified HttpStatusCode . Declaration public WebFaultException(HttpStatusCode statusCode) Parameters Type Name Description HttpStatusCode statusCode The HTTP status code to return to the caller. WebFaultException(SerializationInfo, StreamingContext) Initializes a new instance of the WebFaultException class with the specified SerializationInfo and StreamingContext . Declaration protected WebFaultException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The serialization information. StreamingContext context The streaming context. Properties StatusCode Gets the HttpStatusCode associated with the fault. Declaration public HttpStatusCode StatusCode { get; } Property Value Type Description HttpStatusCode The HTTP status code associated with the fault. Methods GetObjectData(SerializationInfo, StreamingContext) An implementation of the GetObjectData(SerializationInfo, StreamingContext) method that is called when an object is serialized to a stream. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The serialization information to which the object data is added when serialized. StreamingContext context The destination for the serialized object. Overrides FaultException.GetObjectData(SerializationInfo, StreamingContext)"
  },
  "api-corewcf/CoreWCF.Web.WebFaultException-1.html": {
    "href": "api-corewcf/CoreWCF.Web.WebFaultException-1.html",
    "title": "Class WebFaultException<T>",
    "keywords": "Class WebFaultException<T> Represents a fault that can have an associated HTTP status code. Inheritance Object CommunicationException FaultException FaultException <T> WebFaultException<T> Inherited Members FaultException<T>.CreateMessageFault() FaultException<T>.ToString() FaultException<T>.Detail FaultException.CreateFault(MessageFault, Type[]) FaultException.CreateFault(MessageFault, String, Type[]) FaultException.Action FaultException.Code FaultException.Message FaultException.Reason Namespace : CoreWCF.Web Assembly : CoreWCF.WebHttp.dll Syntax public class WebFaultException<T> : FaultException<T> Type Parameters Name Description T The serializable error detail type. Remarks When using a WCF REST endpoint ( WebHttpBinding and WebHttpBehavior or <xref:CoreWCF.Description.WebScriptEnablingBehavior>) the HTTP status code on the response is set accordingly. However, WebFaultException can be used with non-REST endpoints and behaves like a regular <xref:CoreWCF.FaultException>. Use this class to return error details using the same format as the operation. Constructors WebFaultException(T, HttpStatusCode) Initializes a new instance of the WebFaultException class with the specified exception detail and the WebFaultException(HttpStatusCode) to return to the caller. Declaration public WebFaultException(T detail, HttpStatusCode statusCode) Parameters Type Name Description T detail The fault. HttpStatusCode statusCode The HTTP status code to set on the response message WebFaultException(T, HttpStatusCode, IEnumerable<Type>) Initializes a new instance of the WebFaultException class with the specified exception detail and the StatusCode to return to the caller. Declaration public WebFaultException(T detail, HttpStatusCode statusCode, IEnumerable<Type> knownTypes) Parameters Type Name Description T detail The fault. HttpStatusCode statusCode The HTTP status code to set on the response message. IEnumerable < Type > knownTypes The set of known types that are used for serialization and deserialization. WebFaultException(SerializationInfo, StreamingContext) Initializes a new instance of the WebFaultException class with the specified SerializationInfo and StreamingContext . Declaration protected WebFaultException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The serialization info. StreamingContext context The streaming context. Properties StatusCode Gets the HttpStatusCode associated with the fault. Declaration public HttpStatusCode StatusCode { get; } Property Value Type Description HttpStatusCode The HTTP status code associated with the fault. Methods GetObjectData(SerializationInfo, StreamingContext) An implementation of the <xref:CoreWCF.FaultException{{T}}.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)> method that is called when an object is serialized to a stream. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The serialization information to which the object data is added when serialized. StreamingContext context The destination for the serialized object. Overrides CoreWCF.FaultException<T>.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)"
  },
  "api-corewcf/CoreWCF.Web.WebGetAttribute.html": {
    "href": "api-corewcf/CoreWCF.Web.WebGetAttribute.html",
    "title": "Class WebGetAttribute",
    "keywords": "Class WebGetAttribute Represents an attribute indicating that a service operation is logically a retrieval operation and that it can be called by the WCF REST programming model. Inheritance Object WebGetAttribute Implements IOperationContractAttributeProvider IOperationBehavior Namespace : CoreWCF.Web Assembly : CoreWCF.WebHttp.dll Syntax public sealed class WebGetAttribute : Attribute, IOperationContractAttributeProvider, IOperationBehavior Remarks The WebGetAttribute attribute is applied to a service operation in addition to the OperationContractAttribute and associates the operation with a UriTemplate as well as the HTTP protocol Get verb. The association with HTTP Get verb means that the operation is used to retrieve information from the service. The WebGetAttribute attribute is a passive operation behavior (the IOperationBehavior methods do nothing) that adds metadata to the operation description. Applying the WebGetAttribute attribute to a service operation has no effect unless a behavior that is looking for this metadata in the operation description (such as WebHttpBehavior ) is added to the service's behavior collection. Service operations with the WebGetAttribute attribute applied should be logical retrieval operations. The HTTP GET method is associated with all operations marked with the WebGetAttribute attribute. Constructors WebGetAttribute() Initializes a new instance of the WebGetAttribute class. Declaration public WebGetAttribute() Properties BodyStyle Gets or sets the body style of the messages that are sent to and from the service operation. Declaration public WebMessageBodyStyle BodyStyle { get; set; } Property Value Type Description WebMessageBodyStyle One of the WebMessageBodyStyle enumeration values. Remarks When set to Bare , the result of the service operation is written directly to the body of the response message IsBodyStyleSetExplicitly Gets the IsBodyStyleSetExplicitly property Declaration public bool IsBodyStyleSetExplicitly { get; } Property Value Type Description Boolean A value that specifies whether the BodyStyle property is set. Remarks This property is designed to be used by the WCF infrastructure and should never be set from user code IsRequestFormatSetExplicitly Gets the IsRequestFormatSetExplicitly property Declaration public bool IsRequestFormatSetExplicitly { get; } Property Value Type Description Boolean A value that specifies whether the RequestFormat property was set IsResponseFormatSetExplicitly Gets the IsResponseFormatSetExplicitly property Declaration public bool IsResponseFormatSetExplicitly { get; } Property Value Type Description Boolean A value that specifies whether the ResponseFormat property was set. Remarks This property is designed to be used by the WCF infrastructure and should never be set from user code RequestFormat Gets or sets the RequestFormat property. Declaration public WebMessageFormat RequestFormat { get; set; } Property Value Type Description WebMessageFormat One of the WebMessageFormat enumeration values Remarks This property determines the format of requests made to a service operation. The two possible values are Xml and Json ResponseFormat Gets or sets the ResponseFormat property Declaration public WebMessageFormat ResponseFormat { get; set; } Property Value Type Description WebMessageFormat One of the WebMessageFormat enumeration values. UriTemplate Gets or sets the Uniform Resource Identifier (URI) template for the service operation Declaration public string UriTemplate { get; set; } Property Value Type Description String The URI template for the service operation Remarks URI templates are used to determine which requests get dispatched to which service operations. URI templates allow you to map a URI or a set of URIs to a service operation. For more information about URI templates, see UriTemplate and UriTemplateTable . Explicit Interface Implementations IOperationBehavior.AddBindingParameters(OperationDescription, BindingParameterCollection) Implements the AddBindingParameters(OperationDescription, BindingParameterCollection) method Declaration void IOperationBehavior.AddBindingParameters(OperationDescription operationDescription, BindingParameterCollection bindingParameters) Parameters Type Name Description OperationDescription operationDescription The operation description. BindingParameterCollection bindingParameters A collection of binding parameters. Remarks This method does nothing because the WebGetAttribute attribute is a passive operation behavior IOperationBehavior.ApplyClientBehavior(OperationDescription, ClientOperation) Implements the <xref:CoreWCF.Web.WebGetAttribute.CoreWCF#Description#IOperationBehavior#ApplyClientBehavior*> method Declaration void IOperationBehavior.ApplyClientBehavior(OperationDescription operationDescription, ClientOperation clientOperation) Parameters Type Name Description OperationDescription operationDescription The operation description ClientOperation clientOperation The client operation. Remarks This method does nothing because the WebGetAttribute attribute is a passive operation behavior. IOperationBehavior.ApplyDispatchBehavior(OperationDescription, DispatchOperation) Implements the ApplyDispatchBehavior(OperationDescription, DispatchOperation) method Declaration void IOperationBehavior.ApplyDispatchBehavior(OperationDescription operationDescription, DispatchOperation dispatchOperation) Parameters Type Name Description OperationDescription operationDescription The operation description. DispatchOperation dispatchOperation The operation to dispatch to Remarks This method does nothing because the WebGetAttribute attribute is a passive operation behavior IOperationBehavior.Validate(OperationDescription) Implements the <xref:CoreWCF.Web.WebGetAttribute.CoreWCF#Description#IOperationBehavior#Validate*> method Declaration void IOperationBehavior.Validate(OperationDescription operationDescription) Parameters Type Name Description OperationDescription operationDescription The operation description Remarks This method does nothing because the WebGetAttribute attribute is a passive operation behavior. IOperationContractAttributeProvider.GetOperationContractAttribute() Declaration OperationContractAttribute IOperationContractAttributeProvider.GetOperationContractAttribute() Returns Type Description OperationContractAttribute Implements IOperationContractAttributeProvider IOperationBehavior"
  },
  "api-corewcf/CoreWCF.Web.WebInvokeAttribute.html": {
    "href": "api-corewcf/CoreWCF.Web.WebInvokeAttribute.html",
    "title": "Class WebInvokeAttribute",
    "keywords": "Class WebInvokeAttribute Represents an attribute indicating that a service operation is logically an invoke operation and that it can be called by the WCF REST programming model. Inheritance Object WebInvokeAttribute Implements IOperationContractAttributeProvider IOperationBehavior Namespace : CoreWCF.Web Assembly : CoreWCF.WebHttp.dll Syntax public sealed class WebInvokeAttribute : Attribute, IOperationContractAttributeProvider, IOperationBehavior Remarks The WebInvokeAttribute attribute is applied to a service operation in addition to the OperationContractAttribute and associates the operation with a UriTemplate as well as an underlying transport verb that represents an invocation (for example, HTTP POST, PUT, or DELETE). The WebInvokeAttribute attribute is a passive operation behavior (the IOperationBehavior methods do nothing) that adds metadata to the operation description. Applying the WebInvokeAttribute attribute to a service operation has no effect unless a behavior that looks for this metadata in the operation description (such as WebHttpBehavior ) is added to the service's behavior collection. The WebInvokeAttribute determines what HTTP method that a service operation responds to. By default, all methods that have the WebInvokeAttribute applied respond to POST requests. The Method property allows you to specify a different HTTP method. If you want a service operation to respond to GET, use the WebGetAttribute instead. Constructors WebInvokeAttribute() Initializes a new instance of the WebInvokeAttribute class Declaration public WebInvokeAttribute() Properties BodyStyle Gets or sets the body style of the messages that are sent to and from the service operation. Declaration public WebMessageBodyStyle BodyStyle { get; set; } Property Value Type Description WebMessageBodyStyle One of the WebMessageBodyStyle enumeration values. Remarks When set to Bare , the result of the service operation is written directly to the body of the response message. IsBodyStyleSetExplicitly Gets the IsBodyStyleSetExplicitly property Declaration public bool IsBodyStyleSetExplicitly { get; } Property Value Type Description Boolean A value that specifies whether the BodyStyle property was set explicitly. Remarks This property is designed to be used by the WCF infrastructure and should never be set from user code. IsRequestFormatSetExplicitly Gets the IsRequestFormatSetExplicitly property. Declaration public bool IsRequestFormatSetExplicitly { get; } Property Value Type Description Boolean A value that specifies whether the RequestFormat property was set. Remarks This property is designed to be used by the WCF infrastructure and should never be set from user code. IsResponseFormatSetExplicitly Gets the IsResponseFormatSetExplicitly property. Declaration public bool IsResponseFormatSetExplicitly { get; } Property Value Type Description Boolean A value that specifies whether the ResponseFormat property was set. Remarks This property is designed to be used by the WCF infrastructure and should never be set from user code. Method Gets or sets the protocol (for example HTTP) method the service operation responds to. Declaration public string Method { get; set; } Property Value Type Description String The protocol method associated with the operation Remarks Method defaults to POST. RequestFormat Gets or sets the RequestFormat property. Declaration public WebMessageFormat RequestFormat { get; set; } Property Value Type Description WebMessageFormat One of the WebMessageFormat enumeration values. Remarks This property determines the format of requests made to a service operation. The possible values are Xml and Json. ResponseFormat Gets or sets the ResponseFormat property. Declaration public WebMessageFormat ResponseFormat { get; set; } Property Value Type Description WebMessageFormat One of the WebMessageFormat enumeration values. Remarks This property determines the format of responses sent from a service operation. The possible values are Xml and Json. UriTemplate The Uniform Resource Identifier (URI) template for the service operation. Declaration public string UriTemplate { get; set; } Property Value Type Description String The URI template for the service operation. Remarks URI templates are used to determine which requests get dispatched to which service operations. URI templates allow you to map a URI or a set of URIs to a service operation. For more information about URI templates, see UriTemplate and UriTemplateTable Explicit Interface Implementations IOperationBehavior.AddBindingParameters(OperationDescription, BindingParameterCollection) Implements the <xref:CoreWCF.Web.WebInvokeAttribute.CoreWCF#Description#IOperationBehavior#AddBindingParameters*> method Declaration void IOperationBehavior.AddBindingParameters(OperationDescription operationDescription, BindingParameterCollection bindingParameters) Parameters Type Name Description OperationDescription operationDescription The operation description BindingParameterCollection bindingParameters A collection of binding parameters. Remarks This method does nothing because the WebInvokeAttribute attribute is a passive operation behavior. IOperationBehavior.ApplyClientBehavior(OperationDescription, ClientOperation) Implements the <xref:CoreWCF.Web.WebInvokeAttribute.CoreWCF#Description#IOperationBehavior#ApplyClientBehavior*> method. Declaration void IOperationBehavior.ApplyClientBehavior(OperationDescription operationDescription, ClientOperation clientOperation) Parameters Type Name Description OperationDescription operationDescription The operation description. ClientOperation clientOperation The client operation. Remarks This method does nothing because the WebInvokeAttribute attribute is a passive operation behavior. IOperationBehavior.ApplyDispatchBehavior(OperationDescription, DispatchOperation) Implements the <xref:CoreWCF.Web.WebInvokeAttribute.CoreWCF#Description#IOperationBehavior#ApplyDispatchBehavior*> method. Declaration void IOperationBehavior.ApplyDispatchBehavior(OperationDescription operationDescription, DispatchOperation dispatchOperation) Parameters Type Name Description OperationDescription operationDescription The operation description. DispatchOperation dispatchOperation The operation to dispatch to. Remarks This method does nothing because the WebInvokeAttribute attribute is a passive operation behavior. IOperationBehavior.Validate(OperationDescription) Implements the <xref:CoreWCF.Web.WebInvokeAttribute.CoreWCF#Description#IOperationBehavior#Validate*> method. Declaration void IOperationBehavior.Validate(OperationDescription operationDescription) Parameters Type Name Description OperationDescription operationDescription The operation description. Remarks This method does nothing because the WebInvokeAttribute attribute is a passive operation behavior. IOperationContractAttributeProvider.GetOperationContractAttribute() Declaration OperationContractAttribute IOperationContractAttributeProvider.GetOperationContractAttribute() Returns Type Description OperationContractAttribute Implements IOperationContractAttributeProvider IOperationBehavior"
  },
  "api-corewcf/CoreWCF.Web.WebMessageBodyStyle.html": {
    "href": "api-corewcf/CoreWCF.Web.WebMessageBodyStyle.html",
    "title": "Class WebMessageBodyStyle",
    "keywords": "Class WebMessageBodyStyle An enumeration that specifies whether to wrap parameter and return values. Inheritance Object WebMessageBodyStyle Namespace : CoreWCF.Web Assembly : CoreWCF.WebHttp.dll Syntax public sealed class WebMessageBodyStyle : Enum Remarks When the service or client serializes parameters and return values to a message, it writes them within infrastructure-provided XML elements and are wrapped . Sometimes developers do not want the service to write these extra XML elements. The WebMessageBodyStyle enumeration specifies whether to wrap parameters and return values. This enumeration is used with the WebGetAttribute and the WebInvokeAttribute to control how the data passed to and from a service operation appears on the wire. Both attributes default to Bare. Fields Bare Declaration public const WebMessageBodyStyle Bare Field Value Type Description WebMessageBodyStyle Both requests and responses are not wrapped. Wrapped Declaration public const WebMessageBodyStyle Wrapped Field Value Type Description WebMessageBodyStyle Both requests and responses are wrapped. WrappedRequest Declaration public const WebMessageBodyStyle WrappedRequest Field Value Type Description WebMessageBodyStyle Requests are wrapped, responses are not wrapped. WrappedResponse Declaration public const WebMessageBodyStyle WrappedResponse Field Value Type Description WebMessageBodyStyle Responses are wrapped, requests are not wrapped."
  },
  "api-corewcf/CoreWCF.Web.WebMessageFormat.html": {
    "href": "api-corewcf/CoreWCF.Web.WebMessageFormat.html",
    "title": "Class WebMessageFormat",
    "keywords": "Class WebMessageFormat An enumeration that specifies the format of Web messages. Inheritance Object WebMessageFormat Namespace : CoreWCF.Web Assembly : CoreWCF.WebHttp.dll Syntax public sealed class WebMessageFormat : Enum Remarks To be added. Fields Json Declaration public const WebMessageFormat Json Field Value Type Description WebMessageFormat The JavaScript Object Notation (JSON) format. Xml Declaration public const WebMessageFormat Xml Field Value Type Description WebMessageFormat The XML format."
  },
  "api-corewcf/CoreWCF.Web.WebOperationContext.html": {
    "href": "api-corewcf/CoreWCF.Web.WebOperationContext.html",
    "title": "Class WebOperationContext",
    "keywords": "Class WebOperationContext A helper class that provides easy access to contextual properties of Web requests and responses. Inheritance Object WebOperationContext Implements IExtension < OperationContext > Namespace : CoreWCF.Web Assembly : CoreWCF.WebHttp.dll Syntax public class WebOperationContext : Object, IExtension<OperationContext> Constructors WebOperationContext(OperationContext) Initializes a new instance of the WebOperationContext class with the specified OperationContext instance. Declaration public WebOperationContext(OperationContext operationContext) Parameters Type Name Description OperationContext operationContext The operation context. Properties Current Gets the current Web operation context Declaration public static WebOperationContext Current { get; } Property Value Type Description WebOperationContext A WebOperationContext instance IncomingRequest Gets the Web request context for the request being received Declaration public IncomingWebRequestContext IncomingRequest { get; } Property Value Type Description IncomingWebRequestContext An IncomingWebRequestContext instance OutgoingResponse Gets the Web response context for the response being sent Declaration public OutgoingWebResponseContext OutgoingResponse { get; } Property Value Type Description OutgoingWebResponseContext An OutgoingWebResponseContext instance Methods Attach(OperationContext) Attaches the current WebOperationContext instance to the specified OperationContext instance. Declaration public void Attach(OperationContext owner) Parameters Type Name Description OperationContext owner The OperationContext to attach to CreateJsonResponse<T>(T) Creates a JSON formatted message Declaration public Message CreateJsonResponse<T>(T instance) Parameters Type Name Description T instance The object to write to the message Returns Type Description Message A JSON formatted message Type Parameters Name Description T The type of object to write to the message CreateJsonResponse<T>(T, DataContractJsonSerializer) Creates a JSON formatted message. Declaration public Message CreateJsonResponse<T>(T instance, DataContractJsonSerializer serializer) Parameters Type Name Description T instance The object to write to the message DataContractJsonSerializer serializer The serializer to use. Returns Type Description Message A JSON formatted message Type Parameters Name Description T The type of object to write to the message CreateStreamResponse(StreamBodyWriter, String) Creates a stream formatted message Declaration public Message CreateStreamResponse(StreamBodyWriter bodyWriter, string contentType) Parameters Type Name Description StreamBodyWriter bodyWriter The stream body writer containing the data to write to the message String contentType The content type of the message Returns Type Description Message A stream formatted message. CreateStreamResponse(Action<Stream>, String) Creates a stream formatted message Declaration public Message CreateStreamResponse(Action<Stream> streamWriter, string contentType) Parameters Type Name Description Action < Stream > streamWriter The stream writer containing the data to write to the stream String contentType The content type for the message Returns Type Description Message A stream formatted message. CreateStreamResponse(Stream, String) Creates a stream formatted message Declaration public Message CreateStreamResponse(Stream stream, string contentType) Parameters Type Name Description Stream stream The stream containing the data to write to the stream String contentType The content type of the message Returns Type Description Message A stream formatted message CreateTextResponse(Action<TextWriter>, String) Creates a text formatted message Declaration public Message CreateTextResponse(Action<TextWriter> textWriter, string contentType) Parameters Type Name Description Action < TextWriter > textWriter A delegate that writes the text data String contentType The content type for the message Returns Type Description Message A text formatted message CreateTextResponse(Action<TextWriter>, String, Encoding) Creates a text formatted message. Declaration public Message CreateTextResponse(Action<TextWriter> textWriter, string contentType, Encoding encoding) Parameters Type Name Description Action < TextWriter > textWriter A delegate that writes the text data String contentType The content type of the message Encoding encoding The encoding to use Returns Type Description Message A text formatted message CreateTextResponse(String) Creates a text formatted response message. Declaration public Message CreateTextResponse(string text) Parameters Type Name Description String text The text to write to the message Returns Type Description Message A text formatted message CreateTextResponse(String, String) Creates a text formatted message Declaration public Message CreateTextResponse(string text, string contentType) Parameters Type Name Description String text The text to write to the message. String contentType The content type of the message Returns Type Description Message A text formatted message CreateTextResponse(String, String, Encoding) Creates a text formatted message Declaration public Message CreateTextResponse(string text, string contentType, Encoding encoding) Parameters Type Name Description String text The text to write to the message String contentType The content type of the message Encoding encoding The encoding to use Returns Type Description Message A text formatted message CreateXmlResponse(XDocument) Creates an XML formatted message Declaration public Message CreateXmlResponse(XDocument document) Parameters Type Name Description XDocument document The data to write to the message Returns Type Description Message An XML formatted message CreateXmlResponse(XElement) Creates an XML formatted message. Declaration public Message CreateXmlResponse(XElement element) Parameters Type Name Description XElement element The data to write to the message Returns Type Description Message An XML formatted message CreateXmlResponse<T>(T) Creates an XML formatted message Declaration public Message CreateXmlResponse<T>(T instance) Parameters Type Name Description T instance The object to write to write to the message Returns Type Description Message An XML formatted message Type Parameters Name Description T The type of object to write to the message CreateXmlResponse<T>(T, XmlObjectSerializer) Creates an XML formatted message Declaration public Message CreateXmlResponse<T>(T instance, XmlObjectSerializer serializer) Parameters Type Name Description T instance The object to write to the message XmlObjectSerializer serializer The serializer to use Returns Type Description Message An XML formatted message Type Parameters Name Description T The type of object to write to the message CreateXmlResponse<T>(T, XmlSerializer) Creates an XML formatted message. Declaration public Message CreateXmlResponse<T>(T instance, XmlSerializer serializer) Parameters Type Name Description T instance The object to write to the message. XmlSerializer serializer The serializer to use. Returns Type Description Message An XML formatted message. Type Parameters Name Description T The type of object to write to the message. Detach(OperationContext) Detaches the current WebOperationContext instance from the specified OperationContext instance Declaration public void Detach(OperationContext owner) Parameters Type Name Description OperationContext owner The OperationContext to detach from GetUriTemplate(String) Gets the URI template associated with the specified operation Declaration public UriTemplate GetUriTemplate(string operationName) Parameters Type Name Description String operationName The operation Returns Type Description UriTemplate A URI template Implements IExtension<T>"
  },
  "api-corewcf/CoreWCF.WebHttpBinding.html": {
    "href": "api-corewcf/CoreWCF.WebHttpBinding.html",
    "title": "Class WebHttpBinding",
    "keywords": "Class WebHttpBinding A binding used to configure endpoints for Windows Communication Foundation (WCF) Web services that are exposed through HTTP requests instead of SOAP messages. Inheritance Object Binding WebHttpBinding Implements IDefaultCommunicationTimeouts Inherited Members Binding.CanBuildServiceDispatcher<TChannel>(BindingParameterCollection) Binding.BuildServiceDispatcher<TChannel>(BindingParameterCollection, IServiceDispatcher) Binding.BuildServiceDispatcher<TChannel>(Uri, BindingParameterCollection, IServiceDispatcher) Binding.BuildServiceDispatcher<TChannel>(Uri, String, BindingParameterCollection, IServiceDispatcher) Binding.GetProperty<T>(BindingParameterCollection) Binding.CloseTimeout Binding.Name Binding.Namespace Binding.OpenTimeout Binding.ReceiveTimeout Binding.MessageVersion Binding.SendTimeout Namespace : CoreWCF Assembly : CoreWCF.WebHttp.dll Syntax public class WebHttpBinding : Binding, IDefaultCommunicationTimeouts Remarks The WCF Web Programming Model allows developers to expose WCF Web services through HTTP requests that use \"plain old XML\" (POX) style messaging instead of SOAP-based messaging. For clients to communicate with a service using HTTP requests, an endpoint of the service must be configured with the <xref:CoreWCF.WebHttpBinding> that has the <xref:CoreWCF.Description.WebHttpBehavior> attached to it. The WCF Web Programming Model also requires that the individual service operations are annotated with the <xref:CoreWCF.Web.WebGetAttribute> or <xref:CoreWCF.Web.WebInvokeAttribute> attributes. This defines a mapping from a URI and HTTP method to the service operation, as well as the format of the messages used to call the operation and return the results. Support in WCF for syndication and ASP.AJAX integration are both built on top of the WCF Web Programming Model. Constructors WebHttpBinding() Declaration public WebHttpBinding() WebHttpBinding(WebHttpSecurityMode) Declaration public WebHttpBinding(WebHttpSecurityMode securityMode) Parameters Type Name Description WebHttpSecurityMode securityMode Properties ContentTypeMapper Declaration public WebContentTypeMapper ContentTypeMapper { get; set; } Property Value Type Description WebContentTypeMapper CrossDomainScriptAccessEnabled Declaration public bool CrossDomainScriptAccessEnabled { get; set; } Property Value Type Description Boolean EnvelopeVersion Declaration public EnvelopeVersion EnvelopeVersion { get; } Property Value Type Description EnvelopeVersion MaxBufferPoolSize Declaration public long MaxBufferPoolSize { get; set; } Property Value Type Description Int64 MaxBufferSize Declaration public int MaxBufferSize { get; set; } Property Value Type Description Int32 MaxReceivedMessageSize Declaration public long MaxReceivedMessageSize { get; set; } Property Value Type Description Int64 ReaderQuotas Declaration public XmlDictionaryReaderQuotas ReaderQuotas { get; set; } Property Value Type Description XmlDictionaryReaderQuotas Scheme Declaration public override string Scheme { get; } Property Value Type Description String Overrides Binding.Scheme Security Declaration public WebHttpSecurity Security { get; set; } Property Value Type Description WebHttpSecurity TransferMode Declaration public TransferMode TransferMode { get; set; } Property Value Type Description TransferMode WriteEncoding Declaration public Encoding WriteEncoding { get; set; } Property Value Type Description Encoding Methods CreateBindingElements() Declaration public override BindingElementCollection CreateBindingElements() Returns Type Description BindingElementCollection Overrides Binding.CreateBindingElements() Implements IDefaultCommunicationTimeouts"
  },
  "api-corewcf/CoreWCF.WebHttpSecurity.html": {
    "href": "api-corewcf/CoreWCF.WebHttpSecurity.html",
    "title": "Class WebHttpSecurity",
    "keywords": "Class WebHttpSecurity Specifies the types of security available to a service endpoint configured to receive HTTP requests. Inheritance Object WebHttpSecurity Namespace : CoreWCF Assembly : CoreWCF.WebHttp.dll Syntax public sealed class WebHttpSecurity : Object Remarks <xref:CoreWCF.WebHttpSecurity> provides the security requirements for an endpoint configured with a <xref:CoreWCF.WebHttpBinding>. If the <xref:CoreWCF.WebHttpSecurityMode.Transport> value is specified by the <xref:CoreWCF.WebHttpBinding.%23ctor%28CoreWCF.WebHttpSecurityMode%29> method, then the settings provided by the <xref:CoreWCF.WebHttpSecurity.Transport%2A> property become effective for the service endpoint. The value of <xref:CoreWCF.WebHttpSecurityMode> can only be set in the <xref:CoreWCF.WebHttpBinding> constructor that takes it as an explicit parameter and its value cannot be set again after the binding instance is created. Constructors WebHttpSecurity() Declaration public WebHttpSecurity() Properties Mode Declaration public WebHttpSecurityMode Mode { get; set; } Property Value Type Description WebHttpSecurityMode Transport Declaration public HttpTransportSecurity Transport { get; set; } Property Value Type Description HttpTransportSecurity"
  },
  "api-corewcf/CoreWCF.WebHttpSecurityMode.html": {
    "href": "api-corewcf/CoreWCF.WebHttpSecurityMode.html",
    "title": "Class WebHttpSecurityMode",
    "keywords": "Class WebHttpSecurityMode Defines the modes of security that can be used to configure a service endpoint to receive HTTP requests. Inheritance Object WebHttpSecurityMode Namespace : CoreWCF Assembly : CoreWCF.WebHttp.dll Syntax public sealed class WebHttpSecurityMode : Enum Remarks Use this enumeration to specify whether transport-level security is used by an endpoint configured with a <xref:CoreWCF.WebHttpBinding> to receive HTTP requests. The default value is None, which indicates that no security is used. If the Transport value is specified by the <xref:CoreWCF.WebHttpBinding.%23ctor%28CoreWCF.WebHttpSecurityMode%29>, then the settings provided by the <xref:CoreWCF.WebHttpSecurity.Transport%2A> property become effective for the service endpoint. The value of <xref:CoreWCF.WebHttpSecurityMode> can only be set in the <xref:CoreWCF.WebHttpBinding> constructor that takes it as an explicit parameter and its value cannot be set again after the binding instance is created. TransportCredentialOnly does not provide message integrity and confidentiality. It provides HTTP-based client authentication only. This mode should be used with caution. It should be used in environments, such at IPSec, where the transport security is being provided by other means and only client authentication is provided by the Windows Communication Foundation (WCF) infrastructure. Fields None Declaration public const WebHttpSecurityMode None Field Value Type Description WebHttpSecurityMode Transport Declaration public const WebHttpSecurityMode Transport Field Value Type Description WebHttpSecurityMode TransportCredentialOnly Declaration public const WebHttpSecurityMode TransportCredentialOnly Field Value Type Description WebHttpSecurityMode value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.WS2007FederationHttpBinding.html": {
    "href": "api-corewcf/CoreWCF.WS2007FederationHttpBinding.html",
    "title": "Class WS2007FederationHttpBinding",
    "keywords": "Class WS2007FederationHttpBinding A secure and interoperable binding that derives from and supports federated security. Inheritance Object Binding WSHttpBindingBase WSFederationHttpBinding WS2007FederationHttpBinding Implements IDefaultCommunicationTimeouts Inherited Members WSFederationHttpBinding.GetTransport() WSFederationHttpBinding.CreateBindingElements() WSFederationHttpBinding.PrivacyNoticeAt WSFederationHttpBinding.PrivacyNoticeVersion WSFederationHttpBinding.Security WSHttpBindingBase.TransactionFlow WSHttpBindingBase.MaxBufferPoolSize WSHttpBindingBase.MaxReceivedMessageSize WSHttpBindingBase.MessageEncoding WSHttpBindingBase.ReaderQuotas WSHttpBindingBase.Scheme WSHttpBindingBase.EnvelopeVersion Binding.CanBuildServiceDispatcher<TChannel>(BindingParameterCollection) Binding.BuildServiceDispatcher<TChannel>(BindingParameterCollection, IServiceDispatcher) Binding.BuildServiceDispatcher<TChannel>(Uri, BindingParameterCollection, IServiceDispatcher) Binding.BuildServiceDispatcher<TChannel>(Uri, String, BindingParameterCollection, IServiceDispatcher) Binding.GetProperty<T>(BindingParameterCollection) Binding.CloseTimeout Binding.Name Binding.Namespace Binding.OpenTimeout Binding.ReceiveTimeout Binding.MessageVersion Binding.SendTimeout Namespace : CoreWCF Assembly : CoreWCF.Http.dll Syntax public class WS2007FederationHttpBinding : WSFederationHttpBinding, IDefaultCommunicationTimeouts Remarks Federation is the ability to share identities across multiple enterprises or trust domains for authentication and authorization. It uses the WS-Trust protocol to map the identity representation from one trust domain to another. Federated HTTP binding supports SOAP security as well as mixed-mode security, but it does not support transport security. Services configured with this binding must use the HTTP transport. For more information, see <xref:CoreWCF.WSFederationHttpBinding>. Note When calling a WCF service built with.Net Framework 4.0 from a WCF client application built with .NET Framework 3.5 or earlier, the configuration file generated by svcutil.exe or adding a service reference from Visual Studio will contain the establishSecurityContext attribute in the binding configuration. This attribute is not recognized by the .NET Framework 3.5 runtime and the application will thrown an <xref:System.Configuration.ConfigurationErrorsException> with the message \"Unrecognized attribute establishSecurityContext\". To workaround this problem, remove the establishSecurityContext attribute from the binding configuration. Constructors WS2007FederationHttpBinding() Declaration public WS2007FederationHttpBinding() WS2007FederationHttpBinding(WSFederationHttpSecurityMode) Declaration public WS2007FederationHttpBinding(WSFederationHttpSecurityMode securityMode) Parameters Type Name Description WSFederationHttpSecurityMode securityMode WS2007FederationHttpBinding(WSFederationHttpSecurityMode, Boolean) Declaration public WS2007FederationHttpBinding(WSFederationHttpSecurityMode securityMode, bool reliableSessionEnabled) Parameters Type Name Description WSFederationHttpSecurityMode securityMode Boolean reliableSessionEnabled Methods CreateMessageSecurity() Declaration protected override SecurityBindingElement CreateMessageSecurity() Returns Type Description SecurityBindingElement Overrides WSFederationHttpBinding.CreateMessageSecurity() Implements IDefaultCommunicationTimeouts"
  },
  "api-corewcf/CoreWCF.WSFederationHttpBinding.html": {
    "href": "api-corewcf/CoreWCF.WSFederationHttpBinding.html",
    "title": "Class WSFederationHttpBinding",
    "keywords": "Class WSFederationHttpBinding A secure and interoperable binding that supports federated security. Inheritance Object Binding WSHttpBindingBase WSFederationHttpBinding WS2007FederationHttpBinding Implements IDefaultCommunicationTimeouts Inherited Members WSHttpBindingBase.TransactionFlow WSHttpBindingBase.MaxBufferPoolSize WSHttpBindingBase.MaxReceivedMessageSize WSHttpBindingBase.MessageEncoding WSHttpBindingBase.ReaderQuotas WSHttpBindingBase.Scheme WSHttpBindingBase.EnvelopeVersion Binding.CanBuildServiceDispatcher<TChannel>(BindingParameterCollection) Binding.BuildServiceDispatcher<TChannel>(BindingParameterCollection, IServiceDispatcher) Binding.BuildServiceDispatcher<TChannel>(Uri, BindingParameterCollection, IServiceDispatcher) Binding.BuildServiceDispatcher<TChannel>(Uri, String, BindingParameterCollection, IServiceDispatcher) Binding.GetProperty<T>(BindingParameterCollection) Binding.CloseTimeout Binding.Name Binding.Namespace Binding.OpenTimeout Binding.ReceiveTimeout Binding.MessageVersion Binding.SendTimeout Namespace : CoreWCF Assembly : CoreWCF.Http.dll Syntax public class WSFederationHttpBinding : WSHttpBindingBase, IDefaultCommunicationTimeouts Remarks Federation is the ability to share identities across multiple systems for authentication and authorization. These identities can refer to users or to machines. Federated HTTP supports SOAP security as well as mixed-mode security, but it does not support exclusively using transport security. This binding provides Windows Communication Foundation (WCF) support for the WS-Federation protocol. Services configured with this binding must use the HTTP transport. Bindings consist of a stack of binding elements. The stack of binding elements in <xref:CoreWCF.WSFederationHttpBinding> is the same as that contained in <xref:CoreWCF.WSHttpBinding> when <xref:CoreWCF.WSHttpBinding.Security%2A> is set to the default value of <xref:CoreWCF.WSFederationHttpSecurityMode.Message>. The <xref:CoreWCF.WSFederationHttpBinding> controls the details of the message security settings, the values of which are available from the instance of <xref:CoreWCF.FederatedMessageSecurityOverHttp> that is returned by the <xref:CoreWCF.WSFederationHttpSecurity.Message%2A> property. The <xref:CoreWCF.WSFederationHttpBinding> also provides a <xref:CoreWCF.WSFederationHttpBinding.PrivacyNoticeAt%2A> property to set and retrieve the URI at which the privacy notice is located. Note When calling a WCF service built with .NET Framework 4.0 or later from a WCF client application built with .NET Framework 3.5 or earlier, the configuration file generated by svcutil.exe or adding a service reference from Visual Studio contains the establishSecurityContext attribute in the binding configuration. This attribute is not recognized by the .NET Framework 3.5 runtime and the application throws an <xref:System.Configuration.ConfigurationErrorsException> with the message \"Unrecognized attribute establishSecurityContext \". To workaround this problem, remove the establishSecurityContext attribute from the binding configuration. Constructors WSFederationHttpBinding() Declaration public WSFederationHttpBinding() WSFederationHttpBinding(WSFederationHttpSecurityMode) Declaration public WSFederationHttpBinding(WSFederationHttpSecurityMode securityMode) Parameters Type Name Description WSFederationHttpSecurityMode securityMode WSFederationHttpBinding(WSFederationHttpSecurityMode, Boolean) Declaration public WSFederationHttpBinding(WSFederationHttpSecurityMode securityMode, bool reliableSessionEnabled) Parameters Type Name Description WSFederationHttpSecurityMode securityMode Boolean reliableSessionEnabled Properties PrivacyNoticeAt Declaration public Uri PrivacyNoticeAt { get; set; } Property Value Type Description Uri PrivacyNoticeVersion Declaration public int PrivacyNoticeVersion { get; set; } Property Value Type Description Int32 Security Declaration public WSFederationHttpSecurity Security { get; set; } Property Value Type Description WSFederationHttpSecurity Methods CreateBindingElements() Declaration public override BindingElementCollection CreateBindingElements() Returns Type Description BindingElementCollection Overrides WSHttpBindingBase.CreateBindingElements() CreateMessageSecurity() Declaration protected override SecurityBindingElement CreateMessageSecurity() Returns Type Description SecurityBindingElement Overrides WSHttpBindingBase.CreateMessageSecurity() GetTransport() Declaration protected override TransportBindingElement GetTransport() Returns Type Description TransportBindingElement Overrides WSHttpBindingBase.GetTransport() Implements IDefaultCommunicationTimeouts"
  },
  "api-corewcf/CoreWCF.WSFederationHttpSecurity.html": {
    "href": "api-corewcf/CoreWCF.WSFederationHttpSecurity.html",
    "title": "Class WSFederationHttpSecurity",
    "keywords": "Class WSFederationHttpSecurity Specifies the security settings for the . This class cannot be inherited. Inheritance Object WSFederationHttpSecurity Namespace : CoreWCF Assembly : CoreWCF.Http.dll Syntax public sealed class WSFederationHttpSecurity : Object Remarks This class specifies the kind of security to be applied to the wsFederationHttpBinding binding and the specific security settings. Constructors WSFederationHttpSecurity() Declaration public WSFederationHttpSecurity() Properties Message Declaration public FederatedMessageSecurityOverHttp Message { get; set; } Property Value Type Description FederatedMessageSecurityOverHttp Mode Declaration public WSFederationHttpSecurityMode Mode { get; set; } Property Value Type Description WSFederationHttpSecurityMode"
  },
  "api-corewcf/CoreWCF.WSFederationHttpSecurityMode.html": {
    "href": "api-corewcf/CoreWCF.WSFederationHttpSecurityMode.html",
    "title": "Class WSFederationHttpSecurityMode",
    "keywords": "Class WSFederationHttpSecurityMode Specifies the different security modes for . Inheritance Object WSFederationHttpSecurityMode Namespace : CoreWCF Assembly : CoreWCF.Http.dll Syntax public sealed class WSFederationHttpSecurityMode : Enum Remarks This enumeration defines the security modes that the <xref:CoreWCF.WSFederationHttpBinding> supports. Fields Message Declaration public const WSFederationHttpSecurityMode Message Field Value Type Description WSFederationHttpSecurityMode None Declaration public const WSFederationHttpSecurityMode None Field Value Type Description WSFederationHttpSecurityMode TransportWithMessageCredential Declaration public const WSFederationHttpSecurityMode TransportWithMessageCredential Field Value Type Description WSFederationHttpSecurityMode value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.WSHttpBinding.html": {
    "href": "api-corewcf/CoreWCF.WSHttpBinding.html",
    "title": "Class WSHttpBinding",
    "keywords": "Class WSHttpBinding Represents an interoperable binding that supports distributed transactions and secure, reliable sessions. Inheritance Object Binding WSHttpBindingBase WSHttpBinding Implements IDefaultCommunicationTimeouts Inherited Members WSHttpBindingBase.TransactionFlow WSHttpBindingBase.MaxBufferPoolSize WSHttpBindingBase.MaxReceivedMessageSize WSHttpBindingBase.MessageEncoding WSHttpBindingBase.ReaderQuotas WSHttpBindingBase.Scheme WSHttpBindingBase.EnvelopeVersion Binding.CanBuildServiceDispatcher<TChannel>(BindingParameterCollection) Binding.BuildServiceDispatcher<TChannel>(BindingParameterCollection, IServiceDispatcher) Binding.BuildServiceDispatcher<TChannel>(Uri, BindingParameterCollection, IServiceDispatcher) Binding.BuildServiceDispatcher<TChannel>(Uri, String, BindingParameterCollection, IServiceDispatcher) Binding.GetProperty<T>(BindingParameterCollection) Binding.CloseTimeout Binding.Name Binding.Namespace Binding.OpenTimeout Binding.ReceiveTimeout Binding.MessageVersion Binding.SendTimeout Namespace : CoreWCF Assembly : CoreWCF.Http.dll Syntax public class WSHttpBinding : WSHttpBindingBase, IDefaultCommunicationTimeouts Remarks The <xref:CoreWCF.WSHttpBinding> is similar to the <xref:CoreWCF.BasicHttpBinding> but provides more Web service features. It uses the HTTP transport and provides message security, as does <xref:CoreWCF.BasicHttpBinding>, but it also provides transactions, reliable messaging, and WS-Addressing, either enabled by default or available through a single control setting. Constructors WSHttpBinding() Declaration public WSHttpBinding() WSHttpBinding(SecurityMode) Declaration public WSHttpBinding(SecurityMode securityMode) Parameters Type Name Description SecurityMode securityMode WSHttpBinding(SecurityMode, Boolean) Declaration public WSHttpBinding(SecurityMode securityMode, bool reliableSessionEnabled) Parameters Type Name Description SecurityMode securityMode Boolean reliableSessionEnabled Properties Security Declaration public WSHTTPSecurity Security { get; set; } Property Value Type Description WSHTTPSecurity Methods CreateBindingElements() Declaration public override BindingElementCollection CreateBindingElements() Returns Type Description BindingElementCollection Overrides WSHttpBindingBase.CreateBindingElements() CreateMessageSecurity() Declaration protected override SecurityBindingElement CreateMessageSecurity() Returns Type Description SecurityBindingElement Overrides WSHttpBindingBase.CreateMessageSecurity() GetTransport() Declaration protected override TransportBindingElement GetTransport() Returns Type Description TransportBindingElement Overrides WSHttpBindingBase.GetTransport() Implements IDefaultCommunicationTimeouts"
  },
  "api-corewcf/CoreWCF.WSHttpBindingBase.html": {
    "href": "api-corewcf/CoreWCF.WSHttpBindingBase.html",
    "title": "Class WSHttpBindingBase",
    "keywords": "Class WSHttpBindingBase Provides the base class with members common to the and the . Inheritance Object Binding WSHttpBindingBase WSFederationHttpBinding WSHttpBinding Implements IDefaultCommunicationTimeouts Inherited Members Binding.CanBuildServiceDispatcher<TChannel>(BindingParameterCollection) Binding.BuildServiceDispatcher<TChannel>(BindingParameterCollection, IServiceDispatcher) Binding.BuildServiceDispatcher<TChannel>(Uri, BindingParameterCollection, IServiceDispatcher) Binding.BuildServiceDispatcher<TChannel>(Uri, String, BindingParameterCollection, IServiceDispatcher) Binding.GetProperty<T>(BindingParameterCollection) Binding.CloseTimeout Binding.Name Binding.Namespace Binding.OpenTimeout Binding.ReceiveTimeout Binding.MessageVersion Binding.SendTimeout Namespace : CoreWCF Assembly : CoreWCF.Http.dll Syntax public abstract class WSHttpBindingBase : Binding, IDefaultCommunicationTimeouts Remarks The <xref:CoreWCF.WSHttpBindingBase> provides some basic functionality for the bindings used to configure secure, reliable, and interoperable Web services, such as that implemented by the <xref:CoreWCF.WSHttpBinding> for non-duplex service contracts, and more particularly, for the secure and interoperable <xref:CoreWCF.WSFederationHttpBinding> that supports the WS-Federation protocol. By default it generates a run-time stack that uses WS-Security for message security and authentication, HTTP for message delivery, and a Text/XML message encoding. It can be configured to also use WS-ReliableMessaging for reliability. The use of WS-ReliableMessaging is configurable using the optional reliableSessionEnabled parameter. Constructors WSHttpBindingBase() Declaration protected WSHttpBindingBase() WSHttpBindingBase(Boolean) Declaration protected WSHttpBindingBase(bool reliableSessionEnabled) Parameters Type Name Description Boolean reliableSessionEnabled Properties EnvelopeVersion Declaration public EnvelopeVersion EnvelopeVersion { get; } Property Value Type Description EnvelopeVersion MaxBufferPoolSize Declaration public long MaxBufferPoolSize { get; set; } Property Value Type Description Int64 MaxReceivedMessageSize Declaration public long MaxReceivedMessageSize { get; set; } Property Value Type Description Int64 MessageEncoding Declaration public WSMessageEncoding MessageEncoding { get; set; } Property Value Type Description WSMessageEncoding ReaderQuotas Declaration public XmlDictionaryReaderQuotas ReaderQuotas { get; set; } Property Value Type Description XmlDictionaryReaderQuotas Scheme Declaration public override string Scheme { get; } Property Value Type Description String Overrides Binding.Scheme TransactionFlow Declaration public bool TransactionFlow { get; set; } Property Value Type Description Boolean Methods CreateBindingElements() Declaration public override BindingElementCollection CreateBindingElements() Returns Type Description BindingElementCollection Overrides Binding.CreateBindingElements() CreateMessageSecurity() Declaration protected abstract SecurityBindingElement CreateMessageSecurity() Returns Type Description SecurityBindingElement GetTransport() Declaration protected abstract TransportBindingElement GetTransport() Returns Type Description TransportBindingElement Implements IDefaultCommunicationTimeouts"
  },
  "api-corewcf/CoreWCF.WSHTTPSecurity.html": {
    "href": "api-corewcf/CoreWCF.WSHTTPSecurity.html",
    "title": "Class WSHTTPSecurity",
    "keywords": "Class WSHTTPSecurity Represents the security settings for the . Inheritance Object WSHTTPSecurity Namespace : CoreWCF Assembly : CoreWCF.Http.dll Syntax public sealed class WSHTTPSecurity : Object Remarks The <xref:CoreWCF.WSHttpBinding> class is designed for interoperation with services that implement WS-* specifications. The transport security for this binding is Secure Sockets Layer (SSL) over HTTP, or HTTPS. Constructors WSHTTPSecurity() Declaration public WSHTTPSecurity() Properties Message Declaration public NonDualMessageSecurityOverHttp Message { get; set; } Property Value Type Description NonDualMessageSecurityOverHttp Mode Declaration public SecurityMode Mode { get; set; } Property Value Type Description SecurityMode Transport Declaration public HttpTransportSecurity Transport { get; set; } Property Value Type Description HttpTransportSecurity Methods ShouldSerializeMode() Declaration public bool ShouldSerializeMode() Returns Type Description Boolean"
  },
  "api-corewcf/CoreWCF.WSMessageEncoding.html": {
    "href": "api-corewcf/CoreWCF.WSMessageEncoding.html",
    "title": "Class WSMessageEncoding",
    "keywords": "Class WSMessageEncoding Specifies whether Message Transmission Optimization Mechanism (MTOM) or text is used to encode SOAP messages. Inheritance Object WSMessageEncoding Namespace : CoreWCF Assembly : CoreWCF.Http.dll Syntax public sealed class WSMessageEncoding : Enum Remarks Used by interoperable bindings, such as <xref:CoreWCF.WSHttpBinding> and <xref:CoreWCF.WSDualHttpBinding>, and <xref:CoreWCF.BasicHttpBinding> to specify the SOAP message encoding that may be used. The Message-Transmission Optimization Mechanism (MTOM) is a method for efficiently encoding binary XML elements within the context of a SOAP envelope. Text encodings for messages, such as UTF8, are used for interoperability purposes. Note that the standard bindings designed for interoperability with Web services do not use binary encodings. For more information about the standard bindings, see System-Provided Bindings . Fields Mtom Declaration public const WSMessageEncoding Mtom Field Value Type Description WSMessageEncoding Text Declaration public const WSMessageEncoding Text Field Value Type Description WSMessageEncoding value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "api-corewcf/CoreWCF.X509CertificateEndpointIdentity.html": {
    "href": "api-corewcf/CoreWCF.X509CertificateEndpointIdentity.html",
    "title": "Class X509CertificateEndpointIdentity",
    "keywords": "Class X509CertificateEndpointIdentity Represents a certificate identity for the service endpoint. Clients that attempt to communicate with that service endpoint should authenticate the service based on the certificate provided in the endpoint identity. Inheritance Object EndpointIdentity X509CertificateEndpointIdentity Inherited Members EndpointIdentity.CreateIdentity(Claim) EndpointIdentity.CreateX509CertificateIdentity(X509Certificate2) EndpointIdentity.Equals(Object) EndpointIdentity.GetHashCode() Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public class X509CertificateEndpointIdentity : EndpointIdentity Remarks To be added. Constructors X509CertificateEndpointIdentity(X509Certificate2) Declaration public X509CertificateEndpointIdentity(X509Certificate2 certificate) Parameters Type Name Description X509Certificate2 certificate X509CertificateEndpointIdentity(X509Certificate2, X509Certificate2Collection) Declaration public X509CertificateEndpointIdentity(X509Certificate2 primaryCertificate, X509Certificate2Collection supportingCertificates) Parameters Type Name Description X509Certificate2 primaryCertificate X509Certificate2Collection supportingCertificates Properties Certificates Declaration public X509Certificate2Collection Certificates { get; } Property Value Type Description X509Certificate2Collection"
  },
  "api-corewcf/CoreWCF.Xml.Serialization.html": {
    "href": "api-corewcf/CoreWCF.Xml.Serialization.html",
    "title": "Namespace CoreWCF.Xml.Serialization",
    "keywords": "Namespace CoreWCF.Xml.Serialization Classes SoapSchemaExporter Populates XmlSchemas objects with XML Schema data type definitions for .NET Framework types that are serialized using SOAP encoding. This API supports the product infrastructure and is not intended to be used directly from your code."
  },
  "api-corewcf/CoreWCF.Xml.Serialization.SoapSchemaExporter.html": {
    "href": "api-corewcf/CoreWCF.Xml.Serialization.SoapSchemaExporter.html",
    "title": "Class SoapSchemaExporter",
    "keywords": "Class SoapSchemaExporter Populates XmlSchemas objects with XML Schema data type definitions for .NET Framework types that are serialized using SOAP encoding. This API supports the product infrastructure and is not intended to be used directly from your code. Inheritance Object SoapSchemaExporter Namespace : CoreWCF.Xml.Serialization Assembly : CoreWCF.Primitives.dll Syntax public class SoapSchemaExporter : Object Remarks SOAP encoding of SOAP Web service messages is described in Section 5 of the SOAP 1.1 specification. The XmlSchemas class provides a programmatic representation of an XML Schema definition language (XSD) document. You should not use the SoapSchemaExporter class directly. Constructors SoapSchemaExporter(XmlSchemas) Initializes a new instance of the SoapSchemaExporter class, which supplies the collection of XmlSchemas objects to which XML Schema element declarations are to be added. This API supports the product infrastructure and is not intended to be used directly from your code. Declaration public SoapSchemaExporter(XmlSchemas schemas) Parameters Type Name Description XmlSchemas schemas A collection of XmlSchemas objects to which element declarations obtained from type mappings are to be added Remarks You should not create an instance of the SoapSchemaExporter class directly Methods ExportMembersMapping(XmlMembersMapping) Adds to the applicable XmlSchemas object a data type definition for each of the element parts of a SOAP-encoded message definition. This API supports the product infrastructure and is not intended to be used directly from your code. Declaration public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping) Parameters Type Name Description XmlMembersMapping xmlMembersMapping Internal .NET type mappings for the element parts of a WSDL message definition Remarks You should not use the SoapSchemaExporter class directly ExportMembersMapping(XmlMembersMapping, Boolean) Adds to the applicable XmlSchemas object a data type definition for each of the element parts of a SOAP-encoded message definition. This API supports the product infrastructure and is not intended to be used directly from your code. Declaration public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping, bool exportEnclosingType) Parameters Type Name Description XmlMembersMapping xmlMembersMapping Internal .NET type mappings for the element parts of a WSDL message definition. Boolean exportEnclosingType true to export a type definition for the parent element of the WSDL parts; otherwise, false. Remarks You should not use the SoapSchemaExporter class directly."
  },
  "api-corewcf/CoreWCF.XmlSerializerFormatAttribute.html": {
    "href": "api-corewcf/CoreWCF.XmlSerializerFormatAttribute.html",
    "title": "Class XmlSerializerFormatAttribute",
    "keywords": "Class XmlSerializerFormatAttribute Instructs the Windows Communication Foundation (WCF) infrastructure to use the instead of the . Inheritance Object XmlSerializerFormatAttribute Namespace : CoreWCF Assembly : CoreWCF.Primitives.dll Syntax public sealed class XmlSerializerFormatAttribute : Attribute Remarks This attribute is similar to the <xref:CoreWCF.DataContractFormatAttribute> attribute. Both attributes can be applied to a method, class, or interface. For more information about the <xref:System.Xml.Serialization.XmlSerializer>, see Using the XmlSerializer Class . A method can have either of the two attributes applied, but not both. Any operation that has neither applied uses the attribute applied to the containing class. If the containing class does not have either attribute applied, the <xref:System.Runtime.Serialization.DataContractSerializer> is used. Applying the attribute also causes a <xref:CoreWCF.Description.XmlSerializerOperationBehavior> to be created at runtime. The behavior allows customization at runtime of the serializer behavior. Constructors XmlSerializerFormatAttribute() Declaration public XmlSerializerFormatAttribute() Properties Style Declaration public OperationFormatStyle Style { get; set; } Property Value Type Description OperationFormatStyle SupportFaults Declaration public bool SupportFaults { get; set; } Property Value Type Description Boolean Use Declaration public OperationFormatUse Use { get; set; } Property Value Type Description OperationFormatUse"
  },
  "api-corewcf/index.html": {
    "href": "api-corewcf/index.html",
    "title": "CoreWCF API Documents",
    "keywords": "CoreWCF API Documents TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation ! need to update the Description for all the members"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE for CoreWCF.",
    "keywords": "This is the HOMEPAGE for CoreWCF. What is CoreWCF? CoreWCF is a port of the service side of Windows Communication Foundation (WCF) to .NET Core. The goal of this project is to enable existing WCF services to move to .NET Core. Package Status The latest released packages can be found at Nuget.org: Package NuGet Stable Downloads CoreWCF.Primitives CoreWCF.Http CoreWCF.NetTcp CoreWCF.ConfigurationManager CoreWCF.WebHttp Code Quality Announcements To keep up to date on what's going on with CoreWCF, you can subscribe to the announcements repo to be notified about major changes and other noteworthy announcements. How do I get started? Install the Nuget packages listed above, either via the Package Manager Console or the UI. See Walkthrough for a step by step guide to creating a service and referencing it from a client project. The Samples repo has examples for multiple scenarios. The Blog has details on the design philosophy and a deep dive into the features are included in each new release. Use CoreWCF project templates (dotnet CLI or VisualStudio) Install CoreWCF project templates, create a directory for your project and cd inside the directory and initialize your project dotnet new --install CoreWCF.Templates dotnet new corewcf --name MyService CoreWCF Service project template creates a minimal ASP.NET Core web application thats exposes the well-known WCF default service using a BasicHttpBinding . It supports the following arguments: --framework : net6.0 (default), net5.0 , netcoreapp3.1 , net48 , net472 and net462 are valid values. --use-program-main : whether to turn off ASP.NET Core minimal API hosting. This option only affects net6.0 projects as other target require a Startup and a Program class. --no-https : whether to turn off HTTPS and use BasicHttpSecurityMode.None . Default is HTTPS enabled using BasicHttpSecurityMode.Transport . --no-wsdl : whether to turn off WSDL metadata feature. Development Builds There are pre-release packages available for development builds of main from a NuGet feed hosted in Azure DevOps. You can download the packages by adding the following package source to your list of feeds. `https://pkgs.dev.azure.com/dotnet/CoreWCF/_packaging/CoreWCF/nuget/v3/index.json` If you are using a nuget.config file with only the default nuget.org package source, after adding the CoreWCF feed it would look like this: <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <packageSources> <clear /> <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" /> <add key=\"CoreWCF\" value=\"https://pkgs.dev.azure.com/dotnet/CoreWCF/_packaging/CoreWCF/nuget/v3/index.json\" /> </packageSources> </configuration> How do I contribute? Please see the CONTRIBUTING.md file for details. License, etc. This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community. For more information see the .NET Foundation Code of Conduct . CoreWCF is Copyright © 2019 .NET Foundation and other contributors under the MIT license . .NET Foundation This project is supported by the .NET Foundation ."
  },
  "README.html": {
    "href": "README.html",
    "title": "zhaodongtian.github.io",
    "keywords": "zhaodongtian.github.io"
  }
}